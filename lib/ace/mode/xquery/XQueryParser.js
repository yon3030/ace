// $ANTLR 3.3 Nov 30, 2010 12:50:56 XQueryParser.g 2012-04-03 22:00:14

define(function(require, exports, module){
var XQS = true;
var XQU = true;
var ZORBA = true;
var MLS = false;

var org =  require("./antlr3-all").org;
var StringLexer   = require("./StringLexer").StringLexer;
var XMLLexer   = require("./XMLLexer").XMLLexer;
var XQueryLexer   = require("./XQueryLexer").XQueryLexer;

var Exception = function(){};
var XQueryParser = exports.XQueryParser = function(input, state) {
	    if (!state) {
	        state = new org.antlr.runtime.RecognizerSharedState();
	    }

	    (function(){

	        this.source = null;
	        this.stream = null;

	        this.lexerStack = new Array();

	        this.lc = function(b){ console.log("lc(): " + b);return b; };
	        this.popLexer = function (){
	          console.log("popLexer");
	          if(this.lexerStack.length == 0) return;
	          this.stream.mark();
	          var oldLexer = this.stream.getTokenSource();
	          var newLexer = this.lexerStack.pop();
	          if(oldLexer instanceof StringLexer && newLexer instanceof XQueryLexer) {
	            newLexer.inStr = false;
	          }
	          this.stream.setTokenSource(newLexer);
	        };

	        this.pushXQueryLexer = function() {
	          xqueryLexer = new XQueryLexer(this.source);
	          pushLexer(stringLexer);
	        };

	        this.pushStringLexer = function(isAposStr){
	          console.log("pushStringLexer");
	          var stringLexer = new StringLexer(this.source);
	          stringLexer.inAposStr = isAposStr;
	          stringLexer.inQuotStr = !isAposStr;
	          stringLexer.setIsWsExplicit(true);
	          this.pushLexer(stringLexer);
	        };

	        this.pushXMLLexer = function(){
	          console.log("pushXMLLexer");
	          var xmlLexer = new XMLLexer(this.source);
	          xmlLexer.setIsWsExplicit(true);
	          this.pushLexer(xmlLexer);
	        };

	        this.pushLexer = function(lexer){
	          var oldLexer = this.stream.getTokenSource();
	          oldLexer.addToStack(this.lexerStack);
	          this.stream.setTokenSource(lexer);
	        };

	        this.setWsExplicit = function(isExplicit){
	          this.stream.setWsExplicit(isExplicit);
	        };
	        this.ak = function(k){ console.log(k); };



	    }).call(this);

	    XQueryParser.superclass.constructor.call(this, input, state);

	    this.dfa1 = new XQueryParser.DFA1(this);
	    this.dfa2 = new XQueryParser.DFA2(this);
	    this.dfa6 = new XQueryParser.DFA6(this);
	    this.dfa9 = new XQueryParser.DFA9(this);
	    this.dfa44 = new XQueryParser.DFA44(this);
	    this.dfa46 = new XQueryParser.DFA46(this);
	    this.dfa114 = new XQueryParser.DFA114(this);
	    this.dfa116 = new XQueryParser.DFA116(this);
	    this.dfa118 = new XQueryParser.DFA118(this);
	    this.dfa123 = new XQueryParser.DFA123(this);
	    this.dfa131 = new XQueryParser.DFA131(this);
	    this.dfa158 = new XQueryParser.DFA158(this);
	    this.dfa160 = new XQueryParser.DFA160(this);
	    this.dfa214 = new XQueryParser.DFA214(this);
	    this.dfa233 = new XQueryParser.DFA233(this);
	    this.dfa249 = new XQueryParser.DFA249(this);



	    /* @todo only create adaptor if output=AST */
	    this.adaptor = new org.antlr.runtime.tree.CommonTreeAdaptor();

	};

	org.antlr.lang.augmentObject(XQueryParser, {
	    EOF: -1,
	    L_QuotAttrContentChar: 4,
	    L_AposAttrContentChar: 5,
	    L_ElementContentChar: 6,
	    L_CDataSection: 7,
	    L_PredefinedEntityRef: 8,
	    L_CharRef: 9,
	    ESCAPE_LBRACKET: 10,
	    ESCAPE_RBRACKET: 11,
	    ESCAPE_APOS: 12,
	    ESCAPE_QUOT: 13,
	    CDATA_START: 14,
	    CDATA_END: 15,
	    ANCESTOR: 16,
	    ANCESTOR_OR_SELF: 17,
	    AND: 18,
	    AS: 19,
	    ASCENDING: 20,
	    AT: 21,
	    ATTRIBUTE: 22,
	    BASE_URI: 23,
	    BOUNDARY_SPACE: 24,
	    BY: 25,
	    CASE: 26,
	    CAST: 27,
	    CASTABLE: 28,
	    CHILD: 29,
	    COLLATION: 30,
	    COMMENT: 31,
	    CONSTRUCTION: 32,
	    COPY_NAMESPACES: 33,
	    DECLARE: 34,
	    DEFAULT: 35,
	    DESCENDANT: 36,
	    DESCENDANT_OR_SELF: 37,
	    DESCENDING: 38,
	    DIV: 39,
	    DOCUMENT: 40,
	    DOCUMENT_NODE: 41,
	    ELEMENT: 42,
	    ELSE: 43,
	    EMPTY: 44,
	    EMPTY_SEQUENCE: 45,
	    ENCODING: 46,
	    EQ: 47,
	    EVERY: 48,
	    EXCEPT: 49,
	    EXTERNAL: 50,
	    FOLLOWING: 51,
	    FOLLOWING_SIBLING: 52,
	    FOR: 53,
	    FUNCTION: 54,
	    GE: 55,
	    GREATEST: 56,
	    GT: 57,
	    IDIV: 58,
	    IF: 59,
	    IMPORT: 60,
	    IN: 61,
	    INHERIT: 62,
	    INSTANCE: 63,
	    INTERSECT: 64,
	    IS: 65,
	    ITEM: 66,
	    LAX: 67,
	    LE: 68,
	    LEAST: 69,
	    LET: 70,
	    LT: 71,
	    MOD: 72,
	    MODULE: 73,
	    NAMESPACE: 74,
	    NE: 75,
	    NO_INHERIT: 76,
	    NO_PRESERVE: 77,
	    NODE: 78,
	    OF: 79,
	    OPTION: 80,
	    OR: 81,
	    ORDER: 82,
	    ORDERED: 83,
	    ORDERING: 84,
	    PARENT: 85,
	    PRECEDING: 86,
	    PRECEDING_SIBLING: 87,
	    PRESERVE: 88,
	    PROCESSING_INSTRUCTION: 89,
	    RETURN: 90,
	    SATISFIES: 91,
	    SCHEMA: 92,
	    SCHEMA_ATTRIBUTE: 93,
	    SCHEMA_ELEMENT: 94,
	    SELF: 95,
	    SOME: 96,
	    STABLE: 97,
	    STRICT: 98,
	    STRIP: 99,
	    TEXT: 100,
	    THEN: 101,
	    TO: 102,
	    TREAT: 103,
	    TYPESWITCH: 104,
	    UNION: 105,
	    UNORDERED: 106,
	    VALIDATE: 107,
	    VARIABLE: 108,
	    VERSION: 109,
	    WHERE: 110,
	    XQUERY: 111,
	    ALLOWING: 112,
	    CATCH: 113,
	    CONTEXT: 114,
	    COUNT: 115,
	    DECIMAL_FORMAT: 116,
	    DECIMAL_SEPARATOR: 117,
	    DETERMINISTIC: 118,
	    DIGIT: 119,
	    END: 120,
	    GROUP: 121,
	    GROUPING_SEPARATOR: 122,
	    INFINITY: 123,
	    MINUS_SIGN: 124,
	    NAMESPACE_NODE: 125,
	    NAN: 126,
	    NEXT: 127,
	    ONLY: 128,
	    PATTERN_SEPARATOR: 129,
	    PERCENT: 130,
	    PER_MILLE: 131,
	    PREVIOUS: 132,
	    SLIDING: 133,
	    START: 134,
	    SWITCH: 135,
	    TRY: 136,
	    TUMBLING: 137,
	    TYPE: 138,
	    WHEN: 139,
	    WINDOW: 140,
	    ZERO_DIGIT: 141,
	    AFTER: 142,
	    BEFORE: 143,
	    COPY: 144,
	    DELETE: 145,
	    FIRST: 146,
	    INSERT: 147,
	    INTO: 148,
	    LAST: 149,
	    MODIFY: 150,
	    NODES: 151,
	    RENAME: 152,
	    REPLACE: 153,
	    REVALIDATION: 154,
	    SKIP: 155,
	    UPDATING: 156,
	    VALUE: 157,
	    WITH: 158,
	    ALL: 159,
	    ANY: 160,
	    CONTAINS: 161,
	    CONTENT: 162,
	    DIACRITICS: 163,
	    DIFFERENT: 164,
	    DISTANCE: 165,
	    ENTIRE: 166,
	    EXACTLY: 167,
	    FROM: 168,
	    FT_OPTION: 169,
	    FTAND: 170,
	    FTNOT: 171,
	    FTOR: 172,
	    INSENSITIVE: 173,
	    LANGUAGE: 174,
	    LEVELS: 175,
	    LOWERCASE: 176,
	    MOST: 177,
	    NO: 178,
	    NOT: 179,
	    OCCURS: 180,
	    PARAGRAPH: 181,
	    PARAGRAPHS: 182,
	    PHRASE: 183,
	    RELATIONSHIP: 184,
	    SAME: 185,
	    SCORE: 186,
	    SENSITIVE: 187,
	    SENTENCE: 188,
	    SENTENCES: 189,
	    STEMMING: 190,
	    STOP: 191,
	    THESAURUS: 192,
	    TIMES: 193,
	    UPPERCASE: 194,
	    USING: 195,
	    WEIGHT: 196,
	    WILDCARDS: 197,
	    WITHOUT: 198,
	    WORD: 199,
	    WORDS: 200,
	    BREAK: 201,
	    CONTINUE: 202,
	    EXIT: 203,
	    LOOP: 204,
	    RETURNING: 205,
	    WHILE: 206,
	    CHECK: 207,
	    COLLECTION: 208,
	    CONSTRAINT: 209,
	    FOREACH: 210,
	    FOREIGN: 211,
	    INDEX: 212,
	    INTEGRITY: 213,
	    KEY: 214,
	    ON: 215,
	    UNIQUE: 216,
	    BINARY: 217,
	    AMP_ER: 218,
	    APOS_ER: 219,
	    QUOT_ER: 220,
	    LPAREN: 221,
	    RPAREN: 222,
	    DOLLAR: 223,
	    LBRACKET: 224,
	    RBRACKET: 225,
	    LSQUARE: 226,
	    RSQUARE: 227,
	    EQUAL: 228,
	    BIND: 229,
	    NOTEQUAL: 230,
	    ANN_PERCENT: 231,
	    HASH: 232,
	    AMP: 233,
	    COMMA: 234,
	    QUESTION: 235,
	    STAR: 236,
	    PLUS: 237,
	    MINUS: 238,
	    SMALLER: 239,
	    GREATER: 240,
	    SMALLEREQ: 241,
	    GREATEREQ: 242,
	    SMALLER_SMALLER: 243,
	    GREATER_GREATER: 244,
	    SLASH: 245,
	    SLASH_SLASH: 246,
	    DOT: 247,
	    DOT_DOT: 248,
	    COLON: 249,
	    COLON_COLON: 250,
	    EMPTY_CLOSE_TAG: 251,
	    CLOSE_TAG: 252,
	    SEMICOLON: 253,
	    VBAR: 254,
	    PRAGMA_START: 255,
	    PRAGMA_END: 256,
	    XML_COMMENT_START: 257,
	    XML_COMMENT_END: 258,
	    PI_START: 259,
	    PI_END: 260,
	    ATTR_SIGN: 261,
	    CHARREF_DEC: 262,
	    CHARREF_HEX: 263,
	    APOS: 264,
	    QUOT: 265,
	    NCNameStartChar: 266,
	    NCNameChar: 267,
	    L_NCName: 268,
	    Letter: 269,
	    HexLetter: 270,
	    Digit: 271,
	    Digits: 272,
	    S: 273,
	    SU: 274,
	    L_Pragma: 275,
	    L_DirCommentConstructor: 276,
	    L_DirPIConstructor: 277,
	    L_IntegerLiteral: 278,
	    L_DecimalLiteral: 279,
	    L_DoubleLiteral: 280,
	    L_Comment: 281,
	    L_AnyChar: 282,
	    L_QuotStringLiteralChar: 283,
	    L_AposStringLiteralChar: 284,
	    LibraryModule: 285,
	    MainModule: 286,
	    VersionDecl: 287,
	    VersionDeclEncoding: 288,
	    VersionDeclVersion: 289,
	    ModuleDecl: 290,
	    Prolog: 291,
	    DefaultNamespaceDecls: 292,
	    DefaultNamespaceDecl: 293,
	    Setters: 294,
	    Setter: 295,
	    NamespaceDecls: 296,
	    NamespaceDecl: 297,
	    Imports: 298,
	    FTOptionDecls: 299,
	    SchemaImport: 300,
	    SchemaPrefix: 301,
	    NamespaceName: 302,
	    DefaultElementNamespace: 303,
	    AtHints: 304,
	    ModuleImport: 305,
	    BaseURIDecl: 306,
	    OrderedDecls: 307,
	    VarDecl: 308,
	    VarType: 309,
	    VarValue: 310,
	    VarDefaultValue: 311,
	    VarVariableDecl: 312,
	    FunctionDecl: 313,
	    ParamList: 314,
	    ReturnType: 315,
	    OptionDecl: 316,
	    TypeDeclaration: 317,
	    Param: 318,
	    EnclosedExpr: 319,
	    QueryBody: 320,
	    UnaryExpr: 321,
	    DirElemConstructor: 322,
	    DirAttributeList: 323,
	    DirAttributeValue: 324,
	    DirElemContent: 325,
	    CommonContent: 326,
	    SequenceType: 327,
	    EmptySequenceTest: 328,
	    KindTest: 329,
	    ItemTest: 330,
	    FunctionTest: 331,
	    AtomicType: 332,
	    AtomicOrUnionType: 333,
	    StringLiteral: 334,
	    ElementContentChar: 335,
	    AttributeValueChar: 336,
	    QName: 337,
	    BlockExpr: 338,
	    BinaryTest: 339,
	    EXPLICITLY: 340
	});

	(function(){
	// public class variables
	var EOF= -1,
	    L_QuotAttrContentChar= 4,
	    L_AposAttrContentChar= 5,
	    L_ElementContentChar= 6,
	    L_CDataSection= 7,
	    L_PredefinedEntityRef= 8,
	    L_CharRef= 9,
	    ESCAPE_LBRACKET= 10,
	    ESCAPE_RBRACKET= 11,
	    ESCAPE_APOS= 12,
	    ESCAPE_QUOT= 13,
	    CDATA_START= 14,
	    CDATA_END= 15,
	    ANCESTOR= 16,
	    ANCESTOR_OR_SELF= 17,
	    AND= 18,
	    AS= 19,
	    ASCENDING= 20,
	    AT= 21,
	    ATTRIBUTE= 22,
	    BASE_URI= 23,
	    BOUNDARY_SPACE= 24,
	    BY= 25,
	    CASE= 26,
	    CAST= 27,
	    CASTABLE= 28,
	    CHILD= 29,
	    COLLATION= 30,
	    COMMENT= 31,
	    CONSTRUCTION= 32,
	    COPY_NAMESPACES= 33,
	    DECLARE= 34,
	    DEFAULT= 35,
	    DESCENDANT= 36,
	    DESCENDANT_OR_SELF= 37,
	    DESCENDING= 38,
	    DIV= 39,
	    DOCUMENT= 40,
	    DOCUMENT_NODE= 41,
	    ELEMENT= 42,
	    ELSE= 43,
	    EMPTY= 44,
	    EMPTY_SEQUENCE= 45,
	    ENCODING= 46,
	    EQ= 47,
	    EVERY= 48,
	    EXCEPT= 49,
	    EXTERNAL= 50,
	    FOLLOWING= 51,
	    FOLLOWING_SIBLING= 52,
	    FOR= 53,
	    FUNCTION= 54,
	    GE= 55,
	    GREATEST= 56,
	    GT= 57,
	    IDIV= 58,
	    IF= 59,
	    IMPORT= 60,
	    IN= 61,
	    INHERIT= 62,
	    INSTANCE= 63,
	    INTERSECT= 64,
	    IS= 65,
	    ITEM= 66,
	    LAX= 67,
	    LE= 68,
	    LEAST= 69,
	    LET= 70,
	    LT= 71,
	    MOD= 72,
	    MODULE= 73,
	    NAMESPACE= 74,
	    NE= 75,
	    NO_INHERIT= 76,
	    NO_PRESERVE= 77,
	    NODE= 78,
	    OF= 79,
	    OPTION= 80,
	    OR= 81,
	    ORDER= 82,
	    ORDERED= 83,
	    ORDERING= 84,
	    PARENT= 85,
	    PRECEDING= 86,
	    PRECEDING_SIBLING= 87,
	    PRESERVE= 88,
	    PROCESSING_INSTRUCTION= 89,
	    RETURN= 90,
	    SATISFIES= 91,
	    SCHEMA= 92,
	    SCHEMA_ATTRIBUTE= 93,
	    SCHEMA_ELEMENT= 94,
	    SELF= 95,
	    SOME= 96,
	    STABLE= 97,
	    STRICT= 98,
	    STRIP= 99,
	    TEXT= 100,
	    THEN= 101,
	    TO= 102,
	    TREAT= 103,
	    TYPESWITCH= 104,
	    UNION= 105,
	    UNORDERED= 106,
	    VALIDATE= 107,
	    VARIABLE= 108,
	    VERSION= 109,
	    WHERE= 110,
	    XQUERY= 111,
	    ALLOWING= 112,
	    CATCH= 113,
	    CONTEXT= 114,
	    COUNT= 115,
	    DECIMAL_FORMAT= 116,
	    DECIMAL_SEPARATOR= 117,
	    DETERMINISTIC= 118,
	    DIGIT= 119,
	    END= 120,
	    GROUP= 121,
	    GROUPING_SEPARATOR= 122,
	    INFINITY= 123,
	    MINUS_SIGN= 124,
	    NAMESPACE_NODE= 125,
	    NAN= 126,
	    NEXT= 127,
	    ONLY= 128,
	    PATTERN_SEPARATOR= 129,
	    PERCENT= 130,
	    PER_MILLE= 131,
	    PREVIOUS= 132,
	    SLIDING= 133,
	    START= 134,
	    SWITCH= 135,
	    TRY= 136,
	    TUMBLING= 137,
	    TYPE= 138,
	    WHEN= 139,
	    WINDOW= 140,
	    ZERO_DIGIT= 141,
	    AFTER= 142,
	    BEFORE= 143,
	    COPY= 144,
	    DELETE= 145,
	    FIRST= 146,
	    INSERT= 147,
	    INTO= 148,
	    LAST= 149,
	    MODIFY= 150,
	    NODES= 151,
	    RENAME= 152,
	    REPLACE= 153,
	    REVALIDATION= 154,
	    SKIP= 155,
	    UPDATING= 156,
	    VALUE= 157,
	    WITH= 158,
	    ALL= 159,
	    ANY= 160,
	    CONTAINS= 161,
	    CONTENT= 162,
	    DIACRITICS= 163,
	    DIFFERENT= 164,
	    DISTANCE= 165,
	    ENTIRE= 166,
	    EXACTLY= 167,
	    FROM= 168,
	    FT_OPTION= 169,
	    FTAND= 170,
	    FTNOT= 171,
	    FTOR= 172,
	    INSENSITIVE= 173,
	    LANGUAGE= 174,
	    LEVELS= 175,
	    LOWERCASE= 176,
	    MOST= 177,
	    NO= 178,
	    NOT= 179,
	    OCCURS= 180,
	    PARAGRAPH= 181,
	    PARAGRAPHS= 182,
	    PHRASE= 183,
	    RELATIONSHIP= 184,
	    SAME= 185,
	    SCORE= 186,
	    SENSITIVE= 187,
	    SENTENCE= 188,
	    SENTENCES= 189,
	    STEMMING= 190,
	    STOP= 191,
	    THESAURUS= 192,
	    TIMES= 193,
	    UPPERCASE= 194,
	    USING= 195,
	    WEIGHT= 196,
	    WILDCARDS= 197,
	    WITHOUT= 198,
	    WORD= 199,
	    WORDS= 200,
	    BREAK= 201,
	    CONTINUE= 202,
	    EXIT= 203,
	    LOOP= 204,
	    RETURNING= 205,
	    WHILE= 206,
	    CHECK= 207,
	    COLLECTION= 208,
	    CONSTRAINT= 209,
	    FOREACH= 210,
	    FOREIGN= 211,
	    INDEX= 212,
	    INTEGRITY= 213,
	    KEY= 214,
	    ON= 215,
	    UNIQUE= 216,
	    BINARY= 217,
	    AMP_ER= 218,
	    APOS_ER= 219,
	    QUOT_ER= 220,
	    LPAREN= 221,
	    RPAREN= 222,
	    DOLLAR= 223,
	    LBRACKET= 224,
	    RBRACKET= 225,
	    LSQUARE= 226,
	    RSQUARE= 227,
	    EQUAL= 228,
	    BIND= 229,
	    NOTEQUAL= 230,
	    ANN_PERCENT= 231,
	    HASH= 232,
	    AMP= 233,
	    COMMA= 234,
	    QUESTION= 235,
	    STAR= 236,
	    PLUS= 237,
	    MINUS= 238,
	    SMALLER= 239,
	    GREATER= 240,
	    SMALLEREQ= 241,
	    GREATEREQ= 242,
	    SMALLER_SMALLER= 243,
	    GREATER_GREATER= 244,
	    SLASH= 245,
	    SLASH_SLASH= 246,
	    DOT= 247,
	    DOT_DOT= 248,
	    COLON= 249,
	    COLON_COLON= 250,
	    EMPTY_CLOSE_TAG= 251,
	    CLOSE_TAG= 252,
	    SEMICOLON= 253,
	    VBAR= 254,
	    PRAGMA_START= 255,
	    PRAGMA_END= 256,
	    XML_COMMENT_START= 257,
	    XML_COMMENT_END= 258,
	    PI_START= 259,
	    PI_END= 260,
	    ATTR_SIGN= 261,
	    CHARREF_DEC= 262,
	    CHARREF_HEX= 263,
	    APOS= 264,
	    QUOT= 265,
	    NCNameStartChar= 266,
	    NCNameChar= 267,
	    L_NCName= 268,
	    Letter= 269,
	    HexLetter= 270,
	    Digit= 271,
	    Digits= 272,
	    S= 273,
	    SU= 274,
	    L_Pragma= 275,
	    L_DirCommentConstructor= 276,
	    L_DirPIConstructor= 277,
	    L_IntegerLiteral= 278,
	    L_DecimalLiteral= 279,
	    L_DoubleLiteral= 280,
	    L_Comment= 281,
	    L_AnyChar= 282,
	    L_QuotStringLiteralChar= 283,
	    L_AposStringLiteralChar= 284,
	    LibraryModule= 285,
	    MainModule= 286,
	    VersionDecl= 287,
	    VersionDeclEncoding= 288,
	    VersionDeclVersion= 289,
	    ModuleDecl= 290,
	    Prolog= 291,
	    DefaultNamespaceDecls= 292,
	    DefaultNamespaceDecl= 293,
	    Setters= 294,
	    Setter= 295,
	    NamespaceDecls= 296,
	    NamespaceDecl= 297,
	    Imports= 298,
	    FTOptionDecls= 299,
	    SchemaImport= 300,
	    SchemaPrefix= 301,
	    NamespaceName= 302,
	    DefaultElementNamespace= 303,
	    AtHints= 304,
	    ModuleImport= 305,
	    BaseURIDecl= 306,
	    OrderedDecls= 307,
	    VarDecl= 308,
	    VarType= 309,
	    VarValue= 310,
	    VarDefaultValue= 311,
	    VarVariableDecl= 312,
	    FunctionDecl= 313,
	    ParamList= 314,
	    ReturnType= 315,
	    OptionDecl= 316,
	    TypeDeclaration= 317,
	    Param= 318,
	    EnclosedExpr= 319,
	    QueryBody= 320,
	    UnaryExpr= 321,
	    DirElemConstructor= 322,
	    DirAttributeList= 323,
	    DirAttributeValue= 324,
	    DirElemContent= 325,
	    CommonContent= 326,
	    SequenceType= 327,
	    EmptySequenceTest= 328,
	    KindTest= 329,
	    ItemTest= 330,
	    FunctionTest= 331,
	    AtomicType= 332,
	    AtomicOrUnionType= 333,
	    StringLiteral= 334,
	    ElementContentChar= 335,
	    AttributeValueChar= 336,
	    QName= 337,
	    BlockExpr= 338,
	    BinaryTest= 339,
	    EXPLICITLY= 340;

	// public instance methods/vars
	org.antlr.lang.extend(XQueryParser, org.antlr.runtime.Parser, {

	    setTreeAdaptor: function(adaptor) {
	        this.adaptor = adaptor;
	    },
	    getTreeAdaptor: function() {
	        return this.adaptor;
	    },

	    getTokenNames: function() { return XQueryParser.tokenNames; },
	    getGrammarFileName: function() { return "XQueryParser.g"; }
	});
	org.antlr.lang.augmentObject(XQueryParser.prototype, {

	    // inline static return class
	    p_Module_return: (function() {
	        XQueryParser.p_Module_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Module_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:166:1: p_Module : (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF ;
	    // $ANTLR start "p_Module"
	    p_Module: function() {
	        var retval = new XQueryParser.p_Module_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var EOF1 = null;
	         var vd = null;
	         var lm = null;
	         var mm = null;

	        var EOF1_tree=null;
	        var stream_EOF=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EOF");
	        var stream_p_VersionDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_VersionDecl");
	        var stream_p_LibraryModule=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_LibraryModule");
	        var stream_p_MainModule=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_MainModule");
	        try {
	            // XQueryParser.g:167:9: ( (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF )
	            // XQueryParser.g:167:11: (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF
	            // XQueryParser.g:167:13: (vd= p_VersionDecl )?
	            var alt1=2;
	            alt1 = this.dfa1.predict(this.input);
	            switch (alt1) {
	                case 1 :
	                    // XQueryParser.g:167:13: vd= p_VersionDecl
	                    this.pushFollow(XQueryParser.FOLLOW_p_VersionDecl_in_p_Module503);
	                    vd=this.p_VersionDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_VersionDecl.add(vd.getTree());


	                    break;

	            }

	            // XQueryParser.g:168:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)
	            var alt2=2;
	            alt2 = this.dfa2.predict(this.input);
	            switch (alt2) {
	                case 1 :
	                    // XQueryParser.g:169:15: lm= p_LibraryModule[$vd.tree]
	                    this.pushFollow(XQueryParser.FOLLOW_p_LibraryModule_in_p_Module536);
	                    lm=this.p_LibraryModule((vd?vd.tree:null));

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_LibraryModule.add(lm.getTree());


	                    // AST REWRITE
	                    // elements: 
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 169:44: ->
	                    {
	                        this.adaptor.addChild(root_0, (lm?lm.tree:null));

	                    }

	                    retval.tree = root_0;}

	                    break;
	                case 2 :
	                    // XQueryParser.g:170:15: mm= p_MainModule[$vd.tree]
	                    this.pushFollow(XQueryParser.FOLLOW_p_MainModule_in_p_Module559);
	                    mm=this.p_MainModule((vd?vd.tree:null));

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_MainModule.add(mm.getTree());


	                    // AST REWRITE
	                    // elements: 
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 170:44: ->
	                    {
	                        this.adaptor.addChild(root_0, (mm?mm.tree:null));

	                    }

	                    retval.tree = root_0;}

	                    break;

	            }

	            EOF1=this.match(this.input,EOF,XQueryParser.FOLLOW_EOF_in_p_Module583); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_EOF.add(EOF1);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_VersionDecl_return: (function() {
	        XQueryParser.p_VersionDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_VersionDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:175:1: p_VersionDecl : k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) ;
	    // $ANTLR start "p_VersionDecl"
	    p_VersionDecl: function() {
	        var retval = new XQueryParser.p_VersionDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON2 = null;
	         var enc = null;
	         var ver = null;

	        var k_tree=null;
	        var SEMICOLON2_tree=null;
	        var stream_ENCODING=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ENCODING");
	        var stream_VERSION=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token VERSION");
	        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
	        var stream_XQUERY=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token XQUERY");
	        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
	        try {
	            // XQueryParser.g:176:9: (k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) )
	            // XQueryParser.g:176:11: k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON
	            k=this.match(this.input,XQUERY,XQueryParser.FOLLOW_XQUERY_in_p_VersionDecl611); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_XQUERY.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:176:35: ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) )
	            var alt4=2;
	            var LA4_0 = this.input.LA(1);

	            if ( (LA4_0==ENCODING) ) {
	                alt4=1;
	            }
	            else if ( (LA4_0==VERSION) ) {
	                alt4=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 4, 0, this.input);

	                throw nvae;
	            }
	            switch (alt4) {
	                case 1 :
	                    // XQueryParser.g:176:36: (k= ENCODING enc= p_StringLiteral )
	                    // XQueryParser.g:176:36: (k= ENCODING enc= p_StringLiteral )
	                    // XQueryParser.g:176:37: k= ENCODING enc= p_StringLiteral
	                    k=this.match(this.input,ENCODING,XQueryParser.FOLLOW_ENCODING_in_p_VersionDecl619); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_ENCODING.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_VersionDecl625);
	                    enc=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(enc.getTree());





	                    break;
	                case 2 :
	                    // XQueryParser.g:177:13: (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? )
	                    // XQueryParser.g:177:13: (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? )
	                    // XQueryParser.g:177:14: k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )?
	                    k=this.match(this.input,VERSION,XQueryParser.FOLLOW_VERSION_in_p_VersionDecl646); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_VERSION.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_VersionDecl652);
	                    ver=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ver.getTree());
	                    // XQueryParser.g:177:59: (k= ENCODING enc= p_StringLiteral )?
	                    var alt3=2;
	                    var LA3_0 = this.input.LA(1);

	                    if ( (LA3_0==ENCODING) ) {
	                        alt3=1;
	                    }
	                    switch (alt3) {
	                        case 1 :
	                            // XQueryParser.g:177:60: k= ENCODING enc= p_StringLiteral
	                            k=this.match(this.input,ENCODING,XQueryParser.FOLLOW_ENCODING_in_p_VersionDecl657); if (this.state.failed) return retval; 
	                            if ( this.state.backtracking===0 ) stream_ENCODING.add(k);

	                            if ( this.state.backtracking===0 ) {
	                              this.ak(k);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_VersionDecl663);
	                            enc=this.p_StringLiteral();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(enc.getTree());


	                            break;

	                    }






	                    break;

	            }

	            SEMICOLON2=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_VersionDecl669); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON2);



	            // AST REWRITE
	            // elements: ver, enc
	            // token labels: 
	            // rule labels: retval, ver, enc
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_ver=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token ver",ver!=null?ver.tree:null);
	            var stream_enc=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token enc",enc!=null?enc.tree:null);

	            root_0 = this.adaptor.nil();
	            // 178:17: -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
	            {
	                // XQueryParser.g:178:20: ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(VersionDecl, "VersionDecl"), root_1);

	                // XQueryParser.g:178:34: ^( VersionDeclVersion ( $ver)? )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(VersionDeclVersion, "VersionDeclVersion"), root_2);

	                // XQueryParser.g:178:55: ( $ver)?
	                if ( stream_ver.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_ver.nextTree());

	                }
	                stream_ver.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:178:62: ^( VersionDeclEncoding ( $enc)? )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(VersionDeclEncoding, "VersionDeclEncoding"), root_2);

	                // XQueryParser.g:178:84: ( $enc)?
	                if ( stream_enc.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_enc.nextTree());

	                }
	                stream_enc.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_MainModule_return: (function() {
	        XQueryParser.p_MainModule_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_MainModule_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:182:1: p_MainModule[vd] : pm_Prolog pm_QueryBody -> ^( MainModule pm_Prolog ) ;
	    // $ANTLR start "p_MainModule"
	    p_MainModule: function(vd) {
	        var retval = new XQueryParser.p_MainModule_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var pm_Prolog3 = null;
	         var pm_QueryBody4 = null;

	        var stream_pm_QueryBody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_QueryBody");
	        var stream_pm_Prolog=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_Prolog");
	        try {
	            // XQueryParser.g:183:9: ( pm_Prolog pm_QueryBody -> ^( MainModule pm_Prolog ) )
	            // XQueryParser.g:183:11: pm_Prolog pm_QueryBody
	            this.pushFollow(XQueryParser.FOLLOW_pm_Prolog_in_p_MainModule735);
	            pm_Prolog3=this.pm_Prolog();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_pm_Prolog.add(pm_Prolog3.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_pm_QueryBody_in_p_MainModule737);
	            pm_QueryBody4=this.pm_QueryBody();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_pm_QueryBody.add(pm_QueryBody4.getTree());


	            // AST REWRITE
	            // elements: pm_Prolog
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 184:17: -> ^( MainModule pm_Prolog )
	            {
	                // XQueryParser.g:184:20: ^( MainModule pm_Prolog )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(MainModule, "MainModule"), root_1);

	                this.adaptor.addChild(root_1, vd);
	                this.adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_LibraryModule_return: (function() {
	        XQueryParser.p_LibraryModule_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_LibraryModule_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:188:1: p_LibraryModule[vd] : p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) ;
	    // $ANTLR start "p_LibraryModule"
	    p_LibraryModule: function(vd) {
	        var retval = new XQueryParser.p_LibraryModule_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ModuleDecl5 = null;
	         var pm_Prolog6 = null;

	        var stream_pm_Prolog=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_Prolog");
	        var stream_p_ModuleDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_ModuleDecl");
	        try {
	            // XQueryParser.g:189:9: ( p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) )
	            // XQueryParser.g:189:11: p_ModuleDecl pm_Prolog
	            this.pushFollow(XQueryParser.FOLLOW_p_ModuleDecl_in_p_LibraryModule793);
	            p_ModuleDecl5=this.p_ModuleDecl();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_ModuleDecl.add(p_ModuleDecl5.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_pm_Prolog_in_p_LibraryModule795);
	            pm_Prolog6=this.pm_Prolog();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_pm_Prolog.add(pm_Prolog6.getTree());


	            // AST REWRITE
	            // elements: pm_Prolog, p_ModuleDecl
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 190:17: -> ^( LibraryModule p_ModuleDecl pm_Prolog )
	            {
	                // XQueryParser.g:190:20: ^( LibraryModule p_ModuleDecl pm_Prolog )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(LibraryModule, "LibraryModule"), root_1);

	                this.adaptor.addChild(root_1, vd);
	                this.adaptor.addChild(root_1, stream_p_ModuleDecl.nextTree());
	                this.adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ModuleDecl_return: (function() {
	        XQueryParser.p_ModuleDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ModuleDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:194:1: p_ModuleDecl : k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) ;
	    // $ANTLR start "p_ModuleDecl"
	    p_ModuleDecl: function() {
	        var retval = new XQueryParser.p_ModuleDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var EQUAL8 = null;
	        var SEMICOLON10 = null;
	        var k = null;
	        var list_k=null;
	         var p_NCName7 = null;
	         var p_StringLiteral9 = null;

	        var EQUAL8_tree=null;
	        var SEMICOLON10_tree=null;
	        var k_tree=null;
	        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
	        var stream_MODULE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token MODULE");
	        var stream_NAMESPACE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NAMESPACE");
	        var stream_EQUAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUAL");
	        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
	        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
	        try {
	            // XQueryParser.g:195:9: (k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) )
	            // XQueryParser.g:195:11: k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON
	            k=this.match(this.input,MODULE,XQueryParser.FOLLOW_MODULE_in_p_ModuleDecl851); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_MODULE.add(k);

	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_p_ModuleDecl855); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_ModuleDecl859);
	            p_NCName7=this.p_NCName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_NCName.add(p_NCName7.getTree());
	            EQUAL8=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_p_ModuleDecl861); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_EQUAL.add(EQUAL8);

	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_ModuleDecl863);
	            p_StringLiteral9=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(p_StringLiteral9.getTree());
	            SEMICOLON10=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_ModuleDecl865); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON10);



	            // AST REWRITE
	            // elements: p_StringLiteral, p_NCName
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 196:17: -> ^( ModuleDecl p_NCName p_StringLiteral )
	            {
	                // XQueryParser.g:196:21: ^( ModuleDecl p_NCName p_StringLiteral )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(ModuleDecl, "ModuleDecl"), root_1);

	                this.adaptor.addChild(root_1, stream_p_NCName.nextTree());
	                this.adaptor.addChild(root_1, stream_p_StringLiteral.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_Prolog_return: (function() {
	        XQueryParser.pm_Prolog_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_Prolog_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:202:1: pm_Prolog : ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )* -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) ;
	    // $ANTLR start "pm_Prolog"
	    pm_Prolog: function() {
	        var retval = new XQueryParser.pm_Prolog_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var list_dnd=null;
	        var list_s=null;
	        var list_nd=null;
	        var list_i=null;
	        var list_fto=null;
	        var list_od=null;
	        var dnd = null;
	        var s = null;
	        var nd = null;
	        var i = null;
	        var fto = null;
	        var od = null;
	        var stream_pm_NamespaceDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_NamespaceDecl");
	        var stream_p_Import=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_Import");
	        var stream_p_Setter=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_Setter");
	        var stream_pm_DefaultNamespaceDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_DefaultNamespaceDecl");
	        var stream_pg_OrderedDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pg_OrderedDecl");
	        var stream_pm_FTOptionDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_FTOptionDecl");
	        try {
	            // XQueryParser.g:203:9: ( ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )* -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) )
	            // XQueryParser.g:203:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )*
	            // XQueryParser.g:203:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )*
	            loop6:
	            do {
	                var alt6=2;
	                alt6 = this.dfa6.predict(this.input);
	                switch (alt6) {
	                case 1 :
	                    // XQueryParser.g:203:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl )
	                    // XQueryParser.g:203:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl )
	                    var alt5=5;
	                    var LA5_0 = this.input.LA(1);

	                    if ( (LA5_0==DECLARE) ) {
	                        var LA5_1 = this.input.LA(2);

	                        if ( (LA5_1==REVALIDATION) && ((this.lc(XQU)))) {
	                            alt5=2;
	                        }
	                        else if ( (LA5_1==FT_OPTION) ) {
	                            alt5=5;
	                        }
	                        else if ( (LA5_1==DEFAULT) ) {
	                            var LA5_5 = this.input.LA(3);

	                            if ( (LA5_5==ELEMENT||LA5_5==FUNCTION) ) {
	                                alt5=1;
	                            }
	                            else if ( (LA5_5==COLLATION||LA5_5==ORDER||LA5_5==DECIMAL_FORMAT) ) {
	                                alt5=2;
	                            }
	                            else {
	                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                                var nvae =
	                                    new org.antlr.runtime.NoViableAltException("", 5, 5, this.input);

	                                throw nvae;
	                            }
	                        }
	                        else if ( ((LA5_1>=BASE_URI && LA5_1<=BOUNDARY_SPACE)||(LA5_1>=CONSTRUCTION && LA5_1<=COPY_NAMESPACES)||LA5_1==ORDERING||LA5_1==DECIMAL_FORMAT) ) {
	                            alt5=2;
	                        }
	                        else if ( (LA5_1==NAMESPACE) ) {
	                            alt5=3;
	                        }
	                        else {
	                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                            var nvae =
	                                new org.antlr.runtime.NoViableAltException("", 5, 1, this.input);

	                            throw nvae;
	                        }
	                    }
	                    else if ( (LA5_0==IMPORT) ) {
	                        alt5=4;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 5, 0, this.input);

	                        throw nvae;
	                    }
	                    switch (alt5) {
	                        case 1 :
	                            // XQueryParser.g:203:13: dnd+= pm_DefaultNamespaceDecl
	                            this.pushFollow(XQueryParser.FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog924);
	                            dnd=this.pm_DefaultNamespaceDecl();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_pm_DefaultNamespaceDecl.add(dnd.getTree());
	                            if (org.antlr.lang.isNull(list_dnd)) list_dnd = [];
	                            list_dnd.push(dnd.getTree());



	                            break;
	                        case 2 :
	                            // XQueryParser.g:203:44: s+= p_Setter
	                            this.pushFollow(XQueryParser.FOLLOW_p_Setter_in_pm_Prolog930);
	                            s=this.p_Setter();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_p_Setter.add(s.getTree());
	                            if (org.antlr.lang.isNull(list_s)) list_s = [];
	                            list_s.push(s.getTree());



	                            break;
	                        case 3 :
	                            // XQueryParser.g:203:58: nd+= pm_NamespaceDecl
	                            this.pushFollow(XQueryParser.FOLLOW_pm_NamespaceDecl_in_pm_Prolog936);
	                            nd=this.pm_NamespaceDecl();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_pm_NamespaceDecl.add(nd.getTree());
	                            if (org.antlr.lang.isNull(list_nd)) list_nd = [];
	                            list_nd.push(nd.getTree());



	                            break;
	                        case 4 :
	                            // XQueryParser.g:203:81: i+= p_Import
	                            this.pushFollow(XQueryParser.FOLLOW_p_Import_in_pm_Prolog942);
	                            i=this.p_Import();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_p_Import.add(i.getTree());
	                            if (org.antlr.lang.isNull(list_i)) list_i = [];
	                            list_i.push(i.getTree());



	                            break;
	                        case 5 :
	                            // XQueryParser.g:203:95: fto+= pm_FTOptionDecl
	                            this.pushFollow(XQueryParser.FOLLOW_pm_FTOptionDecl_in_pm_Prolog948);
	                            fto=this.pm_FTOptionDecl();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_pm_FTOptionDecl.add(fto.getTree());
	                            if (org.antlr.lang.isNull(list_fto)) list_fto = [];
	                            list_fto.push(fto.getTree());



	                            break;

	                    }



	                    break;

	                default :
	                    break loop6;
	                }
	            } while (true);

	            // XQueryParser.g:203:121: (od+= pg_OrderedDecl )*
	            loop7:
	            do {
	                var alt7=2;
	                var LA7_0 = this.input.LA(1);

	                if ( (LA7_0==DECLARE) ) {
	                    var LA7_3 = this.input.LA(2);

	                    if ( (LA7_3==FUNCTION||LA7_3==OPTION||LA7_3==VARIABLE||LA7_3==CONTEXT||LA7_3==UPDATING||LA7_3==COLLECTION||(LA7_3>=INDEX && LA7_3<=INTEGRITY)||LA7_3==ANN_PERCENT) ) {
	                        alt7=1;
	                    }


	                }


	                switch (alt7) {
	                case 1 :
	                    // XQueryParser.g:203:121: od+= pg_OrderedDecl
	                    this.pushFollow(XQueryParser.FOLLOW_pg_OrderedDecl_in_pm_Prolog955);
	                    od=this.pg_OrderedDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_pg_OrderedDecl.add(od.getTree());
	                    if (org.antlr.lang.isNull(list_od)) list_od = [];
	                    list_od.push(od.getTree());



	                    break;

	                default :
	                    break loop7;
	                }
	            } while (true);



	            // AST REWRITE
	            // elements: s, nd, dnd, fto, od, i
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: od, fto, s, nd, dnd, i
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_od=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token od",list_od);
	            var stream_fto=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token fto",list_fto);
	            var stream_s=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token s",list_s);
	            var stream_nd=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nd",list_nd);
	            var stream_dnd=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token dnd",list_dnd);
	            var stream_i=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token i",list_i);
	            root_0 = this.adaptor.nil();
	            // 204:17: -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
	            {
	                // XQueryParser.g:204:21: ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(Prolog, "Prolog"), root_1);

	                // XQueryParser.g:205:33: ^( DefaultNamespaceDecls ( $dnd)* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(DefaultNamespaceDecls, "DefaultNamespaceDecls"), root_2);

	                // XQueryParser.g:205:57: ( $dnd)*
	                while ( stream_dnd.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_dnd.nextTree());

	                }
	                stream_dnd.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:206:33: ^( Setters ( $s)* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(Setters, "Setters"), root_2);

	                // XQueryParser.g:206:43: ( $s)*
	                while ( stream_s.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_s.nextTree());

	                }
	                stream_s.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:207:33: ^( NamespaceDecls ( $nd)* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(NamespaceDecls, "NamespaceDecls"), root_2);

	                // XQueryParser.g:207:50: ( $nd)*
	                while ( stream_nd.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_nd.nextTree());

	                }
	                stream_nd.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:208:33: ^( Imports ( $i)* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(Imports, "Imports"), root_2);

	                // XQueryParser.g:208:43: ( $i)*
	                while ( stream_i.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_i.nextTree());

	                }
	                stream_i.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:209:33: ^( FTOptionDecls ( $fto)* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(FTOptionDecls, "FTOptionDecls"), root_2);

	                // XQueryParser.g:209:49: ( $fto)*
	                while ( stream_fto.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_fto.nextTree());

	                }
	                stream_fto.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:210:33: ^( OrderedDecls ( $od)* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(OrderedDecls, "OrderedDecls"), root_2);

	                // XQueryParser.g:210:48: ( $od)*
	                while ( stream_od.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_od.nextTree());

	                }
	                stream_od.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pg_OrderedDecl_return: (function() {
	        XQueryParser.pg_OrderedDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pg_OrderedDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:218:1: pg_OrderedDecl : ( pm_ContextItemDecl | pm_AnnotatedDecl | pm_OptionDecl );
	    // $ANTLR start "pg_OrderedDecl"
	    pg_OrderedDecl: function() {
	        var retval = new XQueryParser.pg_OrderedDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var pm_ContextItemDecl11 = null;
	         var pm_AnnotatedDecl12 = null;
	         var pm_OptionDecl13 = null;


	        try {
	            // XQueryParser.g:219:9: ( pm_ContextItemDecl | pm_AnnotatedDecl | pm_OptionDecl )
	            var alt8=3;
	            var LA8_0 = this.input.LA(1);

	            if ( (LA8_0==DECLARE) ) {
	                switch ( this.input.LA(2) ) {
	                case CONTEXT:
	                    alt8=1;
	                    break;
	                case FUNCTION:
	                case VARIABLE:
	                case UPDATING:
	                case COLLECTION:
	                case INDEX:
	                case INTEGRITY:
	                case ANN_PERCENT:
	                    alt8=2;
	                    break;
	                case OPTION:
	                    alt8=3;
	                    break;
	                default:
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 8, 1, this.input);

	                    throw nvae;
	                }

	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 8, 0, this.input);

	                throw nvae;
	            }
	            switch (alt8) {
	                case 1 :
	                    // XQueryParser.g:219:11: pm_ContextItemDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1270);
	                    pm_ContextItemDecl11=this.pm_ContextItemDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_ContextItemDecl11.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:220:11: pm_AnnotatedDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_AnnotatedDecl_in_pg_OrderedDecl1282);
	                    pm_AnnotatedDecl12=this.pm_AnnotatedDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_AnnotatedDecl12.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:221:11: pm_OptionDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1294);
	                    pm_OptionDecl13=this.pm_OptionDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_OptionDecl13.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Setter_return: (function() {
	        XQueryParser.p_Setter_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Setter_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:229:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl );
	    // $ANTLR start "p_Setter"
	    p_Setter: function() {
	        var retval = new XQueryParser.p_Setter_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var pm_BoundarySpaceDecl14 = null;
	         var pm_DefaultCollationDecl15 = null;
	         var pm_BaseURIDecl16 = null;
	         var pm_ConstructionDecl17 = null;
	         var pm_OrderingModeDecl18 = null;
	         var pm_EmptyOrderDecl19 = null;
	         var pm_RevalidationDecl20 = null;
	         var pm_CopyNamespacesDecl21 = null;
	         var pm_DecimalFormatDecl22 = null;


	        try {
	            // XQueryParser.g:230:9: ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl )
	            var alt9=9;
	            alt9 = this.dfa9.predict(this.input);
	            switch (alt9) {
	                case 1 :
	                    // XQueryParser.g:230:11: pm_BoundarySpaceDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1324);
	                    pm_BoundarySpaceDecl14=this.pm_BoundarySpaceDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_BoundarySpaceDecl14.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:231:11: pm_DefaultCollationDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_DefaultCollationDecl_in_p_Setter1336);
	                    pm_DefaultCollationDecl15=this.pm_DefaultCollationDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_DefaultCollationDecl15.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:232:11: pm_BaseURIDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_BaseURIDecl_in_p_Setter1348);
	                    pm_BaseURIDecl16=this.pm_BaseURIDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_BaseURIDecl16.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:233:11: pm_ConstructionDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_ConstructionDecl_in_p_Setter1360);
	                    pm_ConstructionDecl17=this.pm_ConstructionDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_ConstructionDecl17.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:234:11: pm_OrderingModeDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_OrderingModeDecl_in_p_Setter1372);
	                    pm_OrderingModeDecl18=this.pm_OrderingModeDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_OrderingModeDecl18.getTree());


	                    break;
	                case 6 :
	                    // XQueryParser.g:235:11: pm_EmptyOrderDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_EmptyOrderDecl_in_p_Setter1384);
	                    pm_EmptyOrderDecl19=this.pm_EmptyOrderDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_EmptyOrderDecl19.getTree());


	                    break;
	                case 7 :
	                    // XQueryParser.g:236:11: {...}? => pm_RevalidationDecl
	                    root_0 = this.adaptor.nil();

	                    if ( !((this.lc(XQU))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_Setter", "this.lc(XQU)");
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_pm_RevalidationDecl_in_p_Setter1399);
	                    pm_RevalidationDecl20=this.pm_RevalidationDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_RevalidationDecl20.getTree());


	                    break;
	                case 8 :
	                    // XQueryParser.g:237:11: pm_CopyNamespacesDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1411);
	                    pm_CopyNamespacesDecl21=this.pm_CopyNamespacesDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CopyNamespacesDecl21.getTree());


	                    break;
	                case 9 :
	                    // XQueryParser.g:238:11: pm_DecimalFormatDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_DecimalFormatDecl_in_p_Setter1423);
	                    pm_DecimalFormatDecl22=this.pm_DecimalFormatDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_DecimalFormatDecl22.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_BoundarySpaceDecl_return: (function() {
	        XQueryParser.pm_BoundarySpaceDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_BoundarySpaceDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:242:1: pm_BoundarySpaceDecl : k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON ;
	    // $ANTLR start "pm_BoundarySpaceDecl"
	    pm_BoundarySpaceDecl: function() {
	        var retval = new XQueryParser.pm_BoundarySpaceDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON23 = null;

	        var k_tree=null;
	        var SEMICOLON23_tree=null;

	        try {
	            // XQueryParser.g:243:9: (k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON )
	            // XQueryParser.g:243:11: k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1455); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,BOUNDARY_SPACE,XQueryParser.FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1461); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:243:68: ( (k= PRESERVE ) | (k= STRIP ) )
	            var alt10=2;
	            var LA10_0 = this.input.LA(1);

	            if ( (LA10_0==PRESERVE) ) {
	                alt10=1;
	            }
	            else if ( (LA10_0==STRIP) ) {
	                alt10=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 10, 0, this.input);

	                throw nvae;
	            }
	            switch (alt10) {
	                case 1 :
	                    // XQueryParser.g:243:70: (k= PRESERVE )
	                    // XQueryParser.g:243:70: (k= PRESERVE )
	                    // XQueryParser.g:243:71: k= PRESERVE
	                    k=this.match(this.input,PRESERVE,XQueryParser.FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1470); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }





	                    break;
	                case 2 :
	                    // XQueryParser.g:243:100: (k= STRIP )
	                    // XQueryParser.g:243:100: (k= STRIP )
	                    // XQueryParser.g:243:101: k= STRIP
	                    k=this.match(this.input,STRIP,XQueryParser.FOLLOW_STRIP_in_pm_BoundarySpaceDecl1480); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }





	                    break;

	            }

	            SEMICOLON23=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1487); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON23_tree = this.adaptor.create(SEMICOLON23);
	            this.adaptor.addChild(root_0, SEMICOLON23_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_DefaultCollationDecl_return: (function() {
	        XQueryParser.pm_DefaultCollationDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_DefaultCollationDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:247:1: pm_DefaultCollationDecl : k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON ;
	    // $ANTLR start "pm_DefaultCollationDecl"
	    pm_DefaultCollationDecl: function() {
	        var retval = new XQueryParser.pm_DefaultCollationDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON25 = null;
	         var p_StringLiteral24 = null;

	        var k_tree=null;
	        var SEMICOLON25_tree=null;

	        try {
	            // XQueryParser.g:248:9: (k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON )
	            // XQueryParser.g:248:11: k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_DefaultCollationDecl1515); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_pm_DefaultCollationDecl1521); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,COLLATION,XQueryParser.FOLLOW_COLLATION_in_pm_DefaultCollationDecl1527); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl1531);
	            p_StringLiteral24=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral24.getTree());
	            SEMICOLON25=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl1533); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON25_tree = this.adaptor.create(SEMICOLON25);
	            this.adaptor.addChild(root_0, SEMICOLON25_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_BaseURIDecl_return: (function() {
	        XQueryParser.pm_BaseURIDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_BaseURIDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:252:1: pm_BaseURIDecl : k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) ;
	    // $ANTLR start "pm_BaseURIDecl"
	    pm_BaseURIDecl: function() {
	        var retval = new XQueryParser.pm_BaseURIDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON26 = null;
	         var sl = null;

	        var k_tree=null;
	        var SEMICOLON26_tree=null;
	        var stream_DECLARE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DECLARE");
	        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
	        var stream_BASE_URI=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token BASE_URI");
	        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
	        try {
	            // XQueryParser.g:253:9: (k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) )
	            // XQueryParser.g:253:11: k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON
	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_BaseURIDecl1569); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_DECLARE.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,BASE_URI,XQueryParser.FOLLOW_BASE_URI_in_pm_BaseURIDecl1575); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_BASE_URI.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_BaseURIDecl1581);
	            sl=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(sl.getTree());
	            SEMICOLON26=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_BaseURIDecl1583); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON26);



	            // AST REWRITE
	            // elements: sl
	            // token labels: 
	            // rule labels: sl, retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_sl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token sl",sl!=null?sl.tree:null);
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 254:17: -> ^( BaseURIDecl $sl)
	            {
	                // XQueryParser.g:254:20: ^( BaseURIDecl $sl)
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(BaseURIDecl, "BaseURIDecl"), root_1);

	                this.adaptor.addChild(root_1, stream_sl.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_ConstructionDecl_return: (function() {
	        XQueryParser.pm_ConstructionDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_ConstructionDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:258:1: pm_ConstructionDecl : k= DECLARE k= CONSTRUCTION ( (k= STRIP | k= PRESERVE ) ) SEMICOLON ;
	    // $ANTLR start "pm_ConstructionDecl"
	    pm_ConstructionDecl: function() {
	        var retval = new XQueryParser.pm_ConstructionDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON27 = null;

	        var k_tree=null;
	        var SEMICOLON27_tree=null;

	        try {
	            // XQueryParser.g:259:9: (k= DECLARE k= CONSTRUCTION ( (k= STRIP | k= PRESERVE ) ) SEMICOLON )
	            // XQueryParser.g:259:11: k= DECLARE k= CONSTRUCTION ( (k= STRIP | k= PRESERVE ) ) SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_ConstructionDecl1636); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,CONSTRUCTION,XQueryParser.FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl1642); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:259:66: ( (k= STRIP | k= PRESERVE ) )
	            // XQueryParser.g:259:68: (k= STRIP | k= PRESERVE )
	            // XQueryParser.g:259:68: (k= STRIP | k= PRESERVE )
	            var alt11=2;
	            var LA11_0 = this.input.LA(1);

	            if ( (LA11_0==STRIP) ) {
	                alt11=1;
	            }
	            else if ( (LA11_0==PRESERVE) ) {
	                alt11=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 11, 0, this.input);

	                throw nvae;
	            }
	            switch (alt11) {
	                case 1 :
	                    // XQueryParser.g:259:69: k= STRIP
	                    k=this.match(this.input,STRIP,XQueryParser.FOLLOW_STRIP_in_pm_ConstructionDecl1651); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:259:79: k= PRESERVE
	                    k=this.match(this.input,PRESERVE,XQueryParser.FOLLOW_PRESERVE_in_pm_ConstructionDecl1657); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }



	            SEMICOLON27=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_ConstructionDecl1664); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON27_tree = this.adaptor.create(SEMICOLON27);
	            this.adaptor.addChild(root_0, SEMICOLON27_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_OrderingModeDecl_return: (function() {
	        XQueryParser.pm_OrderingModeDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_OrderingModeDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:263:1: pm_OrderingModeDecl : k= DECLARE k= ORDERING ( (k= ORDERED | k= UNORDERED ) ) SEMICOLON ;
	    // $ANTLR start "pm_OrderingModeDecl"
	    pm_OrderingModeDecl: function() {
	        var retval = new XQueryParser.pm_OrderingModeDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON28 = null;

	        var k_tree=null;
	        var SEMICOLON28_tree=null;

	        try {
	            // XQueryParser.g:264:9: (k= DECLARE k= ORDERING ( (k= ORDERED | k= UNORDERED ) ) SEMICOLON )
	            // XQueryParser.g:264:11: k= DECLARE k= ORDERING ( (k= ORDERED | k= UNORDERED ) ) SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_OrderingModeDecl1692); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,ORDERING,XQueryParser.FOLLOW_ORDERING_in_pm_OrderingModeDecl1698); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:264:62: ( (k= ORDERED | k= UNORDERED ) )
	            // XQueryParser.g:264:64: (k= ORDERED | k= UNORDERED )
	            // XQueryParser.g:264:64: (k= ORDERED | k= UNORDERED )
	            var alt12=2;
	            var LA12_0 = this.input.LA(1);

	            if ( (LA12_0==ORDERED) ) {
	                alt12=1;
	            }
	            else if ( (LA12_0==UNORDERED) ) {
	                alt12=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 12, 0, this.input);

	                throw nvae;
	            }
	            switch (alt12) {
	                case 1 :
	                    // XQueryParser.g:264:65: k= ORDERED
	                    k=this.match(this.input,ORDERED,XQueryParser.FOLLOW_ORDERED_in_pm_OrderingModeDecl1707); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:264:77: k= UNORDERED
	                    k=this.match(this.input,UNORDERED,XQueryParser.FOLLOW_UNORDERED_in_pm_OrderingModeDecl1713); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }



	            SEMICOLON28=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1720); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON28_tree = this.adaptor.create(SEMICOLON28);
	            this.adaptor.addChild(root_0, SEMICOLON28_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_EmptyOrderDecl_return: (function() {
	        XQueryParser.pm_EmptyOrderDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_EmptyOrderDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:268:1: pm_EmptyOrderDecl : k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST | k= LEAST ) ) SEMICOLON ;
	    // $ANTLR start "pm_EmptyOrderDecl"
	    pm_EmptyOrderDecl: function() {
	        var retval = new XQueryParser.pm_EmptyOrderDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON29 = null;

	        var k_tree=null;
	        var SEMICOLON29_tree=null;

	        try {
	            // XQueryParser.g:269:9: (k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST | k= LEAST ) ) SEMICOLON )
	            // XQueryParser.g:269:11: k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST | k= LEAST ) ) SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_EmptyOrderDecl1748); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1754); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,ORDER,XQueryParser.FOLLOW_ORDER_in_pm_EmptyOrderDecl1760); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,EMPTY,XQueryParser.FOLLOW_EMPTY_in_pm_EmptyOrderDecl1766); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:269:107: ( (k= GREATEST | k= LEAST ) )
	            // XQueryParser.g:269:109: (k= GREATEST | k= LEAST )
	            // XQueryParser.g:269:109: (k= GREATEST | k= LEAST )
	            var alt13=2;
	            var LA13_0 = this.input.LA(1);

	            if ( (LA13_0==GREATEST) ) {
	                alt13=1;
	            }
	            else if ( (LA13_0==LEAST) ) {
	                alt13=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 13, 0, this.input);

	                throw nvae;
	            }
	            switch (alt13) {
	                case 1 :
	                    // XQueryParser.g:269:110: k= GREATEST
	                    k=this.match(this.input,GREATEST,XQueryParser.FOLLOW_GREATEST_in_pm_EmptyOrderDecl1775); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:269:123: k= LEAST
	                    k=this.match(this.input,LEAST,XQueryParser.FOLLOW_LEAST_in_pm_EmptyOrderDecl1781); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }



	            SEMICOLON29=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1788); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON29_tree = this.adaptor.create(SEMICOLON29);
	            this.adaptor.addChild(root_0, SEMICOLON29_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_CopyNamespacesDecl_return: (function() {
	        XQueryParser.pm_CopyNamespacesDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_CopyNamespacesDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:273:1: pm_CopyNamespacesDecl : k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON ;
	    // $ANTLR start "pm_CopyNamespacesDecl"
	    pm_CopyNamespacesDecl: function() {
	        var retval = new XQueryParser.pm_CopyNamespacesDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var COMMA31 = null;
	        var SEMICOLON33 = null;
	         var p_PreserveMode30 = null;
	         var p_InheritMode32 = null;

	        var k_tree=null;
	        var COMMA31_tree=null;
	        var SEMICOLON33_tree=null;

	        try {
	            // XQueryParser.g:274:9: (k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON )
	            // XQueryParser.g:274:11: k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1816); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,COPY_NAMESPACES,XQueryParser.FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1822); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1826);
	            p_PreserveMode30=this.p_PreserveMode();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PreserveMode30.getTree());
	            COMMA31=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_pm_CopyNamespacesDecl1828); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            COMMA31_tree = this.adaptor.create(COMMA31);
	            this.adaptor.addChild(root_0, COMMA31_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1830);
	            p_InheritMode32=this.p_InheritMode();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InheritMode32.getTree());
	            SEMICOLON33=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1832); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON33_tree = this.adaptor.create(SEMICOLON33);
	            this.adaptor.addChild(root_0, SEMICOLON33_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_PreserveMode_return: (function() {
	        XQueryParser.p_PreserveMode_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_PreserveMode_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:278:1: p_PreserveMode : (k+= PRESERVE | k+= NO_PRESERVE ) ;
	    // $ANTLR start "p_PreserveMode"
	    p_PreserveMode: function() {
	        var retval = new XQueryParser.p_PreserveMode_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:279:9: ( (k+= PRESERVE | k+= NO_PRESERVE ) )
	            // XQueryParser.g:279:11: (k+= PRESERVE | k+= NO_PRESERVE )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:279:11: (k+= PRESERVE | k+= NO_PRESERVE )
	            var alt14=2;
	            var LA14_0 = this.input.LA(1);

	            if ( (LA14_0==PRESERVE) ) {
	                alt14=1;
	            }
	            else if ( (LA14_0==NO_PRESERVE) ) {
	                alt14=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 14, 0, this.input);

	                throw nvae;
	            }
	            switch (alt14) {
	                case 1 :
	                    // XQueryParser.g:279:12: k+= PRESERVE
	                    k=this.match(this.input,PRESERVE,XQueryParser.FOLLOW_PRESERVE_in_p_PreserveMode1861); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:279:26: k+= NO_PRESERVE
	                    k=this.match(this.input,NO_PRESERVE,XQueryParser.FOLLOW_NO_PRESERVE_in_p_PreserveMode1867); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_InheritMode_return: (function() {
	        XQueryParser.p_InheritMode_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_InheritMode_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:283:1: p_InheritMode : (k+= INHERIT | k+= NO_INHERIT ) ;
	    // $ANTLR start "p_InheritMode"
	    p_InheritMode: function() {
	        var retval = new XQueryParser.p_InheritMode_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:284:9: ( (k+= INHERIT | k+= NO_INHERIT ) )
	            // XQueryParser.g:284:11: (k+= INHERIT | k+= NO_INHERIT )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:284:11: (k+= INHERIT | k+= NO_INHERIT )
	            var alt15=2;
	            var LA15_0 = this.input.LA(1);

	            if ( (LA15_0==INHERIT) ) {
	                alt15=1;
	            }
	            else if ( (LA15_0==NO_INHERIT) ) {
	                alt15=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 15, 0, this.input);

	                throw nvae;
	            }
	            switch (alt15) {
	                case 1 :
	                    // XQueryParser.g:284:12: k+= INHERIT
	                    k=this.match(this.input,INHERIT,XQueryParser.FOLLOW_INHERIT_in_p_InheritMode1899); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:284:25: k+= NO_INHERIT
	                    k=this.match(this.input,NO_INHERIT,XQueryParser.FOLLOW_NO_INHERIT_in_p_InheritMode1905); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_DecimalFormatDecl_return: (function() {
	        XQueryParser.pm_DecimalFormatDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_DecimalFormatDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:288:1: pm_DecimalFormatDecl : k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON ;
	    // $ANTLR start "pm_DecimalFormatDecl"
	    pm_DecimalFormatDecl: function() {
	        var retval = new XQueryParser.pm_DecimalFormatDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var EQUAL36 = null;
	        var SEMICOLON38 = null;
	         var p_QName34 = null;
	         var p_DFPropertyName35 = null;
	         var p_StringLiteral37 = null;

	        var k_tree=null;
	        var EQUAL36_tree=null;
	        var SEMICOLON38_tree=null;

	        try {
	            // XQueryParser.g:289:9: (k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON )
	            // XQueryParser.g:289:11: k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_DecimalFormatDecl1944); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:289:36: ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) )
	            var alt16=2;
	            var LA16_0 = this.input.LA(1);

	            if ( (LA16_0==DECIMAL_FORMAT) ) {
	                alt16=1;
	            }
	            else if ( (LA16_0==DEFAULT) ) {
	                alt16=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 16, 0, this.input);

	                throw nvae;
	            }
	            switch (alt16) {
	                case 1 :
	                    // XQueryParser.g:289:37: (k= DECIMAL_FORMAT p_QName )
	                    // XQueryParser.g:289:37: (k= DECIMAL_FORMAT p_QName )
	                    // XQueryParser.g:289:38: k= DECIMAL_FORMAT p_QName
	                    k=this.match(this.input,DECIMAL_FORMAT,XQueryParser.FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1952); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_pm_DecimalFormatDecl1956);
	                    p_QName34=this.p_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName34.getTree());





	                    break;
	                case 2 :
	                    // XQueryParser.g:289:81: (k= DEFAULT k= DECIMAL_FORMAT )
	                    // XQueryParser.g:289:81: (k= DEFAULT k= DECIMAL_FORMAT )
	                    // XQueryParser.g:289:82: k= DEFAULT k= DECIMAL_FORMAT
	                    k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_pm_DecimalFormatDecl1964); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    k=this.match(this.input,DECIMAL_FORMAT,XQueryParser.FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1970); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }





	                    break;

	            }

	            // XQueryParser.g:289:141: ( p_DFPropertyName EQUAL p_StringLiteral )*
	            loop17:
	            do {
	                var alt17=2;
	                var LA17_0 = this.input.LA(1);

	                if ( (LA17_0==DECIMAL_SEPARATOR||LA17_0==DIGIT||(LA17_0>=GROUPING_SEPARATOR && LA17_0<=MINUS_SIGN)||LA17_0==NAN||(LA17_0>=PATTERN_SEPARATOR && LA17_0<=PER_MILLE)||LA17_0==ZERO_DIGIT) ) {
	                    alt17=1;
	                }


	                switch (alt17) {
	                case 1 :
	                    // XQueryParser.g:289:142: p_DFPropertyName EQUAL p_StringLiteral
	                    this.pushFollow(XQueryParser.FOLLOW_p_DFPropertyName_in_pm_DecimalFormatDecl1977);
	                    p_DFPropertyName35=this.p_DFPropertyName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DFPropertyName35.getTree());
	                    EQUAL36=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_pm_DecimalFormatDecl1979); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    EQUAL36_tree = this.adaptor.create(EQUAL36);
	                    this.adaptor.addChild(root_0, EQUAL36_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_DecimalFormatDecl1981);
	                    p_StringLiteral37=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral37.getTree());


	                    break;

	                default :
	                    break loop17;
	                }
	            } while (true);

	            SEMICOLON38=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_DecimalFormatDecl1985); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON38_tree = this.adaptor.create(SEMICOLON38);
	            this.adaptor.addChild(root_0, SEMICOLON38_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_DFPropertyName_return: (function() {
	        XQueryParser.p_DFPropertyName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_DFPropertyName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:293:1: p_DFPropertyName : (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR ) ;
	    // $ANTLR start "p_DFPropertyName"
	    p_DFPropertyName: function() {
	        var retval = new XQueryParser.p_DFPropertyName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:294:9: ( (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR ) )
	            // XQueryParser.g:294:11: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:294:11: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
	            var alt18=10;
	            switch ( this.input.LA(1) ) {
	            case DECIMAL_SEPARATOR:
	                alt18=1;
	                break;
	            case GROUPING_SEPARATOR:
	                alt18=2;
	                break;
	            case INFINITY:
	                alt18=3;
	                break;
	            case MINUS_SIGN:
	                alt18=4;
	                break;
	            case NAN:
	                alt18=5;
	                break;
	            case PERCENT:
	                alt18=6;
	                break;
	            case PER_MILLE:
	                alt18=7;
	                break;
	            case ZERO_DIGIT:
	                alt18=8;
	                break;
	            case DIGIT:
	                alt18=9;
	                break;
	            case PATTERN_SEPARATOR:
	                alt18=10;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 18, 0, this.input);

	                throw nvae;
	            }

	            switch (alt18) {
	                case 1 :
	                    // XQueryParser.g:294:12: k= DECIMAL_SEPARATOR
	                    k=this.match(this.input,DECIMAL_SEPARATOR,XQueryParser.FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2014); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:294:34: k= GROUPING_SEPARATOR
	                    k=this.match(this.input,GROUPING_SEPARATOR,XQueryParser.FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2020); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 3 :
	                    // XQueryParser.g:294:57: k= INFINITY
	                    k=this.match(this.input,INFINITY,XQueryParser.FOLLOW_INFINITY_in_p_DFPropertyName2026); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 4 :
	                    // XQueryParser.g:294:70: k= MINUS_SIGN
	                    k=this.match(this.input,MINUS_SIGN,XQueryParser.FOLLOW_MINUS_SIGN_in_p_DFPropertyName2032); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 5 :
	                    // XQueryParser.g:294:85: k= NAN
	                    k=this.match(this.input,NAN,XQueryParser.FOLLOW_NAN_in_p_DFPropertyName2038); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 6 :
	                    // XQueryParser.g:294:93: k= PERCENT
	                    k=this.match(this.input,PERCENT,XQueryParser.FOLLOW_PERCENT_in_p_DFPropertyName2044); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 7 :
	                    // XQueryParser.g:294:105: k= PER_MILLE
	                    k=this.match(this.input,PER_MILLE,XQueryParser.FOLLOW_PER_MILLE_in_p_DFPropertyName2050); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 8 :
	                    // XQueryParser.g:294:119: k= ZERO_DIGIT
	                    k=this.match(this.input,ZERO_DIGIT,XQueryParser.FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2056); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 9 :
	                    // XQueryParser.g:294:134: k= DIGIT
	                    k=this.match(this.input,DIGIT,XQueryParser.FOLLOW_DIGIT_in_p_DFPropertyName2062); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 10 :
	                    // XQueryParser.g:294:144: k= PATTERN_SEPARATOR
	                    k=this.match(this.input,PATTERN_SEPARATOR,XQueryParser.FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2068); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Import_return: (function() {
	        XQueryParser.p_Import_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Import_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:298:1: p_Import : ( pm_SchemaImport | pm_ModuleImport );
	    // $ANTLR start "p_Import"
	    p_Import: function() {
	        var retval = new XQueryParser.p_Import_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var pm_SchemaImport39 = null;
	         var pm_ModuleImport40 = null;


	        try {
	            // XQueryParser.g:299:9: ( pm_SchemaImport | pm_ModuleImport )
	            var alt19=2;
	            var LA19_0 = this.input.LA(1);

	            if ( (LA19_0==IMPORT) ) {
	                var LA19_1 = this.input.LA(2);

	                if ( (LA19_1==SCHEMA) ) {
	                    alt19=1;
	                }
	                else if ( (LA19_1==MODULE) ) {
	                    alt19=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 19, 1, this.input);

	                    throw nvae;
	                }
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 19, 0, this.input);

	                throw nvae;
	            }
	            switch (alt19) {
	                case 1 :
	                    // XQueryParser.g:299:11: pm_SchemaImport
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_SchemaImport_in_p_Import2097);
	                    pm_SchemaImport39=this.pm_SchemaImport();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_SchemaImport39.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:299:29: pm_ModuleImport
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_ModuleImport_in_p_Import2101);
	                    pm_ModuleImport40=this.pm_ModuleImport();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_ModuleImport40.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_SchemaImport_return: (function() {
	        XQueryParser.pm_SchemaImport_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_SchemaImport_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:303:1: pm_SchemaImport : k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) ;
	    // $ANTLR start "pm_SchemaImport"
	    pm_SchemaImport: function() {
	        var retval = new XQueryParser.pm_SchemaImport_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var COMMA41 = null;
	        var SEMICOLON42 = null;
	        var list_ah=null;
	         var sp = null;
	         var us = null;
	        var ah = null;
	        var k_tree=null;
	        var COMMA41_tree=null;
	        var SEMICOLON42_tree=null;
	        var stream_AT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token AT");
	        var stream_IMPORT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IMPORT");
	        var stream_SCHEMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SCHEMA");
	        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
	        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
	        var stream_p_SchemaPrefix=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_SchemaPrefix");
	        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
	        try {
	            // XQueryParser.g:304:9: (k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) )
	            // XQueryParser.g:304:11: k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
	            k=this.match(this.input,IMPORT,XQueryParser.FOLLOW_IMPORT_in_pm_SchemaImport2137); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_IMPORT.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,SCHEMA,XQueryParser.FOLLOW_SCHEMA_in_pm_SchemaImport2143); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_SCHEMA.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:304:61: (sp= p_SchemaPrefix )?
	            var alt20=2;
	            var LA20_0 = this.input.LA(1);

	            if ( (LA20_0==DEFAULT||LA20_0==NAMESPACE) ) {
	                alt20=1;
	            }
	            switch (alt20) {
	                case 1 :
	                    // XQueryParser.g:304:61: sp= p_SchemaPrefix
	                    this.pushFollow(XQueryParser.FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2149);
	                    sp=this.p_SchemaPrefix();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_SchemaPrefix.add(sp.getTree());


	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_SchemaImport2154);
	            us=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(us.getTree());
	            // XQueryParser.g:304:97: (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
	            var alt22=2;
	            var LA22_0 = this.input.LA(1);

	            if ( (LA22_0==AT) ) {
	                alt22=1;
	            }
	            switch (alt22) {
	                case 1 :
	                    // XQueryParser.g:304:98: k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
	                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_pm_SchemaImport2159); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_AT.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_SchemaImport2165);
	                    ah=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ah.getTree());
	                    if (org.antlr.lang.isNull(list_ah)) list_ah = [];
	                    list_ah.push(ah.getTree());

	                    // XQueryParser.g:304:138: ( COMMA ah+= p_StringLiteral )*
	                    loop21:
	                    do {
	                        var alt21=2;
	                        var LA21_0 = this.input.LA(1);

	                        if ( (LA21_0==COMMA) ) {
	                            alt21=1;
	                        }


	                        switch (alt21) {
	                        case 1 :
	                            // XQueryParser.g:304:139: COMMA ah+= p_StringLiteral
	                            COMMA41=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_pm_SchemaImport2168); if (this.state.failed) return retval; 
	                            if ( this.state.backtracking===0 ) stream_COMMA.add(COMMA41);

	                            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_SchemaImport2172);
	                            ah=this.p_StringLiteral();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ah.getTree());
	                            if (org.antlr.lang.isNull(list_ah)) list_ah = [];
	                            list_ah.push(ah.getTree());



	                            break;

	                        default :
	                            break loop21;
	                        }
	                    } while (true);



	                    break;

	            }

	            SEMICOLON42=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_SchemaImport2178); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON42);



	            // AST REWRITE
	            // elements: ah, sp, us
	            // token labels: 
	            // rule labels: retval, sp, us
	            // token list labels: 
	            // rule list labels: ah
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_sp=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token sp",sp!=null?sp.tree:null);
	            var stream_us=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token us",us!=null?us.tree:null);
	            var stream_ah=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token ah",list_ah);
	            root_0 = this.adaptor.nil();
	            // 305:17: -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
	            {
	                // XQueryParser.g:305:20: ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(SchemaImport, "SchemaImport"), root_1);

	                // XQueryParser.g:305:35: ^( SchemaPrefix ( $sp)? )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(SchemaPrefix, "SchemaPrefix"), root_2);

	                // XQueryParser.g:305:50: ( $sp)?
	                if ( stream_sp.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_sp.nextTree());

	                }
	                stream_sp.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                this.adaptor.addChild(root_1, stream_us.nextTree());
	                // XQueryParser.g:305:60: ^( AtHints ( $ah)* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(AtHints, "AtHints"), root_2);

	                // XQueryParser.g:305:70: ( $ah)*
	                while ( stream_ah.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_ah.nextTree());

	                }
	                stream_ah.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SchemaPrefix_return: (function() {
	        XQueryParser.p_SchemaPrefix_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SchemaPrefix_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:309:1: p_SchemaPrefix : (k= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k= DEFAULT k= ELEMENT k= NAMESPACE -> DefaultElementNamespace );
	    // $ANTLR start "p_SchemaPrefix"
	    p_SchemaPrefix: function() {
	        var retval = new XQueryParser.p_SchemaPrefix_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var EQUAL43 = null;
	         var nn = null;

	        var k_tree=null;
	        var EQUAL43_tree=null;
	        var stream_ELEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ELEMENT");
	        var stream_NAMESPACE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NAMESPACE");
	        var stream_EQUAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUAL");
	        var stream_DEFAULT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DEFAULT");
	        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
	        try {
	            // XQueryParser.g:310:9: (k= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k= DEFAULT k= ELEMENT k= NAMESPACE -> DefaultElementNamespace )
	            var alt23=2;
	            var LA23_0 = this.input.LA(1);

	            if ( (LA23_0==NAMESPACE) ) {
	                alt23=1;
	            }
	            else if ( (LA23_0==DEFAULT) ) {
	                alt23=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 23, 0, this.input);

	                throw nvae;
	            }
	            switch (alt23) {
	                case 1 :
	                    // XQueryParser.g:310:11: k= NAMESPACE nn= p_NCName EQUAL
	                    k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_p_SchemaPrefix2248); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_SchemaPrefix2254);
	                    nn=this.p_NCName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_NCName.add(nn.getTree());
	                    EQUAL43=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_p_SchemaPrefix2256); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_EQUAL.add(EQUAL43);



	                    // AST REWRITE
	                    // elements: nn
	                    // token labels: 
	                    // rule labels: retval, nn
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	                    var stream_nn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nn",nn!=null?nn.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 311:17: -> ^( NamespaceName $nn)
	                    {
	                        // XQueryParser.g:311:20: ^( NamespaceName $nn)
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(NamespaceName, "NamespaceName"), root_1);

	                        this.adaptor.addChild(root_1, stream_nn.nextTree());

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;
	                case 2 :
	                    // XQueryParser.g:312:11: k= DEFAULT k= ELEMENT k= NAMESPACE
	                    k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_SchemaPrefix2295); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_DEFAULT.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    k=this.match(this.input,ELEMENT,XQueryParser.FOLLOW_ELEMENT_in_p_SchemaPrefix2301); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_ELEMENT.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_p_SchemaPrefix2307); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }


	                    // AST REWRITE
	                    // elements: 
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 313:17: -> DefaultElementNamespace
	                    {
	                        this.adaptor.addChild(root_0, this.adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));

	                    }

	                    retval.tree = root_0;}

	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_ModuleImport_return: (function() {
	        XQueryParser.pm_ModuleImport_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_ModuleImport_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:317:1: pm_ModuleImport : k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) ;
	    // $ANTLR start "pm_ModuleImport"
	    pm_ModuleImport: function() {
	        var retval = new XQueryParser.pm_ModuleImport_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var EQUAL44 = null;
	        var COMMA45 = null;
	        var SEMICOLON46 = null;
	        var list_ah=null;
	         var nn = null;
	         var us = null;
	        var ah = null;
	        var k_tree=null;
	        var EQUAL44_tree=null;
	        var COMMA45_tree=null;
	        var SEMICOLON46_tree=null;
	        var stream_AT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token AT");
	        var stream_IMPORT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IMPORT");
	        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
	        var stream_MODULE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token MODULE");
	        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
	        var stream_NAMESPACE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NAMESPACE");
	        var stream_EQUAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUAL");
	        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
	        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
	        try {
	            // XQueryParser.g:318:9: (k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) )
	            // XQueryParser.g:318:11: k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
	            k=this.match(this.input,IMPORT,XQueryParser.FOLLOW_IMPORT_in_pm_ModuleImport2357); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_IMPORT.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,MODULE,XQueryParser.FOLLOW_MODULE_in_pm_ModuleImport2363); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_MODULE.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:318:59: (k= NAMESPACE nn= p_NCName EQUAL )?
	            var alt24=2;
	            var LA24_0 = this.input.LA(1);

	            if ( (LA24_0==NAMESPACE) ) {
	                alt24=1;
	            }
	            switch (alt24) {
	                case 1 :
	                    // XQueryParser.g:318:60: k= NAMESPACE nn= p_NCName EQUAL
	                    k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_pm_ModuleImport2370); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pm_ModuleImport2376);
	                    nn=this.p_NCName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_NCName.add(nn.getTree());
	                    EQUAL44=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_pm_ModuleImport2378); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_EQUAL.add(EQUAL44);



	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_ModuleImport2384);
	            us=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(us.getTree());
	            // XQueryParser.g:318:126: (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
	            var alt26=2;
	            var LA26_0 = this.input.LA(1);

	            if ( (LA26_0==AT) ) {
	                alt26=1;
	            }
	            switch (alt26) {
	                case 1 :
	                    // XQueryParser.g:318:127: k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
	                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_pm_ModuleImport2389); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_AT.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_ModuleImport2395);
	                    ah=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ah.getTree());
	                    if (org.antlr.lang.isNull(list_ah)) list_ah = [];
	                    list_ah.push(ah.getTree());

	                    // XQueryParser.g:318:167: ( COMMA ah+= p_StringLiteral )*
	                    loop25:
	                    do {
	                        var alt25=2;
	                        var LA25_0 = this.input.LA(1);

	                        if ( (LA25_0==COMMA) ) {
	                            alt25=1;
	                        }


	                        switch (alt25) {
	                        case 1 :
	                            // XQueryParser.g:318:168: COMMA ah+= p_StringLiteral
	                            COMMA45=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_pm_ModuleImport2398); if (this.state.failed) return retval; 
	                            if ( this.state.backtracking===0 ) stream_COMMA.add(COMMA45);

	                            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_ModuleImport2402);
	                            ah=this.p_StringLiteral();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ah.getTree());
	                            if (org.antlr.lang.isNull(list_ah)) list_ah = [];
	                            list_ah.push(ah.getTree());



	                            break;

	                        default :
	                            break loop25;
	                        }
	                    } while (true);



	                    break;

	            }

	            SEMICOLON46=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_ModuleImport2408); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON46);



	            // AST REWRITE
	            // elements: nn, ah, us
	            // token labels: 
	            // rule labels: retval, nn, us
	            // token list labels: 
	            // rule list labels: ah
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_nn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nn",nn!=null?nn.tree:null);
	            var stream_us=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token us",us!=null?us.tree:null);
	            var stream_ah=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token ah",list_ah);
	            root_0 = this.adaptor.nil();
	            // 319:17: -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
	            {
	                // XQueryParser.g:319:20: ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(ModuleImport, "ModuleImport"), root_1);

	                // XQueryParser.g:319:35: ^( NamespaceName ( $nn)? )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(NamespaceName, "NamespaceName"), root_2);

	                // XQueryParser.g:319:51: ( $nn)?
	                if ( stream_nn.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_nn.nextTree());

	                }
	                stream_nn.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                this.adaptor.addChild(root_1, stream_us.nextTree());
	                // XQueryParser.g:319:61: ^( AtHints ( $ah)* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(AtHints, "AtHints"), root_2);

	                // XQueryParser.g:319:71: ( $ah)*
	                while ( stream_ah.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_ah.nextTree());

	                }
	                stream_ah.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_NamespaceDecl_return: (function() {
	        XQueryParser.pm_NamespaceDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_NamespaceDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:323:1: pm_NamespaceDecl : k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) ;
	    // $ANTLR start "pm_NamespaceDecl"
	    pm_NamespaceDecl: function() {
	        var retval = new XQueryParser.pm_NamespaceDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var EQUAL47 = null;
	        var SEMICOLON48 = null;
	         var nn = null;
	         var us = null;

	        var k_tree=null;
	        var EQUAL47_tree=null;
	        var SEMICOLON48_tree=null;
	        var stream_DECLARE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DECLARE");
	        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
	        var stream_NAMESPACE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NAMESPACE");
	        var stream_EQUAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUAL");
	        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
	        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
	        try {
	            // XQueryParser.g:324:9: (k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) )
	            // XQueryParser.g:324:11: k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON
	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_NamespaceDecl2477); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_DECLARE.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_pm_NamespaceDecl2483); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pm_NamespaceDecl2489);
	            nn=this.p_NCName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_NCName.add(nn.getTree());
	            EQUAL47=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_pm_NamespaceDecl2491); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_EQUAL.add(EQUAL47);

	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_NamespaceDecl2495);
	            us=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(us.getTree());
	            SEMICOLON48=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_NamespaceDecl2497); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON48);



	            // AST REWRITE
	            // elements: us, nn
	            // token labels: 
	            // rule labels: retval, nn, us
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_nn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nn",nn!=null?nn.tree:null);
	            var stream_us=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token us",us!=null?us.tree:null);

	            root_0 = this.adaptor.nil();
	            // 325:17: -> ^( NamespaceDecl $nn $us)
	            {
	                // XQueryParser.g:325:20: ^( NamespaceDecl $nn $us)
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(NamespaceDecl, "NamespaceDecl"), root_1);

	                this.adaptor.addChild(root_1, stream_nn.nextTree());
	                this.adaptor.addChild(root_1, stream_us.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_DefaultNamespaceDecl_return: (function() {
	        XQueryParser.pm_DefaultNamespaceDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_DefaultNamespaceDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:329:1: pm_DefaultNamespaceDecl : k= DECLARE k= DEFAULT (k= ELEMENT | k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON ;
	    // $ANTLR start "pm_DefaultNamespaceDecl"
	    pm_DefaultNamespaceDecl: function() {
	        var retval = new XQueryParser.pm_DefaultNamespaceDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON50 = null;
	         var p_StringLiteral49 = null;

	        var k_tree=null;
	        var SEMICOLON50_tree=null;

	        try {
	            // XQueryParser.g:330:9: (k= DECLARE k= DEFAULT (k= ELEMENT | k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON )
	            // XQueryParser.g:330:11: k= DECLARE k= DEFAULT (k= ELEMENT | k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl2554); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl2560); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:330:61: (k= ELEMENT | k= FUNCTION )
	            var alt27=2;
	            var LA27_0 = this.input.LA(1);

	            if ( (LA27_0==ELEMENT) ) {
	                alt27=1;
	            }
	            else if ( (LA27_0==FUNCTION) ) {
	                alt27=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 27, 0, this.input);

	                throw nvae;
	            }
	            switch (alt27) {
	                case 1 :
	                    // XQueryParser.g:330:62: k= ELEMENT
	                    k=this.match(this.input,ELEMENT,XQueryParser.FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl2567); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:330:74: k= FUNCTION
	                    k=this.match(this.input,FUNCTION,XQueryParser.FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl2573); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl2580); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl2584);
	            p_StringLiteral49=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral49.getTree());
	            SEMICOLON50=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl2586); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON50_tree = this.adaptor.create(SEMICOLON50);
	            this.adaptor.addChild(root_0, SEMICOLON50_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_AnnotatedDecl_return: (function() {
	        XQueryParser.pm_AnnotatedDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_AnnotatedDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:334:1: pm_AnnotatedDecl : k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON ;
	    // $ANTLR start "pm_AnnotatedDecl"
	    pm_AnnotatedDecl: function() {
	        var retval = new XQueryParser.pm_AnnotatedDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON53 = null;
	         var p_Annotation51 = null;
	         var pg_AnnotatedDecl52 = null;

	        var k_tree=null;
	        var SEMICOLON53_tree=null;

	        try {
	            // XQueryParser.g:335:9: (k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON )
	            // XQueryParser.g:335:11: k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_AnnotatedDecl2614); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:335:36: ( p_Annotation )*
	            loop28:
	            do {
	                var alt28=2;
	                var LA28_0 = this.input.LA(1);

	                if ( (LA28_0==ANN_PERCENT) ) {
	                    alt28=1;
	                }


	                switch (alt28) {
	                case 1 :
	                    // XQueryParser.g:335:36: p_Annotation
	                    this.pushFollow(XQueryParser.FOLLOW_p_Annotation_in_pm_AnnotatedDecl2618);
	                    p_Annotation51=this.p_Annotation();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Annotation51.getTree());


	                    break;

	                default :
	                    break loop28;
	                }
	            } while (true);

	            this.pushFollow(XQueryParser.FOLLOW_pg_AnnotatedDecl_in_pm_AnnotatedDecl2621);
	            pg_AnnotatedDecl52=this.pg_AnnotatedDecl();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_AnnotatedDecl52.getTree());
	            SEMICOLON53=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_AnnotatedDecl2623); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON53_tree = this.adaptor.create(SEMICOLON53);
	            this.adaptor.addChild(root_0, SEMICOLON53_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pg_AnnotatedDecl_return: (function() {
	        XQueryParser.pg_AnnotatedDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pg_AnnotatedDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:337:1: pg_AnnotatedDecl : ( p_VarDecl | pm_FunctionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl );
	    // $ANTLR start "pg_AnnotatedDecl"
	    pg_AnnotatedDecl: function() {
	        var retval = new XQueryParser.pg_AnnotatedDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_VarDecl54 = null;
	         var pm_FunctionDecl55 = null;
	         var p_CollectionDecl56 = null;
	         var p_IndexDecl57 = null;
	         var p_ICDecl58 = null;


	        try {
	            // XQueryParser.g:338:9: ( p_VarDecl | pm_FunctionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )
	            var alt29=5;
	            var LA29_0 = this.input.LA(1);

	            if ( (LA29_0==VARIABLE) ) {
	                alt29=1;
	            }
	            else if ( (LA29_0==UPDATING) && ((this.lc(XQU)))) {
	                alt29=2;
	            }
	            else if ( (LA29_0==FUNCTION) ) {
	                alt29=2;
	            }
	            else if ( (LA29_0==COLLECTION) && ((this.lc(ZORBA)))) {
	                alt29=3;
	            }
	            else if ( (LA29_0==INDEX) && ((this.lc(ZORBA)))) {
	                alt29=4;
	            }
	            else if ( (LA29_0==INTEGRITY) && ((this.lc(ZORBA)))) {
	                alt29=5;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 29, 0, this.input);

	                throw nvae;
	            }
	            switch (alt29) {
	                case 1 :
	                    // XQueryParser.g:338:11: p_VarDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_VarDecl_in_pg_AnnotatedDecl2647);
	                    p_VarDecl54=this.p_VarDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarDecl54.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:339:11: pm_FunctionDecl
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_FunctionDecl_in_pg_AnnotatedDecl2659);
	                    pm_FunctionDecl55=this.pm_FunctionDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_FunctionDecl55.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:340:11: {...}? => p_CollectionDecl
	                    root_0 = this.adaptor.nil();

	                    if ( !((this.lc(ZORBA))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pg_AnnotatedDecl", "this.lc(ZORBA)");
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_CollectionDecl_in_pg_AnnotatedDecl2674);
	                    p_CollectionDecl56=this.p_CollectionDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CollectionDecl56.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:341:11: {...}? => p_IndexDecl
	                    root_0 = this.adaptor.nil();

	                    if ( !((this.lc(ZORBA))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pg_AnnotatedDecl", "this.lc(ZORBA)");
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_IndexDecl_in_pg_AnnotatedDecl2689);
	                    p_IndexDecl57=this.p_IndexDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexDecl57.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:342:11: {...}? => p_ICDecl
	                    root_0 = this.adaptor.nil();

	                    if ( !((this.lc(ZORBA))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pg_AnnotatedDecl", "this.lc(ZORBA)");
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_ICDecl_in_pg_AnnotatedDecl2704);
	                    p_ICDecl58=this.p_ICDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICDecl58.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Annotation_return: (function() {
	        XQueryParser.p_Annotation_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Annotation_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:346:1: p_Annotation : ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )? ;
	    // $ANTLR start "p_Annotation"
	    p_Annotation: function() {
	        var retval = new XQueryParser.p_Annotation_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ANN_PERCENT59 = null;
	        var LPAREN61 = null;
	        var COMMA63 = null;
	        var RPAREN65 = null;
	         var p_QName60 = null;
	         var p_Literal62 = null;
	         var p_Literal64 = null;

	        var ANN_PERCENT59_tree=null;
	        var LPAREN61_tree=null;
	        var COMMA63_tree=null;
	        var RPAREN65_tree=null;

	        try {
	            // XQueryParser.g:347:9: ( ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )? )
	            // XQueryParser.g:347:11: ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )?
	            root_0 = this.adaptor.nil();

	            ANN_PERCENT59=this.match(this.input,ANN_PERCENT,XQueryParser.FOLLOW_ANN_PERCENT_in_p_Annotation2730); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            ANN_PERCENT59_tree = this.adaptor.create(ANN_PERCENT59);
	            this.adaptor.addChild(root_0, ANN_PERCENT59_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_Annotation2732);
	            p_QName60=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName60.getTree());
	            // XQueryParser.g:347:31: ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )?
	            var alt31=2;
	            var LA31_0 = this.input.LA(1);

	            if ( (LA31_0==LPAREN) ) {
	                alt31=1;
	            }
	            switch (alt31) {
	                case 1 :
	                    // XQueryParser.g:347:32: LPAREN p_Literal ( COMMA p_Literal )* RPAREN
	                    LPAREN61=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_Annotation2735); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    LPAREN61_tree = this.adaptor.create(LPAREN61);
	                    this.adaptor.addChild(root_0, LPAREN61_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_Literal_in_p_Annotation2737);
	                    p_Literal62=this.p_Literal();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Literal62.getTree());
	                    // XQueryParser.g:347:49: ( COMMA p_Literal )*
	                    loop30:
	                    do {
	                        var alt30=2;
	                        var LA30_0 = this.input.LA(1);

	                        if ( (LA30_0==COMMA) ) {
	                            alt30=1;
	                        }


	                        switch (alt30) {
	                        case 1 :
	                            // XQueryParser.g:347:50: COMMA p_Literal
	                            COMMA63=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_Annotation2740); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            COMMA63_tree = this.adaptor.create(COMMA63);
	                            this.adaptor.addChild(root_0, COMMA63_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_Literal_in_p_Annotation2742);
	                            p_Literal64=this.p_Literal();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Literal64.getTree());


	                            break;

	                        default :
	                            break loop30;
	                        }
	                    } while (true);

	                    RPAREN65=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_Annotation2746); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    RPAREN65_tree = this.adaptor.create(RPAREN65);
	                    this.adaptor.addChild(root_0, RPAREN65_tree);
	                    }


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_VarDecl_return: (function() {
	        XQueryParser.p_VarDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_VarDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:351:1: p_VarDecl : k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) ) -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) ) ;
	    // $ANTLR start "p_VarDecl"
	    p_VarDecl: function() {
	        var retval = new XQueryParser.p_VarDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR66 = null;
	        var BIND67 = null;
	        var BIND68 = null;
	         var qn = null;
	         var td = null;
	         var vv = null;
	         var vdv = null;

	        var k_tree=null;
	        var DOLLAR66_tree=null;
	        var BIND67_tree=null;
	        var BIND68_tree=null;
	        var stream_DOLLAR=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DOLLAR");
	        var stream_EXTERNAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EXTERNAL");
	        var stream_VARIABLE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token VARIABLE");
	        var stream_BIND=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token BIND");
	        var stream_p_TypeDeclaration=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_TypeDeclaration");
	        var stream_p_QName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QName");
	        var stream_p_VarDefaultValue=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_VarDefaultValue");
	        var stream_p_VarValue=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_VarValue");
	        try {
	            // XQueryParser.g:352:9: (k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) ) -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) ) )
	            // XQueryParser.g:352:11: k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) )
	            k=this.match(this.input,VARIABLE,XQueryParser.FOLLOW_VARIABLE_in_p_VarDecl2776); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_VARIABLE.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR66=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_VarDecl2780); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_DOLLAR.add(DOLLAR66);

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_VarDecl2784);
	            qn=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_QName.add(qn.getTree());
	            // XQueryParser.g:352:57: (td= p_TypeDeclaration )?
	            var alt32=2;
	            var LA32_0 = this.input.LA(1);

	            if ( (LA32_0==AS) ) {
	                alt32=1;
	            }
	            switch (alt32) {
	                case 1 :
	                    // XQueryParser.g:352:57: td= p_TypeDeclaration
	                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_VarDecl2788);
	                    td=this.p_TypeDeclaration();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_TypeDeclaration.add(td.getTree());


	                    break;

	            }

	            // XQueryParser.g:352:77: ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) )
	            var alt34=2;
	            var LA34_0 = this.input.LA(1);

	            if ( (LA34_0==BIND) ) {
	                alt34=1;
	            }
	            else if ( (LA34_0==EXTERNAL) ) {
	                alt34=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 34, 0, this.input);

	                throw nvae;
	            }
	            switch (alt34) {
	                case 1 :
	                    // XQueryParser.g:352:78: ( BIND vv= p_VarValue )
	                    // XQueryParser.g:352:78: ( BIND vv= p_VarValue )
	                    // XQueryParser.g:352:79: BIND vv= p_VarValue
	                    BIND67=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_VarDecl2793); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_BIND.add(BIND67);

	                    this.pushFollow(XQueryParser.FOLLOW_p_VarValue_in_p_VarDecl2797);
	                    vv=this.p_VarValue();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_VarValue.add(vv.getTree());





	                    break;
	                case 2 :
	                    // XQueryParser.g:352:101: (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? )
	                    // XQueryParser.g:352:101: (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? )
	                    // XQueryParser.g:352:102: k= EXTERNAL ( BIND vdv= p_VarDefaultValue )?
	                    k=this.match(this.input,EXTERNAL,XQueryParser.FOLLOW_EXTERNAL_in_p_VarDecl2805); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_EXTERNAL.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    // XQueryParser.g:352:128: ( BIND vdv= p_VarDefaultValue )?
	                    var alt33=2;
	                    var LA33_0 = this.input.LA(1);

	                    if ( (LA33_0==BIND) ) {
	                        alt33=1;
	                    }
	                    switch (alt33) {
	                        case 1 :
	                            // XQueryParser.g:352:129: BIND vdv= p_VarDefaultValue
	                            BIND68=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_VarDecl2810); if (this.state.failed) return retval; 
	                            if ( this.state.backtracking===0 ) stream_BIND.add(BIND68);

	                            this.pushFollow(XQueryParser.FOLLOW_p_VarDefaultValue_in_p_VarDecl2814);
	                            vdv=this.p_VarDefaultValue();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_p_VarDefaultValue.add(vdv.getTree());


	                            break;

	                    }






	                    break;

	            }



	            // AST REWRITE
	            // elements: vdv, td, qn, vv
	            // token labels: 
	            // rule labels: qn, vv, retval, vdv, td
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_qn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token qn",qn!=null?qn.tree:null);
	            var stream_vv=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token vv",vv!=null?vv.tree:null);
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_vdv=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token vdv",vdv!=null?vdv.tree:null);
	            var stream_td=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token td",td!=null?td.tree:null);

	            root_0 = this.adaptor.nil();
	            // 353:17: -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) )
	            {
	                // XQueryParser.g:353:20: ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(VarDecl, "VarDecl"), root_1);

	                this.adaptor.addChild(root_1, stream_qn.nextTree());
	                // XQueryParser.g:353:34: ^( VarType ( $td)? )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(VarType, "VarType"), root_2);

	                // XQueryParser.g:353:44: ( $td)?
	                if ( stream_td.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_td.nextTree());

	                }
	                stream_td.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:353:50: ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(VarValue, "VarValue"), root_2);

	                // XQueryParser.g:353:61: ( $vv)?
	                if ( stream_vv.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_vv.nextTree());

	                }
	                stream_vv.reset();
	                // XQueryParser.g:353:66: ^( VarDefaultValue ( $vdv)? )
	                {
	                var root_3 = this.adaptor.nil();
	                root_3 = this.adaptor.becomeRoot(this.adaptor.create(VarDefaultValue, "VarDefaultValue"), root_3);

	                // XQueryParser.g:353:84: ( $vdv)?
	                if ( stream_vdv.hasNext() ) {
	                    this.adaptor.addChild(root_3, stream_vdv.nextTree());

	                }
	                stream_vdv.reset();

	                this.adaptor.addChild(root_2, root_3);
	                }

	                this.adaptor.addChild(root_1, root_2);
	                }

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_VarValue_return: (function() {
	        XQueryParser.p_VarValue_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_VarValue_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:357:1: p_VarValue : p_ExprSingle[true] ;
	    // $ANTLR start "p_VarValue"
	    p_VarValue: function() {
	        var retval = new XQueryParser.p_VarValue_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ExprSingle69 = null;


	        try {
	            // XQueryParser.g:358:9: ( p_ExprSingle[true] )
	            // XQueryParser.g:358:11: p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_VarValue2893);
	            p_ExprSingle69=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle69.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_VarDefaultValue_return: (function() {
	        XQueryParser.p_VarDefaultValue_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_VarDefaultValue_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:362:1: p_VarDefaultValue : p_ExprSingle[true] ;
	    // $ANTLR start "p_VarDefaultValue"
	    p_VarDefaultValue: function() {
	        var retval = new XQueryParser.p_VarDefaultValue_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ExprSingle70 = null;


	        try {
	            // XQueryParser.g:363:9: ( p_ExprSingle[true] )
	            // XQueryParser.g:363:11: p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_VarDefaultValue2920);
	            p_ExprSingle70=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle70.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_ContextItemDecl_return: (function() {
	        XQueryParser.pm_ContextItemDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_ContextItemDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:367:1: pm_ContextItemDecl : k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON ;
	    // $ANTLR start "pm_ContextItemDecl"
	    pm_ContextItemDecl: function() {
	        var retval = new XQueryParser.pm_ContextItemDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var BIND72 = null;
	        var BIND74 = null;
	        var SEMICOLON76 = null;
	         var p_ItemType71 = null;
	         var p_VarValue73 = null;
	         var p_VarDefaultValue75 = null;

	        var k_tree=null;
	        var BIND72_tree=null;
	        var BIND74_tree=null;
	        var SEMICOLON76_tree=null;

	        try {
	            // XQueryParser.g:368:9: (k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON )
	            // XQueryParser.g:368:11: k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_ContextItemDecl2949); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,CONTEXT,XQueryParser.FOLLOW_CONTEXT_in_pm_ContextItemDecl2955); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,ITEM,XQueryParser.FOLLOW_ITEM_in_pm_ContextItemDecl2961); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:368:83: (k= AS p_ItemType )?
	            var alt35=2;
	            var LA35_0 = this.input.LA(1);

	            if ( (LA35_0==AS) ) {
	                alt35=1;
	            }
	            switch (alt35) {
	                case 1 :
	                    // XQueryParser.g:368:84: k= AS p_ItemType
	                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_pm_ContextItemDecl2968); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_ItemType_in_pm_ContextItemDecl2972);
	                    p_ItemType71=this.p_ItemType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ItemType71.getTree());


	                    break;

	            }

	            // XQueryParser.g:368:117: ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) )
	            var alt37=2;
	            var LA37_0 = this.input.LA(1);

	            if ( (LA37_0==BIND) ) {
	                alt37=1;
	            }
	            else if ( (LA37_0==EXTERNAL) ) {
	                alt37=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 37, 0, this.input);

	                throw nvae;
	            }
	            switch (alt37) {
	                case 1 :
	                    // XQueryParser.g:368:118: ( BIND p_VarValue )
	                    // XQueryParser.g:368:118: ( BIND p_VarValue )
	                    // XQueryParser.g:368:119: BIND p_VarValue
	                    BIND72=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_pm_ContextItemDecl2978); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    BIND72_tree = this.adaptor.create(BIND72);
	                    this.adaptor.addChild(root_0, BIND72_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_VarValue_in_pm_ContextItemDecl2980);
	                    p_VarValue73=this.p_VarValue();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarValue73.getTree());





	                    break;
	                case 2 :
	                    // XQueryParser.g:368:138: (k= EXTERNAL ( BIND p_VarDefaultValue )? )
	                    // XQueryParser.g:368:138: (k= EXTERNAL ( BIND p_VarDefaultValue )? )
	                    // XQueryParser.g:368:139: k= EXTERNAL ( BIND p_VarDefaultValue )?
	                    k=this.match(this.input,EXTERNAL,XQueryParser.FOLLOW_EXTERNAL_in_pm_ContextItemDecl2988); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    // XQueryParser.g:368:165: ( BIND p_VarDefaultValue )?
	                    var alt36=2;
	                    var LA36_0 = this.input.LA(1);

	                    if ( (LA36_0==BIND) ) {
	                        alt36=1;
	                    }
	                    switch (alt36) {
	                        case 1 :
	                            // XQueryParser.g:368:166: BIND p_VarDefaultValue
	                            BIND74=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_pm_ContextItemDecl2993); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            BIND74_tree = this.adaptor.create(BIND74);
	                            this.adaptor.addChild(root_0, BIND74_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_VarDefaultValue_in_pm_ContextItemDecl2995);
	                            p_VarDefaultValue75=this.p_VarDefaultValue();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarDefaultValue75.getTree());


	                            break;

	                    }






	                    break;

	            }

	            SEMICOLON76=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_ContextItemDecl3001); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON76_tree = this.adaptor.create(SEMICOLON76);
	            this.adaptor.addChild(root_0, SEMICOLON76_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_FunctionDecl_return: (function() {
	        XQueryParser.pm_FunctionDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_FunctionDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:373:1: pm_FunctionDecl : ({...}? =>k= UPDATING )? k= FUNCTION qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL ) -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? ) ;
	    // $ANTLR start "pm_FunctionDecl"
	    pm_FunctionDecl: function() {
	        var retval = new XQueryParser.pm_FunctionDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LPAREN77 = null;
	        var RPAREN78 = null;
	        var LBRACKET79 = null;
	        var RBRACKET80 = null;
	         var qn = null;
	         var pl = null;
	         var st = null;
	         var soe = null;

	        var k_tree=null;
	        var LPAREN77_tree=null;
	        var RPAREN78_tree=null;
	        var LBRACKET79_tree=null;
	        var RBRACKET80_tree=null;
	        var stream_FUNCTION=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token FUNCTION");
	        var stream_LBRACKET=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LBRACKET");
	        var stream_AS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token AS");
	        var stream_RPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RPAREN");
	        var stream_EXTERNAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EXTERNAL");
	        var stream_RBRACKET=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RBRACKET");
	        var stream_LPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LPAREN");
	        var stream_UPDATING=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token UPDATING");
	        var stream_p_StatementsAndOptionalExpr=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StatementsAndOptionalExpr");
	        var stream_p_ParamList=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_ParamList");
	        var stream_pg_FQName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pg_FQName");
	        var stream_p_SequenceType=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_SequenceType");
	        try {
	            // XQueryParser.g:374:9: ( ({...}? =>k= UPDATING )? k= FUNCTION qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL ) -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? ) )
	            // XQueryParser.g:374:11: ({...}? =>k= UPDATING )? k= FUNCTION qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL )
	            // XQueryParser.g:374:11: ({...}? =>k= UPDATING )?
	            var alt38=2;
	            var LA38_0 = this.input.LA(1);

	            if ( (LA38_0==UPDATING) && ((this.lc(XQU)))) {
	                alt38=1;
	            }
	            switch (alt38) {
	                case 1 :
	                    // XQueryParser.g:374:12: {...}? =>k= UPDATING
	                    if ( !((this.lc(XQU))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pm_FunctionDecl", "this.lc(XQU)");
	                    }
	                    k=this.match(this.input,UPDATING,XQueryParser.FOLLOW_UPDATING_in_pm_FunctionDecl3034); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_UPDATING.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }


	                    break;

	            }

	            k=this.match(this.input,FUNCTION,XQueryParser.FOLLOW_FUNCTION_in_pm_FunctionDecl3042); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_FUNCTION.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_pg_FQName_in_pm_FunctionDecl3048);
	            qn=this.pg_FQName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_pg_FQName.add(qn.getTree());
	            LPAREN77=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_pm_FunctionDecl3050); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_LPAREN.add(LPAREN77);

	            // XQueryParser.g:374:106: (pl= p_ParamList )?
	            var alt39=2;
	            var LA39_0 = this.input.LA(1);

	            if ( (LA39_0==DOLLAR) ) {
	                alt39=1;
	            }
	            switch (alt39) {
	                case 1 :
	                    // XQueryParser.g:374:106: pl= p_ParamList
	                    this.pushFollow(XQueryParser.FOLLOW_p_ParamList_in_pm_FunctionDecl3054);
	                    pl=this.p_ParamList();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_ParamList.add(pl.getTree());


	                    break;

	            }

	            RPAREN78=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_pm_FunctionDecl3057); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_RPAREN.add(RPAREN78);

	            // XQueryParser.g:374:127: (k= AS st= p_SequenceType )?
	            var alt40=2;
	            var LA40_0 = this.input.LA(1);

	            if ( (LA40_0==AS) ) {
	                alt40=1;
	            }
	            switch (alt40) {
	                case 1 :
	                    // XQueryParser.g:374:128: k= AS st= p_SequenceType
	                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_pm_FunctionDecl3062); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_AS.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_pm_FunctionDecl3068);
	                    st=this.p_SequenceType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_SequenceType.add(st.getTree());


	                    break;

	            }

	            // XQueryParser.g:374:168: ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL )
	            var alt41=2;
	            var LA41_0 = this.input.LA(1);

	            if ( (LA41_0==LBRACKET) ) {
	                alt41=1;
	            }
	            else if ( (LA41_0==EXTERNAL) ) {
	                alt41=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 41, 0, this.input);

	                throw nvae;
	            }
	            switch (alt41) {
	                case 1 :
	                    // XQueryParser.g:374:169: LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET
	                    LBRACKET79=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_FunctionDecl3073); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_LBRACKET.add(LBRACKET79);

	                    this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_FunctionDecl3077);
	                    soe=this.p_StatementsAndOptionalExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_StatementsAndOptionalExpr.add(soe.getTree());
	                    RBRACKET80=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_FunctionDecl3079); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_RBRACKET.add(RBRACKET80);



	                    break;
	                case 2 :
	                    // XQueryParser.g:374:221: k= EXTERNAL
	                    k=this.match(this.input,EXTERNAL,XQueryParser.FOLLOW_EXTERNAL_in_pm_FunctionDecl3085); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_EXTERNAL.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }


	                    break;

	            }



	            // AST REWRITE
	            // elements: pl, soe, qn, st
	            // token labels: 
	            // rule labels: qn, soe, retval, pl, st
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_qn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token qn",qn!=null?qn.tree:null);
	            var stream_soe=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token soe",soe!=null?soe.tree:null);
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_pl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token pl",pl!=null?pl.tree:null);
	            var stream_st=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token st",st!=null?st.tree:null);

	            root_0 = this.adaptor.nil();
	            // 375:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? )
	            {
	                // XQueryParser.g:375:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

	                this.adaptor.addChild(root_1, stream_qn.nextTree());
	                // XQueryParser.g:375:39: ^( ParamList ( $pl)? )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(ParamList, "ParamList"), root_2);

	                // XQueryParser.g:375:51: ( $pl)?
	                if ( stream_pl.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_pl.nextTree());

	                }
	                stream_pl.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:375:57: ^( ReturnType ( $st)? )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(ReturnType, "ReturnType"), root_2);

	                // XQueryParser.g:375:70: ( $st)?
	                if ( stream_st.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_st.nextTree());

	                }
	                stream_st.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:375:76: ( $soe)?
	                if ( stream_soe.hasNext() ) {
	                    this.adaptor.addChild(root_1, stream_soe.nextTree());

	                }
	                stream_soe.reset();

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ParamList_return: (function() {
	        XQueryParser.p_ParamList_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ParamList_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:379:1: p_ParamList : p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ ;
	    // $ANTLR start "p_ParamList"
	    p_ParamList: function() {
	        var retval = new XQueryParser.p_ParamList_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var COMMA81 = null;
	        var list_p=null;
	        var p = null;
	        var COMMA81_tree=null;
	        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
	        var stream_p_Param=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_Param");
	        try {
	            // XQueryParser.g:380:9: (p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ )
	            // XQueryParser.g:380:11: p+= p_Param ( COMMA p+= p_Param )*
	            this.pushFollow(XQueryParser.FOLLOW_p_Param_in_p_ParamList3162);
	            p=this.p_Param();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_Param.add(p.getTree());
	            if (org.antlr.lang.isNull(list_p)) list_p = [];
	            list_p.push(p.getTree());

	            // XQueryParser.g:380:22: ( COMMA p+= p_Param )*
	            loop42:
	            do {
	                var alt42=2;
	                var LA42_0 = this.input.LA(1);

	                if ( (LA42_0==COMMA) ) {
	                    alt42=1;
	                }


	                switch (alt42) {
	                case 1 :
	                    // XQueryParser.g:380:23: COMMA p+= p_Param
	                    COMMA81=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_ParamList3165); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_COMMA.add(COMMA81);

	                    this.pushFollow(XQueryParser.FOLLOW_p_Param_in_p_ParamList3169);
	                    p=this.p_Param();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_Param.add(p.getTree());
	                    if (org.antlr.lang.isNull(list_p)) list_p = [];
	                    list_p.push(p.getTree());



	                    break;

	                default :
	                    break loop42;
	                }
	            } while (true);



	            // AST REWRITE
	            // elements: p
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: p
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_p=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token p",list_p);
	            root_0 = this.adaptor.nil();
	            // 381:17: -> ( $p)+
	            {
	                if ( !(stream_p.hasNext()) ) {
	                    throw new org.antlr.runtime.tree.RewriteEarlyExitException();
	                }
	                while ( stream_p.hasNext() ) {
	                    this.adaptor.addChild(root_0, stream_p.nextTree());

	                }
	                stream_p.reset();

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Param_return: (function() {
	        XQueryParser.p_Param_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Param_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:385:1: p_Param : DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) ;
	    // $ANTLR start "p_Param"
	    p_Param: function() {
	        var retval = new XQueryParser.p_Param_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var DOLLAR82 = null;
	         var qn = null;
	         var td = null;

	        var DOLLAR82_tree=null;
	        var stream_DOLLAR=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DOLLAR");
	        var stream_p_TypeDeclaration=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_TypeDeclaration");
	        var stream_p_QName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QName");
	        try {
	            // XQueryParser.g:386:9: ( DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) )
	            // XQueryParser.g:386:11: DOLLAR qn= p_QName (td= p_TypeDeclaration )?
	            DOLLAR82=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_Param3227); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_DOLLAR.add(DOLLAR82);

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_Param3231);
	            qn=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_QName.add(qn.getTree());
	            // XQueryParser.g:386:31: (td= p_TypeDeclaration )?
	            var alt43=2;
	            var LA43_0 = this.input.LA(1);

	            if ( (LA43_0==AS) ) {
	                alt43=1;
	            }
	            switch (alt43) {
	                case 1 :
	                    // XQueryParser.g:386:31: td= p_TypeDeclaration
	                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_Param3235);
	                    td=this.p_TypeDeclaration();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_TypeDeclaration.add(td.getTree());


	                    break;

	            }



	            // AST REWRITE
	            // elements: td, qn
	            // token labels: 
	            // rule labels: qn, retval, td
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_qn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token qn",qn!=null?qn.tree:null);
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_td=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token td",td!=null?td.tree:null);

	            root_0 = this.adaptor.nil();
	            // 387:17: -> ^( Param $qn ( $td)? )
	            {
	                // XQueryParser.g:387:20: ^( Param $qn ( $td)? )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(Param, "Param"), root_1);

	                this.adaptor.addChild(root_1, stream_qn.nextTree());
	                // XQueryParser.g:387:32: ( $td)?
	                if ( stream_td.hasNext() ) {
	                    this.adaptor.addChild(root_1, stream_td.nextTree());

	                }
	                stream_td.reset();

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_FunctionBody_return: (function() {
	        XQueryParser.pm_FunctionBody_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_FunctionBody_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:391:1: pm_FunctionBody : p_EnclosedExpr ;
	    // $ANTLR start "pm_FunctionBody"
	    pm_FunctionBody: function() {
	        var retval = new XQueryParser.pm_FunctionBody_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_EnclosedExpr83 = null;


	        try {
	            // XQueryParser.g:392:9: ( p_EnclosedExpr )
	            // XQueryParser.g:392:11: p_EnclosedExpr
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_EnclosedExpr_in_pm_FunctionBody3291);
	            p_EnclosedExpr83=this.p_EnclosedExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_EnclosedExpr83.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_EnclosedExpr_return: (function() {
	        XQueryParser.p_EnclosedExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_EnclosedExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:397:1: p_EnclosedExpr : LBRACKET p_Expr[true,true] RBRACKET -> ^( EnclosedExpr p_Expr ) ;
	    // $ANTLR start "p_EnclosedExpr"
	    p_EnclosedExpr: function() {
	        var retval = new XQueryParser.p_EnclosedExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LBRACKET84 = null;
	        var RBRACKET86 = null;
	         var p_Expr85 = null;

	        var LBRACKET84_tree=null;
	        var RBRACKET86_tree=null;
	        var stream_LBRACKET=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LBRACKET");
	        var stream_RBRACKET=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RBRACKET");
	        var stream_p_Expr=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_Expr");
	        try {
	            // XQueryParser.g:398:9: ( LBRACKET p_Expr[true,true] RBRACKET -> ^( EnclosedExpr p_Expr ) )
	            // XQueryParser.g:398:11: LBRACKET p_Expr[true,true] RBRACKET
	            LBRACKET84=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_EnclosedExpr3318); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_LBRACKET.add(LBRACKET84);

	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_EnclosedExpr3320);
	            p_Expr85=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_Expr.add(p_Expr85.getTree());
	            RBRACKET86=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_EnclosedExpr3323); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_RBRACKET.add(RBRACKET86);



	            // AST REWRITE
	            // elements: p_Expr
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 399:17: -> ^( EnclosedExpr p_Expr )
	            {
	                // XQueryParser.g:399:20: ^( EnclosedExpr p_Expr )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(EnclosedExpr, "EnclosedExpr"), root_1);

	                this.adaptor.addChild(root_1, stream_p_Expr.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_OptionDecl_return: (function() {
	        XQueryParser.pm_OptionDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_OptionDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:403:1: pm_OptionDecl : k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON ;
	    // $ANTLR start "pm_OptionDecl"
	    pm_OptionDecl: function() {
	        var retval = new XQueryParser.pm_OptionDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON89 = null;
	         var p_QName87 = null;
	         var p_StringLiteral88 = null;

	        var k_tree=null;
	        var SEMICOLON89_tree=null;

	        try {
	            // XQueryParser.g:404:9: (k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON )
	            // XQueryParser.g:404:11: k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_OptionDecl3375); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,OPTION,XQueryParser.FOLLOW_OPTION_in_pm_OptionDecl3381); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_pm_OptionDecl3385);
	            p_QName87=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName87.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_OptionDecl3387);
	            p_StringLiteral88=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral88.getTree());
	            SEMICOLON89=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_OptionDecl3389); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON89_tree = this.adaptor.create(SEMICOLON89);
	            this.adaptor.addChild(root_0, SEMICOLON89_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_QueryBody_return: (function() {
	        XQueryParser.pm_QueryBody_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_QueryBody_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:408:1: pm_QueryBody : ({...}? => p_Program | p_Expr[true,true] );
	    // $ANTLR start "pm_QueryBody"
	    pm_QueryBody: function() {
	        var retval = new XQueryParser.pm_QueryBody_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Program90 = null;
	         var p_Expr91 = null;


	        try {
	            // XQueryParser.g:409:9: ({...}? => p_Program | p_Expr[true,true] )
	            var alt44=2;
	            alt44 = this.dfa44.predict(this.input);
	            switch (alt44) {
	                case 1 :
	                    // XQueryParser.g:409:11: {...}? => p_Program
	                    root_0 = this.adaptor.nil();

	                    if ( !((this.lc(XQS))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pm_QueryBody", "this.lc(XQS)");
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_Program_in_pm_QueryBody3418);
	                    p_Program90=this.p_Program();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Program90.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:410:11: p_Expr[true,true]
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_pm_QueryBody3430);
	                    p_Expr91=this.p_Expr(true, true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr91.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Expr_return: (function() {
	        XQueryParser.p_Expr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Expr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:420:1: p_Expr[strict, allowConcat] : es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )* ;
	    // $ANTLR start "p_Expr"
	    p_Expr: function(strict, allowConcat) {
	        var retval = new XQueryParser.p_Expr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var COMMA92 = null;
	         var es = null;
	         var p_ExprSingle93 = null;

	        var COMMA92_tree=null;

	        try {
	            // XQueryParser.g:421:9: (es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )* )
	            // XQueryParser.g:421:11: es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_Expr3466);
	            es=this.p_ExprSingle(strict);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, es.getTree());
	            if ( this.state.backtracking===0 ) {
	               if (!allowConcat) throw new Exception(); 
	            }
	            // XQueryParser.g:422:11: ( COMMA p_ExprSingle[$strict] )*
	            loop45:
	            do {
	                var alt45=2;
	                var LA45_0 = this.input.LA(1);

	                if ( (LA45_0==COMMA) ) {
	                    alt45=1;
	                }


	                switch (alt45) {
	                case 1 :
	                    // XQueryParser.g:422:12: COMMA p_ExprSingle[$strict]
	                    COMMA92=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_Expr3482); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COMMA92_tree = this.adaptor.create(COMMA92);
	                    this.adaptor.addChild(root_0, COMMA92_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_Expr3484);
	                    p_ExprSingle93=this.p_ExprSingle(strict);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle93.getTree());


	                    break;

	                default :
	                    break loop45;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (e) {

	              if(e instanceof org.antlr.runtime.RecognitionException) {
	                reportError(e);
	                recover(this.input, e);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	              } else if(e instanceof Exception) {
	                root_0 = this.adaptor.nil();
	                this.adaptor.addChild(root_0, es.getTree());
	                retval.stop = this.input.LT(-1);
	                retval.tree = this.adaptor.rulePostProcessing(root_0);
	                this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

	              } else {
	                throw e;
	              }

	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ExprSingle_return: (function() {
	        XQueryParser.p_ExprSingle_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ExprSingle_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:443:1: p_ExprSingle[strict] : ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple );
	    // $ANTLR start "p_ExprSingle"
	    p_ExprSingle: function(strict) {
	        var retval = new XQueryParser.p_ExprSingle_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_FLWORHybrid94 = null;
	         var p_IfHybrid95 = null;
	         var p_SwitchHybrid96 = null;
	         var p_TypeswitchHybrid97 = null;
	         var p_TryCatchHybrid98 = null;
	         var p_ExprSimple99 = null;


	        try {
	            // XQueryParser.g:444:9: ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple )
	            var alt46=6;
	            alt46 = this.dfa46.predict(this.input);
	            switch (alt46) {
	                case 1 :
	                    // XQueryParser.g:444:11: ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict]
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FLWORHybrid_in_p_ExprSingle3551);
	                    p_FLWORHybrid94=this.p_FLWORHybrid(strict);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FLWORHybrid94.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:445:11: ( IF LPAREN )=> p_IfHybrid[$strict]
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_IfHybrid_in_p_ExprSingle3581);
	                    p_IfHybrid95=this.p_IfHybrid(strict);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IfHybrid95.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:446:11: ( SWITCH LPAREN )=> p_SwitchHybrid[$strict]
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchHybrid_in_p_ExprSingle3607);
	                    p_SwitchHybrid96=this.p_SwitchHybrid(strict);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchHybrid96.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:447:11: ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict]
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_TypeswitchHybrid_in_p_ExprSingle3629);
	                    p_TypeswitchHybrid97=this.p_TypeswitchHybrid(strict);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeswitchHybrid97.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:448:11: ( TRY LBRACKET )=> p_TryCatchHybrid[$strict]
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_TryCatchHybrid_in_p_ExprSingle3656);
	                    p_TryCatchHybrid98=this.p_TryCatchHybrid(strict);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TryCatchHybrid98.getTree());


	                    break;
	                case 6 :
	                    // XQueryParser.g:449:11: p_ExprSimple
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSimple_in_p_ExprSingle3669);
	                    p_ExprSimple99=this.p_ExprSimple();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSimple99.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FLWORHybrid_return: (function() {
	        XQueryParser.p_FLWORHybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FLWORHybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:453:1: p_FLWORHybrid[strict] : p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict] ;
	    // $ANTLR start "p_FLWORHybrid"
	    p_FLWORHybrid: function(strict) {
	        var retval = new XQueryParser.p_FLWORHybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_InitialClause100 = null;
	         var p_IntermediateClause101 = null;
	         var p_ReturnHybrid102 = null;


	        try {
	            // XQueryParser.g:454:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict] )
	            // XQueryParser.g:454:11: p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_InitialClause_in_p_FLWORHybrid3696);
	            p_InitialClause100=this.p_InitialClause();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InitialClause100.getTree());
	            // XQueryParser.g:454:27: ( p_IntermediateClause )*
	            loop47:
	            do {
	                var alt47=2;
	                var LA47_0 = this.input.LA(1);

	                if ( (LA47_0==FOR||LA47_0==LET||LA47_0==ORDER||LA47_0==STABLE||LA47_0==WHERE||LA47_0==COUNT||LA47_0==GROUP) ) {
	                    alt47=1;
	                }


	                switch (alt47) {
	                case 1 :
	                    // XQueryParser.g:454:27: p_IntermediateClause
	                    this.pushFollow(XQueryParser.FOLLOW_p_IntermediateClause_in_p_FLWORHybrid3698);
	                    p_IntermediateClause101=this.p_IntermediateClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IntermediateClause101.getTree());


	                    break;

	                default :
	                    break loop47;
	                }
	            } while (true);

	            this.pushFollow(XQueryParser.FOLLOW_p_ReturnHybrid_in_p_FLWORHybrid3701);
	            p_ReturnHybrid102=this.p_ReturnHybrid(strict);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReturnHybrid102.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_InitialClause_return: (function() {
	        XQueryParser.p_InitialClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_InitialClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:458:1: p_InitialClause : ( p_ForClause | p_LetClause | p_WindowClause );
	    // $ANTLR start "p_InitialClause"
	    p_InitialClause: function() {
	        var retval = new XQueryParser.p_InitialClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ForClause103 = null;
	         var p_LetClause104 = null;
	         var p_WindowClause105 = null;


	        try {
	            // XQueryParser.g:459:9: ( p_ForClause | p_LetClause | p_WindowClause )
	            var alt48=3;
	            var LA48_0 = this.input.LA(1);

	            if ( (LA48_0==FOR) ) {
	                var LA48_1 = this.input.LA(2);

	                if ( (LA48_1==DOLLAR) ) {
	                    alt48=1;
	                }
	                else if ( (LA48_1==SLIDING||LA48_1==TUMBLING) ) {
	                    alt48=3;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 48, 1, this.input);

	                    throw nvae;
	                }
	            }
	            else if ( (LA48_0==LET) ) {
	                alt48=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 48, 0, this.input);

	                throw nvae;
	            }
	            switch (alt48) {
	                case 1 :
	                    // XQueryParser.g:459:11: p_ForClause
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ForClause_in_p_InitialClause3728);
	                    p_ForClause103=this.p_ForClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForClause103.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:459:25: p_LetClause
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_LetClause_in_p_InitialClause3732);
	                    p_LetClause104=this.p_LetClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_LetClause104.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:459:39: p_WindowClause
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_WindowClause_in_p_InitialClause3736);
	                    p_WindowClause105=this.p_WindowClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowClause105.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IntermediateClause_return: (function() {
	        XQueryParser.p_IntermediateClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IntermediateClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:463:1: p_IntermediateClause : ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause );
	    // $ANTLR start "p_IntermediateClause"
	    p_IntermediateClause: function() {
	        var retval = new XQueryParser.p_IntermediateClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_InitialClause106 = null;
	         var p_WhereClause107 = null;
	         var p_GroupByClause108 = null;
	         var p_OrderByClause109 = null;
	         var p_CountClause110 = null;


	        try {
	            // XQueryParser.g:464:9: ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause )
	            var alt49=5;
	            switch ( this.input.LA(1) ) {
	            case FOR:
	            case LET:
	                alt49=1;
	                break;
	            case WHERE:
	                alt49=2;
	                break;
	            case GROUP:
	                alt49=3;
	                break;
	            case ORDER:
	            case STABLE:
	                alt49=4;
	                break;
	            case COUNT:
	                alt49=5;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 49, 0, this.input);

	                throw nvae;
	            }

	            switch (alt49) {
	                case 1 :
	                    // XQueryParser.g:464:11: p_InitialClause
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_InitialClause_in_p_IntermediateClause3762);
	                    p_InitialClause106=this.p_InitialClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InitialClause106.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:464:29: p_WhereClause
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_WhereClause_in_p_IntermediateClause3766);
	                    p_WhereClause107=this.p_WhereClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WhereClause107.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:464:45: p_GroupByClause
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_GroupByClause_in_p_IntermediateClause3770);
	                    p_GroupByClause108=this.p_GroupByClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GroupByClause108.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:464:63: p_OrderByClause
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_OrderByClause_in_p_IntermediateClause3774);
	                    p_OrderByClause109=this.p_OrderByClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderByClause109.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:464:81: p_CountClause
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_CountClause_in_p_IntermediateClause3778);
	                    p_CountClause110=this.p_CountClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CountClause110.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ForClause_return: (function() {
	        XQueryParser.p_ForClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ForClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:469:1: p_ForClause : k= FOR p_ForBinding ( COMMA p_ForBinding )* ;
	    // $ANTLR start "p_ForClause"
	    p_ForClause: function() {
	        var retval = new XQueryParser.p_ForClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var COMMA112 = null;
	         var p_ForBinding111 = null;
	         var p_ForBinding113 = null;

	        var k_tree=null;
	        var COMMA112_tree=null;

	        try {
	            // XQueryParser.g:470:9: (k= FOR p_ForBinding ( COMMA p_ForBinding )* )
	            // XQueryParser.g:470:11: k= FOR p_ForBinding ( COMMA p_ForBinding )*
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,FOR,XQueryParser.FOLLOW_FOR_in_p_ForClause3807); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ForBinding_in_p_ForClause3811);
	            p_ForBinding111=this.p_ForBinding();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForBinding111.getTree());
	            // XQueryParser.g:470:45: ( COMMA p_ForBinding )*
	            loop50:
	            do {
	                var alt50=2;
	                var LA50_0 = this.input.LA(1);

	                if ( (LA50_0==COMMA) ) {
	                    alt50=1;
	                }


	                switch (alt50) {
	                case 1 :
	                    // XQueryParser.g:470:46: COMMA p_ForBinding
	                    COMMA112=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_ForClause3814); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COMMA112_tree = this.adaptor.create(COMMA112);
	                    this.adaptor.addChild(root_0, COMMA112_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_ForBinding_in_p_ForClause3816);
	                    p_ForBinding113=this.p_ForBinding();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForBinding113.getTree());


	                    break;

	                default :
	                    break loop50;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ForBinding_return: (function() {
	        XQueryParser.p_ForBinding_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ForBinding_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:474:1: p_ForBinding : DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true] ;
	    // $ANTLR start "p_ForBinding"
	    p_ForBinding: function() {
	        var retval = new XQueryParser.p_ForBinding_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR114 = null;
	         var p_VarName115 = null;
	         var p_TypeDeclaration116 = null;
	         var p_AllowingEmpty117 = null;
	         var p_PositionalVar118 = null;
	         var p_FTScoreVar119 = null;
	         var p_ExprSingle120 = null;

	        var k_tree=null;
	        var DOLLAR114_tree=null;

	        try {
	            // XQueryParser.g:475:9: ( DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true] )
	            // XQueryParser.g:475:11: DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            DOLLAR114=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ForBinding3844); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR114_tree = this.adaptor.create(DOLLAR114);
	            this.adaptor.addChild(root_0, DOLLAR114_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_ForBinding3846);
	            p_VarName115=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName115.getTree());
	            // XQueryParser.g:475:28: ( p_TypeDeclaration )?
	            var alt51=2;
	            var LA51_0 = this.input.LA(1);

	            if ( (LA51_0==AS) ) {
	                alt51=1;
	            }
	            switch (alt51) {
	                case 1 :
	                    // XQueryParser.g:475:28: p_TypeDeclaration
	                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_ForBinding3848);
	                    p_TypeDeclaration116=this.p_TypeDeclaration();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration116.getTree());


	                    break;

	            }

	            // XQueryParser.g:475:47: ( p_AllowingEmpty )?
	            var alt52=2;
	            var LA52_0 = this.input.LA(1);

	            if ( (LA52_0==ALLOWING) ) {
	                alt52=1;
	            }
	            switch (alt52) {
	                case 1 :
	                    // XQueryParser.g:475:47: p_AllowingEmpty
	                    this.pushFollow(XQueryParser.FOLLOW_p_AllowingEmpty_in_p_ForBinding3851);
	                    p_AllowingEmpty117=this.p_AllowingEmpty();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AllowingEmpty117.getTree());


	                    break;

	            }

	            // XQueryParser.g:475:64: ( p_PositionalVar )?
	            var alt53=2;
	            var LA53_0 = this.input.LA(1);

	            if ( (LA53_0==AT) ) {
	                alt53=1;
	            }
	            switch (alt53) {
	                case 1 :
	                    // XQueryParser.g:475:64: p_PositionalVar
	                    this.pushFollow(XQueryParser.FOLLOW_p_PositionalVar_in_p_ForBinding3854);
	                    p_PositionalVar118=this.p_PositionalVar();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PositionalVar118.getTree());


	                    break;

	            }

	            // XQueryParser.g:475:81: ( p_FTScoreVar )?
	            var alt54=2;
	            var LA54_0 = this.input.LA(1);

	            if ( (LA54_0==SCORE) ) {
	                alt54=1;
	            }
	            switch (alt54) {
	                case 1 :
	                    // XQueryParser.g:475:81: p_FTScoreVar
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTScoreVar_in_p_ForBinding3857);
	                    p_FTScoreVar119=this.p_FTScoreVar();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTScoreVar119.getTree());


	                    break;

	            }

	            k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_ForBinding3862); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ForBinding3866);
	            p_ExprSingle120=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle120.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AllowingEmpty_return: (function() {
	        XQueryParser.p_AllowingEmpty_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AllowingEmpty_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:479:1: p_AllowingEmpty : k= ALLOWING k= EMPTY ;
	    // $ANTLR start "p_AllowingEmpty"
	    p_AllowingEmpty: function() {
	        var retval = new XQueryParser.p_AllowingEmpty_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:480:9: (k= ALLOWING k= EMPTY )
	            // XQueryParser.g:480:11: k= ALLOWING k= EMPTY
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,ALLOWING,XQueryParser.FOLLOW_ALLOWING_in_p_AllowingEmpty3895); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,EMPTY,XQueryParser.FOLLOW_EMPTY_in_p_AllowingEmpty3901); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_PositionalVar_return: (function() {
	        XQueryParser.p_PositionalVar_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_PositionalVar_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:484:1: p_PositionalVar : k= AT DOLLAR p_VarName ;
	    // $ANTLR start "p_PositionalVar"
	    p_PositionalVar: function() {
	        var retval = new XQueryParser.p_PositionalVar_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR121 = null;
	         var p_VarName122 = null;

	        var k_tree=null;
	        var DOLLAR121_tree=null;

	        try {
	            // XQueryParser.g:485:9: (k= AT DOLLAR p_VarName )
	            // XQueryParser.g:485:11: k= AT DOLLAR p_VarName
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_PositionalVar3931); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR121=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_PositionalVar3935); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR121_tree = this.adaptor.create(DOLLAR121);
	            this.adaptor.addChild(root_0, DOLLAR121_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_PositionalVar3937);
	            p_VarName122=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName122.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_LetClause_return: (function() {
	        XQueryParser.p_LetClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_LetClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:489:1: p_LetClause : k= LET p_LetBinding ( COMMA p_LetBinding )* ;
	    // $ANTLR start "p_LetClause"
	    p_LetClause: function() {
	        var retval = new XQueryParser.p_LetClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var COMMA124 = null;
	         var p_LetBinding123 = null;
	         var p_LetBinding125 = null;

	        var k_tree=null;
	        var COMMA124_tree=null;

	        try {
	            // XQueryParser.g:490:9: (k= LET p_LetBinding ( COMMA p_LetBinding )* )
	            // XQueryParser.g:490:11: k= LET p_LetBinding ( COMMA p_LetBinding )*
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,LET,XQueryParser.FOLLOW_LET_in_p_LetClause3965); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_LetBinding_in_p_LetClause3969);
	            p_LetBinding123=this.p_LetBinding();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_LetBinding123.getTree());
	            // XQueryParser.g:490:45: ( COMMA p_LetBinding )*
	            loop55:
	            do {
	                var alt55=2;
	                var LA55_0 = this.input.LA(1);

	                if ( (LA55_0==COMMA) ) {
	                    alt55=1;
	                }


	                switch (alt55) {
	                case 1 :
	                    // XQueryParser.g:490:46: COMMA p_LetBinding
	                    COMMA124=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_LetClause3972); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COMMA124_tree = this.adaptor.create(COMMA124);
	                    this.adaptor.addChild(root_0, COMMA124_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_LetBinding_in_p_LetClause3974);
	                    p_LetBinding125=this.p_LetBinding();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_LetBinding125.getTree());


	                    break;

	                default :
	                    break loop55;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_LetBinding_return: (function() {
	        XQueryParser.p_LetBinding_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_LetBinding_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:495:1: p_LetBinding : ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true] ;
	    // $ANTLR start "p_LetBinding"
	    p_LetBinding: function() {
	        var retval = new XQueryParser.p_LetBinding_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var DOLLAR126 = null;
	        var BIND130 = null;
	         var p_VarName127 = null;
	         var p_TypeDeclaration128 = null;
	         var p_FTScoreVar129 = null;
	         var p_ExprSingle131 = null;

	        var DOLLAR126_tree=null;
	        var BIND130_tree=null;

	        try {
	            // XQueryParser.g:496:9: ( ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true] )
	            // XQueryParser.g:496:11: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:496:11: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar )
	            var alt57=2;
	            var LA57_0 = this.input.LA(1);

	            if ( (LA57_0==DOLLAR) ) {
	                alt57=1;
	            }
	            else if ( (LA57_0==SCORE) ) {
	                alt57=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 57, 0, this.input);

	                throw nvae;
	            }
	            switch (alt57) {
	                case 1 :
	                    // XQueryParser.g:496:13: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
	                    // XQueryParser.g:496:13: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
	                    // XQueryParser.g:496:14: DOLLAR p_VarName ( p_TypeDeclaration )?
	                    DOLLAR126=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_LetBinding4006); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR126_tree = this.adaptor.create(DOLLAR126);
	                    this.adaptor.addChild(root_0, DOLLAR126_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_LetBinding4008);
	                    p_VarName127=this.p_VarName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName127.getTree());
	                    // XQueryParser.g:496:31: ( p_TypeDeclaration )?
	                    var alt56=2;
	                    var LA56_0 = this.input.LA(1);

	                    if ( (LA56_0==AS) ) {
	                        alt56=1;
	                    }
	                    switch (alt56) {
	                        case 1 :
	                            // XQueryParser.g:496:31: p_TypeDeclaration
	                            this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_LetBinding4010);
	                            p_TypeDeclaration128=this.p_TypeDeclaration();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration128.getTree());


	                            break;

	                    }






	                    break;
	                case 2 :
	                    // XQueryParser.g:496:53: p_FTScoreVar
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTScoreVar_in_p_LetBinding4016);
	                    p_FTScoreVar129=this.p_FTScoreVar();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTScoreVar129.getTree());


	                    break;

	            }

	            BIND130=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_LetBinding4020); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            BIND130_tree = this.adaptor.create(BIND130);
	            this.adaptor.addChild(root_0, BIND130_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_LetBinding4022);
	            p_ExprSingle131=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle131.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_WindowClause_return: (function() {
	        XQueryParser.p_WindowClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_WindowClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:500:1: p_WindowClause : k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) ;
	    // $ANTLR start "p_WindowClause"
	    p_WindowClause: function() {
	        var retval = new XQueryParser.p_WindowClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_TumblingWindowClause132 = null;
	         var p_SlidingWindowClause133 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:501:9: (k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) )
	            // XQueryParser.g:501:11: k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause )
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,FOR,XQueryParser.FOLLOW_FOR_in_p_WindowClause4051); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:501:32: ( p_TumblingWindowClause | p_SlidingWindowClause )
	            var alt58=2;
	            var LA58_0 = this.input.LA(1);

	            if ( (LA58_0==TUMBLING) ) {
	                alt58=1;
	            }
	            else if ( (LA58_0==SLIDING) ) {
	                alt58=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 58, 0, this.input);

	                throw nvae;
	            }
	            switch (alt58) {
	                case 1 :
	                    // XQueryParser.g:501:33: p_TumblingWindowClause
	                    this.pushFollow(XQueryParser.FOLLOW_p_TumblingWindowClause_in_p_WindowClause4056);
	                    p_TumblingWindowClause132=this.p_TumblingWindowClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TumblingWindowClause132.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:501:58: p_SlidingWindowClause
	                    this.pushFollow(XQueryParser.FOLLOW_p_SlidingWindowClause_in_p_WindowClause4060);
	                    p_SlidingWindowClause133=this.p_SlidingWindowClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SlidingWindowClause133.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TumblingWindowClause_return: (function() {
	        XQueryParser.p_TumblingWindowClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TumblingWindowClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:505:1: p_TumblingWindowClause : k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? ;
	    // $ANTLR start "p_TumblingWindowClause"
	    p_TumblingWindowClause: function() {
	        var retval = new XQueryParser.p_TumblingWindowClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR134 = null;
	         var p_VarName135 = null;
	         var p_TypeDeclaration136 = null;
	         var p_ExprSingle137 = null;
	         var p_WindowStartCondition138 = null;
	         var p_WindowEndCondition139 = null;

	        var k_tree=null;
	        var DOLLAR134_tree=null;

	        try {
	            // XQueryParser.g:506:9: (k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? )
	            // XQueryParser.g:506:11: k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )?
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,TUMBLING,XQueryParser.FOLLOW_TUMBLING_in_p_TumblingWindowClause4097); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,WINDOW,XQueryParser.FOLLOW_WINDOW_in_p_TumblingWindowClause4103); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR134=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TumblingWindowClause4107); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR134_tree = this.adaptor.create(DOLLAR134);
	            this.adaptor.addChild(root_0, DOLLAR134_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TumblingWindowClause4109);
	            p_VarName135=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName135.getTree());
	            // XQueryParser.g:506:78: ( p_TypeDeclaration )?
	            var alt59=2;
	            var LA59_0 = this.input.LA(1);

	            if ( (LA59_0==AS) ) {
	                alt59=1;
	            }
	            switch (alt59) {
	                case 1 :
	                    // XQueryParser.g:506:78: p_TypeDeclaration
	                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4111);
	                    p_TypeDeclaration136=this.p_TypeDeclaration();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration136.getTree());


	                    break;

	            }

	            k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_TumblingWindowClause4116); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4120);
	            p_ExprSingle137=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle137.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4123);
	            p_WindowStartCondition138=this.p_WindowStartCondition();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowStartCondition138.getTree());
	            // XQueryParser.g:506:159: ( p_WindowEndCondition )?
	            var alt60=2;
	            var LA60_0 = this.input.LA(1);

	            if ( (LA60_0==END||LA60_0==ONLY) ) {
	                alt60=1;
	            }
	            switch (alt60) {
	                case 1 :
	                    // XQueryParser.g:506:159: p_WindowEndCondition
	                    this.pushFollow(XQueryParser.FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4125);
	                    p_WindowEndCondition139=this.p_WindowEndCondition();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowEndCondition139.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SlidingWindowClause_return: (function() {
	        XQueryParser.p_SlidingWindowClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SlidingWindowClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:510:1: p_SlidingWindowClause : k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? ;
	    // $ANTLR start "p_SlidingWindowClause"
	    p_SlidingWindowClause: function() {
	        var retval = new XQueryParser.p_SlidingWindowClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR140 = null;
	         var p_VarName141 = null;
	         var p_TypeDeclaration142 = null;
	         var p_ExprSingle143 = null;
	         var p_WindowStartCondition144 = null;
	         var p_WindowEndCondition145 = null;

	        var k_tree=null;
	        var DOLLAR140_tree=null;

	        try {
	            // XQueryParser.g:511:9: (k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? )
	            // XQueryParser.g:511:11: k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )?
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,SLIDING,XQueryParser.FOLLOW_SLIDING_in_p_SlidingWindowClause4154); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,WINDOW,XQueryParser.FOLLOW_WINDOW_in_p_SlidingWindowClause4160); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR140=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_SlidingWindowClause4164); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR140_tree = this.adaptor.create(DOLLAR140);
	            this.adaptor.addChild(root_0, DOLLAR140_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_SlidingWindowClause4166);
	            p_VarName141=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName141.getTree());
	            // XQueryParser.g:511:77: ( p_TypeDeclaration )?
	            var alt61=2;
	            var LA61_0 = this.input.LA(1);

	            if ( (LA61_0==AS) ) {
	                alt61=1;
	            }
	            switch (alt61) {
	                case 1 :
	                    // XQueryParser.g:511:77: p_TypeDeclaration
	                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4168);
	                    p_TypeDeclaration142=this.p_TypeDeclaration();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration142.getTree());


	                    break;

	            }

	            k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_SlidingWindowClause4173); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4177);
	            p_ExprSingle143=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle143.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4180);
	            p_WindowStartCondition144=this.p_WindowStartCondition();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowStartCondition144.getTree());
	            // XQueryParser.g:511:158: ( p_WindowEndCondition )?
	            var alt62=2;
	            var LA62_0 = this.input.LA(1);

	            if ( (LA62_0==END||LA62_0==ONLY) ) {
	                alt62=1;
	            }
	            switch (alt62) {
	                case 1 :
	                    // XQueryParser.g:511:158: p_WindowEndCondition
	                    this.pushFollow(XQueryParser.FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4182);
	                    p_WindowEndCondition145=this.p_WindowEndCondition();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowEndCondition145.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_WindowStartCondition_return: (function() {
	        XQueryParser.p_WindowStartCondition_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_WindowStartCondition_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:515:1: p_WindowStartCondition : k= START p_WindowVars k= WHEN p_ExprSingle[true] ;
	    // $ANTLR start "p_WindowStartCondition"
	    p_WindowStartCondition: function() {
	        var retval = new XQueryParser.p_WindowStartCondition_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_WindowVars146 = null;
	         var p_ExprSingle147 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:516:9: (k= START p_WindowVars k= WHEN p_ExprSingle[true] )
	            // XQueryParser.g:516:11: k= START p_WindowVars k= WHEN p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,START,XQueryParser.FOLLOW_START_in_p_WindowStartCondition4211); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_WindowVars_in_p_WindowStartCondition4215);
	            p_WindowVars146=this.p_WindowVars();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowVars146.getTree());
	            k=this.match(this.input,WHEN,XQueryParser.FOLLOW_WHEN_in_p_WindowStartCondition4219); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_WindowStartCondition4223);
	            p_ExprSingle147=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle147.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_WindowEndCondition_return: (function() {
	        XQueryParser.p_WindowEndCondition_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_WindowEndCondition_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:520:1: p_WindowEndCondition : (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true] ;
	    // $ANTLR start "p_WindowEndCondition"
	    p_WindowEndCondition: function() {
	        var retval = new XQueryParser.p_WindowEndCondition_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_WindowVars148 = null;
	         var p_ExprSingle149 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:521:9: ( (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true] )
	            // XQueryParser.g:521:11: (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:521:11: (k= ONLY )?
	            var alt63=2;
	            var LA63_0 = this.input.LA(1);

	            if ( (LA63_0==ONLY) ) {
	                alt63=1;
	            }
	            switch (alt63) {
	                case 1 :
	                    // XQueryParser.g:521:12: k= ONLY
	                    k=this.match(this.input,ONLY,XQueryParser.FOLLOW_ONLY_in_p_WindowEndCondition4253); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }


	                    break;

	            }

	            k=this.match(this.input,END,XQueryParser.FOLLOW_END_in_p_WindowEndCondition4261); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_WindowVars_in_p_WindowEndCondition4265);
	            p_WindowVars148=this.p_WindowVars();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowVars148.getTree());
	            k=this.match(this.input,WHEN,XQueryParser.FOLLOW_WHEN_in_p_WindowEndCondition4269); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_WindowEndCondition4273);
	            p_ExprSingle149=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle149.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_WindowVars_return: (function() {
	        XQueryParser.p_WindowVars_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_WindowVars_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:525:1: p_WindowVars : ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )? ;
	    // $ANTLR start "p_WindowVars"
	    p_WindowVars: function() {
	        var retval = new XQueryParser.p_WindowVars_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR150 = null;
	        var DOLLAR153 = null;
	        var DOLLAR155 = null;
	         var p_CurrentItem151 = null;
	         var p_PositionalVar152 = null;
	         var p_PreviousItem154 = null;
	         var p_NextItem156 = null;

	        var k_tree=null;
	        var DOLLAR150_tree=null;
	        var DOLLAR153_tree=null;
	        var DOLLAR155_tree=null;

	        try {
	            // XQueryParser.g:526:9: ( ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )? )
	            // XQueryParser.g:526:11: ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )?
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:526:11: ( DOLLAR p_CurrentItem )?
	            var alt64=2;
	            var LA64_0 = this.input.LA(1);

	            if ( (LA64_0==DOLLAR) ) {
	                alt64=1;
	            }
	            switch (alt64) {
	                case 1 :
	                    // XQueryParser.g:526:12: DOLLAR p_CurrentItem
	                    DOLLAR150=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_WindowVars4301); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR150_tree = this.adaptor.create(DOLLAR150);
	                    this.adaptor.addChild(root_0, DOLLAR150_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_CurrentItem_in_p_WindowVars4303);
	                    p_CurrentItem151=this.p_CurrentItem();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CurrentItem151.getTree());


	                    break;

	            }

	            // XQueryParser.g:526:35: ( p_PositionalVar )?
	            var alt65=2;
	            var LA65_0 = this.input.LA(1);

	            if ( (LA65_0==AT) ) {
	                alt65=1;
	            }
	            switch (alt65) {
	                case 1 :
	                    // XQueryParser.g:526:35: p_PositionalVar
	                    this.pushFollow(XQueryParser.FOLLOW_p_PositionalVar_in_p_WindowVars4307);
	                    p_PositionalVar152=this.p_PositionalVar();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PositionalVar152.getTree());


	                    break;

	            }

	            // XQueryParser.g:526:52: (k= PREVIOUS DOLLAR p_PreviousItem )?
	            var alt66=2;
	            var LA66_0 = this.input.LA(1);

	            if ( (LA66_0==PREVIOUS) ) {
	                alt66=1;
	            }
	            switch (alt66) {
	                case 1 :
	                    // XQueryParser.g:526:53: k= PREVIOUS DOLLAR p_PreviousItem
	                    k=this.match(this.input,PREVIOUS,XQueryParser.FOLLOW_PREVIOUS_in_p_WindowVars4313); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    DOLLAR153=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_WindowVars4317); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR153_tree = this.adaptor.create(DOLLAR153);
	                    this.adaptor.addChild(root_0, DOLLAR153_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_PreviousItem_in_p_WindowVars4319);
	                    p_PreviousItem154=this.p_PreviousItem();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PreviousItem154.getTree());


	                    break;

	            }

	            // XQueryParser.g:526:103: (k= NEXT DOLLAR p_NextItem )?
	            var alt67=2;
	            var LA67_0 = this.input.LA(1);

	            if ( (LA67_0==NEXT) ) {
	                alt67=1;
	            }
	            switch (alt67) {
	                case 1 :
	                    // XQueryParser.g:526:104: k= NEXT DOLLAR p_NextItem
	                    k=this.match(this.input,NEXT,XQueryParser.FOLLOW_NEXT_in_p_WindowVars4326); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    DOLLAR155=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_WindowVars4330); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR155_tree = this.adaptor.create(DOLLAR155);
	                    this.adaptor.addChild(root_0, DOLLAR155_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_NextItem_in_p_WindowVars4332);
	                    p_NextItem156=this.p_NextItem();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NextItem156.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CurrentItem_return: (function() {
	        XQueryParser.p_CurrentItem_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CurrentItem_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:530:1: p_CurrentItem : p_QName ;
	    // $ANTLR start "p_CurrentItem"
	    p_CurrentItem: function() {
	        var retval = new XQueryParser.p_CurrentItem_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName157 = null;


	        try {
	            // XQueryParser.g:531:9: ( p_QName )
	            // XQueryParser.g:531:11: p_QName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_CurrentItem4360);
	            p_QName157=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName157.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_PreviousItem_return: (function() {
	        XQueryParser.p_PreviousItem_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_PreviousItem_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:535:1: p_PreviousItem : p_QName ;
	    // $ANTLR start "p_PreviousItem"
	    p_PreviousItem: function() {
	        var retval = new XQueryParser.p_PreviousItem_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName158 = null;


	        try {
	            // XQueryParser.g:536:9: ( p_QName )
	            // XQueryParser.g:536:11: p_QName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_PreviousItem4386);
	            p_QName158=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName158.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_NextItem_return: (function() {
	        XQueryParser.p_NextItem_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_NextItem_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:540:1: p_NextItem : p_QName ;
	    // $ANTLR start "p_NextItem"
	    p_NextItem: function() {
	        var retval = new XQueryParser.p_NextItem_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName159 = null;


	        try {
	            // XQueryParser.g:541:9: ( p_QName )
	            // XQueryParser.g:541:11: p_QName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_NextItem4412);
	            p_QName159=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName159.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CountClause_return: (function() {
	        XQueryParser.p_CountClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CountClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:545:1: p_CountClause : k= COUNT DOLLAR p_VarName ;
	    // $ANTLR start "p_CountClause"
	    p_CountClause: function() {
	        var retval = new XQueryParser.p_CountClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR160 = null;
	         var p_VarName161 = null;

	        var k_tree=null;
	        var DOLLAR160_tree=null;

	        try {
	            // XQueryParser.g:546:9: (k= COUNT DOLLAR p_VarName )
	            // XQueryParser.g:546:11: k= COUNT DOLLAR p_VarName
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,COUNT,XQueryParser.FOLLOW_COUNT_in_p_CountClause4440); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR160=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_CountClause4444); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR160_tree = this.adaptor.create(DOLLAR160);
	            this.adaptor.addChild(root_0, DOLLAR160_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_CountClause4446);
	            p_VarName161=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName161.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_WhereClause_return: (function() {
	        XQueryParser.p_WhereClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_WhereClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:550:1: p_WhereClause : k= WHERE p_ExprSingle[true] ;
	    // $ANTLR start "p_WhereClause"
	    p_WhereClause: function() {
	        var retval = new XQueryParser.p_WhereClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_ExprSingle162 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:551:9: (k= WHERE p_ExprSingle[true] )
	            // XQueryParser.g:551:11: k= WHERE p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,WHERE,XQueryParser.FOLLOW_WHERE_in_p_WhereClause4482); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_WhereClause4486);
	            p_ExprSingle162=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle162.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_GroupByClause_return: (function() {
	        XQueryParser.p_GroupByClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_GroupByClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:555:1: p_GroupByClause : k= GROUP k= BY p_GroupingSpecList ;
	    // $ANTLR start "p_GroupByClause"
	    p_GroupByClause: function() {
	        var retval = new XQueryParser.p_GroupByClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_GroupingSpecList163 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:556:9: (k= GROUP k= BY p_GroupingSpecList )
	            // XQueryParser.g:556:11: k= GROUP k= BY p_GroupingSpecList
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,GROUP,XQueryParser.FOLLOW_GROUP_in_p_GroupByClause4515); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,BY,XQueryParser.FOLLOW_BY_in_p_GroupByClause4521); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_GroupingSpecList_in_p_GroupByClause4525);
	            p_GroupingSpecList163=this.p_GroupingSpecList();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GroupingSpecList163.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_GroupingSpecList_return: (function() {
	        XQueryParser.p_GroupingSpecList_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_GroupingSpecList_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:560:1: p_GroupingSpecList : p_GroupingSpec ( COMMA p_GroupingSpec )* ;
	    // $ANTLR start "p_GroupingSpecList"
	    p_GroupingSpecList: function() {
	        var retval = new XQueryParser.p_GroupingSpecList_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var COMMA165 = null;
	         var p_GroupingSpec164 = null;
	         var p_GroupingSpec166 = null;

	        var COMMA165_tree=null;

	        try {
	            // XQueryParser.g:561:9: ( p_GroupingSpec ( COMMA p_GroupingSpec )* )
	            // XQueryParser.g:561:11: p_GroupingSpec ( COMMA p_GroupingSpec )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4551);
	            p_GroupingSpec164=this.p_GroupingSpec();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GroupingSpec164.getTree());
	            // XQueryParser.g:561:26: ( COMMA p_GroupingSpec )*
	            loop68:
	            do {
	                var alt68=2;
	                var LA68_0 = this.input.LA(1);

	                if ( (LA68_0==COMMA) ) {
	                    alt68=1;
	                }


	                switch (alt68) {
	                case 1 :
	                    // XQueryParser.g:561:27: COMMA p_GroupingSpec
	                    COMMA165=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_GroupingSpecList4554); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COMMA165_tree = this.adaptor.create(COMMA165);
	                    this.adaptor.addChild(root_0, COMMA165_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4556);
	                    p_GroupingSpec166=this.p_GroupingSpec();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GroupingSpec166.getTree());


	                    break;

	                default :
	                    break loop68;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_GroupingSpec_return: (function() {
	        XQueryParser.p_GroupingSpec_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_GroupingSpec_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:565:1: p_GroupingSpec : DOLLAR p_VarName (k= COLLATION p_StringLiteral )? ;
	    // $ANTLR start "p_GroupingSpec"
	    p_GroupingSpec: function() {
	        var retval = new XQueryParser.p_GroupingSpec_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR167 = null;
	         var p_VarName168 = null;
	         var p_StringLiteral169 = null;

	        var k_tree=null;
	        var DOLLAR167_tree=null;

	        try {
	            // XQueryParser.g:566:9: ( DOLLAR p_VarName (k= COLLATION p_StringLiteral )? )
	            // XQueryParser.g:566:11: DOLLAR p_VarName (k= COLLATION p_StringLiteral )?
	            root_0 = this.adaptor.nil();

	            DOLLAR167=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_GroupingSpec4584); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR167_tree = this.adaptor.create(DOLLAR167);
	            this.adaptor.addChild(root_0, DOLLAR167_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_GroupingSpec4586);
	            p_VarName168=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName168.getTree());
	            // XQueryParser.g:566:28: (k= COLLATION p_StringLiteral )?
	            var alt69=2;
	            var LA69_0 = this.input.LA(1);

	            if ( (LA69_0==COLLATION) ) {
	                alt69=1;
	            }
	            switch (alt69) {
	                case 1 :
	                    // XQueryParser.g:566:29: k= COLLATION p_StringLiteral
	                    k=this.match(this.input,COLLATION,XQueryParser.FOLLOW_COLLATION_in_p_GroupingSpec4591); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_GroupingSpec4595);
	                    p_StringLiteral169=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral169.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_OrderByClause_return: (function() {
	        XQueryParser.p_OrderByClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_OrderByClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:570:1: p_OrderByClause : ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList ;
	    // $ANTLR start "p_OrderByClause"
	    p_OrderByClause: function() {
	        var retval = new XQueryParser.p_OrderByClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_OrderSpecList170 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:571:9: ( ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList )
	            // XQueryParser.g:571:11: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:571:11: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) )
	            var alt70=2;
	            var LA70_0 = this.input.LA(1);

	            if ( (LA70_0==ORDER) ) {
	                alt70=1;
	            }
	            else if ( (LA70_0==STABLE) ) {
	                alt70=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 70, 0, this.input);

	                throw nvae;
	            }
	            switch (alt70) {
	                case 1 :
	                    // XQueryParser.g:571:12: (k+= ORDER k+= BY )
	                    // XQueryParser.g:571:12: (k+= ORDER k+= BY )
	                    // XQueryParser.g:571:13: k+= ORDER k+= BY
	                    k=this.match(this.input,ORDER,XQueryParser.FOLLOW_ORDER_in_p_OrderByClause4627); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,BY,XQueryParser.FOLLOW_BY_in_p_OrderByClause4631); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;
	                case 2 :
	                    // XQueryParser.g:571:31: (k+= STABLE k+= ORDER k+= BY )
	                    // XQueryParser.g:571:31: (k+= STABLE k+= ORDER k+= BY )
	                    // XQueryParser.g:571:32: k+= STABLE k+= ORDER k+= BY
	                    k=this.match(this.input,STABLE,XQueryParser.FOLLOW_STABLE_in_p_OrderByClause4639); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,ORDER,XQueryParser.FOLLOW_ORDER_in_p_OrderByClause4643); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,BY,XQueryParser.FOLLOW_BY_in_p_OrderByClause4647); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_OrderSpecList_in_p_OrderByClause4653);
	            p_OrderSpecList170=this.p_OrderSpecList();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderSpecList170.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_OrderSpecList_return: (function() {
	        XQueryParser.p_OrderSpecList_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_OrderSpecList_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:575:1: p_OrderSpecList : p_OrderSpec ( COMMA p_OrderSpec )* ;
	    // $ANTLR start "p_OrderSpecList"
	    p_OrderSpecList: function() {
	        var retval = new XQueryParser.p_OrderSpecList_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var COMMA172 = null;
	         var p_OrderSpec171 = null;
	         var p_OrderSpec173 = null;

	        var COMMA172_tree=null;

	        try {
	            // XQueryParser.g:576:9: ( p_OrderSpec ( COMMA p_OrderSpec )* )
	            // XQueryParser.g:576:11: p_OrderSpec ( COMMA p_OrderSpec )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_OrderSpec_in_p_OrderSpecList4679);
	            p_OrderSpec171=this.p_OrderSpec();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderSpec171.getTree());
	            // XQueryParser.g:576:23: ( COMMA p_OrderSpec )*
	            loop71:
	            do {
	                var alt71=2;
	                var LA71_0 = this.input.LA(1);

	                if ( (LA71_0==COMMA) ) {
	                    alt71=1;
	                }


	                switch (alt71) {
	                case 1 :
	                    // XQueryParser.g:576:24: COMMA p_OrderSpec
	                    COMMA172=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_OrderSpecList4682); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COMMA172_tree = this.adaptor.create(COMMA172);
	                    this.adaptor.addChild(root_0, COMMA172_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_OrderSpec_in_p_OrderSpecList4684);
	                    p_OrderSpec173=this.p_OrderSpec();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderSpec173.getTree());


	                    break;

	                default :
	                    break loop71;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_OrderSpec_return: (function() {
	        XQueryParser.p_OrderSpec_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_OrderSpec_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:580:1: p_OrderSpec : p_ExprSingle[true] p_OrderModifier ;
	    // $ANTLR start "p_OrderSpec"
	    p_OrderSpec: function() {
	        var retval = new XQueryParser.p_OrderSpec_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ExprSingle174 = null;
	         var p_OrderModifier175 = null;


	        try {
	            // XQueryParser.g:581:9: ( p_ExprSingle[true] p_OrderModifier )
	            // XQueryParser.g:581:11: p_ExprSingle[true] p_OrderModifier
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_OrderSpec4712);
	            p_ExprSingle174=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle174.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_OrderModifier_in_p_OrderSpec4715);
	            p_OrderModifier175=this.p_OrderModifier();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderModifier175.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_OrderModifier_return: (function() {
	        XQueryParser.p_OrderModifier_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_OrderModifier_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:585:1: p_OrderModifier : (k+= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? ;
	    // $ANTLR start "p_OrderModifier"
	    p_OrderModifier: function() {
	        var retval = new XQueryParser.p_OrderModifier_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_StringLiteral176 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:586:9: ( (k+= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? )
	            // XQueryParser.g:586:11: (k+= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )?
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:586:11: (k+= ASCENDING | k+= DESCENDING )?
	            var alt72=3;
	            var LA72_0 = this.input.LA(1);

	            if ( (LA72_0==ASCENDING) ) {
	                alt72=1;
	            }
	            else if ( (LA72_0==DESCENDING) ) {
	                alt72=2;
	            }
	            switch (alt72) {
	                case 1 :
	                    // XQueryParser.g:586:12: k+= ASCENDING
	                    k=this.match(this.input,ASCENDING,XQueryParser.FOLLOW_ASCENDING_in_p_OrderModifier4744); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:586:27: k+= DESCENDING
	                    k=this.match(this.input,DESCENDING,XQueryParser.FOLLOW_DESCENDING_in_p_OrderModifier4750); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            // XQueryParser.g:586:43: (k+= EMPTY (k+= GREATEST | k+= LEAST ) )?
	            var alt74=2;
	            var LA74_0 = this.input.LA(1);

	            if ( (LA74_0==EMPTY) ) {
	                alt74=1;
	            }
	            switch (alt74) {
	                case 1 :
	                    // XQueryParser.g:586:44: k+= EMPTY (k+= GREATEST | k+= LEAST )
	                    k=this.match(this.input,EMPTY,XQueryParser.FOLLOW_EMPTY_in_p_OrderModifier4757); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    // XQueryParser.g:586:53: (k+= GREATEST | k+= LEAST )
	                    var alt73=2;
	                    var LA73_0 = this.input.LA(1);

	                    if ( (LA73_0==GREATEST) ) {
	                        alt73=1;
	                    }
	                    else if ( (LA73_0==LEAST) ) {
	                        alt73=2;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 73, 0, this.input);

	                        throw nvae;
	                    }
	                    switch (alt73) {
	                        case 1 :
	                            // XQueryParser.g:586:54: k+= GREATEST
	                            k=this.match(this.input,GREATEST,XQueryParser.FOLLOW_GREATEST_in_p_OrderModifier4762); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            k_tree = this.adaptor.create(k);
	                            this.adaptor.addChild(root_0, k_tree);
	                            }
	                            if (org.antlr.lang.isNull(list_k)) list_k = [];
	                            list_k.push(k);



	                            break;
	                        case 2 :
	                            // XQueryParser.g:586:68: k+= LEAST
	                            k=this.match(this.input,LEAST,XQueryParser.FOLLOW_LEAST_in_p_OrderModifier4768); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            k_tree = this.adaptor.create(k);
	                            this.adaptor.addChild(root_0, k_tree);
	                            }
	                            if (org.antlr.lang.isNull(list_k)) list_k = [];
	                            list_k.push(k);



	                            break;

	                    }



	                    break;

	            }

	            // XQueryParser.g:586:80: (k+= COLLATION p_StringLiteral )?
	            var alt75=2;
	            var LA75_0 = this.input.LA(1);

	            if ( (LA75_0==COLLATION) ) {
	                alt75=1;
	            }
	            switch (alt75) {
	                case 1 :
	                    // XQueryParser.g:586:81: k+= COLLATION p_StringLiteral
	                    k=this.match(this.input,COLLATION,XQueryParser.FOLLOW_COLLATION_in_p_OrderModifier4776); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_OrderModifier4778);
	                    p_StringLiteral176=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral176.getTree());


	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ReturnHybrid_return: (function() {
	        XQueryParser.p_ReturnHybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ReturnHybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:590:1: p_ReturnHybrid[strict] : k= RETURN p_Hybrid[$strict,false] ;
	    // $ANTLR start "p_ReturnHybrid"
	    p_ReturnHybrid: function(strict) {
	        var retval = new XQueryParser.p_ReturnHybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_Hybrid177 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:591:9: (k= RETURN p_Hybrid[$strict,false] )
	            // XQueryParser.g:591:11: k= RETURN p_Hybrid[$strict,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_ReturnHybrid4811); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_ReturnHybrid4815);
	            p_Hybrid177=this.p_Hybrid(strict, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid177.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_QuantifiedExpr_return: (function() {
	        XQueryParser.p_QuantifiedExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_QuantifiedExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:595:1: p_QuantifiedExpr : (k= SOME | k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true] ;
	    // $ANTLR start "p_QuantifiedExpr"
	    p_QuantifiedExpr: function() {
	        var retval = new XQueryParser.p_QuantifiedExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR178 = null;
	        var COMMA182 = null;
	        var DOLLAR183 = null;
	         var p_VarName179 = null;
	         var p_TypeDeclaration180 = null;
	         var p_ExprSingle181 = null;
	         var p_QName184 = null;
	         var p_TypeDeclaration185 = null;
	         var p_ExprSingle186 = null;
	         var p_ExprSingle187 = null;

	        var k_tree=null;
	        var DOLLAR178_tree=null;
	        var COMMA182_tree=null;
	        var DOLLAR183_tree=null;

	        try {
	            // XQueryParser.g:596:9: ( (k= SOME | k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true] )
	            // XQueryParser.g:596:11: (k= SOME | k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:596:11: (k= SOME | k= EVERY )
	            var alt76=2;
	            var LA76_0 = this.input.LA(1);

	            if ( (LA76_0==SOME) ) {
	                alt76=1;
	            }
	            else if ( (LA76_0==EVERY) ) {
	                alt76=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 76, 0, this.input);

	                throw nvae;
	            }
	            switch (alt76) {
	                case 1 :
	                    // XQueryParser.g:596:12: k= SOME
	                    k=this.match(this.input,SOME,XQueryParser.FOLLOW_SOME_in_p_QuantifiedExpr4845); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:596:21: k= EVERY
	                    k=this.match(this.input,EVERY,XQueryParser.FOLLOW_EVERY_in_p_QuantifiedExpr4851); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR178=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_QuantifiedExpr4856); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR178_tree = this.adaptor.create(DOLLAR178);
	            this.adaptor.addChild(root_0, DOLLAR178_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_QuantifiedExpr4858);
	            p_VarName179=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName179.getTree());
	            // XQueryParser.g:596:62: ( p_TypeDeclaration )?
	            var alt77=2;
	            var LA77_0 = this.input.LA(1);

	            if ( (LA77_0==AS) ) {
	                alt77=1;
	            }
	            switch (alt77) {
	                case 1 :
	                    // XQueryParser.g:596:62: p_TypeDeclaration
	                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4860);
	                    p_TypeDeclaration180=this.p_TypeDeclaration();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration180.getTree());


	                    break;

	            }

	            k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_QuantifiedExpr4865); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4869);
	            p_ExprSingle181=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle181.getTree());
	            // XQueryParser.g:596:120: ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )*
	            loop79:
	            do {
	                var alt79=2;
	                var LA79_0 = this.input.LA(1);

	                if ( (LA79_0==COMMA) ) {
	                    alt79=1;
	                }


	                switch (alt79) {
	                case 1 :
	                    // XQueryParser.g:596:121: COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true]
	                    COMMA182=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_QuantifiedExpr4873); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COMMA182_tree = this.adaptor.create(COMMA182);
	                    this.adaptor.addChild(root_0, COMMA182_tree);
	                    }
	                    DOLLAR183=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_QuantifiedExpr4875); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR183_tree = this.adaptor.create(DOLLAR183);
	                    this.adaptor.addChild(root_0, DOLLAR183_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_QuantifiedExpr4877);
	                    p_QName184=this.p_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName184.getTree());
	                    // XQueryParser.g:596:142: ( p_TypeDeclaration )?
	                    var alt78=2;
	                    var LA78_0 = this.input.LA(1);

	                    if ( (LA78_0==AS) ) {
	                        alt78=1;
	                    }
	                    switch (alt78) {
	                        case 1 :
	                            // XQueryParser.g:596:142: p_TypeDeclaration
	                            this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4879);
	                            p_TypeDeclaration185=this.p_TypeDeclaration();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration185.getTree());


	                            break;

	                    }

	                    k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_QuantifiedExpr4884); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4888);
	                    p_ExprSingle186=this.p_ExprSingle(true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle186.getTree());


	                    break;

	                default :
	                    break loop79;
	                }
	            } while (true);

	            k=this.match(this.input,SATISFIES,XQueryParser.FOLLOW_SATISFIES_in_p_QuantifiedExpr4895); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4899);
	            p_ExprSingle187=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle187.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SwitchHybrid_return: (function() {
	        XQueryParser.p_SwitchHybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SwitchHybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:600:1: p_SwitchHybrid[strict] : k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false] ;
	    // $ANTLR start "p_SwitchHybrid"
	    p_SwitchHybrid: function(strict) {
	        var retval = new XQueryParser.p_SwitchHybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LPAREN188 = null;
	        var RPAREN190 = null;
	         var p_Expr189 = null;
	         var p_SwitchCaseHybrid191 = null;
	         var p_Hybrid192 = null;

	        var k_tree=null;
	        var LPAREN188_tree=null;
	        var RPAREN190_tree=null;

	        try {
	            // XQueryParser.g:601:9: (k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false] )
	            // XQueryParser.g:601:11: k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,SWITCH,XQueryParser.FOLLOW_SWITCH_in_p_SwitchHybrid4929); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LPAREN188=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SwitchHybrid4933); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN188_tree = this.adaptor.create(LPAREN188);
	            this.adaptor.addChild(root_0, LPAREN188_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_SwitchHybrid4935);
	            p_Expr189=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr189.getTree());
	            RPAREN190=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SwitchHybrid4938); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN190_tree = this.adaptor.create(RPAREN190);
	            this.adaptor.addChild(root_0, RPAREN190_tree);
	            }
	            // XQueryParser.g:601:67: ( p_SwitchCaseHybrid[$strict] )+
	            var cnt80=0;
	            loop80:
	            do {
	                var alt80=2;
	                var LA80_0 = this.input.LA(1);

	                if ( (LA80_0==CASE) ) {
	                    alt80=1;
	                }


	                switch (alt80) {
	                case 1 :
	                    // XQueryParser.g:601:67: p_SwitchCaseHybrid[$strict]
	                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchCaseHybrid_in_p_SwitchHybrid4940);
	                    p_SwitchCaseHybrid191=this.p_SwitchCaseHybrid(strict);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchCaseHybrid191.getTree());


	                    break;

	                default :
	                    if ( cnt80 >= 1 ) {
	                        break loop80;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(80, this.input);
	                        throw eee;
	                }
	                cnt80++;
	            } while (true);

	            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_SwitchHybrid4946); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_SwitchHybrid4952); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_SwitchHybrid4956);
	            p_Hybrid192=this.p_Hybrid(strict, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid192.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SwitchCaseHybrid_return: (function() {
	        XQueryParser.p_SwitchCaseHybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SwitchCaseHybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:605:1: p_SwitchCaseHybrid[strict] : (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false] ;
	    // $ANTLR start "p_SwitchCaseHybrid"
	    p_SwitchCaseHybrid: function(strict) {
	        var retval = new XQueryParser.p_SwitchCaseHybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_SwitchCaseOperand193 = null;
	         var p_Hybrid194 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:606:9: ( (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false] )
	            // XQueryParser.g:606:11: (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false]
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:606:11: (k= CASE p_SwitchCaseOperand )+
	            var cnt81=0;
	            loop81:
	            do {
	                var alt81=2;
	                var LA81_0 = this.input.LA(1);

	                if ( (LA81_0==CASE) ) {
	                    alt81=1;
	                }


	                switch (alt81) {
	                case 1 :
	                    // XQueryParser.g:606:12: k= CASE p_SwitchCaseOperand
	                    k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_SwitchCaseHybrid4987); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseHybrid4991);
	                    p_SwitchCaseOperand193=this.p_SwitchCaseOperand();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchCaseOperand193.getTree());


	                    break;

	                default :
	                    if ( cnt81 >= 1 ) {
	                        break loop81;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(81, this.input);
	                        throw eee;
	                }
	                cnt81++;
	            } while (true);

	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_SwitchCaseHybrid4997); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_SwitchCaseHybrid5001);
	            p_Hybrid194=this.p_Hybrid(strict, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid194.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SwitchCaseOperand_return: (function() {
	        XQueryParser.p_SwitchCaseOperand_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SwitchCaseOperand_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:610:1: p_SwitchCaseOperand : p_ExprSingle[true] ;
	    // $ANTLR start "p_SwitchCaseOperand"
	    p_SwitchCaseOperand: function() {
	        var retval = new XQueryParser.p_SwitchCaseOperand_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ExprSingle195 = null;


	        try {
	            // XQueryParser.g:611:9: ( p_ExprSingle[true] )
	            // XQueryParser.g:611:11: p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand5028);
	            p_ExprSingle195=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle195.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TypeswitchHybrid_return: (function() {
	        XQueryParser.p_TypeswitchHybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TypeswitchHybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:615:1: p_TypeswitchHybrid[strict] : k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false] ;
	    // $ANTLR start "p_TypeswitchHybrid"
	    p_TypeswitchHybrid: function(strict) {
	        var retval = new XQueryParser.p_TypeswitchHybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LPAREN196 = null;
	        var RPAREN198 = null;
	        var DOLLAR200 = null;
	         var p_Expr197 = null;
	         var p_CaseHybrid199 = null;
	         var p_VarName201 = null;
	         var p_Hybrid202 = null;

	        var k_tree=null;
	        var LPAREN196_tree=null;
	        var RPAREN198_tree=null;
	        var DOLLAR200_tree=null;

	        try {
	            // XQueryParser.g:616:9: (k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false] )
	            // XQueryParser.g:616:11: k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,TYPESWITCH,XQueryParser.FOLLOW_TYPESWITCH_in_p_TypeswitchHybrid5058); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LPAREN196=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_TypeswitchHybrid5062); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN196_tree = this.adaptor.create(LPAREN196);
	            this.adaptor.addChild(root_0, LPAREN196_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_TypeswitchHybrid5064);
	            p_Expr197=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr197.getTree());
	            RPAREN198=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_TypeswitchHybrid5067); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN198_tree = this.adaptor.create(RPAREN198);
	            this.adaptor.addChild(root_0, RPAREN198_tree);
	            }
	            // XQueryParser.g:616:71: ( p_CaseHybrid[$strict] )+
	            var cnt82=0;
	            loop82:
	            do {
	                var alt82=2;
	                var LA82_0 = this.input.LA(1);

	                if ( (LA82_0==CASE) ) {
	                    alt82=1;
	                }


	                switch (alt82) {
	                case 1 :
	                    // XQueryParser.g:616:71: p_CaseHybrid[$strict]
	                    this.pushFollow(XQueryParser.FOLLOW_p_CaseHybrid_in_p_TypeswitchHybrid5069);
	                    p_CaseHybrid199=this.p_CaseHybrid(strict);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CaseHybrid199.getTree());


	                    break;

	                default :
	                    if ( cnt82 >= 1 ) {
	                        break loop82;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(82, this.input);
	                        throw eee;
	                }
	                cnt82++;
	            } while (true);

	            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_TypeswitchHybrid5075); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:616:119: ( DOLLAR p_VarName )?
	            var alt83=2;
	            var LA83_0 = this.input.LA(1);

	            if ( (LA83_0==DOLLAR) ) {
	                alt83=1;
	            }
	            switch (alt83) {
	                case 1 :
	                    // XQueryParser.g:616:120: DOLLAR p_VarName
	                    DOLLAR200=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TypeswitchHybrid5080); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR200_tree = this.adaptor.create(DOLLAR200);
	                    this.adaptor.addChild(root_0, DOLLAR200_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TypeswitchHybrid5082);
	                    p_VarName201=this.p_VarName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName201.getTree());


	                    break;

	            }

	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_TypeswitchHybrid5088); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_TypeswitchHybrid5092);
	            p_Hybrid202=this.p_Hybrid(strict, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid202.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CaseHybrid_return: (function() {
	        XQueryParser.p_CaseHybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CaseHybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:620:1: p_CaseHybrid[strict] : k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false] ;
	    // $ANTLR start "p_CaseHybrid"
	    p_CaseHybrid: function(strict) {
	        var retval = new XQueryParser.p_CaseHybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR203 = null;
	         var p_VarName204 = null;
	         var p_SequenceTypeUnion205 = null;
	         var p_ExprSingle206 = null;

	        var k_tree=null;
	        var DOLLAR203_tree=null;

	        try {
	            // XQueryParser.g:621:9: (k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false] )
	            // XQueryParser.g:621:11: k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_CaseHybrid5122); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:621:33: ( DOLLAR p_VarName k= AS )?
	            var alt84=2;
	            var LA84_0 = this.input.LA(1);

	            if ( (LA84_0==DOLLAR) ) {
	                alt84=1;
	            }
	            switch (alt84) {
	                case 1 :
	                    // XQueryParser.g:621:34: DOLLAR p_VarName k= AS
	                    DOLLAR203=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_CaseHybrid5127); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR203_tree = this.adaptor.create(DOLLAR203);
	                    this.adaptor.addChild(root_0, DOLLAR203_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_CaseHybrid5129);
	                    p_VarName204=this.p_VarName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName204.getTree());
	                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CaseHybrid5133); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }


	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_SequenceTypeUnion_in_p_CaseHybrid5139);
	            p_SequenceTypeUnion205=this.p_SequenceTypeUnion();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceTypeUnion205.getTree());
	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_CaseHybrid5143); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_CaseHybrid5147);
	            p_ExprSingle206=this.p_ExprSingle(false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle206.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SequenceTypeUnion_return: (function() {
	        XQueryParser.p_SequenceTypeUnion_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SequenceTypeUnion_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:625:1: p_SequenceTypeUnion : p_SequenceType ( VBAR p_SequenceType )* ;
	    // $ANTLR start "p_SequenceTypeUnion"
	    p_SequenceTypeUnion: function() {
	        var retval = new XQueryParser.p_SequenceTypeUnion_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var VBAR208 = null;
	         var p_SequenceType207 = null;
	         var p_SequenceType209 = null;

	        var VBAR208_tree=null;

	        try {
	            // XQueryParser.g:626:9: ( p_SequenceType ( VBAR p_SequenceType )* )
	            // XQueryParser.g:626:11: p_SequenceType ( VBAR p_SequenceType )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5174);
	            p_SequenceType207=this.p_SequenceType();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType207.getTree());
	            // XQueryParser.g:626:26: ( VBAR p_SequenceType )*
	            loop85:
	            do {
	                var alt85=2;
	                var LA85_0 = this.input.LA(1);

	                if ( (LA85_0==VBAR) ) {
	                    alt85=1;
	                }


	                switch (alt85) {
	                case 1 :
	                    // XQueryParser.g:626:27: VBAR p_SequenceType
	                    VBAR208=this.match(this.input,VBAR,XQueryParser.FOLLOW_VBAR_in_p_SequenceTypeUnion5177); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    VBAR208_tree = this.adaptor.create(VBAR208);
	                    this.adaptor.addChild(root_0, VBAR208_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5179);
	                    p_SequenceType209=this.p_SequenceType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType209.getTree());


	                    break;

	                default :
	                    break loop85;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IfHybrid_return: (function() {
	        XQueryParser.p_IfHybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IfHybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:630:1: p_IfHybrid[strict] : k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false] ;
	    // $ANTLR start "p_IfHybrid"
	    p_IfHybrid: function(strict) {
	        var retval = new XQueryParser.p_IfHybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LPAREN210 = null;
	        var RPAREN212 = null;
	         var p_Expr211 = null;
	         var p_Hybrid213 = null;
	         var p_Hybrid214 = null;

	        var k_tree=null;
	        var LPAREN210_tree=null;
	        var RPAREN212_tree=null;

	        try {
	            // XQueryParser.g:631:9: (k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false] )
	            // XQueryParser.g:631:11: k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,IF,XQueryParser.FOLLOW_IF_in_p_IfHybrid5210); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LPAREN210=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_IfHybrid5214); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN210_tree = this.adaptor.create(LPAREN210);
	            this.adaptor.addChild(root_0, LPAREN210_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_IfHybrid5216);
	            p_Expr211=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr211.getTree());
	            RPAREN212=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_IfHybrid5219); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN212_tree = this.adaptor.create(RPAREN212);
	            this.adaptor.addChild(root_0, RPAREN212_tree);
	            }
	            k=this.match(this.input,THEN,XQueryParser.FOLLOW_THEN_in_p_IfHybrid5223); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_IfHybrid5227);
	            p_Hybrid213=this.p_Hybrid(strict, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid213.getTree());
	            k=this.match(this.input,ELSE,XQueryParser.FOLLOW_ELSE_in_p_IfHybrid5232); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_IfHybrid5236);
	            p_Hybrid214=this.p_Hybrid(strict, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid214.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TryCatchExpr_return: (function() {
	        XQueryParser.p_TryCatchExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TryCatchExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:635:1: p_TryCatchExpr : p_TryClause ( p_CatchClause )+ ;
	    // $ANTLR start "p_TryCatchExpr"
	    p_TryCatchExpr: function() {
	        var retval = new XQueryParser.p_TryCatchExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_TryClause215 = null;
	         var p_CatchClause216 = null;


	        try {
	            // XQueryParser.g:636:9: ( p_TryClause ( p_CatchClause )+ )
	            // XQueryParser.g:636:11: p_TryClause ( p_CatchClause )+
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_TryClause_in_p_TryCatchExpr5263);
	            p_TryClause215=this.p_TryClause();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TryClause215.getTree());
	            // XQueryParser.g:636:23: ( p_CatchClause )+
	            var cnt86=0;
	            loop86:
	            do {
	                var alt86=2;
	                var LA86_0 = this.input.LA(1);

	                if ( (LA86_0==CATCH) ) {
	                    alt86=1;
	                }


	                switch (alt86) {
	                case 1 :
	                    // XQueryParser.g:636:23: p_CatchClause
	                    this.pushFollow(XQueryParser.FOLLOW_p_CatchClause_in_p_TryCatchExpr5265);
	                    p_CatchClause216=this.p_CatchClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CatchClause216.getTree());


	                    break;

	                default :
	                    if ( cnt86 >= 1 ) {
	                        break loop86;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(86, this.input);
	                        throw eee;
	                }
	                cnt86++;
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TryClause_return: (function() {
	        XQueryParser.p_TryClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TryClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:640:1: p_TryClause : k= TRY LBRACKET p_TryTargetExpr RBRACKET ;
	    // $ANTLR start "p_TryClause"
	    p_TryClause: function() {
	        var retval = new XQueryParser.p_TryClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET217 = null;
	        var RBRACKET219 = null;
	         var p_TryTargetExpr218 = null;

	        var k_tree=null;
	        var LBRACKET217_tree=null;
	        var RBRACKET219_tree=null;

	        try {
	            // XQueryParser.g:641:9: (k= TRY LBRACKET p_TryTargetExpr RBRACKET )
	            // XQueryParser.g:641:11: k= TRY LBRACKET p_TryTargetExpr RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,TRY,XQueryParser.FOLLOW_TRY_in_p_TryClause5294); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LBRACKET217=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_TryClause5298); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET217_tree = this.adaptor.create(LBRACKET217);
	            this.adaptor.addChild(root_0, LBRACKET217_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_TryTargetExpr_in_p_TryClause5300);
	            p_TryTargetExpr218=this.p_TryTargetExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TryTargetExpr218.getTree());
	            RBRACKET219=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_TryClause5302); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET219_tree = this.adaptor.create(RBRACKET219);
	            this.adaptor.addChild(root_0, RBRACKET219_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TryTargetExpr_return: (function() {
	        XQueryParser.p_TryTargetExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TryTargetExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:645:1: p_TryTargetExpr : p_Expr[false,false] ;
	    // $ANTLR start "p_TryTargetExpr"
	    p_TryTargetExpr: function() {
	        var retval = new XQueryParser.p_TryTargetExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Expr220 = null;


	        try {
	            // XQueryParser.g:646:9: ( p_Expr[false,false] )
	            // XQueryParser.g:646:11: p_Expr[false,false]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_TryTargetExpr5328);
	            p_Expr220=this.p_Expr(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr220.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CatchClause_return: (function() {
	        XQueryParser.p_CatchClause_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CatchClause_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:650:1: p_CatchClause : k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET ;
	    // $ANTLR start "p_CatchClause"
	    p_CatchClause: function() {
	        var retval = new XQueryParser.p_CatchClause_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET222 = null;
	        var RBRACKET224 = null;
	         var p_CatchErrorList221 = null;
	         var p_Expr223 = null;

	        var k_tree=null;
	        var LBRACKET222_tree=null;
	        var RBRACKET224_tree=null;

	        try {
	            // XQueryParser.g:651:9: (k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET )
	            // XQueryParser.g:651:11: k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,CATCH,XQueryParser.FOLLOW_CATCH_in_p_CatchClause5357); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_CatchErrorList_in_p_CatchClause5361);
	            p_CatchErrorList221=this.p_CatchErrorList();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CatchErrorList221.getTree());
	            LBRACKET222=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CatchClause5363); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET222_tree = this.adaptor.create(LBRACKET222);
	            this.adaptor.addChild(root_0, LBRACKET222_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_CatchClause5365);
	            p_Expr223=this.p_Expr(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr223.getTree());
	            RBRACKET224=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CatchClause5368); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET224_tree = this.adaptor.create(RBRACKET224);
	            this.adaptor.addChild(root_0, RBRACKET224_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CatchErrorList_return: (function() {
	        XQueryParser.p_CatchErrorList_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CatchErrorList_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:655:1: p_CatchErrorList : ( p_NameTest ( VBAR p_NameTest )* | {...}? => () );
	    // $ANTLR start "p_CatchErrorList"
	    p_CatchErrorList: function() {
	        var retval = new XQueryParser.p_CatchErrorList_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var VBAR226 = null;
	         var p_NameTest225 = null;
	         var p_NameTest227 = null;

	        var VBAR226_tree=null;

	        try {
	            // XQueryParser.g:656:9: ( p_NameTest ( VBAR p_NameTest )* | {...}? => () )
	            var alt88=2;
	            var LA88_0 = this.input.LA(1);

	            if ( ((LA88_0>=ANCESTOR && LA88_0<=DECIMAL_SEPARATOR)||(LA88_0>=DIGIT && LA88_0<=SKIP)||(LA88_0>=VALUE && LA88_0<=QUOT_ER)||LA88_0==STAR||(LA88_0>=APOS && LA88_0<=QUOT)||LA88_0==L_NCName||LA88_0==EXPLICITLY) ) {
	                alt88=1;
	            }
	            else if ( (LA88_0==LBRACKET) && ((this.lc(MLS)))) {
	                alt88=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 88, 0, this.input);

	                throw nvae;
	            }
	            switch (alt88) {
	                case 1 :
	                    // XQueryParser.g:656:11: p_NameTest ( VBAR p_NameTest )*
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_NameTest_in_p_CatchErrorList5394);
	                    p_NameTest225=this.p_NameTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NameTest225.getTree());
	                    // XQueryParser.g:656:22: ( VBAR p_NameTest )*
	                    loop87:
	                    do {
	                        var alt87=2;
	                        var LA87_0 = this.input.LA(1);

	                        if ( (LA87_0==VBAR) ) {
	                            alt87=1;
	                        }


	                        switch (alt87) {
	                        case 1 :
	                            // XQueryParser.g:656:23: VBAR p_NameTest
	                            VBAR226=this.match(this.input,VBAR,XQueryParser.FOLLOW_VBAR_in_p_CatchErrorList5397); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            VBAR226_tree = this.adaptor.create(VBAR226);
	                            this.adaptor.addChild(root_0, VBAR226_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_NameTest_in_p_CatchErrorList5399);
	                            p_NameTest227=this.p_NameTest();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NameTest227.getTree());


	                            break;

	                        default :
	                            break loop87;
	                        }
	                    } while (true);



	                    break;
	                case 2 :
	                    // XQueryParser.g:657:11: {...}? => ()
	                    root_0 = this.adaptor.nil();

	                    if ( !((this.lc(MLS))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_CatchErrorList", "this.lc(MLS)");
	                    }
	                    // XQueryParser.g:657:29: ()
	                    // XQueryParser.g:657:43: 




	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_OrExpr_return: (function() {
	        XQueryParser.p_OrExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_OrExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:661:1: p_OrExpr : p_AndExpr (k= OR p_AndExpr )* ;
	    // $ANTLR start "p_OrExpr"
	    p_OrExpr: function() {
	        var retval = new XQueryParser.p_OrExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_AndExpr228 = null;
	         var p_AndExpr229 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:662:9: ( p_AndExpr (k= OR p_AndExpr )* )
	            // XQueryParser.g:662:11: p_AndExpr (k= OR p_AndExpr )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_AndExpr_in_p_OrExpr5444);
	            p_AndExpr228=this.p_AndExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AndExpr228.getTree());
	            // XQueryParser.g:662:21: (k= OR p_AndExpr )*
	            loop89:
	            do {
	                var alt89=2;
	                var LA89_0 = this.input.LA(1);

	                if ( (LA89_0==OR) ) {
	                    alt89=1;
	                }


	                switch (alt89) {
	                case 1 :
	                    // XQueryParser.g:662:23: k= OR p_AndExpr
	                    k=this.match(this.input,OR,XQueryParser.FOLLOW_OR_in_p_OrExpr5450); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_AndExpr_in_p_OrExpr5454);
	                    p_AndExpr229=this.p_AndExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AndExpr229.getTree());


	                    break;

	                default :
	                    break loop89;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AndExpr_return: (function() {
	        XQueryParser.p_AndExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AndExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:666:1: p_AndExpr : p_ComparisonExpr (k= AND p_ComparisonExpr )* ;
	    // $ANTLR start "p_AndExpr"
	    p_AndExpr: function() {
	        var retval = new XQueryParser.p_AndExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_ComparisonExpr230 = null;
	         var p_ComparisonExpr231 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:667:9: ( p_ComparisonExpr (k= AND p_ComparisonExpr )* )
	            // XQueryParser.g:667:11: p_ComparisonExpr (k= AND p_ComparisonExpr )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ComparisonExpr_in_p_AndExpr5483);
	            p_ComparisonExpr230=this.p_ComparisonExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ComparisonExpr230.getTree());
	            // XQueryParser.g:667:28: (k= AND p_ComparisonExpr )*
	            loop90:
	            do {
	                var alt90=2;
	                var LA90_0 = this.input.LA(1);

	                if ( (LA90_0==AND) ) {
	                    alt90=1;
	                }


	                switch (alt90) {
	                case 1 :
	                    // XQueryParser.g:667:30: k= AND p_ComparisonExpr
	                    k=this.match(this.input,AND,XQueryParser.FOLLOW_AND_in_p_AndExpr5489); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_ComparisonExpr_in_p_AndExpr5493);
	                    p_ComparisonExpr231=this.p_ComparisonExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ComparisonExpr231.getTree());


	                    break;

	                default :
	                    break loop90;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ComparisonExpr_return: (function() {
	        XQueryParser.p_ComparisonExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ComparisonExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:672:1: p_ComparisonExpr : p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? ;
	    // $ANTLR start "p_ComparisonExpr"
	    p_ComparisonExpr: function() {
	        var retval = new XQueryParser.p_ComparisonExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_FTContainsExpr232 = null;
	         var p_ValueComp233 = null;
	         var p_GeneralComp234 = null;
	         var p_NodeComp235 = null;
	         var p_FTContainsExpr236 = null;


	        try {
	            // XQueryParser.g:673:9: ( p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? )
	            // XQueryParser.g:673:11: p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5523);
	            p_FTContainsExpr232=this.p_FTContainsExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTContainsExpr232.getTree());
	            // XQueryParser.g:673:28: ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
	            var alt92=2;
	            var LA92_0 = this.input.LA(1);

	            if ( (LA92_0==EQ||LA92_0==GE||LA92_0==GT||LA92_0==IS||LA92_0==LE||LA92_0==LT||LA92_0==NE||LA92_0==EQUAL||LA92_0==NOTEQUAL||(LA92_0>=SMALLER && LA92_0<=GREATER_GREATER)) ) {
	                alt92=1;
	            }
	            switch (alt92) {
	                case 1 :
	                    // XQueryParser.g:673:30: ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr
	                    // XQueryParser.g:673:30: ( p_ValueComp | p_GeneralComp | p_NodeComp )
	                    var alt91=3;
	                    switch ( this.input.LA(1) ) {
	                    case EQ:
	                    case GE:
	                    case GT:
	                    case LE:
	                    case LT:
	                    case NE:
	                        alt91=1;
	                        break;
	                    case EQUAL:
	                    case NOTEQUAL:
	                    case SMALLER:
	                    case GREATER:
	                    case SMALLEREQ:
	                    case GREATEREQ:
	                        alt91=2;
	                        break;
	                    case IS:
	                    case SMALLER_SMALLER:
	                    case GREATER_GREATER:
	                        alt91=3;
	                        break;
	                    default:
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 91, 0, this.input);

	                        throw nvae;
	                    }

	                    switch (alt91) {
	                        case 1 :
	                            // XQueryParser.g:673:31: p_ValueComp
	                            this.pushFollow(XQueryParser.FOLLOW_p_ValueComp_in_p_ComparisonExpr5528);
	                            p_ValueComp233=this.p_ValueComp();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ValueComp233.getTree());


	                            break;
	                        case 2 :
	                            // XQueryParser.g:673:45: p_GeneralComp
	                            this.pushFollow(XQueryParser.FOLLOW_p_GeneralComp_in_p_ComparisonExpr5532);
	                            p_GeneralComp234=this.p_GeneralComp();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GeneralComp234.getTree());


	                            break;
	                        case 3 :
	                            // XQueryParser.g:673:61: p_NodeComp
	                            this.pushFollow(XQueryParser.FOLLOW_p_NodeComp_in_p_ComparisonExpr5536);
	                            p_NodeComp235=this.p_NodeComp();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NodeComp235.getTree());


	                            break;

	                    }

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5539);
	                    p_FTContainsExpr236=this.p_FTContainsExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTContainsExpr236.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_RangeExpr_return: (function() {
	        XQueryParser.p_RangeExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_RangeExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:677:1: p_RangeExpr : p_AdditiveExpr (k= TO p_AdditiveExpr )? ;
	    // $ANTLR start "p_RangeExpr"
	    p_RangeExpr: function() {
	        var retval = new XQueryParser.p_RangeExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_AdditiveExpr237 = null;
	         var p_AdditiveExpr238 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:678:9: ( p_AdditiveExpr (k= TO p_AdditiveExpr )? )
	            // XQueryParser.g:678:11: p_AdditiveExpr (k= TO p_AdditiveExpr )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_RangeExpr5568);
	            p_AdditiveExpr237=this.p_AdditiveExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr237.getTree());
	            // XQueryParser.g:678:26: (k= TO p_AdditiveExpr )?
	            var alt93=2;
	            var LA93_0 = this.input.LA(1);

	            if ( (LA93_0==TO) ) {
	                alt93=1;
	            }
	            switch (alt93) {
	                case 1 :
	                    // XQueryParser.g:678:28: k= TO p_AdditiveExpr
	                    k=this.match(this.input,TO,XQueryParser.FOLLOW_TO_in_p_RangeExpr5574); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_RangeExpr5578);
	                    p_AdditiveExpr238=this.p_AdditiveExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr238.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AdditiveExpr_return: (function() {
	        XQueryParser.p_AdditiveExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AdditiveExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:682:1: p_AdditiveExpr : p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* ;
	    // $ANTLR start "p_AdditiveExpr"
	    p_AdditiveExpr: function() {
	        var retval = new XQueryParser.p_AdditiveExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var set240 = null;
	         var p_MultiplicativeExpr239 = null;
	         var p_MultiplicativeExpr241 = null;

	        var set240_tree=null;

	        try {
	            // XQueryParser.g:683:9: ( p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* )
	            // XQueryParser.g:683:11: p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5607);
	            p_MultiplicativeExpr239=this.p_MultiplicativeExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_MultiplicativeExpr239.getTree());
	            // XQueryParser.g:683:32: ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
	            loop94:
	            do {
	                var alt94=2;
	                var LA94_0 = this.input.LA(1);

	                if ( ((LA94_0>=PLUS && LA94_0<=MINUS)) ) {
	                    alt94=1;
	                }


	                switch (alt94) {
	                case 1 :
	                    // XQueryParser.g:683:34: ( PLUS | MINUS ) p_MultiplicativeExpr
	                    set240=this.input.LT(1);
	                    if ( (this.input.LA(1)>=PLUS && this.input.LA(1)<=MINUS) ) {
	                        this.input.consume();
	                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set240));
	                        this.state.errorRecovery=false;this.state.failed=false;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                        throw mse;
	                    }

	                    this.pushFollow(XQueryParser.FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5619);
	                    p_MultiplicativeExpr241=this.p_MultiplicativeExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_MultiplicativeExpr241.getTree());


	                    break;

	                default :
	                    break loop94;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_MultiplicativeExpr_return: (function() {
	        XQueryParser.p_MultiplicativeExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_MultiplicativeExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:687:1: p_MultiplicativeExpr : p_UnionExpr ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )* ;
	    // $ANTLR start "p_MultiplicativeExpr"
	    p_MultiplicativeExpr: function() {
	        var retval = new XQueryParser.p_MultiplicativeExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var STAR243 = null;
	         var p_UnionExpr242 = null;
	         var p_UnionExpr244 = null;

	        var k_tree=null;
	        var STAR243_tree=null;

	        try {
	            // XQueryParser.g:688:9: ( p_UnionExpr ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )* )
	            // XQueryParser.g:688:11: p_UnionExpr ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5648);
	            p_UnionExpr242=this.p_UnionExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnionExpr242.getTree());
	            // XQueryParser.g:688:23: ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )*
	            loop97:
	            do {
	                var alt97=2;
	                var LA97_0 = this.input.LA(1);

	                if ( (LA97_0==DIV||LA97_0==IDIV||LA97_0==MOD||LA97_0==STAR) ) {
	                    alt97=1;
	                }


	                switch (alt97) {
	                case 1 :
	                    // XQueryParser.g:688:25: ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr
	                    // XQueryParser.g:688:25: ( STAR | (k= DIV | k= IDIV | k= MOD ) )
	                    var alt96=2;
	                    var LA96_0 = this.input.LA(1);

	                    if ( (LA96_0==STAR) ) {
	                        alt96=1;
	                    }
	                    else if ( (LA96_0==DIV||LA96_0==IDIV||LA96_0==MOD) ) {
	                        alt96=2;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 96, 0, this.input);

	                        throw nvae;
	                    }
	                    switch (alt96) {
	                        case 1 :
	                            // XQueryParser.g:688:26: STAR
	                            STAR243=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_MultiplicativeExpr5653); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            STAR243_tree = this.adaptor.create(STAR243);
	                            this.adaptor.addChild(root_0, STAR243_tree);
	                            }


	                            break;
	                        case 2 :
	                            // XQueryParser.g:688:33: (k= DIV | k= IDIV | k= MOD )
	                            // XQueryParser.g:688:33: (k= DIV | k= IDIV | k= MOD )
	                            var alt95=3;
	                            switch ( this.input.LA(1) ) {
	                            case DIV:
	                                alt95=1;
	                                break;
	                            case IDIV:
	                                alt95=2;
	                                break;
	                            case MOD:
	                                alt95=3;
	                                break;
	                            default:
	                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                                var nvae =
	                                    new org.antlr.runtime.NoViableAltException("", 95, 0, this.input);

	                                throw nvae;
	                            }

	                            switch (alt95) {
	                                case 1 :
	                                    // XQueryParser.g:688:34: k= DIV
	                                    k=this.match(this.input,DIV,XQueryParser.FOLLOW_DIV_in_p_MultiplicativeExpr5660); if (this.state.failed) return retval;
	                                    if ( this.state.backtracking===0 ) {
	                                    k_tree = this.adaptor.create(k);
	                                    this.adaptor.addChild(root_0, k_tree);
	                                    }


	                                    break;
	                                case 2 :
	                                    // XQueryParser.g:688:42: k= IDIV
	                                    k=this.match(this.input,IDIV,XQueryParser.FOLLOW_IDIV_in_p_MultiplicativeExpr5666); if (this.state.failed) return retval;
	                                    if ( this.state.backtracking===0 ) {
	                                    k_tree = this.adaptor.create(k);
	                                    this.adaptor.addChild(root_0, k_tree);
	                                    }


	                                    break;
	                                case 3 :
	                                    // XQueryParser.g:688:51: k= MOD
	                                    k=this.match(this.input,MOD,XQueryParser.FOLLOW_MOD_in_p_MultiplicativeExpr5672); if (this.state.failed) return retval;
	                                    if ( this.state.backtracking===0 ) {
	                                    k_tree = this.adaptor.create(k);
	                                    this.adaptor.addChild(root_0, k_tree);
	                                    }


	                                    break;

	                            }

	                            if ( this.state.backtracking===0 ) {
	                              this.ak(k);
	                            }


	                            break;

	                    }

	                    this.pushFollow(XQueryParser.FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5678);
	                    p_UnionExpr244=this.p_UnionExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnionExpr244.getTree());


	                    break;

	                default :
	                    break loop97;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_UnionExpr_return: (function() {
	        XQueryParser.p_UnionExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_UnionExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:692:1: p_UnionExpr : p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )* ;
	    // $ANTLR start "p_UnionExpr"
	    p_UnionExpr: function() {
	        var retval = new XQueryParser.p_UnionExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var VBAR246 = null;
	         var p_IntersectExceptExpr245 = null;
	         var p_IntersectExceptExpr247 = null;

	        var k_tree=null;
	        var VBAR246_tree=null;

	        try {
	            // XQueryParser.g:693:9: ( p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )* )
	            // XQueryParser.g:693:11: p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5707);
	            p_IntersectExceptExpr245=this.p_IntersectExceptExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IntersectExceptExpr245.getTree());
	            // XQueryParser.g:693:33: ( (k= UNION | VBAR ) p_IntersectExceptExpr )*
	            loop99:
	            do {
	                var alt99=2;
	                var LA99_0 = this.input.LA(1);

	                if ( (LA99_0==UNION||LA99_0==VBAR) ) {
	                    alt99=1;
	                }


	                switch (alt99) {
	                case 1 :
	                    // XQueryParser.g:693:35: (k= UNION | VBAR ) p_IntersectExceptExpr
	                    // XQueryParser.g:693:35: (k= UNION | VBAR )
	                    var alt98=2;
	                    var LA98_0 = this.input.LA(1);

	                    if ( (LA98_0==UNION) ) {
	                        alt98=1;
	                    }
	                    else if ( (LA98_0==VBAR) ) {
	                        alt98=2;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 98, 0, this.input);

	                        throw nvae;
	                    }
	                    switch (alt98) {
	                        case 1 :
	                            // XQueryParser.g:693:36: k= UNION
	                            k=this.match(this.input,UNION,XQueryParser.FOLLOW_UNION_in_p_UnionExpr5714); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            k_tree = this.adaptor.create(k);
	                            this.adaptor.addChild(root_0, k_tree);
	                            }
	                            if ( this.state.backtracking===0 ) {
	                              this.ak(k);
	                            }


	                            break;
	                        case 2 :
	                            // XQueryParser.g:693:61: VBAR
	                            VBAR246=this.match(this.input,VBAR,XQueryParser.FOLLOW_VBAR_in_p_UnionExpr5720); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            VBAR246_tree = this.adaptor.create(VBAR246);
	                            this.adaptor.addChild(root_0, VBAR246_tree);
	                            }


	                            break;

	                    }

	                    this.pushFollow(XQueryParser.FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5723);
	                    p_IntersectExceptExpr247=this.p_IntersectExceptExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IntersectExceptExpr247.getTree());


	                    break;

	                default :
	                    break loop99;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IntersectExceptExpr_return: (function() {
	        XQueryParser.p_IntersectExceptExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IntersectExceptExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:697:1: p_IntersectExceptExpr : p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* ;
	    // $ANTLR start "p_IntersectExceptExpr"
	    p_IntersectExceptExpr: function() {
	        var retval = new XQueryParser.p_IntersectExceptExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_InstanceofExpr248 = null;
	         var p_InstanceofExpr249 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:698:9: ( p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* )
	            // XQueryParser.g:698:11: p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5752);
	            p_InstanceofExpr248=this.p_InstanceofExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InstanceofExpr248.getTree());
	            // XQueryParser.g:698:28: ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
	            loop101:
	            do {
	                var alt101=2;
	                var LA101_0 = this.input.LA(1);

	                if ( (LA101_0==EXCEPT||LA101_0==INTERSECT) ) {
	                    alt101=1;
	                }


	                switch (alt101) {
	                case 1 :
	                    // XQueryParser.g:698:30: (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr
	                    // XQueryParser.g:698:30: (k= INTERSECT | k= EXCEPT )
	                    var alt100=2;
	                    var LA100_0 = this.input.LA(1);

	                    if ( (LA100_0==INTERSECT) ) {
	                        alt100=1;
	                    }
	                    else if ( (LA100_0==EXCEPT) ) {
	                        alt100=2;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 100, 0, this.input);

	                        throw nvae;
	                    }
	                    switch (alt100) {
	                        case 1 :
	                            // XQueryParser.g:698:31: k= INTERSECT
	                            k=this.match(this.input,INTERSECT,XQueryParser.FOLLOW_INTERSECT_in_p_IntersectExceptExpr5759); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            k_tree = this.adaptor.create(k);
	                            this.adaptor.addChild(root_0, k_tree);
	                            }


	                            break;
	                        case 2 :
	                            // XQueryParser.g:698:45: k= EXCEPT
	                            k=this.match(this.input,EXCEPT,XQueryParser.FOLLOW_EXCEPT_in_p_IntersectExceptExpr5765); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            k_tree = this.adaptor.create(k);
	                            this.adaptor.addChild(root_0, k_tree);
	                            }


	                            break;

	                    }

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5770);
	                    p_InstanceofExpr249=this.p_InstanceofExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InstanceofExpr249.getTree());


	                    break;

	                default :
	                    break loop101;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_InstanceofExpr_return: (function() {
	        XQueryParser.p_InstanceofExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_InstanceofExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:702:1: p_InstanceofExpr : p_TreatExpr (k= INSTANCE k= OF p_SequenceType )? ;
	    // $ANTLR start "p_InstanceofExpr"
	    p_InstanceofExpr: function() {
	        var retval = new XQueryParser.p_InstanceofExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_TreatExpr250 = null;
	         var p_SequenceType251 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:703:9: ( p_TreatExpr (k= INSTANCE k= OF p_SequenceType )? )
	            // XQueryParser.g:703:11: p_TreatExpr (k= INSTANCE k= OF p_SequenceType )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_TreatExpr_in_p_InstanceofExpr5799);
	            p_TreatExpr250=this.p_TreatExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TreatExpr250.getTree());
	            // XQueryParser.g:703:23: (k= INSTANCE k= OF p_SequenceType )?
	            var alt102=2;
	            var LA102_0 = this.input.LA(1);

	            if ( (LA102_0==INSTANCE) ) {
	                alt102=1;
	            }
	            switch (alt102) {
	                case 1 :
	                    // XQueryParser.g:703:25: k= INSTANCE k= OF p_SequenceType
	                    k=this.match(this.input,INSTANCE,XQueryParser.FOLLOW_INSTANCE_in_p_InstanceofExpr5805); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    k=this.match(this.input,OF,XQueryParser.FOLLOW_OF_in_p_InstanceofExpr5811); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_InstanceofExpr5815);
	                    p_SequenceType251=this.p_SequenceType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType251.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TreatExpr_return: (function() {
	        XQueryParser.p_TreatExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TreatExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:707:1: p_TreatExpr : p_CastableExpr (k= TREAT k= AS p_SequenceType )? ;
	    // $ANTLR start "p_TreatExpr"
	    p_TreatExpr: function() {
	        var retval = new XQueryParser.p_TreatExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_CastableExpr252 = null;
	         var p_SequenceType253 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:708:9: ( p_CastableExpr (k= TREAT k= AS p_SequenceType )? )
	            // XQueryParser.g:708:11: p_CastableExpr (k= TREAT k= AS p_SequenceType )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_CastableExpr_in_p_TreatExpr5843);
	            p_CastableExpr252=this.p_CastableExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CastableExpr252.getTree());
	            // XQueryParser.g:708:26: (k= TREAT k= AS p_SequenceType )?
	            var alt103=2;
	            var LA103_0 = this.input.LA(1);

	            if ( (LA103_0==TREAT) ) {
	                alt103=1;
	            }
	            switch (alt103) {
	                case 1 :
	                    // XQueryParser.g:708:28: k= TREAT k= AS p_SequenceType
	                    k=this.match(this.input,TREAT,XQueryParser.FOLLOW_TREAT_in_p_TreatExpr5849); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_TreatExpr5855); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TreatExpr5859);
	                    p_SequenceType253=this.p_SequenceType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType253.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CastableExpr_return: (function() {
	        XQueryParser.p_CastableExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CastableExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:712:1: p_CastableExpr : p_CastExpr (k= CASTABLE k= AS p_SingleType )? ;
	    // $ANTLR start "p_CastableExpr"
	    p_CastableExpr: function() {
	        var retval = new XQueryParser.p_CastableExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_CastExpr254 = null;
	         var p_SingleType255 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:713:9: ( p_CastExpr (k= CASTABLE k= AS p_SingleType )? )
	            // XQueryParser.g:713:11: p_CastExpr (k= CASTABLE k= AS p_SingleType )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_CastExpr_in_p_CastableExpr5896);
	            p_CastExpr254=this.p_CastExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CastExpr254.getTree());
	            // XQueryParser.g:713:22: (k= CASTABLE k= AS p_SingleType )?
	            var alt104=2;
	            var LA104_0 = this.input.LA(1);

	            if ( (LA104_0==CASTABLE) ) {
	                alt104=1;
	            }
	            switch (alt104) {
	                case 1 :
	                    // XQueryParser.g:713:24: k= CASTABLE k= AS p_SingleType
	                    k=this.match(this.input,CASTABLE,XQueryParser.FOLLOW_CASTABLE_in_p_CastableExpr5902); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CastableExpr5908); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_SingleType_in_p_CastableExpr5912);
	                    p_SingleType255=this.p_SingleType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SingleType255.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CastExpr_return: (function() {
	        XQueryParser.p_CastExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CastExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:717:1: p_CastExpr : p_UnaryExpr (k= CAST k= AS p_SingleType )? ;
	    // $ANTLR start "p_CastExpr"
	    p_CastExpr: function() {
	        var retval = new XQueryParser.p_CastExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_UnaryExpr256 = null;
	         var p_SingleType257 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:718:9: ( p_UnaryExpr (k= CAST k= AS p_SingleType )? )
	            // XQueryParser.g:718:11: p_UnaryExpr (k= CAST k= AS p_SingleType )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_UnaryExpr_in_p_CastExpr5949);
	            p_UnaryExpr256=this.p_UnaryExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnaryExpr256.getTree());
	            // XQueryParser.g:718:23: (k= CAST k= AS p_SingleType )?
	            var alt105=2;
	            var LA105_0 = this.input.LA(1);

	            if ( (LA105_0==CAST) ) {
	                alt105=1;
	            }
	            switch (alt105) {
	                case 1 :
	                    // XQueryParser.g:718:25: k= CAST k= AS p_SingleType
	                    k=this.match(this.input,CAST,XQueryParser.FOLLOW_CAST_in_p_CastExpr5955); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CastExpr5961); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_SingleType_in_p_CastExpr5965);
	                    p_SingleType257=this.p_SingleType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SingleType257.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_UnaryExpr_return: (function() {
	        XQueryParser.p_UnaryExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_UnaryExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:722:1: p_UnaryExpr : ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) ;
	    // $ANTLR start "p_UnaryExpr"
	    p_UnaryExpr: function() {
	        var retval = new XQueryParser.p_UnaryExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var PLUS258 = null;
	        var MINUS259 = null;
	         var p_ValueExpr260 = null;

	        var PLUS258_tree=null;
	        var MINUS259_tree=null;
	        var stream_PLUS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token PLUS");
	        var stream_MINUS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token MINUS");
	        var stream_p_ValueExpr=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_ValueExpr");
	        try {
	            // XQueryParser.g:723:9: ( ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) )
	            // XQueryParser.g:723:11: ( PLUS | MINUS )* p_ValueExpr
	            // XQueryParser.g:723:11: ( PLUS | MINUS )*
	            loop106:
	            do {
	                var alt106=3;
	                var LA106_0 = this.input.LA(1);

	                if ( (LA106_0==PLUS) ) {
	                    alt106=1;
	                }
	                else if ( (LA106_0==MINUS) ) {
	                    alt106=2;
	                }


	                switch (alt106) {
	                case 1 :
	                    // XQueryParser.g:723:12: PLUS
	                    PLUS258=this.match(this.input,PLUS,XQueryParser.FOLLOW_PLUS_in_p_UnaryExpr5995); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_PLUS.add(PLUS258);



	                    break;
	                case 2 :
	                    // XQueryParser.g:723:19: MINUS
	                    MINUS259=this.match(this.input,MINUS,XQueryParser.FOLLOW_MINUS_in_p_UnaryExpr5999); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_MINUS.add(MINUS259);



	                    break;

	                default :
	                    break loop106;
	                }
	            } while (true);

	            this.pushFollow(XQueryParser.FOLLOW_p_ValueExpr_in_p_UnaryExpr6003);
	            p_ValueExpr260=this.p_ValueExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_ValueExpr.add(p_ValueExpr260.getTree());


	            // AST REWRITE
	            // elements: p_ValueExpr, PLUS
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 724:17: -> ^( UnaryExpr ( PLUS )* p_ValueExpr )
	            {
	                // XQueryParser.g:724:20: ^( UnaryExpr ( PLUS )* p_ValueExpr )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(UnaryExpr, "UnaryExpr"), root_1);

	                // XQueryParser.g:724:32: ( PLUS )*
	                while ( stream_PLUS.hasNext() ) {
	                    this.adaptor.addChild(root_1, stream_PLUS.nextNode());

	                }
	                stream_PLUS.reset();
	                this.adaptor.addChild(root_1, stream_p_ValueExpr.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ValueExpr_return: (function() {
	        XQueryParser.p_ValueExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ValueExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:728:1: p_ValueExpr : ( ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr );
	    // $ANTLR start "p_ValueExpr"
	    p_ValueExpr: function() {
	        var retval = new XQueryParser.p_ValueExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ValidateExpr261 = null;
	         var p_PathExpr262 = null;
	         var p_ExtensionExpr263 = null;


	        try {
	            // XQueryParser.g:729:9: ( ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr )
	            var alt107=3;
	            switch ( this.input.LA(1) ) {
	            case VALIDATE:
	                var LA107_1 = this.input.LA(2);

	                if ( (LA107_1==LAX) && (this.synpred6_XQueryParser())) {
	                    alt107=1;
	                }
	                else if ( (LA107_1==STRICT) && (this.synpred6_XQueryParser())) {
	                    alt107=1;
	                }
	                else if ( (LA107_1==TYPE) && (this.synpred6_XQueryParser())) {
	                    alt107=1;
	                }
	                else if ( (LA107_1==LBRACKET) && (this.synpred6_XQueryParser())) {
	                    alt107=1;
	                }
	                else if ( (LA107_1==EOF||(LA107_1>=AND && LA107_1<=ASCENDING)||(LA107_1>=CASE && LA107_1<=CASTABLE)||LA107_1==COLLATION||LA107_1==DEFAULT||(LA107_1>=DESCENDING && LA107_1<=DIV)||LA107_1==EMPTY||LA107_1==EQ||LA107_1==EXCEPT||LA107_1==FOR||LA107_1==GE||(LA107_1>=GT && LA107_1<=IDIV)||(LA107_1>=INSTANCE && LA107_1<=IS)||LA107_1==LE||(LA107_1>=LET && LA107_1<=MOD)||LA107_1==NE||(LA107_1>=OR && LA107_1<=ORDER)||(LA107_1>=RETURN && LA107_1<=SATISFIES)||LA107_1==STABLE||(LA107_1>=TO && LA107_1<=TREAT)||LA107_1==UNION||LA107_1==WHERE||LA107_1==COUNT||(LA107_1>=END && LA107_1<=GROUP)||LA107_1==ONLY||LA107_1==START||(LA107_1>=AFTER && LA107_1<=BEFORE)||LA107_1==INTO||LA107_1==MODIFY||LA107_1==WITH||LA107_1==CONTAINS||LA107_1==PARAGRAPHS||LA107_1==SENTENCES||LA107_1==TIMES||LA107_1==WORDS||(LA107_1>=LPAREN && LA107_1<=RPAREN)||(LA107_1>=RBRACKET && LA107_1<=EQUAL)||LA107_1==NOTEQUAL||LA107_1==COMMA||(LA107_1>=STAR && LA107_1<=SLASH_SLASH)||LA107_1==COLON||(LA107_1>=SEMICOLON && LA107_1<=VBAR)) ) {
	                    alt107=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 107, 1, this.input);

	                    throw nvae;
	                }
	                break;
	            case ANCESTOR:
	            case ANCESTOR_OR_SELF:
	            case AND:
	            case AS:
	            case ASCENDING:
	            case AT:
	            case ATTRIBUTE:
	            case BASE_URI:
	            case BOUNDARY_SPACE:
	            case BY:
	            case CASE:
	            case CAST:
	            case CASTABLE:
	            case CHILD:
	            case COLLATION:
	            case COMMENT:
	            case CONSTRUCTION:
	            case COPY_NAMESPACES:
	            case DECLARE:
	            case DEFAULT:
	            case DESCENDANT:
	            case DESCENDANT_OR_SELF:
	            case DESCENDING:
	            case DIV:
	            case DOCUMENT:
	            case DOCUMENT_NODE:
	            case ELEMENT:
	            case ELSE:
	            case EMPTY:
	            case EMPTY_SEQUENCE:
	            case ENCODING:
	            case EQ:
	            case EVERY:
	            case EXCEPT:
	            case EXTERNAL:
	            case FOLLOWING:
	            case FOLLOWING_SIBLING:
	            case FOR:
	            case FUNCTION:
	            case GE:
	            case GREATEST:
	            case GT:
	            case IDIV:
	            case IF:
	            case IMPORT:
	            case IN:
	            case INHERIT:
	            case INSTANCE:
	            case INTERSECT:
	            case IS:
	            case ITEM:
	            case LAX:
	            case LE:
	            case LEAST:
	            case LET:
	            case LT:
	            case MOD:
	            case MODULE:
	            case NAMESPACE:
	            case NE:
	            case NO_INHERIT:
	            case NO_PRESERVE:
	            case NODE:
	            case OF:
	            case OPTION:
	            case OR:
	            case ORDER:
	            case ORDERED:
	            case ORDERING:
	            case PARENT:
	            case PRECEDING:
	            case PRECEDING_SIBLING:
	            case PRESERVE:
	            case PROCESSING_INSTRUCTION:
	            case RETURN:
	            case SATISFIES:
	            case SCHEMA:
	            case SCHEMA_ATTRIBUTE:
	            case SCHEMA_ELEMENT:
	            case SELF:
	            case SOME:
	            case STABLE:
	            case STRICT:
	            case STRIP:
	            case TEXT:
	            case THEN:
	            case TO:
	            case TREAT:
	            case TYPESWITCH:
	            case UNION:
	            case UNORDERED:
	            case VARIABLE:
	            case VERSION:
	            case WHERE:
	            case XQUERY:
	            case ALLOWING:
	            case CATCH:
	            case CONTEXT:
	            case COUNT:
	            case DECIMAL_FORMAT:
	            case DECIMAL_SEPARATOR:
	            case DIGIT:
	            case END:
	            case GROUP:
	            case GROUPING_SEPARATOR:
	            case INFINITY:
	            case MINUS_SIGN:
	            case NAMESPACE_NODE:
	            case NAN:
	            case NEXT:
	            case ONLY:
	            case PATTERN_SEPARATOR:
	            case PERCENT:
	            case PER_MILLE:
	            case PREVIOUS:
	            case SLIDING:
	            case START:
	            case SWITCH:
	            case TRY:
	            case TUMBLING:
	            case TYPE:
	            case WHEN:
	            case WINDOW:
	            case ZERO_DIGIT:
	            case AFTER:
	            case BEFORE:
	            case COPY:
	            case DELETE:
	            case FIRST:
	            case INSERT:
	            case INTO:
	            case LAST:
	            case MODIFY:
	            case NODES:
	            case RENAME:
	            case REPLACE:
	            case REVALIDATION:
	            case SKIP:
	            case UPDATING:
	            case VALUE:
	            case WITH:
	            case ALL:
	            case ANY:
	            case CONTAINS:
	            case CONTENT:
	            case DIACRITICS:
	            case DIFFERENT:
	            case DISTANCE:
	            case ENTIRE:
	            case EXACTLY:
	            case FROM:
	            case FT_OPTION:
	            case FTAND:
	            case FTNOT:
	            case FTOR:
	            case INSENSITIVE:
	            case LANGUAGE:
	            case LEVELS:
	            case LOWERCASE:
	            case MOST:
	            case NO:
	            case NOT:
	            case OCCURS:
	            case PARAGRAPH:
	            case PARAGRAPHS:
	            case PHRASE:
	            case RELATIONSHIP:
	            case SAME:
	            case SCORE:
	            case SENSITIVE:
	            case SENTENCE:
	            case SENTENCES:
	            case STEMMING:
	            case STOP:
	            case THESAURUS:
	            case TIMES:
	            case UPPERCASE:
	            case USING:
	            case WEIGHT:
	            case WILDCARDS:
	            case WITHOUT:
	            case WORD:
	            case WORDS:
	            case BREAK:
	            case CONTINUE:
	            case EXIT:
	            case LOOP:
	            case RETURNING:
	            case WHILE:
	            case CHECK:
	            case COLLECTION:
	            case CONSTRAINT:
	            case FOREACH:
	            case FOREIGN:
	            case INDEX:
	            case INTEGRITY:
	            case KEY:
	            case ON:
	            case UNIQUE:
	            case BINARY:
	            case AMP_ER:
	            case APOS_ER:
	            case QUOT_ER:
	            case LPAREN:
	            case DOLLAR:
	            case LBRACKET:
	            case STAR:
	            case SMALLER:
	            case SLASH:
	            case SLASH_SLASH:
	            case DOT:
	            case DOT_DOT:
	            case ATTR_SIGN:
	            case APOS:
	            case QUOT:
	            case L_NCName:
	            case L_DirCommentConstructor:
	            case L_DirPIConstructor:
	            case L_IntegerLiteral:
	            case L_DecimalLiteral:
	            case L_DoubleLiteral:
	            case EXPLICITLY:
	                alt107=2;
	                break;
	            case L_Pragma:
	                alt107=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 107, 0, this.input);

	                throw nvae;
	            }

	            switch (alt107) {
	                case 1 :
	                    // XQueryParser.g:729:11: ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ValidateExpr_in_p_ValueExpr6073);
	                    p_ValidateExpr261=this.p_ValidateExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ValidateExpr261.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:730:11: p_PathExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_ValueExpr6085);
	                    p_PathExpr262=this.p_PathExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr262.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:731:11: p_ExtensionExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ExtensionExpr_in_p_ValueExpr6097);
	                    p_ExtensionExpr263=this.p_ExtensionExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExtensionExpr263.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_GeneralComp_return: (function() {
	        XQueryParser.p_GeneralComp_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_GeneralComp_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:735:1: p_GeneralComp : ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ );
	    // $ANTLR start "p_GeneralComp"
	    p_GeneralComp: function() {
	        var retval = new XQueryParser.p_GeneralComp_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var set264 = null;

	        var set264_tree=null;

	        try {
	            // XQueryParser.g:736:9: ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ )
	            // XQueryParser.g:
	            root_0 = this.adaptor.nil();

	            set264=this.input.LT(1);
	            if ( this.input.LA(1)==EQUAL||this.input.LA(1)==NOTEQUAL||(this.input.LA(1)>=SMALLER && this.input.LA(1)<=GREATEREQ) ) {
	                this.input.consume();
	                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set264));
	                this.state.errorRecovery=false;this.state.failed=false;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                throw mse;
	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ValueComp_return: (function() {
	        XQueryParser.p_ValueComp_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ValueComp_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:740:1: p_ValueComp : (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) ;
	    // $ANTLR start "p_ValueComp"
	    p_ValueComp: function() {
	        var retval = new XQueryParser.p_ValueComp_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:741:9: ( (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) )
	            // XQueryParser.g:741:11: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:741:11: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
	            var alt108=6;
	            switch ( this.input.LA(1) ) {
	            case EQ:
	                alt108=1;
	                break;
	            case NE:
	                alt108=2;
	                break;
	            case LT:
	                alt108=3;
	                break;
	            case LE:
	                alt108=4;
	                break;
	            case GT:
	                alt108=5;
	                break;
	            case GE:
	                alt108=6;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 108, 0, this.input);

	                throw nvae;
	            }

	            switch (alt108) {
	                case 1 :
	                    // XQueryParser.g:741:12: k= EQ
	                    k=this.match(this.input,EQ,XQueryParser.FOLLOW_EQ_in_p_ValueComp6172); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:741:19: k= NE
	                    k=this.match(this.input,NE,XQueryParser.FOLLOW_NE_in_p_ValueComp6178); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 3 :
	                    // XQueryParser.g:741:26: k= LT
	                    k=this.match(this.input,LT,XQueryParser.FOLLOW_LT_in_p_ValueComp6184); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 4 :
	                    // XQueryParser.g:741:33: k= LE
	                    k=this.match(this.input,LE,XQueryParser.FOLLOW_LE_in_p_ValueComp6190); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 5 :
	                    // XQueryParser.g:741:40: k= GT
	                    k=this.match(this.input,GT,XQueryParser.FOLLOW_GT_in_p_ValueComp6196); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 6 :
	                    // XQueryParser.g:741:47: k= GE
	                    k=this.match(this.input,GE,XQueryParser.FOLLOW_GE_in_p_ValueComp6202); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_NodeComp_return: (function() {
	        XQueryParser.p_NodeComp_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_NodeComp_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:745:1: p_NodeComp : (k= IS | SMALLER_SMALLER | GREATER_GREATER );
	    // $ANTLR start "p_NodeComp"
	    p_NodeComp: function() {
	        var retval = new XQueryParser.p_NodeComp_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SMALLER_SMALLER265 = null;
	        var GREATER_GREATER266 = null;

	        var k_tree=null;
	        var SMALLER_SMALLER265_tree=null;
	        var GREATER_GREATER266_tree=null;

	        try {
	            // XQueryParser.g:746:9: (k= IS | SMALLER_SMALLER | GREATER_GREATER )
	            var alt109=3;
	            switch ( this.input.LA(1) ) {
	            case IS:
	                alt109=1;
	                break;
	            case SMALLER_SMALLER:
	                alt109=2;
	                break;
	            case GREATER_GREATER:
	                alt109=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 109, 0, this.input);

	                throw nvae;
	            }

	            switch (alt109) {
	                case 1 :
	                    // XQueryParser.g:746:11: k= IS
	                    root_0 = this.adaptor.nil();

	                    k=this.match(this.input,IS,XQueryParser.FOLLOW_IS_in_p_NodeComp6233); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:746:33: SMALLER_SMALLER
	                    root_0 = this.adaptor.nil();

	                    SMALLER_SMALLER265=this.match(this.input,SMALLER_SMALLER,XQueryParser.FOLLOW_SMALLER_SMALLER_in_p_NodeComp6239); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    SMALLER_SMALLER265_tree = this.adaptor.create(SMALLER_SMALLER265);
	                    this.adaptor.addChild(root_0, SMALLER_SMALLER265_tree);
	                    }


	                    break;
	                case 3 :
	                    // XQueryParser.g:746:51: GREATER_GREATER
	                    root_0 = this.adaptor.nil();

	                    GREATER_GREATER266=this.match(this.input,GREATER_GREATER,XQueryParser.FOLLOW_GREATER_GREATER_in_p_NodeComp6243); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    GREATER_GREATER266_tree = this.adaptor.create(GREATER_GREATER266);
	                    this.adaptor.addChild(root_0, GREATER_GREATER266_tree);
	                    }


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ValidateExpr_return: (function() {
	        XQueryParser.p_ValidateExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ValidateExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:750:1: p_ValidateExpr : k= VALIDATE ( p_ValidationMode | k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET ;
	    // $ANTLR start "p_ValidateExpr"
	    p_ValidateExpr: function() {
	        var retval = new XQueryParser.p_ValidateExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET269 = null;
	        var RBRACKET271 = null;
	         var p_ValidationMode267 = null;
	         var p_TypeName268 = null;
	         var p_Expr270 = null;

	        var k_tree=null;
	        var LBRACKET269_tree=null;
	        var RBRACKET271_tree=null;

	        try {
	            // XQueryParser.g:751:9: (k= VALIDATE ( p_ValidationMode | k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET )
	            // XQueryParser.g:751:11: k= VALIDATE ( p_ValidationMode | k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,VALIDATE,XQueryParser.FOLLOW_VALIDATE_in_p_ValidateExpr6271); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:751:37: ( p_ValidationMode | k= TYPE p_TypeName )?
	            var alt110=3;
	            var LA110_0 = this.input.LA(1);

	            if ( (LA110_0==LAX||LA110_0==STRICT) ) {
	                alt110=1;
	            }
	            else if ( (LA110_0==TYPE) ) {
	                alt110=2;
	            }
	            switch (alt110) {
	                case 1 :
	                    // XQueryParser.g:751:39: p_ValidationMode
	                    this.pushFollow(XQueryParser.FOLLOW_p_ValidationMode_in_p_ValidateExpr6277);
	                    p_ValidationMode267=this.p_ValidationMode();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ValidationMode267.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:751:58: k= TYPE p_TypeName
	                    k=this.match(this.input,TYPE,XQueryParser.FOLLOW_TYPE_in_p_ValidateExpr6283); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_TypeName_in_p_ValidateExpr6287);
	                    p_TypeName268=this.p_TypeName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeName268.getTree());


	                    break;

	            }

	            LBRACKET269=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_ValidateExpr6292); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET269_tree = this.adaptor.create(LBRACKET269);
	            this.adaptor.addChild(root_0, LBRACKET269_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_ValidateExpr6294);
	            p_Expr270=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr270.getTree());
	            RBRACKET271=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_ValidateExpr6297); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET271_tree = this.adaptor.create(RBRACKET271);
	            this.adaptor.addChild(root_0, RBRACKET271_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ValidationMode_return: (function() {
	        XQueryParser.p_ValidationMode_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ValidationMode_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:755:1: p_ValidationMode : (k= LAX | k= STRICT ) ;
	    // $ANTLR start "p_ValidationMode"
	    p_ValidationMode: function() {
	        var retval = new XQueryParser.p_ValidationMode_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:756:9: ( (k= LAX | k= STRICT ) )
	            // XQueryParser.g:756:11: (k= LAX | k= STRICT )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:756:11: (k= LAX | k= STRICT )
	            var alt111=2;
	            var LA111_0 = this.input.LA(1);

	            if ( (LA111_0==LAX) ) {
	                alt111=1;
	            }
	            else if ( (LA111_0==STRICT) ) {
	                alt111=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 111, 0, this.input);

	                throw nvae;
	            }
	            switch (alt111) {
	                case 1 :
	                    // XQueryParser.g:756:12: k= LAX
	                    k=this.match(this.input,LAX,XQueryParser.FOLLOW_LAX_in_p_ValidationMode6326); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:756:20: k= STRICT
	                    k=this.match(this.input,STRICT,XQueryParser.FOLLOW_STRICT_in_p_ValidationMode6332); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }


	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ExtensionExpr_return: (function() {
	        XQueryParser.p_ExtensionExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ExtensionExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:760:1: p_ExtensionExpr : ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET ;
	    // $ANTLR start "p_ExtensionExpr"
	    p_ExtensionExpr: function() {
	        var retval = new XQueryParser.p_ExtensionExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_Pragma272 = null;
	        var LBRACKET273 = null;
	        var RBRACKET275 = null;
	         var p_Expr274 = null;

	        var L_Pragma272_tree=null;
	        var LBRACKET273_tree=null;
	        var RBRACKET275_tree=null;

	        try {
	            // XQueryParser.g:761:9: ( ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET )
	            // XQueryParser.g:761:11: ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:761:11: ( L_Pragma )+
	            var cnt112=0;
	            loop112:
	            do {
	                var alt112=2;
	                var LA112_0 = this.input.LA(1);

	                if ( (LA112_0==L_Pragma) ) {
	                    alt112=1;
	                }


	                switch (alt112) {
	                case 1 :
	                    // XQueryParser.g:761:11: L_Pragma
	                    L_Pragma272=this.match(this.input,L_Pragma,XQueryParser.FOLLOW_L_Pragma_in_p_ExtensionExpr6361); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    L_Pragma272_tree = this.adaptor.create(L_Pragma272);
	                    this.adaptor.addChild(root_0, L_Pragma272_tree);
	                    }


	                    break;

	                default :
	                    if ( cnt112 >= 1 ) {
	                        break loop112;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(112, this.input);
	                        throw eee;
	                }
	                cnt112++;
	            } while (true);

	            LBRACKET273=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_ExtensionExpr6364); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET273_tree = this.adaptor.create(LBRACKET273);
	            this.adaptor.addChild(root_0, LBRACKET273_tree);
	            }
	            // XQueryParser.g:761:30: ( p_Expr[true,true] )?
	            var alt113=2;
	            var LA113_0 = this.input.LA(1);

	            if ( ((LA113_0>=ANCESTOR && LA113_0<=DECIMAL_SEPARATOR)||(LA113_0>=DIGIT && LA113_0<=LPAREN)||(LA113_0>=DOLLAR && LA113_0<=LBRACKET)||(LA113_0>=STAR && LA113_0<=SMALLER)||(LA113_0>=SLASH && LA113_0<=DOT_DOT)||LA113_0==ATTR_SIGN||(LA113_0>=APOS && LA113_0<=QUOT)||LA113_0==L_NCName||(LA113_0>=L_Pragma && LA113_0<=L_DoubleLiteral)||LA113_0==EXPLICITLY) ) {
	                alt113=1;
	            }
	            switch (alt113) {
	                case 1 :
	                    // XQueryParser.g:761:30: p_Expr[true,true]
	                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_ExtensionExpr6366);
	                    p_Expr274=this.p_Expr(true, true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr274.getTree());


	                    break;

	            }

	            RBRACKET275=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_ExtensionExpr6370); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET275_tree = this.adaptor.create(RBRACKET275);
	            this.adaptor.addChild(root_0, RBRACKET275_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_PathExpr_return: (function() {
	        XQueryParser.p_PathExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_PathExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:773:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );
	    // $ANTLR start "p_PathExpr"
	    p_PathExpr: function() {
	        var retval = new XQueryParser.p_PathExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var SLASH276 = null;
	        var SLASH278 = null;
	        var SLASH_SLASH279 = null;
	         var p_RelativePathExpr277 = null;
	         var p_RelativePathExpr280 = null;
	         var p_RelativePathExpr281 = null;

	        var SLASH276_tree=null;
	        var SLASH278_tree=null;
	        var SLASH_SLASH279_tree=null;

	        try {
	            // XQueryParser.g:774:9: ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr )
	            var alt114=4;
	            alt114 = this.dfa114.predict(this.input);
	            switch (alt114) {
	                case 1 :
	                    // XQueryParser.g:774:11: ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr )
	                    root_0 = this.adaptor.nil();

	                    // XQueryParser.g:774:41: ( SLASH p_RelativePathExpr )
	                    // XQueryParser.g:774:42: SLASH p_RelativePathExpr
	                    SLASH276=this.match(this.input,SLASH,XQueryParser.FOLLOW_SLASH_in_p_PathExpr6413); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    SLASH276_tree = this.adaptor.create(SLASH276);
	                    this.adaptor.addChild(root_0, SLASH276_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_RelativePathExpr_in_p_PathExpr6415);
	                    p_RelativePathExpr277=this.p_RelativePathExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RelativePathExpr277.getTree());





	                    break;
	                case 2 :
	                    // XQueryParser.g:775:11: SLASH
	                    root_0 = this.adaptor.nil();

	                    SLASH278=this.match(this.input,SLASH,XQueryParser.FOLLOW_SLASH_in_p_PathExpr6428); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    SLASH278_tree = this.adaptor.create(SLASH278);
	                    this.adaptor.addChild(root_0, SLASH278_tree);
	                    }


	                    break;
	                case 3 :
	                    // XQueryParser.g:776:11: SLASH_SLASH p_RelativePathExpr
	                    root_0 = this.adaptor.nil();

	                    SLASH_SLASH279=this.match(this.input,SLASH_SLASH,XQueryParser.FOLLOW_SLASH_SLASH_in_p_PathExpr6440); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    SLASH_SLASH279_tree = this.adaptor.create(SLASH_SLASH279);
	                    this.adaptor.addChild(root_0, SLASH_SLASH279_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_RelativePathExpr_in_p_PathExpr6442);
	                    p_RelativePathExpr280=this.p_RelativePathExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RelativePathExpr280.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:777:11: p_RelativePathExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_RelativePathExpr_in_p_PathExpr6454);
	                    p_RelativePathExpr281=this.p_RelativePathExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RelativePathExpr281.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_RelativePathExpr_return: (function() {
	        XQueryParser.p_RelativePathExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_RelativePathExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:781:1: p_RelativePathExpr : p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* ;
	    // $ANTLR start "p_RelativePathExpr"
	    p_RelativePathExpr: function() {
	        var retval = new XQueryParser.p_RelativePathExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var set283 = null;
	         var p_StepExpr282 = null;
	         var p_StepExpr284 = null;

	        var set283_tree=null;

	        try {
	            // XQueryParser.g:782:9: ( p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* )
	            // XQueryParser.g:782:11: p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_StepExpr_in_p_RelativePathExpr6482);
	            p_StepExpr282=this.p_StepExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StepExpr282.getTree());
	            // XQueryParser.g:782:22: ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
	            loop115:
	            do {
	                var alt115=2;
	                var LA115_0 = this.input.LA(1);

	                if ( ((LA115_0>=SLASH && LA115_0<=SLASH_SLASH)) ) {
	                    alt115=1;
	                }


	                switch (alt115) {
	                case 1 :
	                    // XQueryParser.g:782:23: ( SLASH | SLASH_SLASH ) p_StepExpr
	                    set283=this.input.LT(1);
	                    if ( (this.input.LA(1)>=SLASH && this.input.LA(1)<=SLASH_SLASH) ) {
	                        this.input.consume();
	                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set283));
	                        this.state.errorRecovery=false;this.state.failed=false;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                        throw mse;
	                    }

	                    this.pushFollow(XQueryParser.FOLLOW_p_StepExpr_in_p_RelativePathExpr6493);
	                    p_StepExpr284=this.p_StepExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StepExpr284.getTree());


	                    break;

	                default :
	                    break loop115;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_StepExpr_return: (function() {
	        XQueryParser.p_StepExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_StepExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:786:1: p_StepExpr : ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep );
	    // $ANTLR start "p_StepExpr"
	    p_StepExpr: function() {
	        var retval = new XQueryParser.p_StepExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_PostfixExpr285 = null;
	         var p_PostfixExpr286 = null;
	         var p_AxisStep287 = null;
	         var p_PostfixExpr288 = null;
	         var p_PostfixExpr289 = null;
	         var p_AxisStep290 = null;


	        try {
	            // XQueryParser.g:787:9: ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep )
	            var alt116=6;
	            alt116 = this.dfa116.predict(this.input);
	            switch (alt116) {
	                case 1 :
	                    // XQueryParser.g:787:11: ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_PostfixExpr_in_p_StepExpr6547);
	                    p_PostfixExpr285=this.p_PostfixExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PostfixExpr285.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:788:11: ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_PostfixExpr_in_p_StepExpr6661);
	                    p_PostfixExpr286=this.p_PostfixExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PostfixExpr286.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:793:11: ( p_KindTest )=> p_AxisStep
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AxisStep_in_p_StepExpr6679);
	                    p_AxisStep287=this.p_AxisStep();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AxisStep287.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:794:11: ( p_QName LPAREN )=> p_PostfixExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_PostfixExpr_in_p_StepExpr6700);
	                    p_PostfixExpr288=this.p_PostfixExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PostfixExpr288.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:795:11: ( p_PrimaryExpr )=> p_PostfixExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_PostfixExpr_in_p_StepExpr6718);
	                    p_PostfixExpr289=this.p_PostfixExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PostfixExpr289.getTree());


	                    break;
	                case 6 :
	                    // XQueryParser.g:796:11: p_AxisStep
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AxisStep_in_p_StepExpr6730);
	                    p_AxisStep290=this.p_AxisStep();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AxisStep290.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AxisStep_return: (function() {
	        XQueryParser.p_AxisStep_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AxisStep_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:800:1: p_AxisStep : ( p_ReverseStep | p_ForwardStep ) p_PredicateList ;
	    // $ANTLR start "p_AxisStep"
	    p_AxisStep: function() {
	        var retval = new XQueryParser.p_AxisStep_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ReverseStep291 = null;
	         var p_ForwardStep292 = null;
	         var p_PredicateList293 = null;


	        try {
	            // XQueryParser.g:801:9: ( ( p_ReverseStep | p_ForwardStep ) p_PredicateList )
	            // XQueryParser.g:801:11: ( p_ReverseStep | p_ForwardStep ) p_PredicateList
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:801:11: ( p_ReverseStep | p_ForwardStep )
	            var alt117=2;
	            switch ( this.input.LA(1) ) {
	            case PARENT:
	                var LA117_1 = this.input.LA(2);

	                if ( (LA117_1==COLON_COLON) ) {
	                    alt117=1;
	                }
	                else if ( (LA117_1==EOF||(LA117_1>=AND && LA117_1<=ASCENDING)||(LA117_1>=BY && LA117_1<=CASTABLE)||LA117_1==COLLATION||LA117_1==DEFAULT||(LA117_1>=DESCENDING && LA117_1<=DIV)||LA117_1==EMPTY||LA117_1==EQ||LA117_1==EXCEPT||LA117_1==FOR||LA117_1==GE||(LA117_1>=GT && LA117_1<=IDIV)||(LA117_1>=INSTANCE && LA117_1<=IS)||LA117_1==LE||(LA117_1>=LET && LA117_1<=MOD)||LA117_1==NE||(LA117_1>=OR && LA117_1<=ORDER)||(LA117_1>=RETURN && LA117_1<=SATISFIES)||LA117_1==STABLE||(LA117_1>=TO && LA117_1<=TREAT)||LA117_1==UNION||LA117_1==WHERE||LA117_1==COUNT||(LA117_1>=END && LA117_1<=GROUP)||LA117_1==ONLY||LA117_1==START||(LA117_1>=AFTER && LA117_1<=BEFORE)||LA117_1==INTO||LA117_1==MODIFY||LA117_1==WITH||LA117_1==CONTAINS||LA117_1==PARAGRAPHS||LA117_1==SENTENCES||LA117_1==TIMES||LA117_1==WORDS||LA117_1==RPAREN||(LA117_1>=RBRACKET && LA117_1<=EQUAL)||LA117_1==NOTEQUAL||LA117_1==COMMA||(LA117_1>=STAR && LA117_1<=SLASH_SLASH)||LA117_1==COLON||(LA117_1>=SEMICOLON && LA117_1<=VBAR)) ) {
	                    alt117=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 117, 1, this.input);

	                    throw nvae;
	                }
	                break;
	            case ANCESTOR:
	                var LA117_2 = this.input.LA(2);

	                if ( (LA117_2==COLON_COLON) ) {
	                    alt117=1;
	                }
	                else if ( (LA117_2==EOF||(LA117_2>=AND && LA117_2<=ASCENDING)||(LA117_2>=BY && LA117_2<=CASTABLE)||LA117_2==COLLATION||LA117_2==DEFAULT||(LA117_2>=DESCENDING && LA117_2<=DIV)||LA117_2==EMPTY||LA117_2==EQ||LA117_2==EXCEPT||LA117_2==FOR||LA117_2==GE||(LA117_2>=GT && LA117_2<=IDIV)||(LA117_2>=INSTANCE && LA117_2<=IS)||LA117_2==LE||(LA117_2>=LET && LA117_2<=MOD)||LA117_2==NE||(LA117_2>=OR && LA117_2<=ORDER)||(LA117_2>=RETURN && LA117_2<=SATISFIES)||LA117_2==STABLE||(LA117_2>=TO && LA117_2<=TREAT)||LA117_2==UNION||LA117_2==WHERE||LA117_2==COUNT||(LA117_2>=END && LA117_2<=GROUP)||LA117_2==ONLY||LA117_2==START||(LA117_2>=AFTER && LA117_2<=BEFORE)||LA117_2==INTO||LA117_2==MODIFY||LA117_2==WITH||LA117_2==CONTAINS||LA117_2==PARAGRAPHS||LA117_2==SENTENCES||LA117_2==TIMES||LA117_2==WORDS||LA117_2==RPAREN||(LA117_2>=RBRACKET && LA117_2<=EQUAL)||LA117_2==NOTEQUAL||LA117_2==COMMA||(LA117_2>=STAR && LA117_2<=SLASH_SLASH)||LA117_2==COLON||(LA117_2>=SEMICOLON && LA117_2<=VBAR)) ) {
	                    alt117=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 117, 2, this.input);

	                    throw nvae;
	                }
	                break;
	            case PRECEDING_SIBLING:
	                var LA117_3 = this.input.LA(2);

	                if ( (LA117_3==COLON_COLON) ) {
	                    alt117=1;
	                }
	                else if ( (LA117_3==EOF||(LA117_3>=AND && LA117_3<=ASCENDING)||(LA117_3>=BY && LA117_3<=CASTABLE)||LA117_3==COLLATION||LA117_3==DEFAULT||(LA117_3>=DESCENDING && LA117_3<=DIV)||LA117_3==EMPTY||LA117_3==EQ||LA117_3==EXCEPT||LA117_3==FOR||LA117_3==GE||(LA117_3>=GT && LA117_3<=IDIV)||(LA117_3>=INSTANCE && LA117_3<=IS)||LA117_3==LE||(LA117_3>=LET && LA117_3<=MOD)||LA117_3==NE||(LA117_3>=OR && LA117_3<=ORDER)||(LA117_3>=RETURN && LA117_3<=SATISFIES)||LA117_3==STABLE||(LA117_3>=TO && LA117_3<=TREAT)||LA117_3==UNION||LA117_3==WHERE||LA117_3==COUNT||(LA117_3>=END && LA117_3<=GROUP)||LA117_3==ONLY||LA117_3==START||(LA117_3>=AFTER && LA117_3<=BEFORE)||LA117_3==INTO||LA117_3==MODIFY||LA117_3==WITH||LA117_3==CONTAINS||LA117_3==PARAGRAPHS||LA117_3==SENTENCES||LA117_3==TIMES||LA117_3==WORDS||LA117_3==RPAREN||(LA117_3>=RBRACKET && LA117_3<=EQUAL)||LA117_3==NOTEQUAL||LA117_3==COMMA||(LA117_3>=STAR && LA117_3<=SLASH_SLASH)||LA117_3==COLON||(LA117_3>=SEMICOLON && LA117_3<=VBAR)) ) {
	                    alt117=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 117, 3, this.input);

	                    throw nvae;
	                }
	                break;
	            case PRECEDING:
	                var LA117_4 = this.input.LA(2);

	                if ( (LA117_4==COLON_COLON) ) {
	                    alt117=1;
	                }
	                else if ( (LA117_4==EOF||(LA117_4>=AND && LA117_4<=ASCENDING)||(LA117_4>=BY && LA117_4<=CASTABLE)||LA117_4==COLLATION||LA117_4==DEFAULT||(LA117_4>=DESCENDING && LA117_4<=DIV)||LA117_4==EMPTY||LA117_4==EQ||LA117_4==EXCEPT||LA117_4==FOR||LA117_4==GE||(LA117_4>=GT && LA117_4<=IDIV)||(LA117_4>=INSTANCE && LA117_4<=IS)||LA117_4==LE||(LA117_4>=LET && LA117_4<=MOD)||LA117_4==NE||(LA117_4>=OR && LA117_4<=ORDER)||(LA117_4>=RETURN && LA117_4<=SATISFIES)||LA117_4==STABLE||(LA117_4>=TO && LA117_4<=TREAT)||LA117_4==UNION||LA117_4==WHERE||LA117_4==COUNT||(LA117_4>=END && LA117_4<=GROUP)||LA117_4==ONLY||LA117_4==START||(LA117_4>=AFTER && LA117_4<=BEFORE)||LA117_4==INTO||LA117_4==MODIFY||LA117_4==WITH||LA117_4==CONTAINS||LA117_4==PARAGRAPHS||LA117_4==SENTENCES||LA117_4==TIMES||LA117_4==WORDS||LA117_4==RPAREN||(LA117_4>=RBRACKET && LA117_4<=EQUAL)||LA117_4==NOTEQUAL||LA117_4==COMMA||(LA117_4>=STAR && LA117_4<=SLASH_SLASH)||LA117_4==COLON||(LA117_4>=SEMICOLON && LA117_4<=VBAR)) ) {
	                    alt117=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 117, 4, this.input);

	                    throw nvae;
	                }
	                break;
	            case ANCESTOR_OR_SELF:
	                var LA117_5 = this.input.LA(2);

	                if ( (LA117_5==COLON_COLON) ) {
	                    alt117=1;
	                }
	                else if ( (LA117_5==EOF||(LA117_5>=AND && LA117_5<=ASCENDING)||(LA117_5>=BY && LA117_5<=CASTABLE)||LA117_5==COLLATION||LA117_5==DEFAULT||(LA117_5>=DESCENDING && LA117_5<=DIV)||LA117_5==EMPTY||LA117_5==EQ||LA117_5==EXCEPT||LA117_5==FOR||LA117_5==GE||(LA117_5>=GT && LA117_5<=IDIV)||(LA117_5>=INSTANCE && LA117_5<=IS)||LA117_5==LE||(LA117_5>=LET && LA117_5<=MOD)||LA117_5==NE||(LA117_5>=OR && LA117_5<=ORDER)||(LA117_5>=RETURN && LA117_5<=SATISFIES)||LA117_5==STABLE||(LA117_5>=TO && LA117_5<=TREAT)||LA117_5==UNION||LA117_5==WHERE||LA117_5==COUNT||(LA117_5>=END && LA117_5<=GROUP)||LA117_5==ONLY||LA117_5==START||(LA117_5>=AFTER && LA117_5<=BEFORE)||LA117_5==INTO||LA117_5==MODIFY||LA117_5==WITH||LA117_5==CONTAINS||LA117_5==PARAGRAPHS||LA117_5==SENTENCES||LA117_5==TIMES||LA117_5==WORDS||LA117_5==RPAREN||(LA117_5>=RBRACKET && LA117_5<=EQUAL)||LA117_5==NOTEQUAL||LA117_5==COMMA||(LA117_5>=STAR && LA117_5<=SLASH_SLASH)||LA117_5==COLON||(LA117_5>=SEMICOLON && LA117_5<=VBAR)) ) {
	                    alt117=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 117, 5, this.input);

	                    throw nvae;
	                }
	                break;
	            case DOT_DOT:
	                alt117=1;
	                break;
	            case AND:
	            case AS:
	            case ASCENDING:
	            case AT:
	            case ATTRIBUTE:
	            case BASE_URI:
	            case BOUNDARY_SPACE:
	            case BY:
	            case CASE:
	            case CAST:
	            case CASTABLE:
	            case CHILD:
	            case COLLATION:
	            case COMMENT:
	            case CONSTRUCTION:
	            case COPY_NAMESPACES:
	            case DECLARE:
	            case DEFAULT:
	            case DESCENDANT:
	            case DESCENDANT_OR_SELF:
	            case DESCENDING:
	            case DIV:
	            case DOCUMENT:
	            case DOCUMENT_NODE:
	            case ELEMENT:
	            case ELSE:
	            case EMPTY:
	            case EMPTY_SEQUENCE:
	            case ENCODING:
	            case EQ:
	            case EVERY:
	            case EXCEPT:
	            case EXTERNAL:
	            case FOLLOWING:
	            case FOLLOWING_SIBLING:
	            case FOR:
	            case FUNCTION:
	            case GE:
	            case GREATEST:
	            case GT:
	            case IDIV:
	            case IF:
	            case IMPORT:
	            case IN:
	            case INHERIT:
	            case INSTANCE:
	            case INTERSECT:
	            case IS:
	            case ITEM:
	            case LAX:
	            case LE:
	            case LEAST:
	            case LET:
	            case LT:
	            case MOD:
	            case MODULE:
	            case NAMESPACE:
	            case NE:
	            case NO_INHERIT:
	            case NO_PRESERVE:
	            case NODE:
	            case OF:
	            case OPTION:
	            case OR:
	            case ORDER:
	            case ORDERED:
	            case ORDERING:
	            case PRESERVE:
	            case PROCESSING_INSTRUCTION:
	            case RETURN:
	            case SATISFIES:
	            case SCHEMA:
	            case SCHEMA_ATTRIBUTE:
	            case SCHEMA_ELEMENT:
	            case SELF:
	            case SOME:
	            case STABLE:
	            case STRICT:
	            case STRIP:
	            case TEXT:
	            case THEN:
	            case TO:
	            case TREAT:
	            case TYPESWITCH:
	            case UNION:
	            case UNORDERED:
	            case VALIDATE:
	            case VARIABLE:
	            case VERSION:
	            case WHERE:
	            case XQUERY:
	            case ALLOWING:
	            case CATCH:
	            case CONTEXT:
	            case COUNT:
	            case DECIMAL_FORMAT:
	            case DECIMAL_SEPARATOR:
	            case DIGIT:
	            case END:
	            case GROUP:
	            case GROUPING_SEPARATOR:
	            case INFINITY:
	            case MINUS_SIGN:
	            case NAMESPACE_NODE:
	            case NAN:
	            case NEXT:
	            case ONLY:
	            case PATTERN_SEPARATOR:
	            case PERCENT:
	            case PER_MILLE:
	            case PREVIOUS:
	            case SLIDING:
	            case START:
	            case SWITCH:
	            case TRY:
	            case TUMBLING:
	            case TYPE:
	            case WHEN:
	            case WINDOW:
	            case ZERO_DIGIT:
	            case AFTER:
	            case BEFORE:
	            case COPY:
	            case DELETE:
	            case FIRST:
	            case INSERT:
	            case INTO:
	            case LAST:
	            case MODIFY:
	            case NODES:
	            case RENAME:
	            case REPLACE:
	            case REVALIDATION:
	            case SKIP:
	            case VALUE:
	            case WITH:
	            case ALL:
	            case ANY:
	            case CONTAINS:
	            case CONTENT:
	            case DIACRITICS:
	            case DIFFERENT:
	            case DISTANCE:
	            case ENTIRE:
	            case EXACTLY:
	            case FROM:
	            case FT_OPTION:
	            case FTAND:
	            case FTNOT:
	            case FTOR:
	            case INSENSITIVE:
	            case LANGUAGE:
	            case LEVELS:
	            case LOWERCASE:
	            case MOST:
	            case NO:
	            case NOT:
	            case OCCURS:
	            case PARAGRAPH:
	            case PARAGRAPHS:
	            case PHRASE:
	            case RELATIONSHIP:
	            case SAME:
	            case SCORE:
	            case SENSITIVE:
	            case SENTENCE:
	            case SENTENCES:
	            case STEMMING:
	            case STOP:
	            case THESAURUS:
	            case TIMES:
	            case UPPERCASE:
	            case USING:
	            case WEIGHT:
	            case WILDCARDS:
	            case WITHOUT:
	            case WORD:
	            case WORDS:
	            case BREAK:
	            case CONTINUE:
	            case EXIT:
	            case LOOP:
	            case RETURNING:
	            case WHILE:
	            case CHECK:
	            case COLLECTION:
	            case CONSTRAINT:
	            case FOREACH:
	            case FOREIGN:
	            case INDEX:
	            case INTEGRITY:
	            case KEY:
	            case ON:
	            case UNIQUE:
	            case BINARY:
	            case AMP_ER:
	            case APOS_ER:
	            case QUOT_ER:
	            case STAR:
	            case ATTR_SIGN:
	            case APOS:
	            case QUOT:
	            case L_NCName:
	            case EXPLICITLY:
	                alt117=2;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 117, 0, this.input);

	                throw nvae;
	            }

	            switch (alt117) {
	                case 1 :
	                    // XQueryParser.g:801:12: p_ReverseStep
	                    this.pushFollow(XQueryParser.FOLLOW_p_ReverseStep_in_p_AxisStep6757);
	                    p_ReverseStep291=this.p_ReverseStep();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReverseStep291.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:801:28: p_ForwardStep
	                    this.pushFollow(XQueryParser.FOLLOW_p_ForwardStep_in_p_AxisStep6761);
	                    p_ForwardStep292=this.p_ForwardStep();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForwardStep292.getTree());


	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_PredicateList_in_p_AxisStep6764);
	            p_PredicateList293=this.p_PredicateList();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PredicateList293.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ForwardStep_return: (function() {
	        XQueryParser.p_ForwardStep_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ForwardStep_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:805:1: p_ForwardStep : ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep );
	    // $ANTLR start "p_ForwardStep"
	    p_ForwardStep: function() {
	        var retval = new XQueryParser.p_ForwardStep_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ForwardAxis294 = null;
	         var p_NodeTest295 = null;
	         var p_AbbrevForwardStep296 = null;


	        try {
	            // XQueryParser.g:806:9: ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep )
	            var alt118=2;
	            alt118 = this.dfa118.predict(this.input);
	            switch (alt118) {
	                case 1 :
	                    // XQueryParser.g:806:11: p_ForwardAxis p_NodeTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ForwardAxis_in_p_ForwardStep6790);
	                    p_ForwardAxis294=this.p_ForwardAxis();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForwardAxis294.getTree());
	                    this.pushFollow(XQueryParser.FOLLOW_p_NodeTest_in_p_ForwardStep6792);
	                    p_NodeTest295=this.p_NodeTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NodeTest295.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:807:11: p_AbbrevForwardStep
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6804);
	                    p_AbbrevForwardStep296=this.p_AbbrevForwardStep();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AbbrevForwardStep296.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ForwardAxis_return: (function() {
	        XQueryParser.p_ForwardAxis_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ForwardAxis_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:811:1: p_ForwardAxis : ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON );
	    // $ANTLR start "p_ForwardAxis"
	    p_ForwardAxis: function() {
	        var retval = new XQueryParser.p_ForwardAxis_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var CHILD297 = null;
	        var COLON_COLON298 = null;
	        var DESCENDANT299 = null;
	        var COLON_COLON300 = null;
	        var ATTRIBUTE301 = null;
	        var COLON_COLON302 = null;
	        var SELF303 = null;
	        var COLON_COLON304 = null;
	        var DESCENDANT_OR_SELF305 = null;
	        var COLON_COLON306 = null;
	        var FOLLOWING_SIBLING307 = null;
	        var COLON_COLON308 = null;
	        var FOLLOWING309 = null;
	        var COLON_COLON310 = null;

	        var CHILD297_tree=null;
	        var COLON_COLON298_tree=null;
	        var DESCENDANT299_tree=null;
	        var COLON_COLON300_tree=null;
	        var ATTRIBUTE301_tree=null;
	        var COLON_COLON302_tree=null;
	        var SELF303_tree=null;
	        var COLON_COLON304_tree=null;
	        var DESCENDANT_OR_SELF305_tree=null;
	        var COLON_COLON306_tree=null;
	        var FOLLOWING_SIBLING307_tree=null;
	        var COLON_COLON308_tree=null;
	        var FOLLOWING309_tree=null;
	        var COLON_COLON310_tree=null;

	        try {
	            // XQueryParser.g:812:9: ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON )
	            var alt119=7;
	            switch ( this.input.LA(1) ) {
	            case CHILD:
	                alt119=1;
	                break;
	            case DESCENDANT:
	                alt119=2;
	                break;
	            case ATTRIBUTE:
	                alt119=3;
	                break;
	            case SELF:
	                alt119=4;
	                break;
	            case DESCENDANT_OR_SELF:
	                alt119=5;
	                break;
	            case FOLLOWING_SIBLING:
	                alt119=6;
	                break;
	            case FOLLOWING:
	                alt119=7;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 119, 0, this.input);

	                throw nvae;
	            }

	            switch (alt119) {
	                case 1 :
	                    // XQueryParser.g:812:11: CHILD COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    CHILD297=this.match(this.input,CHILD,XQueryParser.FOLLOW_CHILD_in_p_ForwardAxis6830); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    CHILD297_tree = this.adaptor.create(CHILD297);
	                    this.adaptor.addChild(root_0, CHILD297_tree);
	                    }
	                    COLON_COLON298=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6832); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON298_tree = this.adaptor.create(COLON_COLON298);
	                    this.adaptor.addChild(root_0, COLON_COLON298_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:813:11: DESCENDANT COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    DESCENDANT299=this.match(this.input,DESCENDANT,XQueryParser.FOLLOW_DESCENDANT_in_p_ForwardAxis6844); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DESCENDANT299_tree = this.adaptor.create(DESCENDANT299);
	                    this.adaptor.addChild(root_0, DESCENDANT299_tree);
	                    }
	                    COLON_COLON300=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6846); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON300_tree = this.adaptor.create(COLON_COLON300);
	                    this.adaptor.addChild(root_0, COLON_COLON300_tree);
	                    }


	                    break;
	                case 3 :
	                    // XQueryParser.g:814:11: ATTRIBUTE COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    ATTRIBUTE301=this.match(this.input,ATTRIBUTE,XQueryParser.FOLLOW_ATTRIBUTE_in_p_ForwardAxis6858); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ATTRIBUTE301_tree = this.adaptor.create(ATTRIBUTE301);
	                    this.adaptor.addChild(root_0, ATTRIBUTE301_tree);
	                    }
	                    COLON_COLON302=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6860); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON302_tree = this.adaptor.create(COLON_COLON302);
	                    this.adaptor.addChild(root_0, COLON_COLON302_tree);
	                    }


	                    break;
	                case 4 :
	                    // XQueryParser.g:815:11: SELF COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    SELF303=this.match(this.input,SELF,XQueryParser.FOLLOW_SELF_in_p_ForwardAxis6872); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    SELF303_tree = this.adaptor.create(SELF303);
	                    this.adaptor.addChild(root_0, SELF303_tree);
	                    }
	                    COLON_COLON304=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6874); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON304_tree = this.adaptor.create(COLON_COLON304);
	                    this.adaptor.addChild(root_0, COLON_COLON304_tree);
	                    }


	                    break;
	                case 5 :
	                    // XQueryParser.g:816:11: DESCENDANT_OR_SELF COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    DESCENDANT_OR_SELF305=this.match(this.input,DESCENDANT_OR_SELF,XQueryParser.FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6886); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DESCENDANT_OR_SELF305_tree = this.adaptor.create(DESCENDANT_OR_SELF305);
	                    this.adaptor.addChild(root_0, DESCENDANT_OR_SELF305_tree);
	                    }
	                    COLON_COLON306=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6888); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON306_tree = this.adaptor.create(COLON_COLON306);
	                    this.adaptor.addChild(root_0, COLON_COLON306_tree);
	                    }


	                    break;
	                case 6 :
	                    // XQueryParser.g:817:11: FOLLOWING_SIBLING COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    FOLLOWING_SIBLING307=this.match(this.input,FOLLOWING_SIBLING,XQueryParser.FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6900); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    FOLLOWING_SIBLING307_tree = this.adaptor.create(FOLLOWING_SIBLING307);
	                    this.adaptor.addChild(root_0, FOLLOWING_SIBLING307_tree);
	                    }
	                    COLON_COLON308=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6902); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON308_tree = this.adaptor.create(COLON_COLON308);
	                    this.adaptor.addChild(root_0, COLON_COLON308_tree);
	                    }


	                    break;
	                case 7 :
	                    // XQueryParser.g:818:11: FOLLOWING COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    FOLLOWING309=this.match(this.input,FOLLOWING,XQueryParser.FOLLOW_FOLLOWING_in_p_ForwardAxis6914); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    FOLLOWING309_tree = this.adaptor.create(FOLLOWING309);
	                    this.adaptor.addChild(root_0, FOLLOWING309_tree);
	                    }
	                    COLON_COLON310=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6916); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON310_tree = this.adaptor.create(COLON_COLON310);
	                    this.adaptor.addChild(root_0, COLON_COLON310_tree);
	                    }


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AbbrevForwardStep_return: (function() {
	        XQueryParser.p_AbbrevForwardStep_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AbbrevForwardStep_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:822:1: p_AbbrevForwardStep : ( ATTR_SIGN )? p_NodeTest ;
	    // $ANTLR start "p_AbbrevForwardStep"
	    p_AbbrevForwardStep: function() {
	        var retval = new XQueryParser.p_AbbrevForwardStep_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ATTR_SIGN311 = null;
	         var p_NodeTest312 = null;

	        var ATTR_SIGN311_tree=null;

	        try {
	            // XQueryParser.g:823:9: ( ( ATTR_SIGN )? p_NodeTest )
	            // XQueryParser.g:823:11: ( ATTR_SIGN )? p_NodeTest
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:823:11: ( ATTR_SIGN )?
	            var alt120=2;
	            var LA120_0 = this.input.LA(1);

	            if ( (LA120_0==ATTR_SIGN) ) {
	                alt120=1;
	            }
	            switch (alt120) {
	                case 1 :
	                    // XQueryParser.g:823:11: ATTR_SIGN
	                    ATTR_SIGN311=this.match(this.input,ATTR_SIGN,XQueryParser.FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6942); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ATTR_SIGN311_tree = this.adaptor.create(ATTR_SIGN311);
	                    this.adaptor.addChild(root_0, ATTR_SIGN311_tree);
	                    }


	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6945);
	            p_NodeTest312=this.p_NodeTest();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NodeTest312.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ReverseStep_return: (function() {
	        XQueryParser.p_ReverseStep_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ReverseStep_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:827:1: p_ReverseStep : ( p_ReverseAxis p_NodeTest | p_AbbrevReverseStep );
	    // $ANTLR start "p_ReverseStep"
	    p_ReverseStep: function() {
	        var retval = new XQueryParser.p_ReverseStep_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ReverseAxis313 = null;
	         var p_NodeTest314 = null;
	         var p_AbbrevReverseStep315 = null;


	        try {
	            // XQueryParser.g:828:9: ( p_ReverseAxis p_NodeTest | p_AbbrevReverseStep )
	            var alt121=2;
	            var LA121_0 = this.input.LA(1);

	            if ( ((LA121_0>=ANCESTOR && LA121_0<=ANCESTOR_OR_SELF)||(LA121_0>=PARENT && LA121_0<=PRECEDING_SIBLING)) ) {
	                alt121=1;
	            }
	            else if ( (LA121_0==DOT_DOT) ) {
	                alt121=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 121, 0, this.input);

	                throw nvae;
	            }
	            switch (alt121) {
	                case 1 :
	                    // XQueryParser.g:828:11: p_ReverseAxis p_NodeTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ReverseAxis_in_p_ReverseStep6971);
	                    p_ReverseAxis313=this.p_ReverseAxis();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReverseAxis313.getTree());
	                    this.pushFollow(XQueryParser.FOLLOW_p_NodeTest_in_p_ReverseStep6973);
	                    p_NodeTest314=this.p_NodeTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NodeTest314.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:829:11: p_AbbrevReverseStep
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6985);
	                    p_AbbrevReverseStep315=this.p_AbbrevReverseStep();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AbbrevReverseStep315.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ReverseAxis_return: (function() {
	        XQueryParser.p_ReverseAxis_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ReverseAxis_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:833:1: p_ReverseAxis : ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON );
	    // $ANTLR start "p_ReverseAxis"
	    p_ReverseAxis: function() {
	        var retval = new XQueryParser.p_ReverseAxis_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var PARENT316 = null;
	        var COLON_COLON317 = null;
	        var ANCESTOR318 = null;
	        var COLON_COLON319 = null;
	        var PRECEDING_SIBLING320 = null;
	        var COLON_COLON321 = null;
	        var PRECEDING322 = null;
	        var COLON_COLON323 = null;
	        var ANCESTOR_OR_SELF324 = null;
	        var COLON_COLON325 = null;

	        var PARENT316_tree=null;
	        var COLON_COLON317_tree=null;
	        var ANCESTOR318_tree=null;
	        var COLON_COLON319_tree=null;
	        var PRECEDING_SIBLING320_tree=null;
	        var COLON_COLON321_tree=null;
	        var PRECEDING322_tree=null;
	        var COLON_COLON323_tree=null;
	        var ANCESTOR_OR_SELF324_tree=null;
	        var COLON_COLON325_tree=null;

	        try {
	            // XQueryParser.g:834:9: ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON )
	            var alt122=5;
	            switch ( this.input.LA(1) ) {
	            case PARENT:
	                alt122=1;
	                break;
	            case ANCESTOR:
	                alt122=2;
	                break;
	            case PRECEDING_SIBLING:
	                alt122=3;
	                break;
	            case PRECEDING:
	                alt122=4;
	                break;
	            case ANCESTOR_OR_SELF:
	                alt122=5;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 122, 0, this.input);

	                throw nvae;
	            }

	            switch (alt122) {
	                case 1 :
	                    // XQueryParser.g:834:11: PARENT COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    PARENT316=this.match(this.input,PARENT,XQueryParser.FOLLOW_PARENT_in_p_ReverseAxis7011); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    PARENT316_tree = this.adaptor.create(PARENT316);
	                    this.adaptor.addChild(root_0, PARENT316_tree);
	                    }
	                    COLON_COLON317=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7013); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON317_tree = this.adaptor.create(COLON_COLON317);
	                    this.adaptor.addChild(root_0, COLON_COLON317_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:835:11: ANCESTOR COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    ANCESTOR318=this.match(this.input,ANCESTOR,XQueryParser.FOLLOW_ANCESTOR_in_p_ReverseAxis7025); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ANCESTOR318_tree = this.adaptor.create(ANCESTOR318);
	                    this.adaptor.addChild(root_0, ANCESTOR318_tree);
	                    }
	                    COLON_COLON319=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7027); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON319_tree = this.adaptor.create(COLON_COLON319);
	                    this.adaptor.addChild(root_0, COLON_COLON319_tree);
	                    }


	                    break;
	                case 3 :
	                    // XQueryParser.g:836:11: PRECEDING_SIBLING COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    PRECEDING_SIBLING320=this.match(this.input,PRECEDING_SIBLING,XQueryParser.FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis7039); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    PRECEDING_SIBLING320_tree = this.adaptor.create(PRECEDING_SIBLING320);
	                    this.adaptor.addChild(root_0, PRECEDING_SIBLING320_tree);
	                    }
	                    COLON_COLON321=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7041); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON321_tree = this.adaptor.create(COLON_COLON321);
	                    this.adaptor.addChild(root_0, COLON_COLON321_tree);
	                    }


	                    break;
	                case 4 :
	                    // XQueryParser.g:837:11: PRECEDING COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    PRECEDING322=this.match(this.input,PRECEDING,XQueryParser.FOLLOW_PRECEDING_in_p_ReverseAxis7053); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    PRECEDING322_tree = this.adaptor.create(PRECEDING322);
	                    this.adaptor.addChild(root_0, PRECEDING322_tree);
	                    }
	                    COLON_COLON323=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7055); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON323_tree = this.adaptor.create(COLON_COLON323);
	                    this.adaptor.addChild(root_0, COLON_COLON323_tree);
	                    }


	                    break;
	                case 5 :
	                    // XQueryParser.g:838:11: ANCESTOR_OR_SELF COLON_COLON
	                    root_0 = this.adaptor.nil();

	                    ANCESTOR_OR_SELF324=this.match(this.input,ANCESTOR_OR_SELF,XQueryParser.FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis7067); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ANCESTOR_OR_SELF324_tree = this.adaptor.create(ANCESTOR_OR_SELF324);
	                    this.adaptor.addChild(root_0, ANCESTOR_OR_SELF324_tree);
	                    }
	                    COLON_COLON325=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7069); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON_COLON325_tree = this.adaptor.create(COLON_COLON325);
	                    this.adaptor.addChild(root_0, COLON_COLON325_tree);
	                    }


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AbbrevReverseStep_return: (function() {
	        XQueryParser.p_AbbrevReverseStep_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AbbrevReverseStep_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:842:1: p_AbbrevReverseStep : DOT_DOT ;
	    // $ANTLR start "p_AbbrevReverseStep"
	    p_AbbrevReverseStep: function() {
	        var retval = new XQueryParser.p_AbbrevReverseStep_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var DOT_DOT326 = null;

	        var DOT_DOT326_tree=null;

	        try {
	            // XQueryParser.g:843:9: ( DOT_DOT )
	            // XQueryParser.g:843:11: DOT_DOT
	            root_0 = this.adaptor.nil();

	            DOT_DOT326=this.match(this.input,DOT_DOT,XQueryParser.FOLLOW_DOT_DOT_in_p_AbbrevReverseStep7095); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOT_DOT326_tree = this.adaptor.create(DOT_DOT326);
	            this.adaptor.addChild(root_0, DOT_DOT326_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_NodeTest_return: (function() {
	        XQueryParser.p_NodeTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_NodeTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:847:1: p_NodeTest : ( p_KindTest | p_NameTest );
	    // $ANTLR start "p_NodeTest"
	    p_NodeTest: function() {
	        var retval = new XQueryParser.p_NodeTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_KindTest327 = null;
	         var p_NameTest328 = null;


	        try {
	            // XQueryParser.g:848:9: ( p_KindTest | p_NameTest )
	            var alt123=2;
	            alt123 = this.dfa123.predict(this.input);
	            switch (alt123) {
	                case 1 :
	                    // XQueryParser.g:848:11: p_KindTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_KindTest_in_p_NodeTest7121);
	                    p_KindTest327=this.p_KindTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_KindTest327.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:848:24: p_NameTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_NameTest_in_p_NodeTest7125);
	                    p_NameTest328=this.p_NameTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NameTest328.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_NameTest_return: (function() {
	        XQueryParser.p_NameTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_NameTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:852:1: p_NameTest : ( ( p_Wildcard )=> p_Wildcard | ( p_NCName COLON )=> p_QName | ( p_NCName )=> p_QName );
	    // $ANTLR start "p_NameTest"
	    p_NameTest: function() {
	        var retval = new XQueryParser.p_NameTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Wildcard329 = null;
	         var p_QName330 = null;
	         var p_QName331 = null;


	        try {
	            // XQueryParser.g:853:9: ( ( p_Wildcard )=> p_Wildcard | ( p_NCName COLON )=> p_QName | ( p_NCName )=> p_QName )
	            var alt124=3;
	            var LA124_0 = this.input.LA(1);

	            if ( (LA124_0==STAR) && (this.synpred13_XQueryParser())) {
	                alt124=1;
	            }
	            else if ( ((LA124_0>=ANCESTOR && LA124_0<=DECIMAL_SEPARATOR)||(LA124_0>=DIGIT && LA124_0<=SKIP)||(LA124_0>=VALUE && LA124_0<=QUOT_ER)||LA124_0==L_NCName||LA124_0==EXPLICITLY) ) {
	                var LA124_2 = this.input.LA(2);

	                if ( (LA124_2==COLON) && (this.synpred13_XQueryParser())) {
	                    alt124=1;
	                }
	                else if ( (this.synpred14_XQueryParser()) ) {
	                    alt124=2;
	                }
	                else if ( (this.synpred15_XQueryParser()) ) {
	                    alt124=3;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 124, 2, this.input);

	                    throw nvae;
	                }
	            }
	            else if ( (LA124_0==QUOT) && (this.synpred13_XQueryParser())) {
	                alt124=1;
	            }
	            else if ( (LA124_0==APOS) && (this.synpred13_XQueryParser())) {
	                alt124=1;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 124, 0, this.input);

	                throw nvae;
	            }
	            switch (alt124) {
	                case 1 :
	                    // XQueryParser.g:853:11: ( p_Wildcard )=> p_Wildcard
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_Wildcard_in_p_NameTest7157);
	                    p_Wildcard329=this.p_Wildcard();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Wildcard329.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:854:11: ( p_NCName COLON )=> p_QName
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_NameTest7178);
	                    p_QName330=this.p_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName330.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:855:11: ( p_NCName )=> p_QName
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_NameTest7196);
	                    p_QName331=this.p_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName331.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Wildcard_return: (function() {
	        XQueryParser.p_Wildcard_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Wildcard_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:859:1: p_Wildcard : ( STAR ( COLON p_NCName )? | p_NCName COLON STAR | p_StringLiteral COLON STAR );
	    // $ANTLR start "p_Wildcard"
	    p_Wildcard: function() {
	        var retval = new XQueryParser.p_Wildcard_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var STAR332 = null;
	        var COLON333 = null;
	        var COLON336 = null;
	        var STAR337 = null;
	        var COLON339 = null;
	        var STAR340 = null;
	         var p_NCName334 = null;
	         var p_NCName335 = null;
	         var p_StringLiteral338 = null;

	        var STAR332_tree=null;
	        var COLON333_tree=null;
	        var COLON336_tree=null;
	        var STAR337_tree=null;
	        var COLON339_tree=null;
	        var STAR340_tree=null;

	        this.setWsExplicit(true);
	        try {
	            // XQueryParser.g:860:9: ( STAR ( COLON p_NCName )? | p_NCName COLON STAR | p_StringLiteral COLON STAR )
	            var alt126=3;
	            switch ( this.input.LA(1) ) {
	            case STAR:
	                alt126=1;
	                break;
	            case ANCESTOR:
	            case ANCESTOR_OR_SELF:
	            case AND:
	            case AS:
	            case ASCENDING:
	            case AT:
	            case ATTRIBUTE:
	            case BASE_URI:
	            case BOUNDARY_SPACE:
	            case BY:
	            case CASE:
	            case CAST:
	            case CASTABLE:
	            case CHILD:
	            case COLLATION:
	            case COMMENT:
	            case CONSTRUCTION:
	            case COPY_NAMESPACES:
	            case DECLARE:
	            case DEFAULT:
	            case DESCENDANT:
	            case DESCENDANT_OR_SELF:
	            case DESCENDING:
	            case DIV:
	            case DOCUMENT:
	            case DOCUMENT_NODE:
	            case ELEMENT:
	            case ELSE:
	            case EMPTY:
	            case EMPTY_SEQUENCE:
	            case ENCODING:
	            case EQ:
	            case EVERY:
	            case EXCEPT:
	            case EXTERNAL:
	            case FOLLOWING:
	            case FOLLOWING_SIBLING:
	            case FOR:
	            case FUNCTION:
	            case GE:
	            case GREATEST:
	            case GT:
	            case IDIV:
	            case IF:
	            case IMPORT:
	            case IN:
	            case INHERIT:
	            case INSTANCE:
	            case INTERSECT:
	            case IS:
	            case ITEM:
	            case LAX:
	            case LE:
	            case LEAST:
	            case LET:
	            case LT:
	            case MOD:
	            case MODULE:
	            case NAMESPACE:
	            case NE:
	            case NO_INHERIT:
	            case NO_PRESERVE:
	            case NODE:
	            case OF:
	            case OPTION:
	            case OR:
	            case ORDER:
	            case ORDERED:
	            case ORDERING:
	            case PARENT:
	            case PRECEDING:
	            case PRECEDING_SIBLING:
	            case PRESERVE:
	            case PROCESSING_INSTRUCTION:
	            case RETURN:
	            case SATISFIES:
	            case SCHEMA:
	            case SCHEMA_ATTRIBUTE:
	            case SCHEMA_ELEMENT:
	            case SELF:
	            case SOME:
	            case STABLE:
	            case STRICT:
	            case STRIP:
	            case TEXT:
	            case THEN:
	            case TO:
	            case TREAT:
	            case TYPESWITCH:
	            case UNION:
	            case UNORDERED:
	            case VALIDATE:
	            case VARIABLE:
	            case VERSION:
	            case WHERE:
	            case XQUERY:
	            case ALLOWING:
	            case CATCH:
	            case CONTEXT:
	            case COUNT:
	            case DECIMAL_FORMAT:
	            case DECIMAL_SEPARATOR:
	            case DIGIT:
	            case END:
	            case GROUP:
	            case GROUPING_SEPARATOR:
	            case INFINITY:
	            case MINUS_SIGN:
	            case NAMESPACE_NODE:
	            case NAN:
	            case NEXT:
	            case ONLY:
	            case PATTERN_SEPARATOR:
	            case PERCENT:
	            case PER_MILLE:
	            case PREVIOUS:
	            case SLIDING:
	            case START:
	            case SWITCH:
	            case TRY:
	            case TUMBLING:
	            case TYPE:
	            case WHEN:
	            case WINDOW:
	            case ZERO_DIGIT:
	            case AFTER:
	            case BEFORE:
	            case COPY:
	            case DELETE:
	            case FIRST:
	            case INSERT:
	            case INTO:
	            case LAST:
	            case MODIFY:
	            case NODES:
	            case RENAME:
	            case REPLACE:
	            case REVALIDATION:
	            case SKIP:
	            case VALUE:
	            case WITH:
	            case ALL:
	            case ANY:
	            case CONTAINS:
	            case CONTENT:
	            case DIACRITICS:
	            case DIFFERENT:
	            case DISTANCE:
	            case ENTIRE:
	            case EXACTLY:
	            case FROM:
	            case FT_OPTION:
	            case FTAND:
	            case FTNOT:
	            case FTOR:
	            case INSENSITIVE:
	            case LANGUAGE:
	            case LEVELS:
	            case LOWERCASE:
	            case MOST:
	            case NO:
	            case NOT:
	            case OCCURS:
	            case PARAGRAPH:
	            case PARAGRAPHS:
	            case PHRASE:
	            case RELATIONSHIP:
	            case SAME:
	            case SCORE:
	            case SENSITIVE:
	            case SENTENCE:
	            case SENTENCES:
	            case STEMMING:
	            case STOP:
	            case THESAURUS:
	            case TIMES:
	            case UPPERCASE:
	            case USING:
	            case WEIGHT:
	            case WILDCARDS:
	            case WITHOUT:
	            case WORD:
	            case WORDS:
	            case BREAK:
	            case CONTINUE:
	            case EXIT:
	            case LOOP:
	            case RETURNING:
	            case WHILE:
	            case CHECK:
	            case COLLECTION:
	            case CONSTRAINT:
	            case FOREACH:
	            case FOREIGN:
	            case INDEX:
	            case INTEGRITY:
	            case KEY:
	            case ON:
	            case UNIQUE:
	            case BINARY:
	            case AMP_ER:
	            case APOS_ER:
	            case QUOT_ER:
	            case L_NCName:
	            case EXPLICITLY:
	                alt126=2;
	                break;
	            case APOS:
	            case QUOT:
	                alt126=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 126, 0, this.input);

	                throw nvae;
	            }

	            switch (alt126) {
	                case 1 :
	                    // XQueryParser.g:860:11: STAR ( COLON p_NCName )?
	                    root_0 = this.adaptor.nil();

	                    STAR332=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_Wildcard7226); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    STAR332_tree = this.adaptor.create(STAR332);
	                    this.adaptor.addChild(root_0, STAR332_tree);
	                    }
	                    // XQueryParser.g:860:16: ( COLON p_NCName )?
	                    var alt125=2;
	                    var LA125_0 = this.input.LA(1);

	                    if ( (LA125_0==COLON) ) {
	                        alt125=1;
	                    }
	                    switch (alt125) {
	                        case 1 :
	                            // XQueryParser.g:860:17: COLON p_NCName
	                            COLON333=this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_p_Wildcard7229); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            COLON333_tree = this.adaptor.create(COLON333);
	                            this.adaptor.addChild(root_0, COLON333_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_Wildcard7231);
	                            p_NCName334=this.p_NCName();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName334.getTree());


	                            break;

	                    }



	                    break;
	                case 2 :
	                    // XQueryParser.g:861:11: p_NCName COLON STAR
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_Wildcard7245);
	                    p_NCName335=this.p_NCName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName335.getTree());
	                    COLON336=this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_p_Wildcard7247); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON336_tree = this.adaptor.create(COLON336);
	                    this.adaptor.addChild(root_0, COLON336_tree);
	                    }
	                    STAR337=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_Wildcard7249); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    STAR337_tree = this.adaptor.create(STAR337);
	                    this.adaptor.addChild(root_0, STAR337_tree);
	                    }


	                    break;
	                case 3 :
	                    // XQueryParser.g:862:11: p_StringLiteral COLON STAR
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_Wildcard7261);
	                    p_StringLiteral338=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral338.getTree());
	                    COLON339=this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_p_Wildcard7263); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COLON339_tree = this.adaptor.create(COLON339);
	                    this.adaptor.addChild(root_0, COLON339_tree);
	                    }
	                    STAR340=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_Wildcard7265); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    STAR340_tree = this.adaptor.create(STAR340);
	                    this.adaptor.addChild(root_0, STAR340_tree);
	                    }


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	            this.setWsExplicit(false);
	        }
	        return retval;
	    },

	    // inline static return class
	    p_PostfixExpr_return: (function() {
	        XQueryParser.p_PostfixExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_PostfixExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:867:1: p_PostfixExpr : p_PrimaryExpr ( p_Predicate )* ;
	    // $ANTLR start "p_PostfixExpr"
	    p_PostfixExpr: function() {
	        var retval = new XQueryParser.p_PostfixExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_PrimaryExpr341 = null;
	         var p_Predicate342 = null;


	        try {
	            // XQueryParser.g:868:9: ( p_PrimaryExpr ( p_Predicate )* )
	            // XQueryParser.g:868:11: p_PrimaryExpr ( p_Predicate )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_PrimaryExpr_in_p_PostfixExpr7303);
	            p_PrimaryExpr341=this.p_PrimaryExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PrimaryExpr341.getTree());
	            // XQueryParser.g:868:25: ( p_Predicate )*
	            loop127:
	            do {
	                var alt127=2;
	                var LA127_0 = this.input.LA(1);

	                if ( (LA127_0==LSQUARE) ) {
	                    alt127=1;
	                }


	                switch (alt127) {
	                case 1 :
	                    // XQueryParser.g:868:26: p_Predicate
	                    this.pushFollow(XQueryParser.FOLLOW_p_Predicate_in_p_PostfixExpr7306);
	                    p_Predicate342=this.p_Predicate();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Predicate342.getTree());


	                    break;

	                default :
	                    break loop127;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ArgumentList_return: (function() {
	        XQueryParser.p_ArgumentList_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ArgumentList_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:875:1: p_ArgumentList : LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN ;
	    // $ANTLR start "p_ArgumentList"
	    p_ArgumentList: function() {
	        var retval = new XQueryParser.p_ArgumentList_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LPAREN343 = null;
	        var COMMA345 = null;
	        var RPAREN347 = null;
	         var p_Argument344 = null;
	         var p_Argument346 = null;

	        var LPAREN343_tree=null;
	        var COMMA345_tree=null;
	        var RPAREN347_tree=null;

	        try {
	            // XQueryParser.g:876:9: ( LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN )
	            // XQueryParser.g:876:11: LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN
	            root_0 = this.adaptor.nil();

	            LPAREN343=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ArgumentList7347); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN343_tree = this.adaptor.create(LPAREN343);
	            this.adaptor.addChild(root_0, LPAREN343_tree);
	            }
	            // XQueryParser.g:876:18: ( p_Argument ( COMMA p_Argument )* )?
	            var alt129=2;
	            var LA129_0 = this.input.LA(1);

	            if ( ((LA129_0>=ANCESTOR && LA129_0<=DECIMAL_SEPARATOR)||(LA129_0>=DIGIT && LA129_0<=LPAREN)||(LA129_0>=DOLLAR && LA129_0<=LBRACKET)||(LA129_0>=QUESTION && LA129_0<=SMALLER)||(LA129_0>=SLASH && LA129_0<=DOT_DOT)||LA129_0==ATTR_SIGN||(LA129_0>=APOS && LA129_0<=QUOT)||LA129_0==L_NCName||(LA129_0>=L_Pragma && LA129_0<=L_DoubleLiteral)||LA129_0==EXPLICITLY) ) {
	                alt129=1;
	            }
	            switch (alt129) {
	                case 1 :
	                    // XQueryParser.g:876:19: p_Argument ( COMMA p_Argument )*
	                    this.pushFollow(XQueryParser.FOLLOW_p_Argument_in_p_ArgumentList7350);
	                    p_Argument344=this.p_Argument();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Argument344.getTree());
	                    // XQueryParser.g:876:30: ( COMMA p_Argument )*
	                    loop128:
	                    do {
	                        var alt128=2;
	                        var LA128_0 = this.input.LA(1);

	                        if ( (LA128_0==COMMA) ) {
	                            alt128=1;
	                        }


	                        switch (alt128) {
	                        case 1 :
	                            // XQueryParser.g:876:31: COMMA p_Argument
	                            COMMA345=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_ArgumentList7353); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            COMMA345_tree = this.adaptor.create(COMMA345);
	                            this.adaptor.addChild(root_0, COMMA345_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_Argument_in_p_ArgumentList7355);
	                            p_Argument346=this.p_Argument();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Argument346.getTree());


	                            break;

	                        default :
	                            break loop128;
	                        }
	                    } while (true);



	                    break;

	            }

	            RPAREN347=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ArgumentList7361); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN347_tree = this.adaptor.create(RPAREN347);
	            this.adaptor.addChild(root_0, RPAREN347_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_PredicateList_return: (function() {
	        XQueryParser.p_PredicateList_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_PredicateList_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:880:1: p_PredicateList : ( p_Predicate )* ;
	    // $ANTLR start "p_PredicateList"
	    p_PredicateList: function() {
	        var retval = new XQueryParser.p_PredicateList_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Predicate348 = null;


	        try {
	            // XQueryParser.g:881:9: ( ( p_Predicate )* )
	            // XQueryParser.g:881:11: ( p_Predicate )*
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:881:11: ( p_Predicate )*
	            loop130:
	            do {
	                var alt130=2;
	                var LA130_0 = this.input.LA(1);

	                if ( (LA130_0==LSQUARE) ) {
	                    alt130=1;
	                }


	                switch (alt130) {
	                case 1 :
	                    // XQueryParser.g:881:11: p_Predicate
	                    this.pushFollow(XQueryParser.FOLLOW_p_Predicate_in_p_PredicateList7387);
	                    p_Predicate348=this.p_Predicate();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Predicate348.getTree());


	                    break;

	                default :
	                    break loop130;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Predicate_return: (function() {
	        XQueryParser.p_Predicate_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Predicate_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:885:1: p_Predicate : LSQUARE p_Expr[true,true] RSQUARE ;
	    // $ANTLR start "p_Predicate"
	    p_Predicate: function() {
	        var retval = new XQueryParser.p_Predicate_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LSQUARE349 = null;
	        var RSQUARE351 = null;
	         var p_Expr350 = null;

	        var LSQUARE349_tree=null;
	        var RSQUARE351_tree=null;

	        try {
	            // XQueryParser.g:886:9: ( LSQUARE p_Expr[true,true] RSQUARE )
	            // XQueryParser.g:886:11: LSQUARE p_Expr[true,true] RSQUARE
	            root_0 = this.adaptor.nil();

	            LSQUARE349=this.match(this.input,LSQUARE,XQueryParser.FOLLOW_LSQUARE_in_p_Predicate7414); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LSQUARE349_tree = this.adaptor.create(LSQUARE349);
	            this.adaptor.addChild(root_0, LSQUARE349_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_Predicate7416);
	            p_Expr350=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr350.getTree());
	            RSQUARE351=this.match(this.input,RSQUARE,XQueryParser.FOLLOW_RSQUARE_in_p_Predicate7419); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RSQUARE351_tree = this.adaptor.create(RSQUARE351);
	            this.adaptor.addChild(root_0, RSQUARE351_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_PrimaryExpr_return: (function() {
	        XQueryParser.p_PrimaryExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_PrimaryExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:891:1: p_PrimaryExpr : ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr );
	    // $ANTLR start "p_PrimaryExpr"
	    p_PrimaryExpr: function() {
	        var retval = new XQueryParser.p_PrimaryExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ParenthesizedExpr352 = null;
	         var p_Literal353 = null;
	         var p_VarRef354 = null;
	         var p_ContextItemExpr355 = null;
	         var p_FunctionCall356 = null;
	         var p_OrderedExpr357 = null;
	         var p_UnorderedExpr358 = null;
	         var p_Constructor359 = null;
	         var p_BlockExpr360 = null;


	        try {
	            // XQueryParser.g:892:9: ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr )
	            var alt131=9;
	            alt131 = this.dfa131.predict(this.input);
	            switch (alt131) {
	                case 1 :
	                    // XQueryParser.g:892:11: ( LPAREN )=> p_ParenthesizedExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7452);
	                    p_ParenthesizedExpr352=this.p_ParenthesizedExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ParenthesizedExpr352.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:893:11: p_Literal
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_Literal_in_p_PrimaryExpr7464);
	                    p_Literal353=this.p_Literal();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Literal353.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:894:11: p_VarRef
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_VarRef_in_p_PrimaryExpr7476);
	                    p_VarRef354=this.p_VarRef();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarRef354.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:895:11: p_ContextItemExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7488);
	                    p_ContextItemExpr355=this.p_ContextItemExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ContextItemExpr355.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:896:11: p_FunctionCall
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FunctionCall_in_p_PrimaryExpr7500);
	                    p_FunctionCall356=this.p_FunctionCall();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FunctionCall356.getTree());


	                    break;
	                case 6 :
	                    // XQueryParser.g:897:11: p_OrderedExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7512);
	                    p_OrderedExpr357=this.p_OrderedExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderedExpr357.getTree());


	                    break;
	                case 7 :
	                    // XQueryParser.g:898:11: p_UnorderedExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7524);
	                    p_UnorderedExpr358=this.p_UnorderedExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnorderedExpr358.getTree());


	                    break;
	                case 8 :
	                    // XQueryParser.g:899:11: p_Constructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_Constructor_in_p_PrimaryExpr7536);
	                    p_Constructor359=this.p_Constructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Constructor359.getTree());


	                    break;
	                case 9 :
	                    // XQueryParser.g:902:11: p_BlockExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_BlockExpr_in_p_PrimaryExpr7550);
	                    p_BlockExpr360=this.p_BlockExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockExpr360.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Literal_return: (function() {
	        XQueryParser.p_Literal_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Literal_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:906:1: p_Literal : ( p_NumericLiteral | p_StringLiteral );
	    // $ANTLR start "p_Literal"
	    p_Literal: function() {
	        var retval = new XQueryParser.p_Literal_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_NumericLiteral361 = null;
	         var p_StringLiteral362 = null;


	        try {
	            // XQueryParser.g:907:9: ( p_NumericLiteral | p_StringLiteral )
	            var alt132=2;
	            var LA132_0 = this.input.LA(1);

	            if ( ((LA132_0>=L_IntegerLiteral && LA132_0<=L_DoubleLiteral)) ) {
	                alt132=1;
	            }
	            else if ( ((LA132_0>=APOS && LA132_0<=QUOT)) ) {
	                alt132=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 132, 0, this.input);

	                throw nvae;
	            }
	            switch (alt132) {
	                case 1 :
	                    // XQueryParser.g:907:11: p_NumericLiteral
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_NumericLiteral_in_p_Literal7576);
	                    p_NumericLiteral361=this.p_NumericLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NumericLiteral361.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:907:30: p_StringLiteral
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_Literal7580);
	                    p_StringLiteral362=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral362.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_NumericLiteral_return: (function() {
	        XQueryParser.p_NumericLiteral_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_NumericLiteral_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:911:1: p_NumericLiteral : ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral );
	    // $ANTLR start "p_NumericLiteral"
	    p_NumericLiteral: function() {
	        var retval = new XQueryParser.p_NumericLiteral_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var set363 = null;

	        var set363_tree=null;

	        try {
	            // XQueryParser.g:912:9: ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral )
	            // XQueryParser.g:
	            root_0 = this.adaptor.nil();

	            set363=this.input.LT(1);
	            if ( (this.input.LA(1)>=L_IntegerLiteral && this.input.LA(1)<=L_DoubleLiteral) ) {
	                this.input.consume();
	                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set363));
	                this.state.errorRecovery=false;this.state.failed=false;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                throw mse;
	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_VarRef_return: (function() {
	        XQueryParser.p_VarRef_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_VarRef_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:916:1: p_VarRef : DOLLAR p_VarName ;
	    // $ANTLR start "p_VarRef"
	    p_VarRef: function() {
	        var retval = new XQueryParser.p_VarRef_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var DOLLAR364 = null;
	         var p_VarName365 = null;

	        var DOLLAR364_tree=null;

	        try {
	            // XQueryParser.g:917:9: ( DOLLAR p_VarName )
	            // XQueryParser.g:917:11: DOLLAR p_VarName
	            root_0 = this.adaptor.nil();

	            DOLLAR364=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_VarRef7648); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR364_tree = this.adaptor.create(DOLLAR364);
	            this.adaptor.addChild(root_0, DOLLAR364_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_VarRef7650);
	            p_VarName365=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName365.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_VarName_return: (function() {
	        XQueryParser.p_VarName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_VarName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:921:1: p_VarName : p_QName ;
	    // $ANTLR start "p_VarName"
	    p_VarName: function() {
	        var retval = new XQueryParser.p_VarName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName366 = null;


	        try {
	            // XQueryParser.g:922:9: ( p_QName )
	            // XQueryParser.g:922:11: p_QName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_VarName7676);
	            p_QName366=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName366.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ParenthesizedExpr_return: (function() {
	        XQueryParser.p_ParenthesizedExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ParenthesizedExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:926:1: p_ParenthesizedExpr : LPAREN ( p_Expr[true,true] )? RPAREN ;
	    // $ANTLR start "p_ParenthesizedExpr"
	    p_ParenthesizedExpr: function() {
	        var retval = new XQueryParser.p_ParenthesizedExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LPAREN367 = null;
	        var RPAREN369 = null;
	         var p_Expr368 = null;

	        var LPAREN367_tree=null;
	        var RPAREN369_tree=null;

	        try {
	            // XQueryParser.g:927:9: ( LPAREN ( p_Expr[true,true] )? RPAREN )
	            // XQueryParser.g:927:11: LPAREN ( p_Expr[true,true] )? RPAREN
	            root_0 = this.adaptor.nil();

	            LPAREN367=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ParenthesizedExpr7702); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN367_tree = this.adaptor.create(LPAREN367);
	            this.adaptor.addChild(root_0, LPAREN367_tree);
	            }
	            // XQueryParser.g:927:18: ( p_Expr[true,true] )?
	            var alt133=2;
	            var LA133_0 = this.input.LA(1);

	            if ( ((LA133_0>=ANCESTOR && LA133_0<=DECIMAL_SEPARATOR)||(LA133_0>=DIGIT && LA133_0<=LPAREN)||(LA133_0>=DOLLAR && LA133_0<=LBRACKET)||(LA133_0>=STAR && LA133_0<=SMALLER)||(LA133_0>=SLASH && LA133_0<=DOT_DOT)||LA133_0==ATTR_SIGN||(LA133_0>=APOS && LA133_0<=QUOT)||LA133_0==L_NCName||(LA133_0>=L_Pragma && LA133_0<=L_DoubleLiteral)||LA133_0==EXPLICITLY) ) {
	                alt133=1;
	            }
	            switch (alt133) {
	                case 1 :
	                    // XQueryParser.g:927:18: p_Expr[true,true]
	                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_ParenthesizedExpr7704);
	                    p_Expr368=this.p_Expr(true, true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr368.getTree());


	                    break;

	            }

	            RPAREN369=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ParenthesizedExpr7708); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN369_tree = this.adaptor.create(RPAREN369);
	            this.adaptor.addChild(root_0, RPAREN369_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ContextItemExpr_return: (function() {
	        XQueryParser.p_ContextItemExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ContextItemExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:931:1: p_ContextItemExpr : DOT ;
	    // $ANTLR start "p_ContextItemExpr"
	    p_ContextItemExpr: function() {
	        var retval = new XQueryParser.p_ContextItemExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var DOT370 = null;

	        var DOT370_tree=null;

	        try {
	            // XQueryParser.g:932:9: ( DOT )
	            // XQueryParser.g:932:11: DOT
	            root_0 = this.adaptor.nil();

	            DOT370=this.match(this.input,DOT,XQueryParser.FOLLOW_DOT_in_p_ContextItemExpr7734); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOT370_tree = this.adaptor.create(DOT370);
	            this.adaptor.addChild(root_0, DOT370_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_OrderedExpr_return: (function() {
	        XQueryParser.p_OrderedExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_OrderedExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:936:1: p_OrderedExpr : k= ORDERED LBRACKET p_Expr[true,true] RBRACKET ;
	    // $ANTLR start "p_OrderedExpr"
	    p_OrderedExpr: function() {
	        var retval = new XQueryParser.p_OrderedExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET371 = null;
	        var RBRACKET373 = null;
	         var p_Expr372 = null;

	        var k_tree=null;
	        var LBRACKET371_tree=null;
	        var RBRACKET373_tree=null;

	        try {
	            // XQueryParser.g:937:9: (k= ORDERED LBRACKET p_Expr[true,true] RBRACKET )
	            // XQueryParser.g:937:11: k= ORDERED LBRACKET p_Expr[true,true] RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,ORDERED,XQueryParser.FOLLOW_ORDERED_in_p_OrderedExpr7762); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LBRACKET371=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_OrderedExpr7766); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET371_tree = this.adaptor.create(LBRACKET371);
	            this.adaptor.addChild(root_0, LBRACKET371_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_OrderedExpr7768);
	            p_Expr372=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr372.getTree());
	            RBRACKET373=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_OrderedExpr7771); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET373_tree = this.adaptor.create(RBRACKET373);
	            this.adaptor.addChild(root_0, RBRACKET373_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_UnorderedExpr_return: (function() {
	        XQueryParser.p_UnorderedExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_UnorderedExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:941:1: p_UnorderedExpr : k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET ;
	    // $ANTLR start "p_UnorderedExpr"
	    p_UnorderedExpr: function() {
	        var retval = new XQueryParser.p_UnorderedExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET374 = null;
	        var RBRACKET376 = null;
	         var p_Expr375 = null;

	        var k_tree=null;
	        var LBRACKET374_tree=null;
	        var RBRACKET376_tree=null;

	        try {
	            // XQueryParser.g:942:9: (k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET )
	            // XQueryParser.g:942:11: k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,UNORDERED,XQueryParser.FOLLOW_UNORDERED_in_p_UnorderedExpr7799); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LBRACKET374=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_UnorderedExpr7803); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET374_tree = this.adaptor.create(LBRACKET374);
	            this.adaptor.addChild(root_0, LBRACKET374_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_UnorderedExpr7805);
	            p_Expr375=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr375.getTree());
	            RBRACKET376=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_UnorderedExpr7808); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET376_tree = this.adaptor.create(RBRACKET376);
	            this.adaptor.addChild(root_0, RBRACKET376_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FunctionCall_return: (function() {
	        XQueryParser.p_FunctionCall_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FunctionCall_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:947:1: p_FunctionCall : pg_FQName p_ArgumentList ;
	    // $ANTLR start "p_FunctionCall"
	    p_FunctionCall: function() {
	        var retval = new XQueryParser.p_FunctionCall_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var pg_FQName377 = null;
	         var p_ArgumentList378 = null;


	        try {
	            // XQueryParser.g:948:9: ( pg_FQName p_ArgumentList )
	            // XQueryParser.g:948:11: pg_FQName p_ArgumentList
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_pg_FQName_in_p_FunctionCall7835);
	            pg_FQName377=this.pg_FQName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_FQName377.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_ArgumentList_in_p_FunctionCall7837);
	            p_ArgumentList378=this.p_ArgumentList();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ArgumentList378.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Argument_return: (function() {
	        XQueryParser.p_Argument_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Argument_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:952:1: p_Argument : ( p_ExprSingle[true] | p_ArgumentPlaceholder );
	    // $ANTLR start "p_Argument"
	    p_Argument: function() {
	        var retval = new XQueryParser.p_Argument_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ExprSingle379 = null;
	         var p_ArgumentPlaceholder380 = null;


	        try {
	            // XQueryParser.g:953:9: ( p_ExprSingle[true] | p_ArgumentPlaceholder )
	            var alt134=2;
	            var LA134_0 = this.input.LA(1);

	            if ( ((LA134_0>=ANCESTOR && LA134_0<=DECIMAL_SEPARATOR)||(LA134_0>=DIGIT && LA134_0<=LPAREN)||(LA134_0>=DOLLAR && LA134_0<=LBRACKET)||(LA134_0>=STAR && LA134_0<=SMALLER)||(LA134_0>=SLASH && LA134_0<=DOT_DOT)||LA134_0==ATTR_SIGN||(LA134_0>=APOS && LA134_0<=QUOT)||LA134_0==L_NCName||(LA134_0>=L_Pragma && LA134_0<=L_DoubleLiteral)||LA134_0==EXPLICITLY) ) {
	                alt134=1;
	            }
	            else if ( (LA134_0==QUESTION) ) {
	                alt134=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 134, 0, this.input);

	                throw nvae;
	            }
	            switch (alt134) {
	                case 1 :
	                    // XQueryParser.g:953:11: p_ExprSingle[true]
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_Argument7863);
	                    p_ExprSingle379=this.p_ExprSingle(true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle379.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:953:32: p_ArgumentPlaceholder
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ArgumentPlaceholder_in_p_Argument7868);
	                    p_ArgumentPlaceholder380=this.p_ArgumentPlaceholder();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ArgumentPlaceholder380.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ArgumentPlaceholder_return: (function() {
	        XQueryParser.p_ArgumentPlaceholder_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ArgumentPlaceholder_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:957:1: p_ArgumentPlaceholder : QUESTION ;
	    // $ANTLR start "p_ArgumentPlaceholder"
	    p_ArgumentPlaceholder: function() {
	        var retval = new XQueryParser.p_ArgumentPlaceholder_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var QUESTION381 = null;

	        var QUESTION381_tree=null;

	        try {
	            // XQueryParser.g:958:9: ( QUESTION )
	            // XQueryParser.g:958:11: QUESTION
	            root_0 = this.adaptor.nil();

	            QUESTION381=this.match(this.input,QUESTION,XQueryParser.FOLLOW_QUESTION_in_p_ArgumentPlaceholder7894); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            QUESTION381_tree = this.adaptor.create(QUESTION381);
	            this.adaptor.addChild(root_0, QUESTION381_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Constructor_return: (function() {
	        XQueryParser.p_Constructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Constructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:962:1: p_Constructor : ( p_DirectConstructor | p_ComputedConstructor );
	    // $ANTLR start "p_Constructor"
	    p_Constructor: function() {
	        var retval = new XQueryParser.p_Constructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_DirectConstructor382 = null;
	         var p_ComputedConstructor383 = null;


	        try {
	            // XQueryParser.g:963:9: ( p_DirectConstructor | p_ComputedConstructor )
	            var alt135=2;
	            var LA135_0 = this.input.LA(1);

	            if ( (LA135_0==SMALLER||(LA135_0>=L_DirCommentConstructor && LA135_0<=L_DirPIConstructor)) ) {
	                alt135=1;
	            }
	            else if ( (LA135_0==ATTRIBUTE||LA135_0==COMMENT||LA135_0==DOCUMENT||LA135_0==ELEMENT||LA135_0==NAMESPACE||LA135_0==PROCESSING_INSTRUCTION||LA135_0==TEXT) ) {
	                alt135=2;
	            }
	            else if ( (LA135_0==BINARY) && ((this.lc(MLS)))) {
	                alt135=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 135, 0, this.input);

	                throw nvae;
	            }
	            switch (alt135) {
	                case 1 :
	                    // XQueryParser.g:963:11: p_DirectConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_DirectConstructor_in_p_Constructor7920);
	                    p_DirectConstructor382=this.p_DirectConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirectConstructor382.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:964:11: p_ComputedConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ComputedConstructor_in_p_Constructor7932);
	                    p_ComputedConstructor383=this.p_ComputedConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ComputedConstructor383.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_DirectConstructor_return: (function() {
	        XQueryParser.p_DirectConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_DirectConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:968:1: p_DirectConstructor : ( p_DirElemConstructor | p_DirCommentConstructor | p_DirPIConstructor );
	    // $ANTLR start "p_DirectConstructor"
	    p_DirectConstructor: function() {
	        var retval = new XQueryParser.p_DirectConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_DirElemConstructor384 = null;
	         var p_DirCommentConstructor385 = null;
	         var p_DirPIConstructor386 = null;


	        try {
	            // XQueryParser.g:969:9: ( p_DirElemConstructor | p_DirCommentConstructor | p_DirPIConstructor )
	            var alt136=3;
	            switch ( this.input.LA(1) ) {
	            case SMALLER:
	                alt136=1;
	                break;
	            case L_DirCommentConstructor:
	                alt136=2;
	                break;
	            case L_DirPIConstructor:
	                alt136=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 136, 0, this.input);

	                throw nvae;
	            }

	            switch (alt136) {
	                case 1 :
	                    // XQueryParser.g:969:11: p_DirElemConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7958);
	                    p_DirElemConstructor384=this.p_DirElemConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirElemConstructor384.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:970:11: p_DirCommentConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_DirCommentConstructor_in_p_DirectConstructor7970);
	                    p_DirCommentConstructor385=this.p_DirCommentConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirCommentConstructor385.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:971:11: p_DirPIConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_DirPIConstructor_in_p_DirectConstructor7982);
	                    p_DirPIConstructor386=this.p_DirPIConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirPIConstructor386.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_DirElemConstructor_return: (function() {
	        XQueryParser.p_DirElemConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_DirElemConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:975:1: p_DirElemConstructor : SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) ;
	    // $ANTLR start "p_DirElemConstructor"
	    p_DirElemConstructor: function() {
	        var retval = new XQueryParser.p_DirElemConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var SMALLER387 = null;
	        var EMPTY_CLOSE_TAG390 = null;
	        var GREATER391 = null;
	        var CLOSE_TAG393 = null;
	        var S395 = null;
	        var GREATER396 = null;
	         var p_QName388 = null;
	         var p_DirAttributeList389 = null;
	         var pm_DirElemContent392 = null;
	         var p_QName394 = null;

	        var SMALLER387_tree=null;
	        var EMPTY_CLOSE_TAG390_tree=null;
	        var GREATER391_tree=null;
	        var CLOSE_TAG393_tree=null;
	        var S395_tree=null;
	        var GREATER396_tree=null;
	        var stream_CLOSE_TAG=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token CLOSE_TAG");
	        var stream_GREATER=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token GREATER");
	        var stream_S=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token S");
	        var stream_EMPTY_CLOSE_TAG=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EMPTY_CLOSE_TAG");
	        var stream_SMALLER=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SMALLER");
	        var stream_p_DirAttributeList=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_DirAttributeList");
	        var stream_pm_DirElemContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_DirElemContent");
	        var stream_p_QName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QName");
	        try {
	            // XQueryParser.g:976:9: ( SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) )
	            // XQueryParser.g:976:11: SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
	            SMALLER387=this.match(this.input,SMALLER,XQueryParser.FOLLOW_SMALLER_in_p_DirElemConstructor8009); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_SMALLER.add(SMALLER387);

	            if ( this.state.backtracking===0 ) {
	              this.pushXMLLexer();
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_DirElemConstructor8023);
	            p_QName388=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_QName.add(p_QName388.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_DirAttributeList_in_p_DirElemConstructor8025);
	            p_DirAttributeList389=this.p_DirAttributeList();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_DirAttributeList.add(p_DirAttributeList389.getTree());
	            // XQueryParser.g:978:11: ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
	            var alt139=2;
	            var LA139_0 = this.input.LA(1);

	            if ( (LA139_0==EMPTY_CLOSE_TAG) ) {
	                alt139=1;
	            }
	            else if ( (LA139_0==GREATER) ) {
	                alt139=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 139, 0, this.input);

	                throw nvae;
	            }
	            switch (alt139) {
	                case 1 :
	                    // XQueryParser.g:978:12: EMPTY_CLOSE_TAG
	                    EMPTY_CLOSE_TAG390=this.match(this.input,EMPTY_CLOSE_TAG,XQueryParser.FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor8039); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_EMPTY_CLOSE_TAG.add(EMPTY_CLOSE_TAG390);



	                    break;
	                case 2 :
	                    // XQueryParser.g:978:30: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
	                    // XQueryParser.g:978:30: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
	                    // XQueryParser.g:978:31: GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER
	                    GREATER391=this.match(this.input,GREATER,XQueryParser.FOLLOW_GREATER_in_p_DirElemConstructor8044); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_GREATER.add(GREATER391);

	                    // XQueryParser.g:978:39: ( pm_DirElemContent )*
	                    loop137:
	                    do {
	                        var alt137=2;
	                        var LA137_0 = this.input.LA(1);

	                        if ( ((LA137_0>=L_ElementContentChar && LA137_0<=ESCAPE_RBRACKET)||LA137_0==LBRACKET||LA137_0==SMALLER||(LA137_0>=L_DirCommentConstructor && LA137_0<=L_DirPIConstructor)) ) {
	                            alt137=1;
	                        }


	                        switch (alt137) {
	                        case 1 :
	                            // XQueryParser.g:978:39: pm_DirElemContent
	                            this.pushFollow(XQueryParser.FOLLOW_pm_DirElemContent_in_p_DirElemConstructor8046);
	                            pm_DirElemContent392=this.pm_DirElemContent();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_pm_DirElemContent.add(pm_DirElemContent392.getTree());


	                            break;

	                        default :
	                            break loop137;
	                        }
	                    } while (true);

	                    CLOSE_TAG393=this.match(this.input,CLOSE_TAG,XQueryParser.FOLLOW_CLOSE_TAG_in_p_DirElemConstructor8049); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_CLOSE_TAG.add(CLOSE_TAG393);

	                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_DirElemConstructor8051);
	                    p_QName394=this.p_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_QName.add(p_QName394.getTree());
	                    // XQueryParser.g:978:76: ( S )?
	                    var alt138=2;
	                    var LA138_0 = this.input.LA(1);

	                    if ( (LA138_0==S) ) {
	                        alt138=1;
	                    }
	                    switch (alt138) {
	                        case 1 :
	                            // XQueryParser.g:978:76: S
	                            S395=this.match(this.input,S,XQueryParser.FOLLOW_S_in_p_DirElemConstructor8053); if (this.state.failed) return retval; 
	                            if ( this.state.backtracking===0 ) stream_S.add(S395);



	                            break;

	                    }

	                    GREATER396=this.match(this.input,GREATER,XQueryParser.FOLLOW_GREATER_in_p_DirElemConstructor8056); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_GREATER.add(GREATER396);






	                    break;

	            }



	            // AST REWRITE
	            // elements: p_DirAttributeList, pm_DirElemContent
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 979:17: -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
	            {
	                // XQueryParser.g:979:20: ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(DirElemConstructor, "DirElemConstructor"), root_1);

	                // XQueryParser.g:979:41: ^( DirAttributeList ( p_DirAttributeList )* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(DirAttributeList, "DirAttributeList"), root_2);

	                // XQueryParser.g:979:60: ( p_DirAttributeList )*
	                while ( stream_p_DirAttributeList.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_p_DirAttributeList.nextTree());

	                }
	                stream_p_DirAttributeList.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }
	                // XQueryParser.g:979:81: ^( DirElemContent ( pm_DirElemContent )* )
	                {
	                var root_2 = this.adaptor.nil();
	                root_2 = this.adaptor.becomeRoot(this.adaptor.create(DirElemContent, "DirElemContent"), root_2);

	                // XQueryParser.g:979:98: ( pm_DirElemContent )*
	                while ( stream_pm_DirElemContent.hasNext() ) {
	                    this.adaptor.addChild(root_2, stream_pm_DirElemContent.nextTree());

	                }
	                stream_pm_DirElemContent.reset();

	                this.adaptor.addChild(root_1, root_2);
	                }

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	            this.popLexer();
	        }
	        return retval;
	    },

	    // inline static return class
	    p_DirAttributeList_return: (function() {
	        XQueryParser.p_DirAttributeList_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_DirAttributeList_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:984:1: p_DirAttributeList : ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* ;
	    // $ANTLR start "p_DirAttributeList"
	    p_DirAttributeList: function() {
	        var retval = new XQueryParser.p_DirAttributeList_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var S397 = null;
	        var S399 = null;
	        var EQUAL400 = null;
	        var S401 = null;
	         var p_QName398 = null;
	         var p_DirAttributeValue402 = null;

	        var S397_tree=null;
	        var S399_tree=null;
	        var EQUAL400_tree=null;
	        var S401_tree=null;

	        try {
	            // XQueryParser.g:985:9: ( ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* )
	            // XQueryParser.g:985:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:985:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
	            loop143:
	            do {
	                var alt143=2;
	                var LA143_0 = this.input.LA(1);

	                if ( (LA143_0==S) ) {
	                    alt143=1;
	                }


	                switch (alt143) {
	                case 1 :
	                    // XQueryParser.g:985:12: S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
	                    S397=this.match(this.input,S,XQueryParser.FOLLOW_S_in_p_DirAttributeList8133); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    S397_tree = this.adaptor.create(S397);
	                    this.adaptor.addChild(root_0, S397_tree);
	                    }
	                    // XQueryParser.g:985:14: ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
	                    var alt142=2;
	                    var LA142_0 = this.input.LA(1);

	                    if ( ((LA142_0>=ANCESTOR && LA142_0<=DECIMAL_SEPARATOR)||(LA142_0>=DIGIT && LA142_0<=SKIP)||(LA142_0>=VALUE && LA142_0<=QUOT_ER)||LA142_0==L_NCName||LA142_0==EXPLICITLY) ) {
	                        alt142=1;
	                    }
	                    switch (alt142) {
	                        case 1 :
	                            // XQueryParser.g:985:15: p_QName ( S )? EQUAL ( S )? p_DirAttributeValue
	                            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_DirAttributeList8136);
	                            p_QName398=this.p_QName();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName398.getTree());
	                            // XQueryParser.g:985:23: ( S )?
	                            var alt140=2;
	                            var LA140_0 = this.input.LA(1);

	                            if ( (LA140_0==S) ) {
	                                alt140=1;
	                            }
	                            switch (alt140) {
	                                case 1 :
	                                    // XQueryParser.g:985:23: S
	                                    S399=this.match(this.input,S,XQueryParser.FOLLOW_S_in_p_DirAttributeList8138); if (this.state.failed) return retval;
	                                    if ( this.state.backtracking===0 ) {
	                                    S399_tree = this.adaptor.create(S399);
	                                    this.adaptor.addChild(root_0, S399_tree);
	                                    }


	                                    break;

	                            }

	                            EQUAL400=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_p_DirAttributeList8141); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            EQUAL400_tree = this.adaptor.create(EQUAL400);
	                            this.adaptor.addChild(root_0, EQUAL400_tree);
	                            }
	                            // XQueryParser.g:985:32: ( S )?
	                            var alt141=2;
	                            var LA141_0 = this.input.LA(1);

	                            if ( (LA141_0==S) ) {
	                                alt141=1;
	                            }
	                            switch (alt141) {
	                                case 1 :
	                                    // XQueryParser.g:985:32: S
	                                    S401=this.match(this.input,S,XQueryParser.FOLLOW_S_in_p_DirAttributeList8143); if (this.state.failed) return retval;
	                                    if ( this.state.backtracking===0 ) {
	                                    S401_tree = this.adaptor.create(S401);
	                                    this.adaptor.addChild(root_0, S401_tree);
	                                    }


	                                    break;

	                            }

	                            this.pushFollow(XQueryParser.FOLLOW_p_DirAttributeValue_in_p_DirAttributeList8146);
	                            p_DirAttributeValue402=this.p_DirAttributeValue();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirAttributeValue402.getTree());


	                            break;

	                    }



	                    break;

	                default :
	                    break loop143;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_DirAttributeValue_return: (function() {
	        XQueryParser.p_DirAttributeValue_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_DirAttributeValue_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:989:1: p_DirAttributeValue : ( ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( p_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( p_AposAttrValueContent )* ) );
	    // $ANTLR start "p_DirAttributeValue"
	    p_DirAttributeValue: function() {
	        var retval = new XQueryParser.p_DirAttributeValue_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var QUOT403 = null;
	        var ESCAPE_QUOT404 = null;
	        var APOS405 = null;
	        var QUOT407 = null;
	        var APOS408 = null;
	        var ESCAPE_APOS409 = null;
	        var QUOT410 = null;
	        var APOS412 = null;
	         var p_QuotAttrValueContent406 = null;
	         var p_AposAttrValueContent411 = null;

	        var QUOT403_tree=null;
	        var ESCAPE_QUOT404_tree=null;
	        var APOS405_tree=null;
	        var QUOT407_tree=null;
	        var APOS408_tree=null;
	        var ESCAPE_APOS409_tree=null;
	        var QUOT410_tree=null;
	        var APOS412_tree=null;
	        var stream_ESCAPE_QUOT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ESCAPE_QUOT");
	        var stream_APOS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token APOS");
	        var stream_ESCAPE_APOS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ESCAPE_APOS");
	        var stream_QUOT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token QUOT");
	        var stream_p_QuotAttrValueContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QuotAttrValueContent");
	        var stream_p_AposAttrValueContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_AposAttrValueContent");
	        try {
	            // XQueryParser.g:990:9: ( ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( p_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( p_AposAttrValueContent )* ) )
	            var alt146=2;
	            var LA146_0 = this.input.LA(1);

	            if ( (LA146_0==QUOT) ) {
	                alt146=1;
	            }
	            else if ( (LA146_0==APOS) ) {
	                alt146=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 146, 0, this.input);

	                throw nvae;
	            }
	            switch (alt146) {
	                case 1 :
	                    // XQueryParser.g:990:11: ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT )
	                    // XQueryParser.g:990:11: ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT )
	                    // XQueryParser.g:990:12: QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT
	                    QUOT403=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_DirAttributeValue8177); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT403);

	                    // XQueryParser.g:990:17: ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )*
	                    loop144:
	                    do {
	                        var alt144=4;
	                        switch ( this.input.LA(1) ) {
	                        case ESCAPE_QUOT:
	                            alt144=1;
	                            break;
	                        case APOS:
	                            alt144=2;
	                            break;
	                        case L_QuotAttrContentChar:
	                        case L_PredefinedEntityRef:
	                        case L_CharRef:
	                        case ESCAPE_LBRACKET:
	                        case ESCAPE_RBRACKET:
	                        case LBRACKET:
	                            alt144=3;
	                            break;

	                        }

	                        switch (alt144) {
	                        case 1 :
	                            // XQueryParser.g:990:18: ESCAPE_QUOT
	                            ESCAPE_QUOT404=this.match(this.input,ESCAPE_QUOT,XQueryParser.FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue8180); if (this.state.failed) return retval; 
	                            if ( this.state.backtracking===0 ) stream_ESCAPE_QUOT.add(ESCAPE_QUOT404);



	                            break;
	                        case 2 :
	                            // XQueryParser.g:990:32: APOS
	                            APOS405=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_DirAttributeValue8184); if (this.state.failed) return retval; 
	                            if ( this.state.backtracking===0 ) stream_APOS.add(APOS405);



	                            break;
	                        case 3 :
	                            // XQueryParser.g:990:39: p_QuotAttrValueContent
	                            this.pushFollow(XQueryParser.FOLLOW_p_QuotAttrValueContent_in_p_DirAttributeValue8188);
	                            p_QuotAttrValueContent406=this.p_QuotAttrValueContent();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_p_QuotAttrValueContent.add(p_QuotAttrValueContent406.getTree());


	                            break;

	                        default :
	                            break loop144;
	                        }
	                    } while (true);

	                    QUOT407=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_DirAttributeValue8192); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT407);






	                    // AST REWRITE
	                    // elements: p_QuotAttrValueContent
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 991:17: -> ^( DirAttributeValue ( p_QuotAttrValueContent )* )
	                    {
	                        // XQueryParser.g:991:20: ^( DirAttributeValue ( p_QuotAttrValueContent )* )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

	                        // XQueryParser.g:991:40: ( p_QuotAttrValueContent )*
	                        while ( stream_p_QuotAttrValueContent.hasNext() ) {
	                            this.adaptor.addChild(root_1, stream_p_QuotAttrValueContent.nextTree());

	                        }
	                        stream_p_QuotAttrValueContent.reset();

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;
	                case 2 :
	                    // XQueryParser.g:992:11: ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS )
	                    // XQueryParser.g:992:11: ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS )
	                    // XQueryParser.g:992:12: APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS
	                    APOS408=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_DirAttributeValue8231); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_APOS.add(APOS408);

	                    // XQueryParser.g:992:17: ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )*
	                    loop145:
	                    do {
	                        var alt145=4;
	                        switch ( this.input.LA(1) ) {
	                        case ESCAPE_APOS:
	                            alt145=1;
	                            break;
	                        case QUOT:
	                            alt145=2;
	                            break;
	                        case L_AposAttrContentChar:
	                        case L_PredefinedEntityRef:
	                        case L_CharRef:
	                        case ESCAPE_LBRACKET:
	                        case ESCAPE_RBRACKET:
	                        case LBRACKET:
	                            alt145=3;
	                            break;

	                        }

	                        switch (alt145) {
	                        case 1 :
	                            // XQueryParser.g:992:18: ESCAPE_APOS
	                            ESCAPE_APOS409=this.match(this.input,ESCAPE_APOS,XQueryParser.FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue8234); if (this.state.failed) return retval; 
	                            if ( this.state.backtracking===0 ) stream_ESCAPE_APOS.add(ESCAPE_APOS409);



	                            break;
	                        case 2 :
	                            // XQueryParser.g:992:32: QUOT
	                            QUOT410=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_DirAttributeValue8238); if (this.state.failed) return retval; 
	                            if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT410);



	                            break;
	                        case 3 :
	                            // XQueryParser.g:992:39: p_AposAttrValueContent
	                            this.pushFollow(XQueryParser.FOLLOW_p_AposAttrValueContent_in_p_DirAttributeValue8242);
	                            p_AposAttrValueContent411=this.p_AposAttrValueContent();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_p_AposAttrValueContent.add(p_AposAttrValueContent411.getTree());


	                            break;

	                        default :
	                            break loop145;
	                        }
	                    } while (true);

	                    APOS412=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_DirAttributeValue8246); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_APOS.add(APOS412);






	                    // AST REWRITE
	                    // elements: p_AposAttrValueContent
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 993:17: -> ^( DirAttributeValue ( p_AposAttrValueContent )* )
	                    {
	                        // XQueryParser.g:993:20: ^( DirAttributeValue ( p_AposAttrValueContent )* )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

	                        // XQueryParser.g:993:40: ( p_AposAttrValueContent )*
	                        while ( stream_p_AposAttrValueContent.hasNext() ) {
	                            this.adaptor.addChild(root_1, stream_p_AposAttrValueContent.nextTree());

	                        }
	                        stream_p_AposAttrValueContent.reset();

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_QuotAttrValueContent_return: (function() {
	        XQueryParser.p_QuotAttrValueContent_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_QuotAttrValueContent_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:997:1: p_QuotAttrValueContent : ( p_QuotAttrContentChar | pm_CommonContent );
	    // $ANTLR start "p_QuotAttrValueContent"
	    p_QuotAttrValueContent: function() {
	        var retval = new XQueryParser.p_QuotAttrValueContent_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QuotAttrContentChar413 = null;
	         var pm_CommonContent414 = null;


	        try {
	            // XQueryParser.g:998:9: ( p_QuotAttrContentChar | pm_CommonContent )
	            var alt147=2;
	            var LA147_0 = this.input.LA(1);

	            if ( (LA147_0==L_QuotAttrContentChar) ) {
	                alt147=1;
	            }
	            else if ( ((LA147_0>=L_PredefinedEntityRef && LA147_0<=ESCAPE_RBRACKET)||LA147_0==LBRACKET) ) {
	                alt147=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 147, 0, this.input);

	                throw nvae;
	            }
	            switch (alt147) {
	                case 1 :
	                    // XQueryParser.g:998:11: p_QuotAttrContentChar
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_QuotAttrContentChar_in_p_QuotAttrValueContent8298);
	                    p_QuotAttrContentChar413=this.p_QuotAttrContentChar();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QuotAttrContentChar413.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:998:35: pm_CommonContent
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_CommonContent_in_p_QuotAttrValueContent8302);
	                    pm_CommonContent414=this.pm_CommonContent();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CommonContent414.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AposAttrValueContent_return: (function() {
	        XQueryParser.p_AposAttrValueContent_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AposAttrValueContent_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1002:1: p_AposAttrValueContent : ( p_AposAttrContentChar | pm_CommonContent );
	    // $ANTLR start "p_AposAttrValueContent"
	    p_AposAttrValueContent: function() {
	        var retval = new XQueryParser.p_AposAttrValueContent_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_AposAttrContentChar415 = null;
	         var pm_CommonContent416 = null;


	        try {
	            // XQueryParser.g:1003:9: ( p_AposAttrContentChar | pm_CommonContent )
	            var alt148=2;
	            var LA148_0 = this.input.LA(1);

	            if ( (LA148_0==L_AposAttrContentChar) ) {
	                alt148=1;
	            }
	            else if ( ((LA148_0>=L_PredefinedEntityRef && LA148_0<=ESCAPE_RBRACKET)||LA148_0==LBRACKET) ) {
	                alt148=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 148, 0, this.input);

	                throw nvae;
	            }
	            switch (alt148) {
	                case 1 :
	                    // XQueryParser.g:1003:11: p_AposAttrContentChar
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AposAttrContentChar_in_p_AposAttrValueContent8328);
	                    p_AposAttrContentChar415=this.p_AposAttrContentChar();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AposAttrContentChar415.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1003:35: pm_CommonContent
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_CommonContent_in_p_AposAttrValueContent8332);
	                    pm_CommonContent416=this.pm_CommonContent();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CommonContent416.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_DirElemContent_return: (function() {
	        XQueryParser.pm_DirElemContent_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_DirElemContent_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1007:1: pm_DirElemContent : ( p_DirectConstructor | p_CDataSection | pm_CommonContent | p_ElementContentChar );
	    // $ANTLR start "pm_DirElemContent"
	    pm_DirElemContent: function() {
	        var retval = new XQueryParser.pm_DirElemContent_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_DirectConstructor417 = null;
	         var p_CDataSection418 = null;
	         var pm_CommonContent419 = null;
	         var p_ElementContentChar420 = null;


	        try {
	            // XQueryParser.g:1008:9: ( p_DirectConstructor | p_CDataSection | pm_CommonContent | p_ElementContentChar )
	            var alt149=4;
	            switch ( this.input.LA(1) ) {
	            case SMALLER:
	            case L_DirCommentConstructor:
	            case L_DirPIConstructor:
	                alt149=1;
	                break;
	            case L_CDataSection:
	                alt149=2;
	                break;
	            case L_PredefinedEntityRef:
	            case L_CharRef:
	            case ESCAPE_LBRACKET:
	            case ESCAPE_RBRACKET:
	            case LBRACKET:
	                alt149=3;
	                break;
	            case L_ElementContentChar:
	                alt149=4;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 149, 0, this.input);

	                throw nvae;
	            }

	            switch (alt149) {
	                case 1 :
	                    // XQueryParser.g:1008:11: p_DirectConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_DirectConstructor_in_pm_DirElemContent8358);
	                    p_DirectConstructor417=this.p_DirectConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirectConstructor417.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1009:11: p_CDataSection
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_CDataSection_in_pm_DirElemContent8370);
	                    p_CDataSection418=this.p_CDataSection();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CDataSection418.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:1010:11: pm_CommonContent
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_CommonContent_in_pm_DirElemContent8382);
	                    pm_CommonContent419=this.pm_CommonContent();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CommonContent419.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:1011:11: p_ElementContentChar
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ElementContentChar_in_pm_DirElemContent8394);
	                    p_ElementContentChar420=this.p_ElementContentChar();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementContentChar420.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_CommonContent_return: (function() {
	        XQueryParser.pm_CommonContent_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_CommonContent_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1017:1: pm_CommonContent : ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET | pg_EnclosedExprXml );
	    // $ANTLR start "pm_CommonContent"
	    pm_CommonContent: function() {
	        var retval = new XQueryParser.pm_CommonContent_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_PredefinedEntityRef421 = null;
	        var L_CharRef422 = null;
	        var ESCAPE_LBRACKET423 = null;
	        var ESCAPE_RBRACKET424 = null;
	         var pg_EnclosedExprXml425 = null;

	        var L_PredefinedEntityRef421_tree=null;
	        var L_CharRef422_tree=null;
	        var ESCAPE_LBRACKET423_tree=null;
	        var ESCAPE_RBRACKET424_tree=null;

	        try {
	            // XQueryParser.g:1018:9: ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET | pg_EnclosedExprXml )
	            var alt150=5;
	            switch ( this.input.LA(1) ) {
	            case L_PredefinedEntityRef:
	                alt150=1;
	                break;
	            case L_CharRef:
	                alt150=2;
	                break;
	            case ESCAPE_LBRACKET:
	                alt150=3;
	                break;
	            case ESCAPE_RBRACKET:
	                alt150=4;
	                break;
	            case LBRACKET:
	                alt150=5;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 150, 0, this.input);

	                throw nvae;
	            }

	            switch (alt150) {
	                case 1 :
	                    // XQueryParser.g:1018:11: L_PredefinedEntityRef
	                    root_0 = this.adaptor.nil();

	                    L_PredefinedEntityRef421=this.match(this.input,L_PredefinedEntityRef,XQueryParser.FOLLOW_L_PredefinedEntityRef_in_pm_CommonContent8422); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    L_PredefinedEntityRef421_tree = this.adaptor.create(L_PredefinedEntityRef421);
	                    this.adaptor.addChild(root_0, L_PredefinedEntityRef421_tree);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:1019:11: L_CharRef
	                    root_0 = this.adaptor.nil();

	                    L_CharRef422=this.match(this.input,L_CharRef,XQueryParser.FOLLOW_L_CharRef_in_pm_CommonContent8434); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    L_CharRef422_tree = this.adaptor.create(L_CharRef422);
	                    this.adaptor.addChild(root_0, L_CharRef422_tree);
	                    }


	                    break;
	                case 3 :
	                    // XQueryParser.g:1020:11: ESCAPE_LBRACKET
	                    root_0 = this.adaptor.nil();

	                    ESCAPE_LBRACKET423=this.match(this.input,ESCAPE_LBRACKET,XQueryParser.FOLLOW_ESCAPE_LBRACKET_in_pm_CommonContent8446); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ESCAPE_LBRACKET423_tree = this.adaptor.create(ESCAPE_LBRACKET423);
	                    this.adaptor.addChild(root_0, ESCAPE_LBRACKET423_tree);
	                    }


	                    break;
	                case 4 :
	                    // XQueryParser.g:1021:11: ESCAPE_RBRACKET
	                    root_0 = this.adaptor.nil();

	                    ESCAPE_RBRACKET424=this.match(this.input,ESCAPE_RBRACKET,XQueryParser.FOLLOW_ESCAPE_RBRACKET_in_pm_CommonContent8458); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ESCAPE_RBRACKET424_tree = this.adaptor.create(ESCAPE_RBRACKET424);
	                    this.adaptor.addChild(root_0, ESCAPE_RBRACKET424_tree);
	                    }


	                    break;
	                case 5 :
	                    // XQueryParser.g:1022:11: pg_EnclosedExprXml
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pg_EnclosedExprXml_in_pm_CommonContent8470);
	                    pg_EnclosedExprXml425=this.pg_EnclosedExprXml();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_EnclosedExprXml425.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pg_EnclosedExprXml_return: (function() {
	        XQueryParser.pg_EnclosedExprXml_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pg_EnclosedExprXml_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1030:1: pg_EnclosedExprXml : LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	    // $ANTLR start "pg_EnclosedExprXml"
	    pg_EnclosedExprXml: function() {
	        var retval = new XQueryParser.pg_EnclosedExprXml_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LBRACKET426 = null;
	        var RBRACKET428 = null;
	         var p_StatementsAndOptionalExpr427 = null;

	        var LBRACKET426_tree=null;
	        var RBRACKET428_tree=null;

	        try {
	            // XQueryParser.g:1031:9: ( LBRACKET p_StatementsAndOptionalExpr RBRACKET )
	            // XQueryParser.g:1031:13: LBRACKET p_StatementsAndOptionalExpr RBRACKET
	            root_0 = this.adaptor.nil();

	            LBRACKET426=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pg_EnclosedExprXml8502); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET426_tree = this.adaptor.create(LBRACKET426);
	            this.adaptor.addChild(root_0, LBRACKET426_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.pushXQueryLexer();
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pg_EnclosedExprXml8518);
	            p_StatementsAndOptionalExpr427=this.p_StatementsAndOptionalExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr427.getTree());
	            RBRACKET428=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pg_EnclosedExprXml8532); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET428_tree = this.adaptor.create(RBRACKET428);
	            this.adaptor.addChild(root_0, RBRACKET428_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.popLexer();
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_DirCommentConstructor_return: (function() {
	        XQueryParser.p_DirCommentConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_DirCommentConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1038:1: p_DirCommentConstructor : L_DirCommentConstructor ;
	    // $ANTLR start "p_DirCommentConstructor"
	    p_DirCommentConstructor: function() {
	        var retval = new XQueryParser.p_DirCommentConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_DirCommentConstructor429 = null;

	        var L_DirCommentConstructor429_tree=null;

	        try {
	            // XQueryParser.g:1039:9: ( L_DirCommentConstructor )
	            // XQueryParser.g:1039:11: L_DirCommentConstructor
	            root_0 = this.adaptor.nil();

	            L_DirCommentConstructor429=this.match(this.input,L_DirCommentConstructor,XQueryParser.FOLLOW_L_DirCommentConstructor_in_p_DirCommentConstructor8561); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            L_DirCommentConstructor429_tree = this.adaptor.create(L_DirCommentConstructor429);
	            this.adaptor.addChild(root_0, L_DirCommentConstructor429_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_DirPIConstructor_return: (function() {
	        XQueryParser.p_DirPIConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_DirPIConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1046:1: p_DirPIConstructor : L_DirPIConstructor ;
	    // $ANTLR start "p_DirPIConstructor"
	    p_DirPIConstructor: function() {
	        var retval = new XQueryParser.p_DirPIConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_DirPIConstructor430 = null;

	        var L_DirPIConstructor430_tree=null;

	        try {
	            // XQueryParser.g:1047:9: ( L_DirPIConstructor )
	            // XQueryParser.g:1047:11: L_DirPIConstructor
	            root_0 = this.adaptor.nil();

	            L_DirPIConstructor430=this.match(this.input,L_DirPIConstructor,XQueryParser.FOLLOW_L_DirPIConstructor_in_p_DirPIConstructor8593); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            L_DirPIConstructor430_tree = this.adaptor.create(L_DirPIConstructor430);
	            this.adaptor.addChild(root_0, L_DirPIConstructor430_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CDataSection_return: (function() {
	        XQueryParser.p_CDataSection_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CDataSection_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1054:1: p_CDataSection : L_CDataSection ;
	    // $ANTLR start "p_CDataSection"
	    p_CDataSection: function() {
	        var retval = new XQueryParser.p_CDataSection_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_CDataSection431 = null;

	        var L_CDataSection431_tree=null;

	        try {
	            // XQueryParser.g:1055:9: ( L_CDataSection )
	            // XQueryParser.g:1055:11: L_CDataSection
	            root_0 = this.adaptor.nil();

	            L_CDataSection431=this.match(this.input,L_CDataSection,XQueryParser.FOLLOW_L_CDataSection_in_p_CDataSection8626); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            L_CDataSection431_tree = this.adaptor.create(L_CDataSection431);
	            this.adaptor.addChild(root_0, L_CDataSection431_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ComputedConstructor_return: (function() {
	        XQueryParser.p_ComputedConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ComputedConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1062:1: p_ComputedConstructor : ( pm_CompDocConstructor | pm_CompElemConstructor | pm_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | pm_CompCommentConstructor | pm_CompPIConstructor | {...}? => p_CompBinaryConstructor );
	    // $ANTLR start "p_ComputedConstructor"
	    p_ComputedConstructor: function() {
	        var retval = new XQueryParser.p_ComputedConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var pm_CompDocConstructor432 = null;
	         var pm_CompElemConstructor433 = null;
	         var pm_CompAttrConstructor434 = null;
	         var p_CompNamespaceConstructor435 = null;
	         var p_CompTextConstructor436 = null;
	         var pm_CompCommentConstructor437 = null;
	         var pm_CompPIConstructor438 = null;
	         var p_CompBinaryConstructor439 = null;


	        try {
	            // XQueryParser.g:1063:9: ( pm_CompDocConstructor | pm_CompElemConstructor | pm_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | pm_CompCommentConstructor | pm_CompPIConstructor | {...}? => p_CompBinaryConstructor )
	            var alt151=8;
	            var LA151_0 = this.input.LA(1);

	            if ( (LA151_0==DOCUMENT) ) {
	                alt151=1;
	            }
	            else if ( (LA151_0==ELEMENT) ) {
	                alt151=2;
	            }
	            else if ( (LA151_0==ATTRIBUTE) ) {
	                alt151=3;
	            }
	            else if ( (LA151_0==NAMESPACE) ) {
	                alt151=4;
	            }
	            else if ( (LA151_0==TEXT) ) {
	                alt151=5;
	            }
	            else if ( (LA151_0==COMMENT) ) {
	                alt151=6;
	            }
	            else if ( (LA151_0==PROCESSING_INSTRUCTION) ) {
	                alt151=7;
	            }
	            else if ( (LA151_0==BINARY) && ((this.lc(MLS)))) {
	                alt151=8;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 151, 0, this.input);

	                throw nvae;
	            }
	            switch (alt151) {
	                case 1 :
	                    // XQueryParser.g:1063:11: pm_CompDocConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_CompDocConstructor_in_p_ComputedConstructor8658);
	                    pm_CompDocConstructor432=this.pm_CompDocConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompDocConstructor432.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1064:11: pm_CompElemConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_CompElemConstructor_in_p_ComputedConstructor8670);
	                    pm_CompElemConstructor433=this.pm_CompElemConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompElemConstructor433.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:1065:11: pm_CompAttrConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_CompAttrConstructor_in_p_ComputedConstructor8682);
	                    pm_CompAttrConstructor434=this.pm_CompAttrConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompAttrConstructor434.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:1066:11: p_CompNamespaceConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8694);
	                    p_CompNamespaceConstructor435=this.p_CompNamespaceConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CompNamespaceConstructor435.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:1067:11: p_CompTextConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8706);
	                    p_CompTextConstructor436=this.p_CompTextConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CompTextConstructor436.getTree());


	                    break;
	                case 6 :
	                    // XQueryParser.g:1068:11: pm_CompCommentConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_CompCommentConstructor_in_p_ComputedConstructor8718);
	                    pm_CompCommentConstructor437=this.pm_CompCommentConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompCommentConstructor437.getTree());


	                    break;
	                case 7 :
	                    // XQueryParser.g:1069:11: pm_CompPIConstructor
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pm_CompPIConstructor_in_p_ComputedConstructor8730);
	                    pm_CompPIConstructor438=this.pm_CompPIConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompPIConstructor438.getTree());


	                    break;
	                case 8 :
	                    // XQueryParser.g:1070:11: {...}? => p_CompBinaryConstructor
	                    root_0 = this.adaptor.nil();

	                    if ( !((this.lc(MLS))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_ComputedConstructor", "this.lc(MLS)");
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8745);
	                    p_CompBinaryConstructor439=this.p_CompBinaryConstructor();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CompBinaryConstructor439.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_CompDocConstructor_return: (function() {
	        XQueryParser.pm_CompDocConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_CompDocConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1075:1: pm_CompDocConstructor : k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	    // $ANTLR start "pm_CompDocConstructor"
	    pm_CompDocConstructor: function() {
	        var retval = new XQueryParser.pm_CompDocConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET440 = null;
	        var RBRACKET442 = null;
	         var p_StatementsAndOptionalExpr441 = null;

	        var k_tree=null;
	        var LBRACKET440_tree=null;
	        var RBRACKET442_tree=null;

	        try {
	            // XQueryParser.g:1076:9: (k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET )
	            // XQueryParser.g:1076:11: k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DOCUMENT,XQueryParser.FOLLOW_DOCUMENT_in_pm_CompDocConstructor8774); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LBRACKET440=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompDocConstructor8778); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET440_tree = this.adaptor.create(LBRACKET440);
	            this.adaptor.addChild(root_0, LBRACKET440_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompDocConstructor8780);
	            p_StatementsAndOptionalExpr441=this.p_StatementsAndOptionalExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr441.getTree());
	            RBRACKET442=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompDocConstructor8782); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET442_tree = this.adaptor.create(RBRACKET442);
	            this.adaptor.addChild(root_0, RBRACKET442_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_CompElemConstructor_return: (function() {
	        XQueryParser.pm_CompElemConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_CompElemConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1080:1: pm_CompElemConstructor : k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET ;
	    // $ANTLR start "pm_CompElemConstructor"
	    pm_CompElemConstructor: function() {
	        var retval = new XQueryParser.pm_CompElemConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET444 = null;
	        var RBRACKET446 = null;
	        var LBRACKET447 = null;
	        var RBRACKET449 = null;
	         var p_QName443 = null;
	         var p_Expr445 = null;
	         var pm_ContentExpr448 = null;

	        var k_tree=null;
	        var LBRACKET444_tree=null;
	        var RBRACKET446_tree=null;
	        var LBRACKET447_tree=null;
	        var RBRACKET449_tree=null;

	        try {
	            // XQueryParser.g:1081:9: (k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET )
	            // XQueryParser.g:1081:11: k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,ELEMENT,XQueryParser.FOLLOW_ELEMENT_in_pm_CompElemConstructor8818); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:1081:36: ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
	            var alt152=2;
	            var LA152_0 = this.input.LA(1);

	            if ( ((LA152_0>=ANCESTOR && LA152_0<=DECIMAL_SEPARATOR)||(LA152_0>=DIGIT && LA152_0<=SKIP)||(LA152_0>=VALUE && LA152_0<=QUOT_ER)||LA152_0==L_NCName||LA152_0==EXPLICITLY) ) {
	                alt152=1;
	            }
	            else if ( (LA152_0==LBRACKET) ) {
	                alt152=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 152, 0, this.input);

	                throw nvae;
	            }
	            switch (alt152) {
	                case 1 :
	                    // XQueryParser.g:1081:37: p_QName
	                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_pm_CompElemConstructor8823);
	                    p_QName443=this.p_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName443.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1081:47: ( LBRACKET p_Expr[true,true] RBRACKET )
	                    // XQueryParser.g:1081:47: ( LBRACKET p_Expr[true,true] RBRACKET )
	                    // XQueryParser.g:1081:48: LBRACKET p_Expr[true,true] RBRACKET
	                    LBRACKET444=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompElemConstructor8828); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    LBRACKET444_tree = this.adaptor.create(LBRACKET444);
	                    this.adaptor.addChild(root_0, LBRACKET444_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_pm_CompElemConstructor8830);
	                    p_Expr445=this.p_Expr(true, true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr445.getTree());
	                    RBRACKET446=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompElemConstructor8833); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    RBRACKET446_tree = this.adaptor.create(RBRACKET446);
	                    this.adaptor.addChild(root_0, RBRACKET446_tree);
	                    }





	                    break;

	            }

	            LBRACKET447=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompElemConstructor8837); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET447_tree = this.adaptor.create(LBRACKET447);
	            this.adaptor.addChild(root_0, LBRACKET447_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_pm_ContentExpr_in_pm_CompElemConstructor8839);
	            pm_ContentExpr448=this.pm_ContentExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_ContentExpr448.getTree());
	            RBRACKET449=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompElemConstructor8841); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET449_tree = this.adaptor.create(RBRACKET449);
	            this.adaptor.addChild(root_0, RBRACKET449_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_ContentExpr_return: (function() {
	        XQueryParser.pm_ContentExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_ContentExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1086:1: pm_ContentExpr : p_StatementsAndOptionalExpr ;
	    // $ANTLR start "pm_ContentExpr"
	    pm_ContentExpr: function() {
	        var retval = new XQueryParser.pm_ContentExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_StatementsAndOptionalExpr450 = null;


	        try {
	            // XQueryParser.g:1087:9: ( p_StatementsAndOptionalExpr )
	            // XQueryParser.g:1087:11: p_StatementsAndOptionalExpr
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_ContentExpr8868);
	            p_StatementsAndOptionalExpr450=this.p_StatementsAndOptionalExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr450.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_CompAttrConstructor_return: (function() {
	        XQueryParser.pm_CompAttrConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_CompAttrConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1092:1: pm_CompAttrConstructor : k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	    // $ANTLR start "pm_CompAttrConstructor"
	    pm_CompAttrConstructor: function() {
	        var retval = new XQueryParser.pm_CompAttrConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET452 = null;
	        var RBRACKET454 = null;
	        var LBRACKET455 = null;
	        var RBRACKET457 = null;
	         var p_QName451 = null;
	         var p_Expr453 = null;
	         var p_StatementsAndOptionalExpr456 = null;

	        var k_tree=null;
	        var LBRACKET452_tree=null;
	        var RBRACKET454_tree=null;
	        var LBRACKET455_tree=null;
	        var RBRACKET457_tree=null;

	        try {
	            // XQueryParser.g:1093:9: (k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET )
	            // XQueryParser.g:1093:11: k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,ATTRIBUTE,XQueryParser.FOLLOW_ATTRIBUTE_in_pm_CompAttrConstructor8897); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:1093:38: ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
	            var alt153=2;
	            var LA153_0 = this.input.LA(1);

	            if ( ((LA153_0>=ANCESTOR && LA153_0<=DECIMAL_SEPARATOR)||(LA153_0>=DIGIT && LA153_0<=SKIP)||(LA153_0>=VALUE && LA153_0<=QUOT_ER)||LA153_0==L_NCName||LA153_0==EXPLICITLY) ) {
	                alt153=1;
	            }
	            else if ( (LA153_0==LBRACKET) ) {
	                alt153=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 153, 0, this.input);

	                throw nvae;
	            }
	            switch (alt153) {
	                case 1 :
	                    // XQueryParser.g:1093:39: p_QName
	                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_pm_CompAttrConstructor8902);
	                    p_QName451=this.p_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName451.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1093:49: ( LBRACKET p_Expr[true,true] RBRACKET )
	                    // XQueryParser.g:1093:49: ( LBRACKET p_Expr[true,true] RBRACKET )
	                    // XQueryParser.g:1093:50: LBRACKET p_Expr[true,true] RBRACKET
	                    LBRACKET452=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompAttrConstructor8907); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    LBRACKET452_tree = this.adaptor.create(LBRACKET452);
	                    this.adaptor.addChild(root_0, LBRACKET452_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_pm_CompAttrConstructor8909);
	                    p_Expr453=this.p_Expr(true, true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr453.getTree());
	                    RBRACKET454=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompAttrConstructor8912); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    RBRACKET454_tree = this.adaptor.create(RBRACKET454);
	                    this.adaptor.addChild(root_0, RBRACKET454_tree);
	                    }





	                    break;

	            }

	            LBRACKET455=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompAttrConstructor8916); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET455_tree = this.adaptor.create(LBRACKET455);
	            this.adaptor.addChild(root_0, LBRACKET455_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompAttrConstructor8918);
	            p_StatementsAndOptionalExpr456=this.p_StatementsAndOptionalExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr456.getTree());
	            RBRACKET457=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompAttrConstructor8920); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET457_tree = this.adaptor.create(RBRACKET457);
	            this.adaptor.addChild(root_0, RBRACKET457_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CompNamespaceConstructor_return: (function() {
	        XQueryParser.p_CompNamespaceConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CompNamespaceConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1097:1: p_CompNamespaceConstructor : k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET ;
	    // $ANTLR start "p_CompNamespaceConstructor"
	    p_CompNamespaceConstructor: function() {
	        var retval = new XQueryParser.p_CompNamespaceConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET459 = null;
	        var RBRACKET461 = null;
	        var LBRACKET462 = null;
	        var RBRACKET464 = null;
	         var p_Prefix458 = null;
	         var p_PrefixExpr460 = null;
	         var p_URIExpr463 = null;

	        var k_tree=null;
	        var LBRACKET459_tree=null;
	        var RBRACKET461_tree=null;
	        var LBRACKET462_tree=null;
	        var RBRACKET464_tree=null;

	        try {
	            // XQueryParser.g:1098:9: (k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET )
	            // XQueryParser.g:1098:11: k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8948); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:1098:38: ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) )
	            var alt154=2;
	            var LA154_0 = this.input.LA(1);

	            if ( ((LA154_0>=ANCESTOR && LA154_0<=DECIMAL_SEPARATOR)||(LA154_0>=DIGIT && LA154_0<=SKIP)||(LA154_0>=VALUE && LA154_0<=QUOT_ER)||LA154_0==L_NCName||LA154_0==EXPLICITLY) ) {
	                alt154=1;
	            }
	            else if ( (LA154_0==LBRACKET) ) {
	                alt154=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 154, 0, this.input);

	                throw nvae;
	            }
	            switch (alt154) {
	                case 1 :
	                    // XQueryParser.g:1098:39: p_Prefix
	                    this.pushFollow(XQueryParser.FOLLOW_p_Prefix_in_p_CompNamespaceConstructor8953);
	                    p_Prefix458=this.p_Prefix();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Prefix458.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1098:50: ( LBRACKET p_PrefixExpr RBRACKET )
	                    // XQueryParser.g:1098:50: ( LBRACKET p_PrefixExpr RBRACKET )
	                    // XQueryParser.g:1098:51: LBRACKET p_PrefixExpr RBRACKET
	                    LBRACKET459=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8958); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    LBRACKET459_tree = this.adaptor.create(LBRACKET459);
	                    this.adaptor.addChild(root_0, LBRACKET459_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_PrefixExpr_in_p_CompNamespaceConstructor8960);
	                    p_PrefixExpr460=this.p_PrefixExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PrefixExpr460.getTree());
	                    RBRACKET461=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8962); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    RBRACKET461_tree = this.adaptor.create(RBRACKET461);
	                    this.adaptor.addChild(root_0, RBRACKET461_tree);
	                    }





	                    break;

	            }

	            LBRACKET462=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8966); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET462_tree = this.adaptor.create(LBRACKET462);
	            this.adaptor.addChild(root_0, LBRACKET462_tree);
	            }
	            // XQueryParser.g:1098:93: ( p_URIExpr )?
	            var alt155=2;
	            var LA155_0 = this.input.LA(1);

	            if ( ((LA155_0>=ANCESTOR && LA155_0<=DECIMAL_SEPARATOR)||(LA155_0>=DIGIT && LA155_0<=LPAREN)||(LA155_0>=DOLLAR && LA155_0<=LBRACKET)||(LA155_0>=STAR && LA155_0<=SMALLER)||(LA155_0>=SLASH && LA155_0<=DOT_DOT)||LA155_0==ATTR_SIGN||(LA155_0>=APOS && LA155_0<=QUOT)||LA155_0==L_NCName||(LA155_0>=L_Pragma && LA155_0<=L_DoubleLiteral)||LA155_0==EXPLICITLY) ) {
	                alt155=1;
	            }
	            switch (alt155) {
	                case 1 :
	                    // XQueryParser.g:1098:93: p_URIExpr
	                    this.pushFollow(XQueryParser.FOLLOW_p_URIExpr_in_p_CompNamespaceConstructor8968);
	                    p_URIExpr463=this.p_URIExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_URIExpr463.getTree());


	                    break;

	            }

	            RBRACKET464=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8971); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET464_tree = this.adaptor.create(RBRACKET464);
	            this.adaptor.addChild(root_0, RBRACKET464_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Prefix_return: (function() {
	        XQueryParser.p_Prefix_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Prefix_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1102:1: p_Prefix : p_NCName ;
	    // $ANTLR start "p_Prefix"
	    p_Prefix: function() {
	        var retval = new XQueryParser.p_Prefix_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_NCName465 = null;


	        try {
	            // XQueryParser.g:1103:9: ( p_NCName )
	            // XQueryParser.g:1103:11: p_NCName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_Prefix8997);
	            p_NCName465=this.p_NCName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName465.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_PrefixExpr_return: (function() {
	        XQueryParser.p_PrefixExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_PrefixExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1107:1: p_PrefixExpr : p_Expr[true,true] ;
	    // $ANTLR start "p_PrefixExpr"
	    p_PrefixExpr: function() {
	        var retval = new XQueryParser.p_PrefixExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Expr466 = null;


	        try {
	            // XQueryParser.g:1108:9: ( p_Expr[true,true] )
	            // XQueryParser.g:1108:11: p_Expr[true,true]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_PrefixExpr9023);
	            p_Expr466=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr466.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_URIExpr_return: (function() {
	        XQueryParser.p_URIExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_URIExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1112:1: p_URIExpr : p_Expr[true,true] ;
	    // $ANTLR start "p_URIExpr"
	    p_URIExpr: function() {
	        var retval = new XQueryParser.p_URIExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Expr467 = null;


	        try {
	            // XQueryParser.g:1113:9: ( p_Expr[true,true] )
	            // XQueryParser.g:1113:11: p_Expr[true,true]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_URIExpr9050);
	            p_Expr467=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr467.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CompTextConstructor_return: (function() {
	        XQueryParser.p_CompTextConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CompTextConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1117:1: p_CompTextConstructor : k= TEXT LBRACKET p_Expr[true,true] RBRACKET ;
	    // $ANTLR start "p_CompTextConstructor"
	    p_CompTextConstructor: function() {
	        var retval = new XQueryParser.p_CompTextConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET468 = null;
	        var RBRACKET470 = null;
	         var p_Expr469 = null;

	        var k_tree=null;
	        var LBRACKET468_tree=null;
	        var RBRACKET470_tree=null;

	        try {
	            // XQueryParser.g:1118:9: (k= TEXT LBRACKET p_Expr[true,true] RBRACKET )
	            // XQueryParser.g:1118:11: k= TEXT LBRACKET p_Expr[true,true] RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,TEXT,XQueryParser.FOLLOW_TEXT_in_p_CompTextConstructor9079); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LBRACKET468=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CompTextConstructor9083); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET468_tree = this.adaptor.create(LBRACKET468);
	            this.adaptor.addChild(root_0, LBRACKET468_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_CompTextConstructor9085);
	            p_Expr469=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr469.getTree());
	            RBRACKET470=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CompTextConstructor9088); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET470_tree = this.adaptor.create(RBRACKET470);
	            this.adaptor.addChild(root_0, RBRACKET470_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CompBinaryConstructor_return: (function() {
	        XQueryParser.p_CompBinaryConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CompBinaryConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1122:1: p_CompBinaryConstructor : k= BINARY LBRACKET p_Expr[true,true] RBRACKET ;
	    // $ANTLR start "p_CompBinaryConstructor"
	    p_CompBinaryConstructor: function() {
	        var retval = new XQueryParser.p_CompBinaryConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET471 = null;
	        var RBRACKET473 = null;
	         var p_Expr472 = null;

	        var k_tree=null;
	        var LBRACKET471_tree=null;
	        var RBRACKET473_tree=null;

	        try {
	            // XQueryParser.g:1123:9: (k= BINARY LBRACKET p_Expr[true,true] RBRACKET )
	            // XQueryParser.g:1123:11: k= BINARY LBRACKET p_Expr[true,true] RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,BINARY,XQueryParser.FOLLOW_BINARY_in_p_CompBinaryConstructor9116); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LBRACKET471=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CompBinaryConstructor9120); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET471_tree = this.adaptor.create(LBRACKET471);
	            this.adaptor.addChild(root_0, LBRACKET471_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_CompBinaryConstructor9122);
	            p_Expr472=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr472.getTree());
	            RBRACKET473=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CompBinaryConstructor9125); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET473_tree = this.adaptor.create(RBRACKET473);
	            this.adaptor.addChild(root_0, RBRACKET473_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_CompCommentConstructor_return: (function() {
	        XQueryParser.pm_CompCommentConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_CompCommentConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1128:1: pm_CompCommentConstructor : k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	    // $ANTLR start "pm_CompCommentConstructor"
	    pm_CompCommentConstructor: function() {
	        var retval = new XQueryParser.pm_CompCommentConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET474 = null;
	        var RBRACKET476 = null;
	         var p_StatementsAndOptionalExpr475 = null;

	        var k_tree=null;
	        var LBRACKET474_tree=null;
	        var RBRACKET476_tree=null;

	        try {
	            // XQueryParser.g:1129:9: (k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET )
	            // XQueryParser.g:1129:11: k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,COMMENT,XQueryParser.FOLLOW_COMMENT_in_pm_CompCommentConstructor9154); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LBRACKET474=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompCommentConstructor9158); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET474_tree = this.adaptor.create(LBRACKET474);
	            this.adaptor.addChild(root_0, LBRACKET474_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompCommentConstructor9160);
	            p_StatementsAndOptionalExpr475=this.p_StatementsAndOptionalExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr475.getTree());
	            RBRACKET476=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompCommentConstructor9162); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET476_tree = this.adaptor.create(RBRACKET476);
	            this.adaptor.addChild(root_0, RBRACKET476_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_CompPIConstructor_return: (function() {
	        XQueryParser.pm_CompPIConstructor_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_CompPIConstructor_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1134:1: pm_CompPIConstructor : k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
	    // $ANTLR start "pm_CompPIConstructor"
	    pm_CompPIConstructor: function() {
	        var retval = new XQueryParser.pm_CompPIConstructor_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LBRACKET478 = null;
	        var RBRACKET480 = null;
	        var LBRACKET481 = null;
	        var RBRACKET483 = null;
	         var p_NCName477 = null;
	         var p_Expr479 = null;
	         var p_StatementsAndOptionalExpr482 = null;

	        var k_tree=null;
	        var LBRACKET478_tree=null;
	        var RBRACKET480_tree=null;
	        var LBRACKET481_tree=null;
	        var RBRACKET483_tree=null;

	        try {
	            // XQueryParser.g:1135:9: (k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET )
	            // XQueryParser.g:1135:11: k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,PROCESSING_INSTRUCTION,XQueryParser.FOLLOW_PROCESSING_INSTRUCTION_in_pm_CompPIConstructor9191); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:1135:51: ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
	            var alt156=2;
	            var LA156_0 = this.input.LA(1);

	            if ( ((LA156_0>=ANCESTOR && LA156_0<=DECIMAL_SEPARATOR)||(LA156_0>=DIGIT && LA156_0<=SKIP)||(LA156_0>=VALUE && LA156_0<=QUOT_ER)||LA156_0==L_NCName||LA156_0==EXPLICITLY) ) {
	                alt156=1;
	            }
	            else if ( (LA156_0==LBRACKET) ) {
	                alt156=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 156, 0, this.input);

	                throw nvae;
	            }
	            switch (alt156) {
	                case 1 :
	                    // XQueryParser.g:1135:52: p_NCName
	                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pm_CompPIConstructor9196);
	                    p_NCName477=this.p_NCName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName477.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1135:63: ( LBRACKET p_Expr[true,true] RBRACKET )
	                    // XQueryParser.g:1135:63: ( LBRACKET p_Expr[true,true] RBRACKET )
	                    // XQueryParser.g:1135:64: LBRACKET p_Expr[true,true] RBRACKET
	                    LBRACKET478=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompPIConstructor9201); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    LBRACKET478_tree = this.adaptor.create(LBRACKET478);
	                    this.adaptor.addChild(root_0, LBRACKET478_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_pm_CompPIConstructor9203);
	                    p_Expr479=this.p_Expr(true, true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr479.getTree());
	                    RBRACKET480=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompPIConstructor9206); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    RBRACKET480_tree = this.adaptor.create(RBRACKET480);
	                    this.adaptor.addChild(root_0, RBRACKET480_tree);
	                    }





	                    break;

	            }

	            LBRACKET481=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompPIConstructor9210); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET481_tree = this.adaptor.create(LBRACKET481);
	            this.adaptor.addChild(root_0, LBRACKET481_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompPIConstructor9212);
	            p_StatementsAndOptionalExpr482=this.p_StatementsAndOptionalExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr482.getTree());
	            RBRACKET483=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompPIConstructor9214); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET483_tree = this.adaptor.create(RBRACKET483);
	            this.adaptor.addChild(root_0, RBRACKET483_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SingleType_return: (function() {
	        XQueryParser.p_SingleType_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SingleType_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1157:1: p_SingleType : p_AtomicOrUnionType ( QUESTION )? ;
	    // $ANTLR start "p_SingleType"
	    p_SingleType: function() {
	        var retval = new XQueryParser.p_SingleType_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var QUESTION485 = null;
	         var p_AtomicOrUnionType484 = null;

	        var QUESTION485_tree=null;

	        try {
	            // XQueryParser.g:1158:9: ( p_AtomicOrUnionType ( QUESTION )? )
	            // XQueryParser.g:1158:11: p_AtomicOrUnionType ( QUESTION )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_AtomicOrUnionType_in_p_SingleType9258);
	            p_AtomicOrUnionType484=this.p_AtomicOrUnionType();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AtomicOrUnionType484.getTree());
	            // XQueryParser.g:1158:31: ( QUESTION )?
	            var alt157=2;
	            var LA157_0 = this.input.LA(1);

	            if ( (LA157_0==QUESTION) ) {
	                alt157=1;
	            }
	            switch (alt157) {
	                case 1 :
	                    // XQueryParser.g:1158:31: QUESTION
	                    QUESTION485=this.match(this.input,QUESTION,XQueryParser.FOLLOW_QUESTION_in_p_SingleType9260); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    QUESTION485_tree = this.adaptor.create(QUESTION485);
	                    this.adaptor.addChild(root_0, QUESTION485_tree);
	                    }


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TypeDeclaration_return: (function() {
	        XQueryParser.p_TypeDeclaration_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TypeDeclaration_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1162:1: p_TypeDeclaration : k= AS st= p_SequenceType -> ^( TypeDeclaration $st) ;
	    // $ANTLR start "p_TypeDeclaration"
	    p_TypeDeclaration: function() {
	        var retval = new XQueryParser.p_TypeDeclaration_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var st = null;

	        var k_tree=null;
	        var stream_AS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token AS");
	        var stream_p_SequenceType=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_SequenceType");
	        try {
	            // XQueryParser.g:1163:9: (k= AS st= p_SequenceType -> ^( TypeDeclaration $st) )
	            // XQueryParser.g:1163:11: k= AS st= p_SequenceType
	            k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_TypeDeclaration9289); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_AS.add(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TypeDeclaration9295);
	            st=this.p_SequenceType();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_SequenceType.add(st.getTree());


	            // AST REWRITE
	            // elements: st
	            // token labels: 
	            // rule labels: retval, st
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_st=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token st",st!=null?st.tree:null);

	            root_0 = this.adaptor.nil();
	            // 1164:17: -> ^( TypeDeclaration $st)
	            {
	                // XQueryParser.g:1164:20: ^( TypeDeclaration $st)
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(TypeDeclaration, "TypeDeclaration"), root_1);

	                this.adaptor.addChild(root_1, stream_st.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SequenceType_return: (function() {
	        XQueryParser.p_SequenceType_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SequenceType_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1168:1: p_SequenceType : (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) );
	    // $ANTLR start "p_SequenceType"
	    p_SequenceType: function() {
	        var retval = new XQueryParser.p_SequenceType_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var l = null;
	        var r = null;
	         var it = null;
	         var oi = null;

	        var k_tree=null;
	        var l_tree=null;
	        var r_tree=null;
	        var stream_EMPTY_SEQUENCE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EMPTY_SEQUENCE");
	        var stream_RPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RPAREN");
	        var stream_LPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LPAREN");
	        var stream_p_ItemType=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_ItemType");
	        var stream_p_OccurrenceIndicator=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_OccurrenceIndicator");
	        try {
	            // XQueryParser.g:1169:9: (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) )
	            var alt159=2;
	            var LA159_0 = this.input.LA(1);

	            if ( (LA159_0==EMPTY_SEQUENCE) ) {
	                var LA159_1 = this.input.LA(2);

	                if ( (LA159_1==LPAREN) ) {
	                    alt159=1;
	                }
	                else if ( (LA159_1==EOF||(LA159_1>=AND && LA159_1<=AT)||LA159_1==CASE||LA159_1==COLLATION||LA159_1==DEFAULT||(LA159_1>=DESCENDING && LA159_1<=DIV)||LA159_1==EMPTY||LA159_1==EQ||(LA159_1>=EXCEPT && LA159_1<=EXTERNAL)||LA159_1==FOR||LA159_1==GE||(LA159_1>=GT && LA159_1<=IDIV)||LA159_1==IN||(LA159_1>=INSTANCE && LA159_1<=IS)||LA159_1==LE||(LA159_1>=LET && LA159_1<=MOD)||LA159_1==NE||(LA159_1>=OR && LA159_1<=ORDER)||(LA159_1>=RETURN && LA159_1<=SATISFIES)||LA159_1==STABLE||LA159_1==TO||LA159_1==UNION||LA159_1==WHERE||LA159_1==ALLOWING||LA159_1==COUNT||(LA159_1>=END && LA159_1<=GROUP)||LA159_1==ONLY||LA159_1==START||(LA159_1>=AFTER && LA159_1<=BEFORE)||LA159_1==INTO||LA159_1==MODIFY||LA159_1==WITH||LA159_1==CONTAINS||LA159_1==PARAGRAPHS||LA159_1==SCORE||LA159_1==SENTENCES||LA159_1==TIMES||LA159_1==WORDS||LA159_1==RPAREN||(LA159_1>=LBRACKET && LA159_1<=RBRACKET)||(LA159_1>=RSQUARE && LA159_1<=NOTEQUAL)||(LA159_1>=COMMA && LA159_1<=GREATER_GREATER)||LA159_1==COLON||(LA159_1>=SEMICOLON && LA159_1<=VBAR)) ) {
	                    alt159=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 159, 1, this.input);

	                    throw nvae;
	                }
	            }
	            else if ( ((LA159_0>=ANCESTOR && LA159_0<=EMPTY)||(LA159_0>=ENCODING && LA159_0<=DECIMAL_SEPARATOR)||(LA159_0>=DIGIT && LA159_0<=SKIP)||(LA159_0>=VALUE && LA159_0<=LPAREN)||LA159_0==L_NCName||LA159_0==EXPLICITLY) ) {
	                alt159=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 159, 0, this.input);

	                throw nvae;
	            }
	            switch (alt159) {
	                case 1 :
	                    // XQueryParser.g:1169:11: k= EMPTY_SEQUENCE l= LPAREN r= RPAREN
	                    k=this.match(this.input,EMPTY_SEQUENCE,XQueryParser.FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType9348); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_EMPTY_SEQUENCE.add(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    l=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SequenceType9354); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_LPAREN.add(l);

	                    r=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SequenceType9358); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_RPAREN.add(r);



	                    // AST REWRITE
	                    // elements: l, r, k
	                    // token labels: r, l, k
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_r=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token r",r);
	                    var stream_l=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token l",l);
	                    var stream_k=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token k",k);
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 1170:17: -> ^( SequenceType ^( EmptySequenceTest $k $l $r) )
	                    {
	                        // XQueryParser.g:1170:20: ^( SequenceType ^( EmptySequenceTest $k $l $r) )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(SequenceType, "SequenceType"), root_1);

	                        // XQueryParser.g:1170:35: ^( EmptySequenceTest $k $l $r)
	                        {
	                        var root_2 = this.adaptor.nil();
	                        root_2 = this.adaptor.becomeRoot(this.adaptor.create(EmptySequenceTest, "EmptySequenceTest"), root_2);

	                        this.adaptor.addChild(root_2, stream_k.nextNode());
	                        this.adaptor.addChild(root_2, stream_l.nextNode());
	                        this.adaptor.addChild(root_2, stream_r.nextNode());

	                        this.adaptor.addChild(root_1, root_2);
	                        }

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;
	                case 2 :
	                    // XQueryParser.g:1171:11: it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
	                    this.pushFollow(XQueryParser.FOLLOW_p_ItemType_in_p_SequenceType9407);
	                    it=this.p_ItemType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_ItemType.add(it.getTree());
	                    // XQueryParser.g:1171:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
	                    var alt158=2;
	                    alt158 = this.dfa158.predict(this.input);
	                    switch (alt158) {
	                        case 1 :
	                            // XQueryParser.g:1171:26: ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator
	                            this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9418);
	                            oi=this.p_OccurrenceIndicator();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) stream_p_OccurrenceIndicator.add(oi.getTree());


	                            break;

	                    }



	                    // AST REWRITE
	                    // elements: oi, it
	                    // token labels: 
	                    // rule labels: retval, it, oi
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	                    var stream_it=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token it",it!=null?it.tree:null);
	                    var stream_oi=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token oi",oi!=null?oi.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 1172:17: -> ^( SequenceType $it ( $oi)? )
	                    {
	                        // XQueryParser.g:1172:20: ^( SequenceType $it ( $oi)? )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(SequenceType, "SequenceType"), root_1);

	                        this.adaptor.addChild(root_1, stream_it.nextTree());
	                        // XQueryParser.g:1172:39: ( $oi)?
	                        if ( stream_oi.hasNext() ) {
	                            this.adaptor.addChild(root_1, stream_oi.nextTree());

	                        }
	                        stream_oi.reset();

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_OccurrenceIndicator_return: (function() {
	        XQueryParser.p_OccurrenceIndicator_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_OccurrenceIndicator_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1176:1: p_OccurrenceIndicator : ( QUESTION | STAR | PLUS );
	    // $ANTLR start "p_OccurrenceIndicator"
	    p_OccurrenceIndicator: function() {
	        var retval = new XQueryParser.p_OccurrenceIndicator_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var set486 = null;

	        var set486_tree=null;

	        try {
	            // XQueryParser.g:1177:9: ( QUESTION | STAR | PLUS )
	            // XQueryParser.g:
	            root_0 = this.adaptor.nil();

	            set486=this.input.LT(1);
	            if ( (this.input.LA(1)>=QUESTION && this.input.LA(1)<=PLUS) ) {
	                this.input.consume();
	                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set486));
	                this.state.errorRecovery=false;this.state.failed=false;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                throw mse;
	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ItemType_return: (function() {
	        XQueryParser.p_ItemType_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ItemType_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1181:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType );
	    // $ANTLR start "p_ItemType"
	    p_ItemType: function() {
	        var retval = new XQueryParser.p_ItemType_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var BINARY488 = null;
	        var LPAREN489 = null;
	        var RPAREN490 = null;
	        var ITEM491 = null;
	        var LPAREN492 = null;
	        var RPAREN493 = null;
	         var p_KindTest487 = null;
	         var p_AtomicOrUnionType494 = null;
	         var p_ParenthesizedItemType495 = null;

	        var BINARY488_tree=null;
	        var LPAREN489_tree=null;
	        var RPAREN490_tree=null;
	        var ITEM491_tree=null;
	        var LPAREN492_tree=null;
	        var RPAREN493_tree=null;
	        var stream_RPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RPAREN");
	        var stream_ITEM=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ITEM");
	        var stream_BINARY=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token BINARY");
	        var stream_LPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LPAREN");
	        var stream_p_KindTest=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_KindTest");
	        try {
	            // XQueryParser.g:1182:9: ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType )
	            var alt160=5;
	            alt160 = this.dfa160.predict(this.input);
	            switch (alt160) {
	                case 1 :
	                    // XQueryParser.g:1182:11: p_KindTest
	                    this.pushFollow(XQueryParser.FOLLOW_p_KindTest_in_p_ItemType9520);
	                    p_KindTest487=this.p_KindTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_KindTest.add(p_KindTest487.getTree());


	                    // AST REWRITE
	                    // elements: p_KindTest
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 1183:17: -> ^( KindTest p_KindTest )
	                    {
	                        // XQueryParser.g:1183:20: ^( KindTest p_KindTest )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(KindTest, "KindTest"), root_1);

	                        this.adaptor.addChild(root_1, stream_p_KindTest.nextTree());

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;
	                case 2 :
	                    // XQueryParser.g:1184:11: {...}? => ( BINARY LPAREN RPAREN )
	                    if ( !((this.lc(MLS))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_ItemType", "this.lc(MLS)");
	                    }
	                    // XQueryParser.g:1184:29: ( BINARY LPAREN RPAREN )
	                    // XQueryParser.g:1184:30: BINARY LPAREN RPAREN
	                    BINARY488=this.match(this.input,BINARY,XQueryParser.FOLLOW_BINARY_in_p_ItemType9560); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_BINARY.add(BINARY488);

	                    LPAREN489=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ItemType9562); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_LPAREN.add(LPAREN489);

	                    RPAREN490=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ItemType9564); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_RPAREN.add(RPAREN490);






	                    // AST REWRITE
	                    // elements: BINARY, LPAREN, RPAREN
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 1185:17: -> ^( BinaryTest BINARY LPAREN RPAREN )
	                    {
	                        // XQueryParser.g:1185:20: ^( BinaryTest BINARY LPAREN RPAREN )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(BinaryTest, "BinaryTest"), root_1);

	                        this.adaptor.addChild(root_1, stream_BINARY.nextNode());
	                        this.adaptor.addChild(root_1, stream_LPAREN.nextNode());
	                        this.adaptor.addChild(root_1, stream_RPAREN.nextNode());

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;
	                case 3 :
	                    // XQueryParser.g:1186:11: ( ITEM LPAREN RPAREN )
	                    // XQueryParser.g:1186:11: ( ITEM LPAREN RPAREN )
	                    // XQueryParser.g:1186:12: ITEM LPAREN RPAREN
	                    ITEM491=this.match(this.input,ITEM,XQueryParser.FOLLOW_ITEM_in_p_ItemType9606); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_ITEM.add(ITEM491);

	                    LPAREN492=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ItemType9608); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_LPAREN.add(LPAREN492);

	                    RPAREN493=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ItemType9610); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_RPAREN.add(RPAREN493);






	                    // AST REWRITE
	                    // elements: RPAREN, LPAREN, ITEM
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 1187:17: -> ^( ItemTest ITEM LPAREN RPAREN )
	                    {
	                        // XQueryParser.g:1187:20: ^( ItemTest ITEM LPAREN RPAREN )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(ItemTest, "ItemTest"), root_1);

	                        this.adaptor.addChild(root_1, stream_ITEM.nextNode());
	                        this.adaptor.addChild(root_1, stream_LPAREN.nextNode());
	                        this.adaptor.addChild(root_1, stream_RPAREN.nextNode());

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;
	                case 4 :
	                    // XQueryParser.g:1191:11: p_AtomicOrUnionType
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AtomicOrUnionType_in_p_ItemType9654);
	                    p_AtomicOrUnionType494=this.p_AtomicOrUnionType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AtomicOrUnionType494.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:1192:11: p_ParenthesizedItemType
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ParenthesizedItemType_in_p_ItemType9666);
	                    p_ParenthesizedItemType495=this.p_ParenthesizedItemType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ParenthesizedItemType495.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AtomicOrUnionType_return: (function() {
	        XQueryParser.p_AtomicOrUnionType_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AtomicOrUnionType_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1196:1: p_AtomicOrUnionType : p_QName -> ^( AtomicOrUnionType p_QName ) ;
	    // $ANTLR start "p_AtomicOrUnionType"
	    p_AtomicOrUnionType: function() {
	        var retval = new XQueryParser.p_AtomicOrUnionType_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName496 = null;

	        var stream_p_QName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QName");
	        try {
	            // XQueryParser.g:1197:9: ( p_QName -> ^( AtomicOrUnionType p_QName ) )
	            // XQueryParser.g:1197:11: p_QName
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_AtomicOrUnionType9692);
	            p_QName496=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_QName.add(p_QName496.getTree());


	            // AST REWRITE
	            // elements: p_QName
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 1198:17: -> ^( AtomicOrUnionType p_QName )
	            {
	                // XQueryParser.g:1198:20: ^( AtomicOrUnionType p_QName )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(AtomicOrUnionType, "AtomicOrUnionType"), root_1);

	                this.adaptor.addChild(root_1, stream_p_QName.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_KindTest_return: (function() {
	        XQueryParser.p_KindTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_KindTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1202:1: p_KindTest : ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_PITest | p_CommentTest | p_TextTest | p_NamespaceNodeTest | p_AnyKindTest );
	    // $ANTLR start "p_KindTest"
	    p_KindTest: function() {
	        var retval = new XQueryParser.p_KindTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_DocumentTest497 = null;
	         var p_ElementTest498 = null;
	         var p_AttributeTest499 = null;
	         var p_SchemaElementTest500 = null;
	         var p_SchemaAttributeTest501 = null;
	         var p_PITest502 = null;
	         var p_CommentTest503 = null;
	         var p_TextTest504 = null;
	         var p_NamespaceNodeTest505 = null;
	         var p_AnyKindTest506 = null;


	        try {
	            // XQueryParser.g:1203:9: ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_PITest | p_CommentTest | p_TextTest | p_NamespaceNodeTest | p_AnyKindTest )
	            var alt161=10;
	            switch ( this.input.LA(1) ) {
	            case DOCUMENT_NODE:
	                alt161=1;
	                break;
	            case ELEMENT:
	                alt161=2;
	                break;
	            case ATTRIBUTE:
	                alt161=3;
	                break;
	            case SCHEMA_ELEMENT:
	                alt161=4;
	                break;
	            case SCHEMA_ATTRIBUTE:
	                alt161=5;
	                break;
	            case PROCESSING_INSTRUCTION:
	                alt161=6;
	                break;
	            case COMMENT:
	                alt161=7;
	                break;
	            case TEXT:
	                alt161=8;
	                break;
	            case NAMESPACE_NODE:
	                alt161=9;
	                break;
	            case NODE:
	                alt161=10;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 161, 0, this.input);

	                throw nvae;
	            }

	            switch (alt161) {
	                case 1 :
	                    // XQueryParser.g:1203:11: p_DocumentTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_DocumentTest_in_p_KindTest9742);
	                    p_DocumentTest497=this.p_DocumentTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DocumentTest497.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1204:11: p_ElementTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ElementTest_in_p_KindTest9754);
	                    p_ElementTest498=this.p_ElementTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementTest498.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:1205:11: p_AttributeTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AttributeTest_in_p_KindTest9766);
	                    p_AttributeTest499=this.p_AttributeTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttributeTest499.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:1206:11: p_SchemaElementTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_SchemaElementTest_in_p_KindTest9778);
	                    p_SchemaElementTest500=this.p_SchemaElementTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SchemaElementTest500.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:1207:11: p_SchemaAttributeTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_SchemaAttributeTest_in_p_KindTest9790);
	                    p_SchemaAttributeTest501=this.p_SchemaAttributeTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SchemaAttributeTest501.getTree());


	                    break;
	                case 6 :
	                    // XQueryParser.g:1208:11: p_PITest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_PITest_in_p_KindTest9802);
	                    p_PITest502=this.p_PITest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PITest502.getTree());


	                    break;
	                case 7 :
	                    // XQueryParser.g:1209:11: p_CommentTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_CommentTest_in_p_KindTest9814);
	                    p_CommentTest503=this.p_CommentTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CommentTest503.getTree());


	                    break;
	                case 8 :
	                    // XQueryParser.g:1210:11: p_TextTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_TextTest_in_p_KindTest9826);
	                    p_TextTest504=this.p_TextTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TextTest504.getTree());


	                    break;
	                case 9 :
	                    // XQueryParser.g:1211:11: p_NamespaceNodeTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_NamespaceNodeTest_in_p_KindTest9838);
	                    p_NamespaceNodeTest505=this.p_NamespaceNodeTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NamespaceNodeTest505.getTree());


	                    break;
	                case 10 :
	                    // XQueryParser.g:1212:11: p_AnyKindTest
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AnyKindTest_in_p_KindTest9850);
	                    p_AnyKindTest506=this.p_AnyKindTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AnyKindTest506.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AnyKindTest_return: (function() {
	        XQueryParser.p_AnyKindTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AnyKindTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1216:1: p_AnyKindTest : NODE LPAREN RPAREN ;
	    // $ANTLR start "p_AnyKindTest"
	    p_AnyKindTest: function() {
	        var retval = new XQueryParser.p_AnyKindTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var NODE507 = null;
	        var LPAREN508 = null;
	        var RPAREN509 = null;

	        var NODE507_tree=null;
	        var LPAREN508_tree=null;
	        var RPAREN509_tree=null;

	        try {
	            // XQueryParser.g:1217:9: ( NODE LPAREN RPAREN )
	            // XQueryParser.g:1217:11: NODE LPAREN RPAREN
	            root_0 = this.adaptor.nil();

	            NODE507=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_AnyKindTest9876); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            NODE507_tree = this.adaptor.create(NODE507);
	            this.adaptor.addChild(root_0, NODE507_tree);
	            }
	            LPAREN508=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_AnyKindTest9878); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN508_tree = this.adaptor.create(LPAREN508);
	            this.adaptor.addChild(root_0, LPAREN508_tree);
	            }
	            RPAREN509=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_AnyKindTest9880); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN509_tree = this.adaptor.create(RPAREN509);
	            this.adaptor.addChild(root_0, RPAREN509_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_DocumentTest_return: (function() {
	        XQueryParser.p_DocumentTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_DocumentTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1221:1: p_DocumentTest : DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN ;
	    // $ANTLR start "p_DocumentTest"
	    p_DocumentTest: function() {
	        var retval = new XQueryParser.p_DocumentTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var DOCUMENT_NODE510 = null;
	        var LPAREN511 = null;
	        var RPAREN514 = null;
	         var p_ElementTest512 = null;
	         var p_SchemaElementTest513 = null;

	        var DOCUMENT_NODE510_tree=null;
	        var LPAREN511_tree=null;
	        var RPAREN514_tree=null;

	        try {
	            // XQueryParser.g:1222:9: ( DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN )
	            // XQueryParser.g:1222:11: DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN
	            root_0 = this.adaptor.nil();

	            DOCUMENT_NODE510=this.match(this.input,DOCUMENT_NODE,XQueryParser.FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9906); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOCUMENT_NODE510_tree = this.adaptor.create(DOCUMENT_NODE510);
	            this.adaptor.addChild(root_0, DOCUMENT_NODE510_tree);
	            }
	            LPAREN511=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_DocumentTest9908); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN511_tree = this.adaptor.create(LPAREN511);
	            this.adaptor.addChild(root_0, LPAREN511_tree);
	            }
	            // XQueryParser.g:1222:32: ( p_ElementTest | p_SchemaElementTest )?
	            var alt162=3;
	            var LA162_0 = this.input.LA(1);

	            if ( (LA162_0==ELEMENT) ) {
	                alt162=1;
	            }
	            else if ( (LA162_0==SCHEMA_ELEMENT) ) {
	                alt162=2;
	            }
	            switch (alt162) {
	                case 1 :
	                    // XQueryParser.g:1222:33: p_ElementTest
	                    this.pushFollow(XQueryParser.FOLLOW_p_ElementTest_in_p_DocumentTest9911);
	                    p_ElementTest512=this.p_ElementTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementTest512.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1222:49: p_SchemaElementTest
	                    this.pushFollow(XQueryParser.FOLLOW_p_SchemaElementTest_in_p_DocumentTest9915);
	                    p_SchemaElementTest513=this.p_SchemaElementTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SchemaElementTest513.getTree());


	                    break;

	            }

	            RPAREN514=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_DocumentTest9919); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN514_tree = this.adaptor.create(RPAREN514);
	            this.adaptor.addChild(root_0, RPAREN514_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TextTest_return: (function() {
	        XQueryParser.p_TextTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TextTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1226:1: p_TextTest : TEXT LPAREN RPAREN ;
	    // $ANTLR start "p_TextTest"
	    p_TextTest: function() {
	        var retval = new XQueryParser.p_TextTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var TEXT515 = null;
	        var LPAREN516 = null;
	        var RPAREN517 = null;

	        var TEXT515_tree=null;
	        var LPAREN516_tree=null;
	        var RPAREN517_tree=null;

	        try {
	            // XQueryParser.g:1227:9: ( TEXT LPAREN RPAREN )
	            // XQueryParser.g:1227:11: TEXT LPAREN RPAREN
	            root_0 = this.adaptor.nil();

	            TEXT515=this.match(this.input,TEXT,XQueryParser.FOLLOW_TEXT_in_p_TextTest9945); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            TEXT515_tree = this.adaptor.create(TEXT515);
	            this.adaptor.addChild(root_0, TEXT515_tree);
	            }
	            LPAREN516=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_TextTest9947); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN516_tree = this.adaptor.create(LPAREN516);
	            this.adaptor.addChild(root_0, LPAREN516_tree);
	            }
	            RPAREN517=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_TextTest9949); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN517_tree = this.adaptor.create(RPAREN517);
	            this.adaptor.addChild(root_0, RPAREN517_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CommentTest_return: (function() {
	        XQueryParser.p_CommentTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CommentTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1231:1: p_CommentTest : COMMENT LPAREN RPAREN ;
	    // $ANTLR start "p_CommentTest"
	    p_CommentTest: function() {
	        var retval = new XQueryParser.p_CommentTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var COMMENT518 = null;
	        var LPAREN519 = null;
	        var RPAREN520 = null;

	        var COMMENT518_tree=null;
	        var LPAREN519_tree=null;
	        var RPAREN520_tree=null;

	        try {
	            // XQueryParser.g:1232:9: ( COMMENT LPAREN RPAREN )
	            // XQueryParser.g:1232:11: COMMENT LPAREN RPAREN
	            root_0 = this.adaptor.nil();

	            COMMENT518=this.match(this.input,COMMENT,XQueryParser.FOLLOW_COMMENT_in_p_CommentTest9975); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            COMMENT518_tree = this.adaptor.create(COMMENT518);
	            this.adaptor.addChild(root_0, COMMENT518_tree);
	            }
	            LPAREN519=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_CommentTest9977); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN519_tree = this.adaptor.create(LPAREN519);
	            this.adaptor.addChild(root_0, LPAREN519_tree);
	            }
	            RPAREN520=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_CommentTest9979); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN520_tree = this.adaptor.create(RPAREN520);
	            this.adaptor.addChild(root_0, RPAREN520_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_NamespaceNodeTest_return: (function() {
	        XQueryParser.p_NamespaceNodeTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_NamespaceNodeTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1236:1: p_NamespaceNodeTest : NAMESPACE_NODE LPAREN RPAREN ;
	    // $ANTLR start "p_NamespaceNodeTest"
	    p_NamespaceNodeTest: function() {
	        var retval = new XQueryParser.p_NamespaceNodeTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var NAMESPACE_NODE521 = null;
	        var LPAREN522 = null;
	        var RPAREN523 = null;

	        var NAMESPACE_NODE521_tree=null;
	        var LPAREN522_tree=null;
	        var RPAREN523_tree=null;

	        try {
	            // XQueryParser.g:1237:9: ( NAMESPACE_NODE LPAREN RPAREN )
	            // XQueryParser.g:1237:11: NAMESPACE_NODE LPAREN RPAREN
	            root_0 = this.adaptor.nil();

	            NAMESPACE_NODE521=this.match(this.input,NAMESPACE_NODE,XQueryParser.FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest10005); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            NAMESPACE_NODE521_tree = this.adaptor.create(NAMESPACE_NODE521);
	            this.adaptor.addChild(root_0, NAMESPACE_NODE521_tree);
	            }
	            LPAREN522=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_NamespaceNodeTest10007); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN522_tree = this.adaptor.create(LPAREN522);
	            this.adaptor.addChild(root_0, LPAREN522_tree);
	            }
	            RPAREN523=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_NamespaceNodeTest10009); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN523_tree = this.adaptor.create(RPAREN523);
	            this.adaptor.addChild(root_0, RPAREN523_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_PITest_return: (function() {
	        XQueryParser.p_PITest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_PITest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1241:1: p_PITest : PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN ;
	    // $ANTLR start "p_PITest"
	    p_PITest: function() {
	        var retval = new XQueryParser.p_PITest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var PROCESSING_INSTRUCTION524 = null;
	        var LPAREN525 = null;
	        var RPAREN528 = null;
	         var p_NCName526 = null;
	         var p_StringLiteral527 = null;

	        var PROCESSING_INSTRUCTION524_tree=null;
	        var LPAREN525_tree=null;
	        var RPAREN528_tree=null;

	        try {
	            // XQueryParser.g:1242:9: ( PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN )
	            // XQueryParser.g:1242:11: PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN
	            root_0 = this.adaptor.nil();

	            PROCESSING_INSTRUCTION524=this.match(this.input,PROCESSING_INSTRUCTION,XQueryParser.FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest10035); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            PROCESSING_INSTRUCTION524_tree = this.adaptor.create(PROCESSING_INSTRUCTION524);
	            this.adaptor.addChild(root_0, PROCESSING_INSTRUCTION524_tree);
	            }
	            LPAREN525=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_PITest10037); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN525_tree = this.adaptor.create(LPAREN525);
	            this.adaptor.addChild(root_0, LPAREN525_tree);
	            }
	            // XQueryParser.g:1242:41: ( p_NCName | p_StringLiteral )?
	            var alt163=3;
	            var LA163_0 = this.input.LA(1);

	            if ( ((LA163_0>=ANCESTOR && LA163_0<=DECIMAL_SEPARATOR)||(LA163_0>=DIGIT && LA163_0<=SKIP)||(LA163_0>=VALUE && LA163_0<=QUOT_ER)||LA163_0==L_NCName||LA163_0==EXPLICITLY) ) {
	                alt163=1;
	            }
	            else if ( ((LA163_0>=APOS && LA163_0<=QUOT)) ) {
	                alt163=2;
	            }
	            switch (alt163) {
	                case 1 :
	                    // XQueryParser.g:1242:42: p_NCName
	                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_PITest10040);
	                    p_NCName526=this.p_NCName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName526.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1242:53: p_StringLiteral
	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_PITest10044);
	                    p_StringLiteral527=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral527.getTree());


	                    break;

	            }

	            RPAREN528=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_PITest10048); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN528_tree = this.adaptor.create(RPAREN528);
	            this.adaptor.addChild(root_0, RPAREN528_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AttributeTest_return: (function() {
	        XQueryParser.p_AttributeTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AttributeTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1246:1: p_AttributeTest : ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN ;
	    // $ANTLR start "p_AttributeTest"
	    p_AttributeTest: function() {
	        var retval = new XQueryParser.p_AttributeTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ATTRIBUTE529 = null;
	        var LPAREN530 = null;
	        var COMMA532 = null;
	        var RPAREN534 = null;
	         var p_AttribNameOrWildcard531 = null;
	         var p_TypeName533 = null;

	        var ATTRIBUTE529_tree=null;
	        var LPAREN530_tree=null;
	        var COMMA532_tree=null;
	        var RPAREN534_tree=null;

	        try {
	            // XQueryParser.g:1247:9: ( ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN )
	            // XQueryParser.g:1247:11: ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN
	            root_0 = this.adaptor.nil();

	            ATTRIBUTE529=this.match(this.input,ATTRIBUTE,XQueryParser.FOLLOW_ATTRIBUTE_in_p_AttributeTest10074); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            ATTRIBUTE529_tree = this.adaptor.create(ATTRIBUTE529);
	            this.adaptor.addChild(root_0, ATTRIBUTE529_tree);
	            }
	            LPAREN530=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_AttributeTest10076); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN530_tree = this.adaptor.create(LPAREN530);
	            this.adaptor.addChild(root_0, LPAREN530_tree);
	            }
	            // XQueryParser.g:1247:28: ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )?
	            var alt165=2;
	            var LA165_0 = this.input.LA(1);

	            if ( ((LA165_0>=ANCESTOR && LA165_0<=DECIMAL_SEPARATOR)||(LA165_0>=DIGIT && LA165_0<=SKIP)||(LA165_0>=VALUE && LA165_0<=QUOT_ER)||LA165_0==STAR||LA165_0==L_NCName||LA165_0==EXPLICITLY) ) {
	                alt165=1;
	            }
	            switch (alt165) {
	                case 1 :
	                    // XQueryParser.g:1247:29: p_AttribNameOrWildcard ( COMMA p_TypeName )?
	                    this.pushFollow(XQueryParser.FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest10079);
	                    p_AttribNameOrWildcard531=this.p_AttribNameOrWildcard();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttribNameOrWildcard531.getTree());
	                    // XQueryParser.g:1247:52: ( COMMA p_TypeName )?
	                    var alt164=2;
	                    var LA164_0 = this.input.LA(1);

	                    if ( (LA164_0==COMMA) ) {
	                        alt164=1;
	                    }
	                    switch (alt164) {
	                        case 1 :
	                            // XQueryParser.g:1247:53: COMMA p_TypeName
	                            COMMA532=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_AttributeTest10082); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            COMMA532_tree = this.adaptor.create(COMMA532);
	                            this.adaptor.addChild(root_0, COMMA532_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_TypeName_in_p_AttributeTest10084);
	                            p_TypeName533=this.p_TypeName();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeName533.getTree());


	                            break;

	                    }



	                    break;

	            }

	            RPAREN534=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_AttributeTest10090); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN534_tree = this.adaptor.create(RPAREN534);
	            this.adaptor.addChild(root_0, RPAREN534_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AttribNameOrWildcard_return: (function() {
	        XQueryParser.p_AttribNameOrWildcard_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AttribNameOrWildcard_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1251:1: p_AttribNameOrWildcard : ( p_AttributeName | STAR );
	    // $ANTLR start "p_AttribNameOrWildcard"
	    p_AttribNameOrWildcard: function() {
	        var retval = new XQueryParser.p_AttribNameOrWildcard_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var STAR536 = null;
	         var p_AttributeName535 = null;

	        var STAR536_tree=null;

	        try {
	            // XQueryParser.g:1252:9: ( p_AttributeName | STAR )
	            var alt166=2;
	            var LA166_0 = this.input.LA(1);

	            if ( ((LA166_0>=ANCESTOR && LA166_0<=DECIMAL_SEPARATOR)||(LA166_0>=DIGIT && LA166_0<=SKIP)||(LA166_0>=VALUE && LA166_0<=QUOT_ER)||LA166_0==L_NCName||LA166_0==EXPLICITLY) ) {
	                alt166=1;
	            }
	            else if ( (LA166_0==STAR) ) {
	                alt166=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 166, 0, this.input);

	                throw nvae;
	            }
	            switch (alt166) {
	                case 1 :
	                    // XQueryParser.g:1252:11: p_AttributeName
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AttributeName_in_p_AttribNameOrWildcard10118);
	                    p_AttributeName535=this.p_AttributeName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttributeName535.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1252:29: STAR
	                    root_0 = this.adaptor.nil();

	                    STAR536=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_AttribNameOrWildcard10122); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    STAR536_tree = this.adaptor.create(STAR536);
	                    this.adaptor.addChild(root_0, STAR536_tree);
	                    }


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SchemaAttributeTest_return: (function() {
	        XQueryParser.p_SchemaAttributeTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SchemaAttributeTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1256:1: p_SchemaAttributeTest : SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN ;
	    // $ANTLR start "p_SchemaAttributeTest"
	    p_SchemaAttributeTest: function() {
	        var retval = new XQueryParser.p_SchemaAttributeTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var SCHEMA_ATTRIBUTE537 = null;
	        var LPAREN538 = null;
	        var RPAREN540 = null;
	         var p_AttributeDeclaration539 = null;

	        var SCHEMA_ATTRIBUTE537_tree=null;
	        var LPAREN538_tree=null;
	        var RPAREN540_tree=null;

	        try {
	            // XQueryParser.g:1257:9: ( SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN )
	            // XQueryParser.g:1257:11: SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN
	            root_0 = this.adaptor.nil();

	            SCHEMA_ATTRIBUTE537=this.match(this.input,SCHEMA_ATTRIBUTE,XQueryParser.FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest10148); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SCHEMA_ATTRIBUTE537_tree = this.adaptor.create(SCHEMA_ATTRIBUTE537);
	            this.adaptor.addChild(root_0, SCHEMA_ATTRIBUTE537_tree);
	            }
	            LPAREN538=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SchemaAttributeTest10150); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN538_tree = this.adaptor.create(LPAREN538);
	            this.adaptor.addChild(root_0, LPAREN538_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest10152);
	            p_AttributeDeclaration539=this.p_AttributeDeclaration();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttributeDeclaration539.getTree());
	            RPAREN540=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SchemaAttributeTest10154); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN540_tree = this.adaptor.create(RPAREN540);
	            this.adaptor.addChild(root_0, RPAREN540_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AttributeDeclaration_return: (function() {
	        XQueryParser.p_AttributeDeclaration_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AttributeDeclaration_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1261:1: p_AttributeDeclaration : p_AttributeName ;
	    // $ANTLR start "p_AttributeDeclaration"
	    p_AttributeDeclaration: function() {
	        var retval = new XQueryParser.p_AttributeDeclaration_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_AttributeName541 = null;


	        try {
	            // XQueryParser.g:1262:9: ( p_AttributeName )
	            // XQueryParser.g:1262:11: p_AttributeName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_AttributeName_in_p_AttributeDeclaration10180);
	            p_AttributeName541=this.p_AttributeName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttributeName541.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ElementTest_return: (function() {
	        XQueryParser.p_ElementTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ElementTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1266:1: p_ElementTest : ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN ;
	    // $ANTLR start "p_ElementTest"
	    p_ElementTest: function() {
	        var retval = new XQueryParser.p_ElementTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ELEMENT542 = null;
	        var LPAREN543 = null;
	        var COMMA545 = null;
	        var QUESTION547 = null;
	        var RPAREN548 = null;
	         var p_ElementNameOrWildcard544 = null;
	         var p_TypeName546 = null;

	        var ELEMENT542_tree=null;
	        var LPAREN543_tree=null;
	        var COMMA545_tree=null;
	        var QUESTION547_tree=null;
	        var RPAREN548_tree=null;

	        try {
	            // XQueryParser.g:1267:9: ( ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN )
	            // XQueryParser.g:1267:11: ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN
	            root_0 = this.adaptor.nil();

	            ELEMENT542=this.match(this.input,ELEMENT,XQueryParser.FOLLOW_ELEMENT_in_p_ElementTest10206); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            ELEMENT542_tree = this.adaptor.create(ELEMENT542);
	            this.adaptor.addChild(root_0, ELEMENT542_tree);
	            }
	            LPAREN543=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ElementTest10208); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN543_tree = this.adaptor.create(LPAREN543);
	            this.adaptor.addChild(root_0, LPAREN543_tree);
	            }
	            // XQueryParser.g:1267:26: ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )?
	            var alt169=2;
	            var LA169_0 = this.input.LA(1);

	            if ( ((LA169_0>=ANCESTOR && LA169_0<=DECIMAL_SEPARATOR)||(LA169_0>=DIGIT && LA169_0<=SKIP)||(LA169_0>=VALUE && LA169_0<=QUOT_ER)||LA169_0==STAR||LA169_0==L_NCName||LA169_0==EXPLICITLY) ) {
	                alt169=1;
	            }
	            switch (alt169) {
	                case 1 :
	                    // XQueryParser.g:1267:27: p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )?
	                    this.pushFollow(XQueryParser.FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest10211);
	                    p_ElementNameOrWildcard544=this.p_ElementNameOrWildcard();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementNameOrWildcard544.getTree());
	                    // XQueryParser.g:1267:51: ( COMMA p_TypeName ( QUESTION )? )?
	                    var alt168=2;
	                    var LA168_0 = this.input.LA(1);

	                    if ( (LA168_0==COMMA) ) {
	                        alt168=1;
	                    }
	                    switch (alt168) {
	                        case 1 :
	                            // XQueryParser.g:1267:52: COMMA p_TypeName ( QUESTION )?
	                            COMMA545=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_ElementTest10214); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            COMMA545_tree = this.adaptor.create(COMMA545);
	                            this.adaptor.addChild(root_0, COMMA545_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_TypeName_in_p_ElementTest10216);
	                            p_TypeName546=this.p_TypeName();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeName546.getTree());
	                            // XQueryParser.g:1267:69: ( QUESTION )?
	                            var alt167=2;
	                            var LA167_0 = this.input.LA(1);

	                            if ( (LA167_0==QUESTION) ) {
	                                alt167=1;
	                            }
	                            switch (alt167) {
	                                case 1 :
	                                    // XQueryParser.g:1267:69: QUESTION
	                                    QUESTION547=this.match(this.input,QUESTION,XQueryParser.FOLLOW_QUESTION_in_p_ElementTest10218); if (this.state.failed) return retval;
	                                    if ( this.state.backtracking===0 ) {
	                                    QUESTION547_tree = this.adaptor.create(QUESTION547);
	                                    this.adaptor.addChild(root_0, QUESTION547_tree);
	                                    }


	                                    break;

	                            }



	                            break;

	                    }



	                    break;

	            }

	            RPAREN548=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ElementTest10225); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN548_tree = this.adaptor.create(RPAREN548);
	            this.adaptor.addChild(root_0, RPAREN548_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ElementNameOrWildcard_return: (function() {
	        XQueryParser.p_ElementNameOrWildcard_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ElementNameOrWildcard_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1271:1: p_ElementNameOrWildcard : ( p_QName | STAR );
	    // $ANTLR start "p_ElementNameOrWildcard"
	    p_ElementNameOrWildcard: function() {
	        var retval = new XQueryParser.p_ElementNameOrWildcard_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var STAR550 = null;
	         var p_QName549 = null;

	        var STAR550_tree=null;

	        try {
	            // XQueryParser.g:1272:9: ( p_QName | STAR )
	            var alt170=2;
	            var LA170_0 = this.input.LA(1);

	            if ( ((LA170_0>=ANCESTOR && LA170_0<=DECIMAL_SEPARATOR)||(LA170_0>=DIGIT && LA170_0<=SKIP)||(LA170_0>=VALUE && LA170_0<=QUOT_ER)||LA170_0==L_NCName||LA170_0==EXPLICITLY) ) {
	                alt170=1;
	            }
	            else if ( (LA170_0==STAR) ) {
	                alt170=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 170, 0, this.input);

	                throw nvae;
	            }
	            switch (alt170) {
	                case 1 :
	                    // XQueryParser.g:1272:11: p_QName
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ElementNameOrWildcard10251);
	                    p_QName549=this.p_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName549.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1272:21: STAR
	                    root_0 = this.adaptor.nil();

	                    STAR550=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_ElementNameOrWildcard10255); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    STAR550_tree = this.adaptor.create(STAR550);
	                    this.adaptor.addChild(root_0, STAR550_tree);
	                    }


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SchemaElementTest_return: (function() {
	        XQueryParser.p_SchemaElementTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SchemaElementTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1275:1: p_SchemaElementTest : SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN ;
	    // $ANTLR start "p_SchemaElementTest"
	    p_SchemaElementTest: function() {
	        var retval = new XQueryParser.p_SchemaElementTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var SCHEMA_ELEMENT551 = null;
	        var LPAREN552 = null;
	        var RPAREN554 = null;
	         var p_ElementDeclaration553 = null;

	        var SCHEMA_ELEMENT551_tree=null;
	        var LPAREN552_tree=null;
	        var RPAREN554_tree=null;

	        try {
	            // XQueryParser.g:1276:9: ( SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN )
	            // XQueryParser.g:1276:11: SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN
	            root_0 = this.adaptor.nil();

	            SCHEMA_ELEMENT551=this.match(this.input,SCHEMA_ELEMENT,XQueryParser.FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest10273); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SCHEMA_ELEMENT551_tree = this.adaptor.create(SCHEMA_ELEMENT551);
	            this.adaptor.addChild(root_0, SCHEMA_ELEMENT551_tree);
	            }
	            LPAREN552=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SchemaElementTest10275); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN552_tree = this.adaptor.create(LPAREN552);
	            this.adaptor.addChild(root_0, LPAREN552_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest10277);
	            p_ElementDeclaration553=this.p_ElementDeclaration();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementDeclaration553.getTree());
	            RPAREN554=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SchemaElementTest10279); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN554_tree = this.adaptor.create(RPAREN554);
	            this.adaptor.addChild(root_0, RPAREN554_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ElementDeclaration_return: (function() {
	        XQueryParser.p_ElementDeclaration_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ElementDeclaration_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1280:1: p_ElementDeclaration : p_ElementName ;
	    // $ANTLR start "p_ElementDeclaration"
	    p_ElementDeclaration: function() {
	        var retval = new XQueryParser.p_ElementDeclaration_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ElementName555 = null;


	        try {
	            // XQueryParser.g:1281:9: ( p_ElementName )
	            // XQueryParser.g:1281:11: p_ElementName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ElementName_in_p_ElementDeclaration10305);
	            p_ElementName555=this.p_ElementName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementName555.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AttributeName_return: (function() {
	        XQueryParser.p_AttributeName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AttributeName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1285:1: p_AttributeName : p_QName ;
	    // $ANTLR start "p_AttributeName"
	    p_AttributeName: function() {
	        var retval = new XQueryParser.p_AttributeName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName556 = null;


	        try {
	            // XQueryParser.g:1286:9: ( p_QName )
	            // XQueryParser.g:1286:11: p_QName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_AttributeName10331);
	            p_QName556=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName556.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ElementName_return: (function() {
	        XQueryParser.p_ElementName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ElementName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1290:1: p_ElementName : p_QName ;
	    // $ANTLR start "p_ElementName"
	    p_ElementName: function() {
	        var retval = new XQueryParser.p_ElementName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName557 = null;


	        try {
	            // XQueryParser.g:1291:9: ( p_QName )
	            // XQueryParser.g:1291:11: p_QName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ElementName10357);
	            p_QName557=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName557.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TypeName_return: (function() {
	        XQueryParser.p_TypeName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TypeName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1295:1: p_TypeName : p_QName ;
	    // $ANTLR start "p_TypeName"
	    p_TypeName: function() {
	        var retval = new XQueryParser.p_TypeName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName558 = null;


	        try {
	            // XQueryParser.g:1296:9: ( p_QName )
	            // XQueryParser.g:1296:11: p_QName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_TypeName10383);
	            p_QName558=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName558.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FunctionTest_return: (function() {
	        XQueryParser.p_FunctionTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FunctionTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1300:1: p_FunctionTest : ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest ) ;
	    // $ANTLR start "p_FunctionTest"
	    p_FunctionTest: function() {
	        var retval = new XQueryParser.p_FunctionTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Annotation559 = null;
	         var p_AnyFunctionTest560 = null;
	         var p_TypedFunctionTest561 = null;


	        try {
	            // XQueryParser.g:1301:9: ( ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest ) )
	            // XQueryParser.g:1301:11: ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1301:11: ( p_Annotation )*
	            loop171:
	            do {
	                var alt171=2;
	                var LA171_0 = this.input.LA(1);

	                if ( (LA171_0==ANN_PERCENT) ) {
	                    alt171=1;
	                }


	                switch (alt171) {
	                case 1 :
	                    // XQueryParser.g:1301:11: p_Annotation
	                    this.pushFollow(XQueryParser.FOLLOW_p_Annotation_in_p_FunctionTest10409);
	                    p_Annotation559=this.p_Annotation();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Annotation559.getTree());


	                    break;

	                default :
	                    break loop171;
	                }
	            } while (true);

	            // XQueryParser.g:1301:25: ( p_AnyFunctionTest | p_TypedFunctionTest )
	            var alt172=2;
	            var LA172_0 = this.input.LA(1);

	            if ( (LA172_0==FUNCTION) ) {
	                var LA172_1 = this.input.LA(2);

	                if ( (LA172_1==LPAREN) ) {
	                    var LA172_2 = this.input.LA(3);

	                    if ( (LA172_2==STAR) ) {
	                        alt172=1;
	                    }
	                    else if ( ((LA172_2>=ANCESTOR && LA172_2<=DECIMAL_SEPARATOR)||(LA172_2>=DIGIT && LA172_2<=SKIP)||(LA172_2>=VALUE && LA172_2<=RPAREN)||LA172_2==L_NCName||LA172_2==EXPLICITLY) ) {
	                        alt172=2;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 172, 2, this.input);

	                        throw nvae;
	                    }
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 172, 1, this.input);

	                    throw nvae;
	                }
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 172, 0, this.input);

	                throw nvae;
	            }
	            switch (alt172) {
	                case 1 :
	                    // XQueryParser.g:1301:26: p_AnyFunctionTest
	                    this.pushFollow(XQueryParser.FOLLOW_p_AnyFunctionTest_in_p_FunctionTest10413);
	                    p_AnyFunctionTest560=this.p_AnyFunctionTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AnyFunctionTest560.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1301:46: p_TypedFunctionTest
	                    this.pushFollow(XQueryParser.FOLLOW_p_TypedFunctionTest_in_p_FunctionTest10417);
	                    p_TypedFunctionTest561=this.p_TypedFunctionTest();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypedFunctionTest561.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AnyFunctionTest_return: (function() {
	        XQueryParser.p_AnyFunctionTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AnyFunctionTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1305:1: p_AnyFunctionTest : FUNCTION LPAREN STAR RPAREN ;
	    // $ANTLR start "p_AnyFunctionTest"
	    p_AnyFunctionTest: function() {
	        var retval = new XQueryParser.p_AnyFunctionTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var FUNCTION562 = null;
	        var LPAREN563 = null;
	        var STAR564 = null;
	        var RPAREN565 = null;

	        var FUNCTION562_tree=null;
	        var LPAREN563_tree=null;
	        var STAR564_tree=null;
	        var RPAREN565_tree=null;

	        try {
	            // XQueryParser.g:1306:9: ( FUNCTION LPAREN STAR RPAREN )
	            // XQueryParser.g:1306:11: FUNCTION LPAREN STAR RPAREN
	            root_0 = this.adaptor.nil();

	            FUNCTION562=this.match(this.input,FUNCTION,XQueryParser.FOLLOW_FUNCTION_in_p_AnyFunctionTest10444); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            FUNCTION562_tree = this.adaptor.create(FUNCTION562);
	            this.adaptor.addChild(root_0, FUNCTION562_tree);
	            }
	            LPAREN563=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_AnyFunctionTest10446); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN563_tree = this.adaptor.create(LPAREN563);
	            this.adaptor.addChild(root_0, LPAREN563_tree);
	            }
	            STAR564=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_AnyFunctionTest10448); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            STAR564_tree = this.adaptor.create(STAR564);
	            this.adaptor.addChild(root_0, STAR564_tree);
	            }
	            RPAREN565=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_AnyFunctionTest10450); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN565_tree = this.adaptor.create(RPAREN565);
	            this.adaptor.addChild(root_0, RPAREN565_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TypedFunctionTest_return: (function() {
	        XQueryParser.p_TypedFunctionTest_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TypedFunctionTest_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1310:1: p_TypedFunctionTest : FUNCTION LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType ;
	    // $ANTLR start "p_TypedFunctionTest"
	    p_TypedFunctionTest: function() {
	        var retval = new XQueryParser.p_TypedFunctionTest_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var FUNCTION566 = null;
	        var LPAREN567 = null;
	        var COMMA569 = null;
	        var RPAREN571 = null;
	        var AS572 = null;
	         var p_SequenceType568 = null;
	         var p_SequenceType570 = null;
	         var p_SequenceType573 = null;

	        var FUNCTION566_tree=null;
	        var LPAREN567_tree=null;
	        var COMMA569_tree=null;
	        var RPAREN571_tree=null;
	        var AS572_tree=null;

	        try {
	            // XQueryParser.g:1311:9: ( FUNCTION LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType )
	            // XQueryParser.g:1311:11: FUNCTION LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType
	            root_0 = this.adaptor.nil();

	            FUNCTION566=this.match(this.input,FUNCTION,XQueryParser.FOLLOW_FUNCTION_in_p_TypedFunctionTest10476); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            FUNCTION566_tree = this.adaptor.create(FUNCTION566);
	            this.adaptor.addChild(root_0, FUNCTION566_tree);
	            }
	            LPAREN567=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_TypedFunctionTest10478); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN567_tree = this.adaptor.create(LPAREN567);
	            this.adaptor.addChild(root_0, LPAREN567_tree);
	            }
	            // XQueryParser.g:1311:27: ( p_SequenceType ( COMMA p_SequenceType )* )?
	            var alt174=2;
	            var LA174_0 = this.input.LA(1);

	            if ( ((LA174_0>=ANCESTOR && LA174_0<=DECIMAL_SEPARATOR)||(LA174_0>=DIGIT && LA174_0<=SKIP)||(LA174_0>=VALUE && LA174_0<=LPAREN)||LA174_0==L_NCName||LA174_0==EXPLICITLY) ) {
	                alt174=1;
	            }
	            switch (alt174) {
	                case 1 :
	                    // XQueryParser.g:1311:28: p_SequenceType ( COMMA p_SequenceType )*
	                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TypedFunctionTest10481);
	                    p_SequenceType568=this.p_SequenceType();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType568.getTree());
	                    // XQueryParser.g:1311:43: ( COMMA p_SequenceType )*
	                    loop173:
	                    do {
	                        var alt173=2;
	                        var LA173_0 = this.input.LA(1);

	                        if ( (LA173_0==COMMA) ) {
	                            alt173=1;
	                        }


	                        switch (alt173) {
	                        case 1 :
	                            // XQueryParser.g:1311:44: COMMA p_SequenceType
	                            COMMA569=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_TypedFunctionTest10484); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            COMMA569_tree = this.adaptor.create(COMMA569);
	                            this.adaptor.addChild(root_0, COMMA569_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TypedFunctionTest10486);
	                            p_SequenceType570=this.p_SequenceType();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType570.getTree());


	                            break;

	                        default :
	                            break loop173;
	                        }
	                    } while (true);



	                    break;

	            }

	            RPAREN571=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_TypedFunctionTest10492); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN571_tree = this.adaptor.create(RPAREN571);
	            this.adaptor.addChild(root_0, RPAREN571_tree);
	            }
	            AS572=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_TypedFunctionTest10494); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            AS572_tree = this.adaptor.create(AS572);
	            this.adaptor.addChild(root_0, AS572_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TypedFunctionTest10496);
	            p_SequenceType573=this.p_SequenceType();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType573.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ParenthesizedItemType_return: (function() {
	        XQueryParser.p_ParenthesizedItemType_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ParenthesizedItemType_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1315:1: p_ParenthesizedItemType : LPAREN p_ItemType RPAREN ;
	    // $ANTLR start "p_ParenthesizedItemType"
	    p_ParenthesizedItemType: function() {
	        var retval = new XQueryParser.p_ParenthesizedItemType_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LPAREN574 = null;
	        var RPAREN576 = null;
	         var p_ItemType575 = null;

	        var LPAREN574_tree=null;
	        var RPAREN576_tree=null;

	        try {
	            // XQueryParser.g:1316:9: ( LPAREN p_ItemType RPAREN )
	            // XQueryParser.g:1316:11: LPAREN p_ItemType RPAREN
	            root_0 = this.adaptor.nil();

	            LPAREN574=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ParenthesizedItemType10522); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN574_tree = this.adaptor.create(LPAREN574);
	            this.adaptor.addChild(root_0, LPAREN574_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ItemType_in_p_ParenthesizedItemType10524);
	            p_ItemType575=this.p_ItemType();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ItemType575.getTree());
	            RPAREN576=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ParenthesizedItemType10526); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN576_tree = this.adaptor.create(RPAREN576);
	            this.adaptor.addChild(root_0, RPAREN576_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_StringLiteral_return: (function() {
	        XQueryParser.p_StringLiteral_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_StringLiteral_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1345:1: p_StringLiteral : ( QUOT pg_QuotStringLiteralContent QUOT -> ^( StringLiteral ( pg_QuotStringLiteralContent )* ) | APOS pg_AposStringLiteralContent APOS -> ^( StringLiteral ( pg_AposStringLiteralContent )* ) );
	    // $ANTLR start "p_StringLiteral"
	    p_StringLiteral: function() {
	        var retval = new XQueryParser.p_StringLiteral_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var QUOT577 = null;
	        var QUOT579 = null;
	        var APOS580 = null;
	        var APOS582 = null;
	         var pg_QuotStringLiteralContent578 = null;
	         var pg_AposStringLiteralContent581 = null;

	        var QUOT577_tree=null;
	        var QUOT579_tree=null;
	        var APOS580_tree=null;
	        var APOS582_tree=null;
	        var stream_APOS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token APOS");
	        var stream_QUOT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token QUOT");
	        var stream_pg_QuotStringLiteralContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pg_QuotStringLiteralContent");
	        var stream_pg_AposStringLiteralContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pg_AposStringLiteralContent");
	        try {
	            // XQueryParser.g:1346:9: ( QUOT pg_QuotStringLiteralContent QUOT -> ^( StringLiteral ( pg_QuotStringLiteralContent )* ) | APOS pg_AposStringLiteralContent APOS -> ^( StringLiteral ( pg_AposStringLiteralContent )* ) )
	            var alt175=2;
	            var LA175_0 = this.input.LA(1);

	            if ( (LA175_0==QUOT) ) {
	                alt175=1;
	            }
	            else if ( (LA175_0==APOS) ) {
	                alt175=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 175, 0, this.input);

	                throw nvae;
	            }
	            switch (alt175) {
	                case 1 :
	                    // XQueryParser.g:1346:11: QUOT pg_QuotStringLiteralContent QUOT
	                    QUOT577=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_StringLiteral10577); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT577);

	                    if ( this.state.backtracking===0 ) {
	                       this.pushStringLexer(false);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_pg_QuotStringLiteralContent_in_p_StringLiteral10581);
	                    pg_QuotStringLiteralContent578=this.pg_QuotStringLiteralContent();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_pg_QuotStringLiteralContent.add(pg_QuotStringLiteralContent578.getTree());
	                    QUOT579=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_StringLiteral10583); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT579);



	                    // AST REWRITE
	                    // elements: pg_QuotStringLiteralContent
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 1347:17: -> ^( StringLiteral ( pg_QuotStringLiteralContent )* )
	                    {
	                        // XQueryParser.g:1347:20: ^( StringLiteral ( pg_QuotStringLiteralContent )* )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(StringLiteral, "StringLiteral"), root_1);

	                        // XQueryParser.g:1347:36: ( pg_QuotStringLiteralContent )*
	                        while ( stream_pg_QuotStringLiteralContent.hasNext() ) {
	                            this.adaptor.addChild(root_1, stream_pg_QuotStringLiteralContent.nextTree());

	                        }
	                        stream_pg_QuotStringLiteralContent.reset();

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;
	                case 2 :
	                    // XQueryParser.g:1348:11: APOS pg_AposStringLiteralContent APOS
	                    APOS580=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_StringLiteral10620); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_APOS.add(APOS580);

	                    if ( this.state.backtracking===0 ) {
	                      this.pushStringLexer(true);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_pg_AposStringLiteralContent_in_p_StringLiteral10624);
	                    pg_AposStringLiteralContent581=this.pg_AposStringLiteralContent();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_pg_AposStringLiteralContent.add(pg_AposStringLiteralContent581.getTree());
	                    APOS582=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_StringLiteral10626); if (this.state.failed) return retval; 
	                    if ( this.state.backtracking===0 ) stream_APOS.add(APOS582);



	                    // AST REWRITE
	                    // elements: pg_AposStringLiteralContent
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 1349:17: -> ^( StringLiteral ( pg_AposStringLiteralContent )* )
	                    {
	                        // XQueryParser.g:1349:20: ^( StringLiteral ( pg_AposStringLiteralContent )* )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(StringLiteral, "StringLiteral"), root_1);

	                        // XQueryParser.g:1349:36: ( pg_AposStringLiteralContent )*
	                        while ( stream_pg_AposStringLiteralContent.hasNext() ) {
	                            this.adaptor.addChild(root_1, stream_pg_AposStringLiteralContent.nextTree());

	                        }
	                        stream_pg_AposStringLiteralContent.reset();

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	             this.popLexer(); 
	        }
	        return retval;
	    },

	    // inline static return class
	    pg_QuotStringLiteralContent_return: (function() {
	        XQueryParser.pg_QuotStringLiteralContent_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pg_QuotStringLiteralContent_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1355:1: pg_QuotStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* ;
	    // $ANTLR start "pg_QuotStringLiteralContent"
	    pg_QuotStringLiteralContent: function() {
	        var retval = new XQueryParser.pg_QuotStringLiteralContent_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var set583 = null;

	        var set583_tree=null;

	        try {
	            // XQueryParser.g:1356:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* )
	            // XQueryParser.g:1356:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1356:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
	            loop176:
	            do {
	                var alt176=2;
	                var LA176_0 = this.input.LA(1);

	                if ( ((LA176_0>=L_QuotAttrContentChar && LA176_0<=HASH)||(LA176_0>=COMMA && LA176_0<=APOS)||(LA176_0>=NCNameStartChar && LA176_0<=EXPLICITLY)) ) {
	                    alt176=1;
	                }


	                switch (alt176) {
	                case 1 :
	                    // XQueryParser.g:
	                    set583=this.input.LT(1);
	                    if ( (this.input.LA(1)>=L_QuotAttrContentChar && this.input.LA(1)<=HASH)||(this.input.LA(1)>=COMMA && this.input.LA(1)<=APOS)||(this.input.LA(1)>=NCNameStartChar && this.input.LA(1)<=EXPLICITLY) ) {
	                        this.input.consume();
	                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set583));
	                        this.state.errorRecovery=false;this.state.failed=false;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                        throw mse;
	                    }



	                    break;

	                default :
	                    break loop176;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pg_AposStringLiteralContent_return: (function() {
	        XQueryParser.pg_AposStringLiteralContent_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pg_AposStringLiteralContent_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1363:1: pg_AposStringLiteralContent : ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* ;
	    // $ANTLR start "pg_AposStringLiteralContent"
	    pg_AposStringLiteralContent: function() {
	        var retval = new XQueryParser.pg_AposStringLiteralContent_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var set584 = null;

	        var set584_tree=null;

	        try {
	            // XQueryParser.g:1364:9: ( ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* )
	            // XQueryParser.g:1364:11: ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1364:11: ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
	            loop177:
	            do {
	                var alt177=2;
	                var LA177_0 = this.input.LA(1);

	                if ( ((LA177_0>=L_QuotAttrContentChar && LA177_0<=HASH)||(LA177_0>=COMMA && LA177_0<=CHARREF_HEX)||(LA177_0>=QUOT && LA177_0<=EXPLICITLY)) ) {
	                    alt177=1;
	                }


	                switch (alt177) {
	                case 1 :
	                    // XQueryParser.g:
	                    set584=this.input.LT(1);
	                    if ( (this.input.LA(1)>=L_QuotAttrContentChar && this.input.LA(1)<=HASH)||(this.input.LA(1)>=COMMA && this.input.LA(1)<=CHARREF_HEX)||(this.input.LA(1)>=QUOT && this.input.LA(1)<=EXPLICITLY) ) {
	                        this.input.consume();
	                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set584));
	                        this.state.errorRecovery=false;this.state.failed=false;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                        throw mse;
	                    }



	                    break;

	                default :
	                    break loop177;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ElementContentChar_return: (function() {
	        XQueryParser.p_ElementContentChar_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ElementContentChar_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1378:1: p_ElementContentChar : L_ElementContentChar ;
	    // $ANTLR start "p_ElementContentChar"
	    p_ElementContentChar: function() {
	        var retval = new XQueryParser.p_ElementContentChar_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_ElementContentChar585 = null;

	        var L_ElementContentChar585_tree=null;

	        try {
	            // XQueryParser.g:1379:9: ( L_ElementContentChar )
	            // XQueryParser.g:1379:11: L_ElementContentChar
	            root_0 = this.adaptor.nil();

	            L_ElementContentChar585=this.match(this.input,L_ElementContentChar,XQueryParser.FOLLOW_L_ElementContentChar_in_p_ElementContentChar10799); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            L_ElementContentChar585_tree = this.adaptor.create(L_ElementContentChar585);
	            this.adaptor.addChild(root_0, L_ElementContentChar585_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_QuotAttrContentChar_return: (function() {
	        XQueryParser.p_QuotAttrContentChar_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_QuotAttrContentChar_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1383:1: p_QuotAttrContentChar : L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) ;
	    // $ANTLR start "p_QuotAttrContentChar"
	    p_QuotAttrContentChar: function() {
	        var retval = new XQueryParser.p_QuotAttrContentChar_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_QuotAttrContentChar586 = null;

	        var L_QuotAttrContentChar586_tree=null;
	        var stream_L_QuotAttrContentChar=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token L_QuotAttrContentChar");

	        try {
	            // XQueryParser.g:1384:9: ( L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) )
	            // XQueryParser.g:1384:11: L_QuotAttrContentChar
	            L_QuotAttrContentChar586=this.match(this.input,L_QuotAttrContentChar,XQueryParser.FOLLOW_L_QuotAttrContentChar_in_p_QuotAttrContentChar10825); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_L_QuotAttrContentChar.add(L_QuotAttrContentChar586);



	            // AST REWRITE
	            // elements: L_QuotAttrContentChar
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 1385:17: -> ^( AttributeValueChar L_QuotAttrContentChar )
	            {
	                // XQueryParser.g:1385:20: ^( AttributeValueChar L_QuotAttrContentChar )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

	                this.adaptor.addChild(root_1, stream_L_QuotAttrContentChar.nextNode());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AposAttrContentChar_return: (function() {
	        XQueryParser.p_AposAttrContentChar_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AposAttrContentChar_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1389:1: p_AposAttrContentChar : L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) ;
	    // $ANTLR start "p_AposAttrContentChar"
	    p_AposAttrContentChar: function() {
	        var retval = new XQueryParser.p_AposAttrContentChar_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_AposAttrContentChar587 = null;

	        var L_AposAttrContentChar587_tree=null;
	        var stream_L_AposAttrContentChar=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token L_AposAttrContentChar");

	        try {
	            // XQueryParser.g:1390:9: ( L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) )
	            // XQueryParser.g:1390:11: L_AposAttrContentChar
	            L_AposAttrContentChar587=this.match(this.input,L_AposAttrContentChar,XQueryParser.FOLLOW_L_AposAttrContentChar_in_p_AposAttrContentChar10875); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_L_AposAttrContentChar.add(L_AposAttrContentChar587);



	            // AST REWRITE
	            // elements: L_AposAttrContentChar
	            // token labels: 
	            // rule labels: retval
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	            root_0 = this.adaptor.nil();
	            // 1391:17: -> ^( AttributeValueChar L_AposAttrContentChar )
	            {
	                // XQueryParser.g:1391:20: ^( AttributeValueChar L_AposAttrContentChar )
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

	                this.adaptor.addChild(root_1, stream_L_AposAttrContentChar.nextNode());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_QName_return: (function() {
	        XQueryParser.p_QName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_QName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1409:1: p_QName : ( pg_QName | p_NCName -> ^( QName p_NCName ) );
	    // $ANTLR start "p_QName"
	    p_QName: function() {
	        var retval = new XQueryParser.p_QName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var pg_QName588 = null;
	         var p_NCName589 = null;

	        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
	        this.setWsExplicit(true);
	        try {
	            // XQueryParser.g:1411:9: ( pg_QName | p_NCName -> ^( QName p_NCName ) )
	            var alt178=2;
	            var LA178_0 = this.input.LA(1);

	            if ( ((LA178_0>=ANCESTOR && LA178_0<=DECIMAL_SEPARATOR)||(LA178_0>=DIGIT && LA178_0<=SKIP)||(LA178_0>=VALUE && LA178_0<=QUOT_ER)||LA178_0==L_NCName||LA178_0==EXPLICITLY) ) {
	                var LA178_1 = this.input.LA(2);

	                if ( (LA178_1==COLON) ) {
	                    alt178=1;
	                }
	                else if ( (LA178_1==EOF||(LA178_1>=AND && LA178_1<=AT)||(LA178_1>=BY && LA178_1<=CASTABLE)||LA178_1==COLLATION||LA178_1==DEFAULT||(LA178_1>=DESCENDING && LA178_1<=DIV)||LA178_1==EMPTY||LA178_1==EQ||(LA178_1>=EXCEPT && LA178_1<=EXTERNAL)||(LA178_1>=FOR && LA178_1<=GE)||(LA178_1>=GT && LA178_1<=IDIV)||LA178_1==IN||(LA178_1>=INSTANCE && LA178_1<=IS)||LA178_1==LE||(LA178_1>=LET && LA178_1<=MOD)||LA178_1==NE||LA178_1==NODE||(LA178_1>=OR && LA178_1<=ORDER)||(LA178_1>=RETURN && LA178_1<=SATISFIES)||LA178_1==STABLE||(LA178_1>=TO && LA178_1<=TREAT)||LA178_1==UNION||LA178_1==VARIABLE||LA178_1==WHERE||LA178_1==ALLOWING||LA178_1==COUNT||LA178_1==DECIMAL_SEPARATOR||(LA178_1>=DIGIT && LA178_1<=MINUS_SIGN)||(LA178_1>=NAN && LA178_1<=PREVIOUS)||LA178_1==START||LA178_1==WHEN||(LA178_1>=ZERO_DIGIT && LA178_1<=BEFORE)||LA178_1==INTO||LA178_1==MODIFY||LA178_1==UPDATING||LA178_1==WITH||LA178_1==CONTAINS||LA178_1==PARAGRAPHS||LA178_1==SCORE||LA178_1==SENTENCES||LA178_1==TIMES||LA178_1==WORDS||(LA178_1>=CHECK && LA178_1<=COLLECTION)||(LA178_1>=FOREACH && LA178_1<=ON)||(LA178_1>=LPAREN && LA178_1<=ANN_PERCENT)||(LA178_1>=COMMA && LA178_1<=SLASH_SLASH)||LA178_1==EMPTY_CLOSE_TAG||(LA178_1>=SEMICOLON && LA178_1<=VBAR)||(LA178_1>=APOS && LA178_1<=QUOT)||LA178_1==S) ) {
	                    alt178=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 178, 1, this.input);

	                    throw nvae;
	                }
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 178, 0, this.input);

	                throw nvae;
	            }
	            switch (alt178) {
	                case 1 :
	                    // XQueryParser.g:1411:11: pg_QName
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pg_QName_in_p_QName10961);
	                    pg_QName588=this.pg_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_QName588.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1412:11: p_NCName
	                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_QName10973);
	                    p_NCName589=this.p_NCName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_NCName.add(p_NCName589.getTree());


	                    // AST REWRITE
	                    // elements: p_NCName
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 1413:17: -> ^( QName p_NCName )
	                    {
	                        // XQueryParser.g:1413:20: ^( QName p_NCName )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(QName, "QName"), root_1);

	                        this.adaptor.addChild(root_1, stream_p_NCName.nextTree());

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	            this.setWsExplicit(false);
	        }
	        return retval;
	    },

	    // inline static return class
	    pg_FQName_return: (function() {
	        XQueryParser.pg_FQName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pg_FQName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1417:1: pg_FQName : ( pg_QName | p_FNCName -> ^( QName p_FNCName ) );
	    // $ANTLR start "pg_FQName"
	    pg_FQName: function() {
	        var retval = new XQueryParser.pg_FQName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var pg_QName590 = null;
	         var p_FNCName591 = null;

	        var stream_p_FNCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_FNCName");
	        try {
	            // XQueryParser.g:1418:9: ( pg_QName | p_FNCName -> ^( QName p_FNCName ) )
	            var alt179=2;
	            switch ( this.input.LA(1) ) {
	            case ANCESTOR:
	            case ANCESTOR_OR_SELF:
	            case AND:
	            case AS:
	            case ASCENDING:
	            case AT:
	            case BASE_URI:
	            case BOUNDARY_SPACE:
	            case BY:
	            case CASE:
	            case CAST:
	            case CASTABLE:
	            case CHILD:
	            case COLLATION:
	            case CONSTRUCTION:
	            case COPY_NAMESPACES:
	            case DECLARE:
	            case DEFAULT:
	            case DESCENDANT:
	            case DESCENDANT_OR_SELF:
	            case DESCENDING:
	            case DIV:
	            case DOCUMENT:
	            case ELSE:
	            case EMPTY:
	            case ENCODING:
	            case EQ:
	            case EVERY:
	            case EXCEPT:
	            case EXTERNAL:
	            case FOLLOWING:
	            case FOLLOWING_SIBLING:
	            case FOR:
	            case FUNCTION:
	            case GE:
	            case GREATEST:
	            case GT:
	            case IDIV:
	            case IMPORT:
	            case IN:
	            case INHERIT:
	            case INSTANCE:
	            case INTERSECT:
	            case IS:
	            case LAX:
	            case LE:
	            case LEAST:
	            case LET:
	            case LT:
	            case MOD:
	            case MODULE:
	            case NAMESPACE:
	            case NE:
	            case NO_INHERIT:
	            case NO_PRESERVE:
	            case OF:
	            case OPTION:
	            case OR:
	            case ORDER:
	            case ORDERED:
	            case ORDERING:
	            case PARENT:
	            case PRECEDING:
	            case PRECEDING_SIBLING:
	            case PRESERVE:
	            case RETURN:
	            case SATISFIES:
	            case SCHEMA:
	            case SELF:
	            case SOME:
	            case STABLE:
	            case STRICT:
	            case STRIP:
	            case THEN:
	            case TO:
	            case TREAT:
	            case UNION:
	            case UNORDERED:
	            case VALIDATE:
	            case VARIABLE:
	            case VERSION:
	            case WHERE:
	            case XQUERY:
	            case ALLOWING:
	            case CATCH:
	            case CONTEXT:
	            case COUNT:
	            case DECIMAL_FORMAT:
	            case DECIMAL_SEPARATOR:
	            case DIGIT:
	            case END:
	            case GROUP:
	            case GROUPING_SEPARATOR:
	            case INFINITY:
	            case MINUS_SIGN:
	            case NAN:
	            case NEXT:
	            case ONLY:
	            case PATTERN_SEPARATOR:
	            case PERCENT:
	            case PER_MILLE:
	            case PREVIOUS:
	            case SLIDING:
	            case START:
	            case TRY:
	            case TUMBLING:
	            case TYPE:
	            case WHEN:
	            case WINDOW:
	            case ZERO_DIGIT:
	            case AFTER:
	            case BEFORE:
	            case COPY:
	            case DELETE:
	            case FIRST:
	            case INSERT:
	            case INTO:
	            case LAST:
	            case MODIFY:
	            case NODES:
	            case RENAME:
	            case REPLACE:
	            case REVALIDATION:
	            case SKIP:
	            case VALUE:
	            case WITH:
	            case ALL:
	            case ANY:
	            case CONTAINS:
	            case CONTENT:
	            case DIACRITICS:
	            case DIFFERENT:
	            case DISTANCE:
	            case ENTIRE:
	            case EXACTLY:
	            case FROM:
	            case FT_OPTION:
	            case FTAND:
	            case FTNOT:
	            case FTOR:
	            case INSENSITIVE:
	            case LANGUAGE:
	            case LEVELS:
	            case LOWERCASE:
	            case MOST:
	            case NO:
	            case NOT:
	            case OCCURS:
	            case PARAGRAPH:
	            case PARAGRAPHS:
	            case PHRASE:
	            case RELATIONSHIP:
	            case SAME:
	            case SCORE:
	            case SENSITIVE:
	            case SENTENCE:
	            case SENTENCES:
	            case STEMMING:
	            case STOP:
	            case THESAURUS:
	            case TIMES:
	            case UPPERCASE:
	            case USING:
	            case WEIGHT:
	            case WILDCARDS:
	            case WITHOUT:
	            case WORD:
	            case WORDS:
	            case BREAK:
	            case CONTINUE:
	            case EXIT:
	            case LOOP:
	            case RETURNING:
	            case CHECK:
	            case COLLECTION:
	            case CONSTRAINT:
	            case FOREACH:
	            case FOREIGN:
	            case INDEX:
	            case INTEGRITY:
	            case KEY:
	            case ON:
	            case UNIQUE:
	            case BINARY:
	            case AMP_ER:
	            case APOS_ER:
	            case QUOT_ER:
	            case L_NCName:
	            case EXPLICITLY:
	                var LA179_1 = this.input.LA(2);

	                if ( (LA179_1==COLON) ) {
	                    alt179=1;
	                }
	                else if ( (LA179_1==LPAREN) ) {
	                    alt179=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 179, 1, this.input);

	                    throw nvae;
	                }
	                break;
	            case ATTRIBUTE:
	            case COMMENT:
	            case DOCUMENT_NODE:
	            case ELEMENT:
	            case EMPTY_SEQUENCE:
	            case IF:
	            case ITEM:
	            case NODE:
	            case PROCESSING_INSTRUCTION:
	            case SCHEMA_ATTRIBUTE:
	            case SCHEMA_ELEMENT:
	            case TEXT:
	            case TYPESWITCH:
	            case NAMESPACE_NODE:
	            case SWITCH:
	            case WHILE:
	                alt179=1;
	                break;
	            case UPDATING:
	                alt179=2;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 179, 0, this.input);

	                throw nvae;
	            }

	            switch (alt179) {
	                case 1 :
	                    // XQueryParser.g:1418:11: pg_QName
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_pg_QName_in_pg_FQName11034);
	                    pg_QName590=this.pg_QName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_QName590.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1419:11: p_FNCName
	                    this.pushFollow(XQueryParser.FOLLOW_p_FNCName_in_pg_FQName11046);
	                    p_FNCName591=this.p_FNCName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) stream_p_FNCName.add(p_FNCName591.getTree());


	                    // AST REWRITE
	                    // elements: p_FNCName
	                    // token labels: 
	                    // rule labels: retval
	                    // token list labels: 
	                    // rule list labels: 
	                    if ( this.state.backtracking===0 ) {
	                    retval.tree = root_0;
	                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

	                    root_0 = this.adaptor.nil();
	                    // 1420:17: -> ^( QName p_FNCName )
	                    {
	                        // XQueryParser.g:1420:20: ^( QName p_FNCName )
	                        {
	                        var root_1 = this.adaptor.nil();
	                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(QName, "QName"), root_1);

	                        this.adaptor.addChild(root_1, stream_p_FNCName.nextTree());

	                        this.adaptor.addChild(root_0, root_1);
	                        }

	                    }

	                    retval.tree = root_0;}

	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pg_QName_return: (function() {
	        XQueryParser.pg_QName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pg_QName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1422:1: pg_QName : nn= p_NCName COLON nl= p_NCName -> ^( QName $nn $nl) ;
	    // $ANTLR start "pg_QName"
	    pg_QName: function() {
	        var retval = new XQueryParser.pg_QName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var COLON592 = null;
	         var nn = null;
	         var nl = null;

	        var COLON592_tree=null;
	        var stream_COLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COLON");
	        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
	        try {
	            // XQueryParser.g:1423:9: (nn= p_NCName COLON nl= p_NCName -> ^( QName $nn $nl) )
	            // XQueryParser.g:1423:11: nn= p_NCName COLON nl= p_NCName
	            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pg_QName11090);
	            nn=this.p_NCName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_NCName.add(nn.getTree());
	            COLON592=this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_pg_QName11092); if (this.state.failed) return retval; 
	            if ( this.state.backtracking===0 ) stream_COLON.add(COLON592);

	            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pg_QName11096);
	            nl=this.p_NCName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) stream_p_NCName.add(nl.getTree());


	            // AST REWRITE
	            // elements: nl, nn
	            // token labels: 
	            // rule labels: retval, nn, nl
	            // token list labels: 
	            // rule list labels: 
	            if ( this.state.backtracking===0 ) {
	            retval.tree = root_0;
	            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
	            var stream_nn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nn",nn!=null?nn.tree:null);
	            var stream_nl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nl",nl!=null?nl.tree:null);

	            root_0 = this.adaptor.nil();
	            // 1424:17: -> ^( QName $nn $nl)
	            {
	                // XQueryParser.g:1424:20: ^( QName $nn $nl)
	                {
	                var root_1 = this.adaptor.nil();
	                root_1 = this.adaptor.becomeRoot(this.adaptor.create(QName, "QName"), root_1);

	                this.adaptor.addChild(root_1, stream_nn.nextTree());
	                this.adaptor.addChild(root_1, stream_nl.nextTree());

	                this.adaptor.addChild(root_0, root_1);
	                }

	            }

	            retval.tree = root_0;}


	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_NCName_return: (function() {
	        XQueryParser.p_NCName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_NCName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1454:1: p_NCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | SWITCH | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | WHILE | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
	    // $ANTLR start "p_NCName"
	    p_NCName: function() {
	        var retval = new XQueryParser.p_NCName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var set593 = null;

	        var set593_tree=null;

	        try {
	            // XQueryParser.g:1455:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | SWITCH | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | WHILE | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
	            // XQueryParser.g:
	            root_0 = this.adaptor.nil();

	            set593=this.input.LT(1);
	            if ( (this.input.LA(1)>=ANCESTOR && this.input.LA(1)<=DECIMAL_SEPARATOR)||(this.input.LA(1)>=DIGIT && this.input.LA(1)<=SKIP)||(this.input.LA(1)>=VALUE && this.input.LA(1)<=QUOT_ER)||this.input.LA(1)==L_NCName||this.input.LA(1)==EXPLICITLY ) {
	                this.input.consume();
	                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set593));
	                this.state.errorRecovery=false;this.state.failed=false;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                throw mse;
	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FNCName_return: (function() {
	        XQueryParser.p_FNCName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FNCName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1473:1: p_FNCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
	    // $ANTLR start "p_FNCName"
	    p_FNCName: function() {
	        var retval = new XQueryParser.p_FNCName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var set594 = null;

	        var set594_tree=null;

	        try {
	            // XQueryParser.g:1474:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
	            // XQueryParser.g:
	            root_0 = this.adaptor.nil();

	            set594=this.input.LT(1);
	            if ( (this.input.LA(1)>=ANCESTOR && this.input.LA(1)<=AT)||(this.input.LA(1)>=BASE_URI && this.input.LA(1)<=COLLATION)||(this.input.LA(1)>=CONSTRUCTION && this.input.LA(1)<=DOCUMENT)||(this.input.LA(1)>=ELSE && this.input.LA(1)<=EMPTY)||(this.input.LA(1)>=ENCODING && this.input.LA(1)<=IDIV)||(this.input.LA(1)>=IMPORT && this.input.LA(1)<=IS)||(this.input.LA(1)>=LAX && this.input.LA(1)<=NO_PRESERVE)||(this.input.LA(1)>=OF && this.input.LA(1)<=PRESERVE)||(this.input.LA(1)>=RETURN && this.input.LA(1)<=SCHEMA)||(this.input.LA(1)>=SELF && this.input.LA(1)<=STRIP)||(this.input.LA(1)>=THEN && this.input.LA(1)<=TREAT)||(this.input.LA(1)>=UNION && this.input.LA(1)<=DECIMAL_SEPARATOR)||(this.input.LA(1)>=DIGIT && this.input.LA(1)<=MINUS_SIGN)||(this.input.LA(1)>=NAN && this.input.LA(1)<=START)||(this.input.LA(1)>=TRY && this.input.LA(1)<=RETURNING)||(this.input.LA(1)>=CHECK && this.input.LA(1)<=QUOT_ER)||this.input.LA(1)==L_NCName||this.input.LA(1)==EXPLICITLY ) {
	                this.input.consume();
	                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set594));
	                this.state.errorRecovery=false;this.state.failed=false;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                throw mse;
	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pg_UpdateExpr_return: (function() {
	        XQueryParser.pg_UpdateExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pg_UpdateExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1511:1: pg_UpdateExpr : ( p_InsertExpr | p_DeleteExpr | p_RenameExpr | p_ReplaceExpr | p_TransformExpr );
	    // $ANTLR start "pg_UpdateExpr"
	    pg_UpdateExpr: function() {
	        var retval = new XQueryParser.pg_UpdateExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_InsertExpr595 = null;
	         var p_DeleteExpr596 = null;
	         var p_RenameExpr597 = null;
	         var p_ReplaceExpr598 = null;
	         var p_TransformExpr599 = null;


	        try {
	            // XQueryParser.g:1512:9: ( p_InsertExpr | p_DeleteExpr | p_RenameExpr | p_ReplaceExpr | p_TransformExpr )
	            var alt180=5;
	            switch ( this.input.LA(1) ) {
	            case INSERT:
	                alt180=1;
	                break;
	            case DELETE:
	                alt180=2;
	                break;
	            case RENAME:
	                alt180=3;
	                break;
	            case REPLACE:
	                alt180=4;
	                break;
	            case COPY:
	                alt180=5;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 180, 0, this.input);

	                throw nvae;
	            }

	            switch (alt180) {
	                case 1 :
	                    // XQueryParser.g:1512:11: p_InsertExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_InsertExpr_in_pg_UpdateExpr13087);
	                    p_InsertExpr595=this.p_InsertExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InsertExpr595.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1513:11: p_DeleteExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_DeleteExpr_in_pg_UpdateExpr13099);
	                    p_DeleteExpr596=this.p_DeleteExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DeleteExpr596.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:1514:11: p_RenameExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_RenameExpr_in_pg_UpdateExpr13111);
	                    p_RenameExpr597=this.p_RenameExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RenameExpr597.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:1515:11: p_ReplaceExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ReplaceExpr_in_pg_UpdateExpr13123);
	                    p_ReplaceExpr598=this.p_ReplaceExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReplaceExpr598.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:1516:11: p_TransformExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_TransformExpr_in_pg_UpdateExpr13135);
	                    p_TransformExpr599=this.p_TransformExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TransformExpr599.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_RevalidationDecl_return: (function() {
	        XQueryParser.pm_RevalidationDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_RevalidationDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1520:1: pm_RevalidationDecl : k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) SEMICOLON ;
	    // $ANTLR start "pm_RevalidationDecl"
	    pm_RevalidationDecl: function() {
	        var retval = new XQueryParser.pm_RevalidationDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var SEMICOLON600 = null;
	        var k = null;
	        var list_k=null;

	        var SEMICOLON600_tree=null;
	        var k_tree=null;

	        try {
	            // XQueryParser.g:1521:9: (k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) SEMICOLON )
	            // XQueryParser.g:1521:11: k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_RevalidationDecl13163); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            k=this.match(this.input,REVALIDATION,XQueryParser.FOLLOW_REVALIDATION_in_pm_RevalidationDecl13167); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            // XQueryParser.g:1521:38: (k+= STRICT | k+= LAX | k+= SKIP )
	            var alt181=3;
	            switch ( this.input.LA(1) ) {
	            case STRICT:
	                alt181=1;
	                break;
	            case LAX:
	                alt181=2;
	                break;
	            case SKIP:
	                alt181=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 181, 0, this.input);

	                throw nvae;
	            }

	            switch (alt181) {
	                case 1 :
	                    // XQueryParser.g:1521:39: k+= STRICT
	                    k=this.match(this.input,STRICT,XQueryParser.FOLLOW_STRICT_in_pm_RevalidationDecl13172); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:1521:51: k+= LAX
	                    k=this.match(this.input,LAX,XQueryParser.FOLLOW_LAX_in_pm_RevalidationDecl13178); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 3 :
	                    // XQueryParser.g:1521:60: k+= SKIP
	                    k=this.match(this.input,SKIP,XQueryParser.FOLLOW_SKIP_in_pm_RevalidationDecl13184); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }
	            SEMICOLON600=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_RevalidationDecl13189); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON600_tree = this.adaptor.create(SEMICOLON600);
	            this.adaptor.addChild(root_0, SEMICOLON600_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_InsertExprTargetChoice_return: (function() {
	        XQueryParser.p_InsertExprTargetChoice_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_InsertExprTargetChoice_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1525:1: p_InsertExprTargetChoice : ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE );
	    // $ANTLR start "p_InsertExprTargetChoice"
	    p_InsertExprTargetChoice: function() {
	        var retval = new XQueryParser.p_InsertExprTargetChoice_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ka = null;
	        var kb = null;
	        var k = null;
	        var list_k=null;

	        var ka_tree=null;
	        var kb_tree=null;
	        var k_tree=null;

	        try {
	            // XQueryParser.g:1526:9: ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE )
	            var alt184=3;
	            switch ( this.input.LA(1) ) {
	            case AS:
	            case INTO:
	                alt184=1;
	                break;
	            case AFTER:
	                alt184=2;
	                break;
	            case BEFORE:
	                alt184=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 184, 0, this.input);

	                throw nvae;
	            }

	            switch (alt184) {
	                case 1 :
	                    // XQueryParser.g:1526:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
	                    root_0 = this.adaptor.nil();

	                    // XQueryParser.g:1526:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
	                    // XQueryParser.g:1526:12: (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO
	                    // XQueryParser.g:1526:12: (k+= AS (k+= FIRST | k+= LAST ) )?
	                    var alt183=2;
	                    var LA183_0 = this.input.LA(1);

	                    if ( (LA183_0==AS) ) {
	                        alt183=1;
	                    }
	                    switch (alt183) {
	                        case 1 :
	                            // XQueryParser.g:1526:13: k+= AS (k+= FIRST | k+= LAST )
	                            k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_InsertExprTargetChoice13219); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            k_tree = this.adaptor.create(k);
	                            this.adaptor.addChild(root_0, k_tree);
	                            }
	                            if (org.antlr.lang.isNull(list_k)) list_k = [];
	                            list_k.push(k);

	                            // XQueryParser.g:1526:19: (k+= FIRST | k+= LAST )
	                            var alt182=2;
	                            var LA182_0 = this.input.LA(1);

	                            if ( (LA182_0==FIRST) ) {
	                                alt182=1;
	                            }
	                            else if ( (LA182_0==LAST) ) {
	                                alt182=2;
	                            }
	                            else {
	                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                                var nvae =
	                                    new org.antlr.runtime.NoViableAltException("", 182, 0, this.input);

	                                throw nvae;
	                            }
	                            switch (alt182) {
	                                case 1 :
	                                    // XQueryParser.g:1526:20: k+= FIRST
	                                    k=this.match(this.input,FIRST,XQueryParser.FOLLOW_FIRST_in_p_InsertExprTargetChoice13224); if (this.state.failed) return retval;
	                                    if ( this.state.backtracking===0 ) {
	                                    k_tree = this.adaptor.create(k);
	                                    this.adaptor.addChild(root_0, k_tree);
	                                    }
	                                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                                    list_k.push(k);



	                                    break;
	                                case 2 :
	                                    // XQueryParser.g:1526:31: k+= LAST
	                                    k=this.match(this.input,LAST,XQueryParser.FOLLOW_LAST_in_p_InsertExprTargetChoice13230); if (this.state.failed) return retval;
	                                    if ( this.state.backtracking===0 ) {
	                                    k_tree = this.adaptor.create(k);
	                                    this.adaptor.addChild(root_0, k_tree);
	                                    }
	                                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                                    list_k.push(k);



	                                    break;

	                            }



	                            break;

	                    }

	                    k=this.match(this.input,INTO,XQueryParser.FOLLOW_INTO_in_p_InsertExprTargetChoice13237); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);




	                    if ( this.state.backtracking===0 ) {
	                      this.ak(list_k);
	                    }


	                    break;
	                case 2 :
	                    // XQueryParser.g:1527:11: ka= AFTER
	                    root_0 = this.adaptor.nil();

	                    ka=this.match(this.input,AFTER,XQueryParser.FOLLOW_AFTER_in_p_InsertExprTargetChoice13254); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ka_tree = this.adaptor.create(ka);
	                    this.adaptor.addChild(root_0, ka_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(ka);
	                    }


	                    break;
	                case 3 :
	                    // XQueryParser.g:1528:11: kb= BEFORE
	                    root_0 = this.adaptor.nil();

	                    kb=this.match(this.input,BEFORE,XQueryParser.FOLLOW_BEFORE_in_p_InsertExprTargetChoice13270); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    kb_tree = this.adaptor.create(kb);
	                    this.adaptor.addChild(root_0, kb_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(kb);
	                    }


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_InsertExpr_return: (function() {
	        XQueryParser.p_InsertExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_InsertExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1532:1: p_InsertExpr : k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr ;
	    // $ANTLR start "p_InsertExpr"
	    p_InsertExpr: function() {
	        var retval = new XQueryParser.p_InsertExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_SourceExpr601 = null;
	         var p_InsertExprTargetChoice602 = null;
	         var p_TargetExpr603 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1533:9: (k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr )
	            // XQueryParser.g:1533:11: k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,INSERT,XQueryParser.FOLLOW_INSERT_in_p_InsertExpr13300); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            // XQueryParser.g:1533:21: (k+= NODE | k+= NODES )
	            var alt185=2;
	            var LA185_0 = this.input.LA(1);

	            if ( (LA185_0==NODE) ) {
	                alt185=1;
	            }
	            else if ( (LA185_0==NODES) ) {
	                alt185=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 185, 0, this.input);

	                throw nvae;
	            }
	            switch (alt185) {
	                case 1 :
	                    // XQueryParser.g:1533:22: k+= NODE
	                    k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_InsertExpr13305); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:1533:32: k+= NODES
	                    k=this.match(this.input,NODES,XQueryParser.FOLLOW_NODES_in_p_InsertExpr13311); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_SourceExpr_in_p_InsertExpr13314);
	            p_SourceExpr601=this.p_SourceExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SourceExpr601.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr13316);
	            p_InsertExprTargetChoice602=this.p_InsertExprTargetChoice();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InsertExprTargetChoice602.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_TargetExpr_in_p_InsertExpr13318);
	            p_TargetExpr603=this.p_TargetExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TargetExpr603.getTree());
	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_DeleteExpr_return: (function() {
	        XQueryParser.p_DeleteExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_DeleteExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1537:1: p_DeleteExpr : k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr ;
	    // $ANTLR start "p_DeleteExpr"
	    p_DeleteExpr: function() {
	        var retval = new XQueryParser.p_DeleteExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_TargetExpr604 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1538:9: (k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr )
	            // XQueryParser.g:1538:11: k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DELETE,XQueryParser.FOLLOW_DELETE_in_p_DeleteExpr13348); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            // XQueryParser.g:1538:21: (k+= NODE | k+= NODES )
	            var alt186=2;
	            var LA186_0 = this.input.LA(1);

	            if ( (LA186_0==NODE) ) {
	                alt186=1;
	            }
	            else if ( (LA186_0==NODES) ) {
	                alt186=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 186, 0, this.input);

	                throw nvae;
	            }
	            switch (alt186) {
	                case 1 :
	                    // XQueryParser.g:1538:22: k+= NODE
	                    k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_DeleteExpr13353); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:1538:32: k+= NODES
	                    k=this.match(this.input,NODES,XQueryParser.FOLLOW_NODES_in_p_DeleteExpr13359); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_TargetExpr_in_p_DeleteExpr13362);
	            p_TargetExpr604=this.p_TargetExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TargetExpr604.getTree());
	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ReplaceExpr_return: (function() {
	        XQueryParser.p_ReplaceExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ReplaceExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1542:1: p_ReplaceExpr : k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true] ;
	    // $ANTLR start "p_ReplaceExpr"
	    p_ReplaceExpr: function() {
	        var retval = new XQueryParser.p_ReplaceExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_ExprSingle605 = null;
	         var p_ExprSingle606 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1543:9: (k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true] )
	            // XQueryParser.g:1543:11: k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,REPLACE,XQueryParser.FOLLOW_REPLACE_in_p_ReplaceExpr13392); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            // XQueryParser.g:1543:22: (k+= VALUE k+= OF )?
	            var alt187=2;
	            var LA187_0 = this.input.LA(1);

	            if ( (LA187_0==VALUE) ) {
	                alt187=1;
	            }
	            switch (alt187) {
	                case 1 :
	                    // XQueryParser.g:1543:23: k+= VALUE k+= OF
	                    k=this.match(this.input,VALUE,XQueryParser.FOLLOW_VALUE_in_p_ReplaceExpr13397); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,OF,XQueryParser.FOLLOW_OF_in_p_ReplaceExpr13401); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_ReplaceExpr13407); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ReplaceExpr13409);
	            p_ExprSingle605=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle605.getTree());
	            k=this.match(this.input,WITH,XQueryParser.FOLLOW_WITH_in_p_ReplaceExpr13414); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ReplaceExpr13416);
	            p_ExprSingle606=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle606.getTree());
	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_RenameExpr_return: (function() {
	        XQueryParser.p_RenameExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_RenameExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1547:1: p_RenameExpr : k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr ;
	    // $ANTLR start "p_RenameExpr"
	    p_RenameExpr: function() {
	        var retval = new XQueryParser.p_RenameExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var AS608 = null;
	        var k = null;
	        var list_k=null;
	         var p_TargetExpr607 = null;
	         var p_NewNameExpr609 = null;

	        var AS608_tree=null;
	        var k_tree=null;

	        try {
	            // XQueryParser.g:1548:9: (k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr )
	            // XQueryParser.g:1548:11: k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,RENAME,XQueryParser.FOLLOW_RENAME_in_p_RenameExpr13447); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_RenameExpr13451); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            this.pushFollow(XQueryParser.FOLLOW_p_TargetExpr_in_p_RenameExpr13453);
	            p_TargetExpr607=this.p_TargetExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TargetExpr607.getTree());
	            AS608=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_RenameExpr13455); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            AS608_tree = this.adaptor.create(AS608);
	            this.adaptor.addChild(root_0, AS608_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_NewNameExpr_in_p_RenameExpr13457);
	            p_NewNameExpr609=this.p_NewNameExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NewNameExpr609.getTree());
	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SourceExpr_return: (function() {
	        XQueryParser.p_SourceExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SourceExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1552:1: p_SourceExpr : p_ExprSingle[true] ;
	    // $ANTLR start "p_SourceExpr"
	    p_SourceExpr: function() {
	        var retval = new XQueryParser.p_SourceExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ExprSingle610 = null;


	        try {
	            // XQueryParser.g:1553:9: ( p_ExprSingle[true] )
	            // XQueryParser.g:1553:11: p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_SourceExpr13485);
	            p_ExprSingle610=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle610.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TargetExpr_return: (function() {
	        XQueryParser.p_TargetExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TargetExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1557:1: p_TargetExpr : p_ExprSingle[true] ;
	    // $ANTLR start "p_TargetExpr"
	    p_TargetExpr: function() {
	        var retval = new XQueryParser.p_TargetExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ExprSingle611 = null;


	        try {
	            // XQueryParser.g:1558:9: ( p_ExprSingle[true] )
	            // XQueryParser.g:1558:11: p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TargetExpr13512);
	            p_ExprSingle611=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle611.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_NewNameExpr_return: (function() {
	        XQueryParser.p_NewNameExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_NewNameExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1562:1: p_NewNameExpr : p_ExprSingle[true] ;
	    // $ANTLR start "p_NewNameExpr"
	    p_NewNameExpr: function() {
	        var retval = new XQueryParser.p_NewNameExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_ExprSingle612 = null;


	        try {
	            // XQueryParser.g:1563:9: ( p_ExprSingle[true] )
	            // XQueryParser.g:1563:11: p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_NewNameExpr13539);
	            p_ExprSingle612=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle612.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TransformExpr_return: (function() {
	        XQueryParser.p_TransformExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TransformExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1567:1: p_TransformExpr : k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true] ;
	    // $ANTLR start "p_TransformExpr"
	    p_TransformExpr: function() {
	        var retval = new XQueryParser.p_TransformExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var DOLLAR613 = null;
	        var BIND615 = null;
	        var COMMA617 = null;
	        var DOLLAR618 = null;
	        var BIND620 = null;
	        var k = null;
	        var list_k=null;
	         var p_VarName614 = null;
	         var p_ExprSingle616 = null;
	         var p_VarName619 = null;
	         var p_ExprSingle621 = null;
	         var p_ExprSingle622 = null;
	         var p_ExprSingle623 = null;

	        var DOLLAR613_tree=null;
	        var BIND615_tree=null;
	        var COMMA617_tree=null;
	        var DOLLAR618_tree=null;
	        var BIND620_tree=null;
	        var k_tree=null;

	        try {
	            // XQueryParser.g:1568:9: (k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true] )
	            // XQueryParser.g:1568:11: k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,COPY,XQueryParser.FOLLOW_COPY_in_p_TransformExpr13568); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            DOLLAR613=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TransformExpr13570); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR613_tree = this.adaptor.create(DOLLAR613);
	            this.adaptor.addChild(root_0, DOLLAR613_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TransformExpr13572);
	            p_VarName614=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName614.getTree());
	            BIND615=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_TransformExpr13574); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            BIND615_tree = this.adaptor.create(BIND615);
	            this.adaptor.addChild(root_0, BIND615_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TransformExpr13576);
	            p_ExprSingle616=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle616.getTree());
	            // XQueryParser.g:1568:60: ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )*
	            loop188:
	            do {
	                var alt188=2;
	                var LA188_0 = this.input.LA(1);

	                if ( (LA188_0==COMMA) ) {
	                    alt188=1;
	                }


	                switch (alt188) {
	                case 1 :
	                    // XQueryParser.g:1568:61: COMMA DOLLAR p_VarName BIND p_ExprSingle[true]
	                    COMMA617=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_TransformExpr13580); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COMMA617_tree = this.adaptor.create(COMMA617);
	                    this.adaptor.addChild(root_0, COMMA617_tree);
	                    }
	                    DOLLAR618=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TransformExpr13582); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR618_tree = this.adaptor.create(DOLLAR618);
	                    this.adaptor.addChild(root_0, DOLLAR618_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TransformExpr13584);
	                    p_VarName619=this.p_VarName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName619.getTree());
	                    BIND620=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_TransformExpr13586); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    BIND620_tree = this.adaptor.create(BIND620);
	                    this.adaptor.addChild(root_0, BIND620_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TransformExpr13588);
	                    p_ExprSingle621=this.p_ExprSingle(true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle621.getTree());


	                    break;

	                default :
	                    break loop188;
	                }
	            } while (true);

	            k=this.match(this.input,MODIFY,XQueryParser.FOLLOW_MODIFY_in_p_TransformExpr13595); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TransformExpr13597);
	            p_ExprSingle622=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle622.getTree());
	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_TransformExpr13602); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TransformExpr13604);
	            p_ExprSingle623=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle623.getTree());
	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    pm_FTOptionDecl_return: (function() {
	        XQueryParser.pm_FTOptionDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.pm_FTOptionDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1578:1: pm_FTOptionDecl : k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON ;
	    // $ANTLR start "pm_FTOptionDecl"
	    pm_FTOptionDecl: function() {
	        var retval = new XQueryParser.pm_FTOptionDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var SEMICOLON625 = null;
	        var k = null;
	        var list_k=null;
	         var p_FTMatchOptions624 = null;

	        var SEMICOLON625_tree=null;
	        var k_tree=null;

	        try {
	            // XQueryParser.g:1579:9: (k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON )
	            // XQueryParser.g:1579:11: k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_FTOptionDecl13642); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            k=this.match(this.input,FT_OPTION,XQueryParser.FOLLOW_FT_OPTION_in_pm_FTOptionDecl13646); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            this.pushFollow(XQueryParser.FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl13648);
	            p_FTMatchOptions624=this.p_FTMatchOptions();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMatchOptions624.getTree());
	            SEMICOLON625=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_FTOptionDecl13650); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON625_tree = this.adaptor.create(SEMICOLON625);
	            this.adaptor.addChild(root_0, SEMICOLON625_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTScoreVar_return: (function() {
	        XQueryParser.p_FTScoreVar_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTScoreVar_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1583:1: p_FTScoreVar : ks= SCORE DOLLAR p_VarName ;
	    // $ANTLR start "p_FTScoreVar"
	    p_FTScoreVar: function() {
	        var retval = new XQueryParser.p_FTScoreVar_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ks = null;
	        var DOLLAR626 = null;
	         var p_VarName627 = null;

	        var ks_tree=null;
	        var DOLLAR626_tree=null;

	        try {
	            // XQueryParser.g:1584:9: (ks= SCORE DOLLAR p_VarName )
	            // XQueryParser.g:1584:11: ks= SCORE DOLLAR p_VarName
	            root_0 = this.adaptor.nil();

	            ks=this.match(this.input,SCORE,XQueryParser.FOLLOW_SCORE_in_p_FTScoreVar13680); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            ks_tree = this.adaptor.create(ks);
	            this.adaptor.addChild(root_0, ks_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(ks);
	            }
	            DOLLAR626=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_FTScoreVar13684); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR626_tree = this.adaptor.create(DOLLAR626);
	            this.adaptor.addChild(root_0, DOLLAR626_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_FTScoreVar13686);
	            p_VarName627=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName627.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTContainsExpr_return: (function() {
	        XQueryParser.p_FTContainsExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTContainsExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1588:1: p_FTContainsExpr : p_RangeExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? ;
	    // $ANTLR start "p_FTContainsExpr"
	    p_FTContainsExpr: function() {
	        var retval = new XQueryParser.p_FTContainsExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_RangeExpr628 = null;
	         var p_FTSelection629 = null;
	         var p_FTIgnoreOption630 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1589:9: ( p_RangeExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? )
	            // XQueryParser.g:1589:11: p_RangeExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_RangeExpr_in_p_FTContainsExpr13712);
	            p_RangeExpr628=this.p_RangeExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RangeExpr628.getTree());
	            // XQueryParser.g:1589:23: (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
	            var alt190=2;
	            var LA190_0 = this.input.LA(1);

	            if ( (LA190_0==CONTAINS) ) {
	                alt190=1;
	            }
	            switch (alt190) {
	                case 1 :
	                    // XQueryParser.g:1589:25: k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )?
	                    k=this.match(this.input,CONTAINS,XQueryParser.FOLLOW_CONTAINS_in_p_FTContainsExpr13718); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,TEXT,XQueryParser.FOLLOW_TEXT_in_p_FTContainsExpr13722); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(list_k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTSelection_in_p_FTContainsExpr13726);
	                    p_FTSelection629=this.p_FTSelection();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTSelection629.getTree());
	                    // XQueryParser.g:1589:74: ( p_FTIgnoreOption )?
	                    var alt189=2;
	                    var LA189_0 = this.input.LA(1);

	                    if ( (LA189_0==WITHOUT) ) {
	                        alt189=1;
	                    }
	                    switch (alt189) {
	                        case 1 :
	                            // XQueryParser.g:1589:74: p_FTIgnoreOption
	                            this.pushFollow(XQueryParser.FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr13728);
	                            p_FTIgnoreOption630=this.p_FTIgnoreOption();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTIgnoreOption630.getTree());


	                            break;

	                    }



	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTSelection_return: (function() {
	        XQueryParser.p_FTSelection_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTSelection_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1593:1: p_FTSelection : p_FTOr ( p_FTPosFilter )* ;
	    // $ANTLR start "p_FTSelection"
	    p_FTSelection: function() {
	        var retval = new XQueryParser.p_FTSelection_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_FTOr631 = null;
	         var p_FTPosFilter632 = null;


	        try {
	            // XQueryParser.g:1594:9: ( p_FTOr ( p_FTPosFilter )* )
	            // XQueryParser.g:1594:11: p_FTOr ( p_FTPosFilter )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_FTOr_in_p_FTSelection13758);
	            p_FTOr631=this.p_FTOr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTOr631.getTree());
	            // XQueryParser.g:1594:18: ( p_FTPosFilter )*
	            loop191:
	            do {
	                var alt191=2;
	                var LA191_0 = this.input.LA(1);

	                if ( (LA191_0==AT||LA191_0==ORDERED||LA191_0==WINDOW||(LA191_0>=DIFFERENT && LA191_0<=ENTIRE)||LA191_0==SAME) ) {
	                    alt191=1;
	                }


	                switch (alt191) {
	                case 1 :
	                    // XQueryParser.g:1594:18: p_FTPosFilter
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTPosFilter_in_p_FTSelection13760);
	                    p_FTPosFilter632=this.p_FTPosFilter();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTPosFilter632.getTree());


	                    break;

	                default :
	                    break loop191;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTWeight_return: (function() {
	        XQueryParser.p_FTWeight_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTWeight_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1598:1: p_FTWeight : kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET ;
	    // $ANTLR start "p_FTWeight"
	    p_FTWeight: function() {
	        var retval = new XQueryParser.p_FTWeight_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var kw = null;
	        var LBRACKET633 = null;
	        var RBRACKET635 = null;
	         var p_Expr634 = null;

	        var kw_tree=null;
	        var LBRACKET633_tree=null;
	        var RBRACKET635_tree=null;

	        try {
	            // XQueryParser.g:1599:9: (kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET )
	            // XQueryParser.g:1599:11: kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET
	            root_0 = this.adaptor.nil();

	            kw=this.match(this.input,WEIGHT,XQueryParser.FOLLOW_WEIGHT_in_p_FTWeight13789); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            kw_tree = this.adaptor.create(kw);
	            this.adaptor.addChild(root_0, kw_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(kw);
	            }
	            LBRACKET633=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_FTWeight13793); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET633_tree = this.adaptor.create(LBRACKET633);
	            this.adaptor.addChild(root_0, LBRACKET633_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_FTWeight13795);
	            p_Expr634=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr634.getTree());
	            RBRACKET635=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_FTWeight13798); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET635_tree = this.adaptor.create(RBRACKET635);
	            this.adaptor.addChild(root_0, RBRACKET635_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTOr_return: (function() {
	        XQueryParser.p_FTOr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTOr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1603:1: p_FTOr : p_FTAnd (ko= FTOR p_FTAnd )* ;
	    // $ANTLR start "p_FTOr"
	    p_FTOr: function() {
	        var retval = new XQueryParser.p_FTOr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ko = null;
	         var p_FTAnd636 = null;
	         var p_FTAnd637 = null;

	        var ko_tree=null;

	        try {
	            // XQueryParser.g:1604:9: ( p_FTAnd (ko= FTOR p_FTAnd )* )
	            // XQueryParser.g:1604:11: p_FTAnd (ko= FTOR p_FTAnd )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_FTAnd_in_p_FTOr13824);
	            p_FTAnd636=this.p_FTAnd();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTAnd636.getTree());
	            // XQueryParser.g:1604:19: (ko= FTOR p_FTAnd )*
	            loop192:
	            do {
	                var alt192=2;
	                var LA192_0 = this.input.LA(1);

	                if ( (LA192_0==FTOR) ) {
	                    alt192=1;
	                }


	                switch (alt192) {
	                case 1 :
	                    // XQueryParser.g:1604:21: ko= FTOR p_FTAnd
	                    ko=this.match(this.input,FTOR,XQueryParser.FOLLOW_FTOR_in_p_FTOr13830); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ko_tree = this.adaptor.create(ko);
	                    this.adaptor.addChild(root_0, ko_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(ko);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTAnd_in_p_FTOr13834);
	                    p_FTAnd637=this.p_FTAnd();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTAnd637.getTree());


	                    break;

	                default :
	                    break loop192;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTAnd_return: (function() {
	        XQueryParser.p_FTAnd_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTAnd_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1608:1: p_FTAnd : p_FTMildNot (ka= FTAND p_FTMildNot )* ;
	    // $ANTLR start "p_FTAnd"
	    p_FTAnd: function() {
	        var retval = new XQueryParser.p_FTAnd_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ka = null;
	         var p_FTMildNot638 = null;
	         var p_FTMildNot639 = null;

	        var ka_tree=null;

	        try {
	            // XQueryParser.g:1609:9: ( p_FTMildNot (ka= FTAND p_FTMildNot )* )
	            // XQueryParser.g:1609:11: p_FTMildNot (ka= FTAND p_FTMildNot )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_FTMildNot_in_p_FTAnd13863);
	            p_FTMildNot638=this.p_FTMildNot();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMildNot638.getTree());
	            // XQueryParser.g:1609:23: (ka= FTAND p_FTMildNot )*
	            loop193:
	            do {
	                var alt193=2;
	                var LA193_0 = this.input.LA(1);

	                if ( (LA193_0==FTAND) ) {
	                    alt193=1;
	                }


	                switch (alt193) {
	                case 1 :
	                    // XQueryParser.g:1609:25: ka= FTAND p_FTMildNot
	                    ka=this.match(this.input,FTAND,XQueryParser.FOLLOW_FTAND_in_p_FTAnd13869); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ka_tree = this.adaptor.create(ka);
	                    this.adaptor.addChild(root_0, ka_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(ka);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTMildNot_in_p_FTAnd13873);
	                    p_FTMildNot639=this.p_FTMildNot();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMildNot639.getTree());


	                    break;

	                default :
	                    break loop193;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTMildNot_return: (function() {
	        XQueryParser.p_FTMildNot_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTMildNot_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1613:1: p_FTMildNot : p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* ;
	    // $ANTLR start "p_FTMildNot"
	    p_FTMildNot: function() {
	        var retval = new XQueryParser.p_FTMildNot_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_FTUnaryNot640 = null;
	         var p_FTUnaryNot641 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1614:9: ( p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* )
	            // XQueryParser.g:1614:11: p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )*
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_FTUnaryNot_in_p_FTMildNot13902);
	            p_FTUnaryNot640=this.p_FTUnaryNot();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTUnaryNot640.getTree());
	            // XQueryParser.g:1614:24: (k+= NOT k+= IN p_FTUnaryNot )*
	            loop194:
	            do {
	                var alt194=2;
	                var LA194_0 = this.input.LA(1);

	                if ( (LA194_0==NOT) ) {
	                    alt194=1;
	                }


	                switch (alt194) {
	                case 1 :
	                    // XQueryParser.g:1614:26: k+= NOT k+= IN p_FTUnaryNot
	                    k=this.match(this.input,NOT,XQueryParser.FOLLOW_NOT_in_p_FTMildNot13908); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_FTMildNot13912); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    if ( this.state.backtracking===0 ) {
	                      this.ak(list_k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTUnaryNot_in_p_FTMildNot13916);
	                    p_FTUnaryNot641=this.p_FTUnaryNot();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTUnaryNot641.getTree());


	                    break;

	                default :
	                    break loop194;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTUnaryNot_return: (function() {
	        XQueryParser.p_FTUnaryNot_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTUnaryNot_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1618:1: p_FTUnaryNot : (kn= FTNOT )? p_FTPrimaryWithOptions ;
	    // $ANTLR start "p_FTUnaryNot"
	    p_FTUnaryNot: function() {
	        var retval = new XQueryParser.p_FTUnaryNot_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var kn = null;
	         var p_FTPrimaryWithOptions642 = null;

	        var kn_tree=null;

	        try {
	            // XQueryParser.g:1619:9: ( (kn= FTNOT )? p_FTPrimaryWithOptions )
	            // XQueryParser.g:1619:11: (kn= FTNOT )? p_FTPrimaryWithOptions
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1619:11: (kn= FTNOT )?
	            var alt195=2;
	            var LA195_0 = this.input.LA(1);

	            if ( (LA195_0==FTNOT) ) {
	                alt195=1;
	            }
	            switch (alt195) {
	                case 1 :
	                    // XQueryParser.g:1619:13: kn= FTNOT
	                    kn=this.match(this.input,FTNOT,XQueryParser.FOLLOW_FTNOT_in_p_FTUnaryNot13949); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    kn_tree = this.adaptor.create(kn);
	                    this.adaptor.addChild(root_0, kn_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(kn);
	                    }


	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot13956);
	            p_FTPrimaryWithOptions642=this.p_FTPrimaryWithOptions();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTPrimaryWithOptions642.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTPrimaryWithOptions_return: (function() {
	        XQueryParser.p_FTPrimaryWithOptions_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTPrimaryWithOptions_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1623:1: p_FTPrimaryWithOptions : p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? ;
	    // $ANTLR start "p_FTPrimaryWithOptions"
	    p_FTPrimaryWithOptions: function() {
	        var retval = new XQueryParser.p_FTPrimaryWithOptions_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_FTPrimary643 = null;
	         var p_FTMatchOptions644 = null;
	         var p_FTWeight645 = null;


	        try {
	            // XQueryParser.g:1624:9: ( p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? )
	            // XQueryParser.g:1624:11: p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions13982);
	            p_FTPrimary643=this.p_FTPrimary();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTPrimary643.getTree());
	            // XQueryParser.g:1624:23: ( p_FTMatchOptions )?
	            var alt196=2;
	            var LA196_0 = this.input.LA(1);

	            if ( (LA196_0==USING) ) {
	                alt196=1;
	            }
	            switch (alt196) {
	                case 1 :
	                    // XQueryParser.g:1624:23: p_FTMatchOptions
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions13984);
	                    p_FTMatchOptions644=this.p_FTMatchOptions();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMatchOptions644.getTree());


	                    break;

	            }

	            // XQueryParser.g:1624:41: ( p_FTWeight )?
	            var alt197=2;
	            var LA197_0 = this.input.LA(1);

	            if ( (LA197_0==WEIGHT) ) {
	                alt197=1;
	            }
	            switch (alt197) {
	                case 1 :
	                    // XQueryParser.g:1624:41: p_FTWeight
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions13987);
	                    p_FTWeight645=this.p_FTWeight();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWeight645.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTPrimary_return: (function() {
	        XQueryParser.p_FTPrimary_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTPrimary_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1631:1: p_FTPrimary : ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) | p_FTExtensionSelection );
	    // $ANTLR start "p_FTPrimary"
	    p_FTPrimary: function() {
	        var retval = new XQueryParser.p_FTPrimary_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LPAREN648 = null;
	        var RPAREN650 = null;
	         var p_FTWords646 = null;
	         var p_FTTimes647 = null;
	         var p_FTSelection649 = null;
	         var p_FTExtensionSelection651 = null;

	        var LPAREN648_tree=null;
	        var RPAREN650_tree=null;

	        try {
	            // XQueryParser.g:1632:9: ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) | p_FTExtensionSelection )
	            var alt199=3;
	            switch ( this.input.LA(1) ) {
	            case LBRACKET:
	            case APOS:
	            case QUOT:
	                alt199=1;
	                break;
	            case LPAREN:
	                alt199=2;
	                break;
	            case L_Pragma:
	                alt199=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 199, 0, this.input);

	                throw nvae;
	            }

	            switch (alt199) {
	                case 1 :
	                    // XQueryParser.g:1632:11: ( p_FTWords ( p_FTTimes )? )
	                    root_0 = this.adaptor.nil();

	                    // XQueryParser.g:1632:11: ( p_FTWords ( p_FTTimes )? )
	                    // XQueryParser.g:1632:12: p_FTWords ( p_FTTimes )?
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTWords_in_p_FTPrimary14018);
	                    p_FTWords646=this.p_FTWords();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWords646.getTree());
	                    // XQueryParser.g:1632:22: ( p_FTTimes )?
	                    var alt198=2;
	                    var LA198_0 = this.input.LA(1);

	                    if ( (LA198_0==OCCURS) ) {
	                        alt198=1;
	                    }
	                    switch (alt198) {
	                        case 1 :
	                            // XQueryParser.g:1632:22: p_FTTimes
	                            this.pushFollow(XQueryParser.FOLLOW_p_FTTimes_in_p_FTPrimary14020);
	                            p_FTTimes647=this.p_FTTimes();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTTimes647.getTree());


	                            break;

	                    }






	                    break;
	                case 2 :
	                    // XQueryParser.g:1633:11: ( LPAREN p_FTSelection RPAREN )
	                    root_0 = this.adaptor.nil();

	                    // XQueryParser.g:1633:11: ( LPAREN p_FTSelection RPAREN )
	                    // XQueryParser.g:1633:12: LPAREN p_FTSelection RPAREN
	                    LPAREN648=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_FTPrimary14035); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    LPAREN648_tree = this.adaptor.create(LPAREN648);
	                    this.adaptor.addChild(root_0, LPAREN648_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTSelection_in_p_FTPrimary14037);
	                    p_FTSelection649=this.p_FTSelection();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTSelection649.getTree());
	                    RPAREN650=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_FTPrimary14039); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    RPAREN650_tree = this.adaptor.create(RPAREN650);
	                    this.adaptor.addChild(root_0, RPAREN650_tree);
	                    }





	                    break;
	                case 3 :
	                    // XQueryParser.g:1634:11: p_FTExtensionSelection
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTExtensionSelection_in_p_FTPrimary14052);
	                    p_FTExtensionSelection651=this.p_FTExtensionSelection();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTExtensionSelection651.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTWords_return: (function() {
	        XQueryParser.p_FTWords_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTWords_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1638:1: p_FTWords : p_FTWordsValue ( p_FTAnyallOption )? ;
	    // $ANTLR start "p_FTWords"
	    p_FTWords: function() {
	        var retval = new XQueryParser.p_FTWords_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_FTWordsValue652 = null;
	         var p_FTAnyallOption653 = null;


	        try {
	            // XQueryParser.g:1639:9: ( p_FTWordsValue ( p_FTAnyallOption )? )
	            // XQueryParser.g:1639:11: p_FTWordsValue ( p_FTAnyallOption )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_FTWordsValue_in_p_FTWords14078);
	            p_FTWordsValue652=this.p_FTWordsValue();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWordsValue652.getTree());
	            // XQueryParser.g:1639:26: ( p_FTAnyallOption )?
	            var alt200=2;
	            var LA200_0 = this.input.LA(1);

	            if ( ((LA200_0>=ALL && LA200_0<=ANY)||LA200_0==PHRASE) ) {
	                alt200=1;
	            }
	            switch (alt200) {
	                case 1 :
	                    // XQueryParser.g:1639:26: p_FTAnyallOption
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTAnyallOption_in_p_FTWords14080);
	                    p_FTAnyallOption653=this.p_FTAnyallOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTAnyallOption653.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTWordsValue_return: (function() {
	        XQueryParser.p_FTWordsValue_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTWordsValue_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1643:1: p_FTWordsValue : ( p_StringLiteral | ( LBRACKET p_Expr[true,true] RBRACKET ) );
	    // $ANTLR start "p_FTWordsValue"
	    p_FTWordsValue: function() {
	        var retval = new XQueryParser.p_FTWordsValue_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LBRACKET655 = null;
	        var RBRACKET657 = null;
	         var p_StringLiteral654 = null;
	         var p_Expr656 = null;

	        var LBRACKET655_tree=null;
	        var RBRACKET657_tree=null;

	        try {
	            // XQueryParser.g:1644:9: ( p_StringLiteral | ( LBRACKET p_Expr[true,true] RBRACKET ) )
	            var alt201=2;
	            var LA201_0 = this.input.LA(1);

	            if ( ((LA201_0>=APOS && LA201_0<=QUOT)) ) {
	                alt201=1;
	            }
	            else if ( (LA201_0==LBRACKET) ) {
	                alt201=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 201, 0, this.input);

	                throw nvae;
	            }
	            switch (alt201) {
	                case 1 :
	                    // XQueryParser.g:1644:11: p_StringLiteral
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTWordsValue14107);
	                    p_StringLiteral654=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral654.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1645:11: ( LBRACKET p_Expr[true,true] RBRACKET )
	                    root_0 = this.adaptor.nil();

	                    // XQueryParser.g:1645:11: ( LBRACKET p_Expr[true,true] RBRACKET )
	                    // XQueryParser.g:1645:12: LBRACKET p_Expr[true,true] RBRACKET
	                    LBRACKET655=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_FTWordsValue14120); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    LBRACKET655_tree = this.adaptor.create(LBRACKET655);
	                    this.adaptor.addChild(root_0, LBRACKET655_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_FTWordsValue14122);
	                    p_Expr656=this.p_Expr(true, true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr656.getTree());
	                    RBRACKET657=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_FTWordsValue14125); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    RBRACKET657_tree = this.adaptor.create(RBRACKET657);
	                    this.adaptor.addChild(root_0, RBRACKET657_tree);
	                    }





	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTExtensionSelection_return: (function() {
	        XQueryParser.p_FTExtensionSelection_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTExtensionSelection_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1649:1: p_FTExtensionSelection : ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET ;
	    // $ANTLR start "p_FTExtensionSelection"
	    p_FTExtensionSelection: function() {
	        var retval = new XQueryParser.p_FTExtensionSelection_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_Pragma658 = null;
	        var LBRACKET659 = null;
	        var RBRACKET661 = null;
	         var p_FTSelection660 = null;

	        var L_Pragma658_tree=null;
	        var LBRACKET659_tree=null;
	        var RBRACKET661_tree=null;

	        try {
	            // XQueryParser.g:1650:9: ( ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET )
	            // XQueryParser.g:1650:11: ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1650:11: ( L_Pragma )+
	            var cnt202=0;
	            loop202:
	            do {
	                var alt202=2;
	                var LA202_0 = this.input.LA(1);

	                if ( (LA202_0==L_Pragma) ) {
	                    alt202=1;
	                }


	                switch (alt202) {
	                case 1 :
	                    // XQueryParser.g:1650:11: L_Pragma
	                    L_Pragma658=this.match(this.input,L_Pragma,XQueryParser.FOLLOW_L_Pragma_in_p_FTExtensionSelection14152); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    L_Pragma658_tree = this.adaptor.create(L_Pragma658);
	                    this.adaptor.addChild(root_0, L_Pragma658_tree);
	                    }


	                    break;

	                default :
	                    if ( cnt202 >= 1 ) {
	                        break loop202;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(202, this.input);
	                        throw eee;
	                }
	                cnt202++;
	            } while (true);

	            LBRACKET659=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_FTExtensionSelection14155); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET659_tree = this.adaptor.create(LBRACKET659);
	            this.adaptor.addChild(root_0, LBRACKET659_tree);
	            }
	            // XQueryParser.g:1650:30: ( p_FTSelection )?
	            var alt203=2;
	            var LA203_0 = this.input.LA(1);

	            if ( (LA203_0==FTNOT||LA203_0==LPAREN||LA203_0==LBRACKET||(LA203_0>=APOS && LA203_0<=QUOT)||LA203_0==L_Pragma) ) {
	                alt203=1;
	            }
	            switch (alt203) {
	                case 1 :
	                    // XQueryParser.g:1650:30: p_FTSelection
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTSelection_in_p_FTExtensionSelection14157);
	                    p_FTSelection660=this.p_FTSelection();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTSelection660.getTree());


	                    break;

	            }

	            RBRACKET661=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_FTExtensionSelection14160); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET661_tree = this.adaptor.create(RBRACKET661);
	            this.adaptor.addChild(root_0, RBRACKET661_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTAnyallOption_return: (function() {
	        XQueryParser.p_FTAnyallOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTAnyallOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1654:1: p_FTAnyallOption : ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE ) ;
	    // $ANTLR start "p_FTAnyallOption"
	    p_FTAnyallOption: function() {
	        var retval = new XQueryParser.p_FTAnyallOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var WORDS662 = null;
	        var k = null;
	        var list_k=null;

	        var WORDS662_tree=null;
	        var k_tree=null;

	        try {
	            // XQueryParser.g:1655:9: ( ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE ) )
	            // XQueryParser.g:1655:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1655:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE )
	            var alt206=3;
	            switch ( this.input.LA(1) ) {
	            case ANY:
	                alt206=1;
	                break;
	            case ALL:
	                alt206=2;
	                break;
	            case PHRASE:
	                alt206=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 206, 0, this.input);

	                throw nvae;
	            }

	            switch (alt206) {
	                case 1 :
	                    // XQueryParser.g:1655:13: (k+= ANY (k+= WORD )? )
	                    // XQueryParser.g:1655:13: (k+= ANY (k+= WORD )? )
	                    // XQueryParser.g:1655:14: k+= ANY (k+= WORD )?
	                    k=this.match(this.input,ANY,XQueryParser.FOLLOW_ANY_in_p_FTAnyallOption14191); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    // XQueryParser.g:1655:22: (k+= WORD )?
	                    var alt204=2;
	                    var LA204_0 = this.input.LA(1);

	                    if ( (LA204_0==WORD) ) {
	                        alt204=1;
	                    }
	                    switch (alt204) {
	                        case 1 :
	                            // XQueryParser.g:1655:22: k+= WORD
	                            k=this.match(this.input,WORD,XQueryParser.FOLLOW_WORD_in_p_FTAnyallOption14195); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            k_tree = this.adaptor.create(k);
	                            this.adaptor.addChild(root_0, k_tree);
	                            }
	                            if (org.antlr.lang.isNull(list_k)) list_k = [];
	                            list_k.push(k);



	                            break;

	                    }






	                    break;
	                case 2 :
	                    // XQueryParser.g:1655:33: (k+= ALL ( WORDS )? )
	                    // XQueryParser.g:1655:33: (k+= ALL ( WORDS )? )
	                    // XQueryParser.g:1655:34: k+= ALL ( WORDS )?
	                    k=this.match(this.input,ALL,XQueryParser.FOLLOW_ALL_in_p_FTAnyallOption14204); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    // XQueryParser.g:1655:41: ( WORDS )?
	                    var alt205=2;
	                    var LA205_0 = this.input.LA(1);

	                    if ( (LA205_0==WORDS) ) {
	                        alt205=1;
	                    }
	                    switch (alt205) {
	                        case 1 :
	                            // XQueryParser.g:1655:41: WORDS
	                            WORDS662=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTAnyallOption14206); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            WORDS662_tree = this.adaptor.create(WORDS662);
	                            this.adaptor.addChild(root_0, WORDS662_tree);
	                            }


	                            break;

	                    }






	                    break;
	                case 3 :
	                    // XQueryParser.g:1655:51: k+= PHRASE
	                    k=this.match(this.input,PHRASE,XQueryParser.FOLLOW_PHRASE_in_p_FTAnyallOption14214); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTTimes_return: (function() {
	        XQueryParser.p_FTTimes_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTTimes_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1659:1: p_FTTimes : k+= OCCURS p_FTRange k+= TIMES ;
	    // $ANTLR start "p_FTTimes"
	    p_FTTimes: function() {
	        var retval = new XQueryParser.p_FTTimes_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_FTRange663 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1660:9: (k+= OCCURS p_FTRange k+= TIMES )
	            // XQueryParser.g:1660:11: k+= OCCURS p_FTRange k+= TIMES
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,OCCURS,XQueryParser.FOLLOW_OCCURS_in_p_FTTimes14246); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            this.pushFollow(XQueryParser.FOLLOW_p_FTRange_in_p_FTTimes14248);
	            p_FTRange663=this.p_FTRange();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTRange663.getTree());
	            k=this.match(this.input,TIMES,XQueryParser.FOLLOW_TIMES_in_p_FTTimes14252); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTRange_return: (function() {
	        XQueryParser.p_FTRange_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTRange_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1664:1: p_FTRange : ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) ;
	    // $ANTLR start "p_FTRange"
	    p_FTRange: function() {
	        var retval = new XQueryParser.p_FTRange_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_AdditiveExpr664 = null;
	         var p_AdditiveExpr665 = null;
	         var p_AdditiveExpr666 = null;
	         var p_AdditiveExpr667 = null;
	         var p_AdditiveExpr668 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1665:9: ( ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) )
	            // XQueryParser.g:1665:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1665:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
	            var alt207=4;
	            switch ( this.input.LA(1) ) {
	            case EXACTLY:
	                alt207=1;
	                break;
	            case AT:
	                var LA207_2 = this.input.LA(2);

	                if ( (LA207_2==LEAST) ) {
	                    alt207=2;
	                }
	                else if ( (LA207_2==MOST) ) {
	                    alt207=3;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 207, 2, this.input);

	                    throw nvae;
	                }
	                break;
	            case FROM:
	                alt207=4;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 207, 0, this.input);

	                throw nvae;
	            }

	            switch (alt207) {
	                case 1 :
	                    // XQueryParser.g:1665:13: (k+= EXACTLY p_AdditiveExpr )
	                    // XQueryParser.g:1665:13: (k+= EXACTLY p_AdditiveExpr )
	                    // XQueryParser.g:1665:14: k+= EXACTLY p_AdditiveExpr
	                    k=this.match(this.input,EXACTLY,XQueryParser.FOLLOW_EXACTLY_in_p_FTRange14285); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14287);
	                    p_AdditiveExpr664=this.p_AdditiveExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr664.getTree());





	                    break;
	                case 2 :
	                    // XQueryParser.g:1666:13: (k+= AT k+= LEAST p_AdditiveExpr )
	                    // XQueryParser.g:1666:13: (k+= AT k+= LEAST p_AdditiveExpr )
	                    // XQueryParser.g:1666:14: k+= AT k+= LEAST p_AdditiveExpr
	                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTRange14305); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,LEAST,XQueryParser.FOLLOW_LEAST_in_p_FTRange14309); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14311);
	                    p_AdditiveExpr665=this.p_AdditiveExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr665.getTree());





	                    break;
	                case 3 :
	                    // XQueryParser.g:1667:13: (k+= AT k+= MOST p_AdditiveExpr )
	                    // XQueryParser.g:1667:13: (k+= AT k+= MOST p_AdditiveExpr )
	                    // XQueryParser.g:1667:14: k+= AT k+= MOST p_AdditiveExpr
	                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTRange14329); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,MOST,XQueryParser.FOLLOW_MOST_in_p_FTRange14333); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14335);
	                    p_AdditiveExpr666=this.p_AdditiveExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr666.getTree());





	                    break;
	                case 4 :
	                    // XQueryParser.g:1668:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
	                    // XQueryParser.g:1668:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
	                    // XQueryParser.g:1668:14: k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr
	                    k=this.match(this.input,FROM,XQueryParser.FOLLOW_FROM_in_p_FTRange14353); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14355);
	                    p_AdditiveExpr667=this.p_AdditiveExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr667.getTree());
	                    k=this.match(this.input,TO,XQueryParser.FOLLOW_TO_in_p_FTRange14359); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14361);
	                    p_AdditiveExpr668=this.p_AdditiveExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr668.getTree());





	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTPosFilter_return: (function() {
	        XQueryParser.p_FTPosFilter_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTPosFilter_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1672:1: p_FTPosFilter : ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent );
	    // $ANTLR start "p_FTPosFilter"
	    p_FTPosFilter: function() {
	        var retval = new XQueryParser.p_FTPosFilter_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_FTOrder669 = null;
	         var p_FTWindow670 = null;
	         var p_FTDistance671 = null;
	         var p_FTScope672 = null;
	         var p_FTContent673 = null;


	        try {
	            // XQueryParser.g:1673:9: ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent )
	            var alt208=5;
	            switch ( this.input.LA(1) ) {
	            case ORDERED:
	                alt208=1;
	                break;
	            case WINDOW:
	                alt208=2;
	                break;
	            case DISTANCE:
	                alt208=3;
	                break;
	            case DIFFERENT:
	            case SAME:
	                alt208=4;
	                break;
	            case AT:
	            case ENTIRE:
	                alt208=5;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 208, 0, this.input);

	                throw nvae;
	            }

	            switch (alt208) {
	                case 1 :
	                    // XQueryParser.g:1673:11: p_FTOrder
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTOrder_in_p_FTPosFilter14392);
	                    p_FTOrder669=this.p_FTOrder();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTOrder669.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1673:23: p_FTWindow
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTWindow_in_p_FTPosFilter14396);
	                    p_FTWindow670=this.p_FTWindow();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWindow670.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:1673:36: p_FTDistance
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTDistance_in_p_FTPosFilter14400);
	                    p_FTDistance671=this.p_FTDistance();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTDistance671.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:1673:51: p_FTScope
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTScope_in_p_FTPosFilter14404);
	                    p_FTScope672=this.p_FTScope();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTScope672.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:1673:63: p_FTContent
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTContent_in_p_FTPosFilter14408);
	                    p_FTContent673=this.p_FTContent();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTContent673.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTOrder_return: (function() {
	        XQueryParser.p_FTOrder_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTOrder_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1677:1: p_FTOrder : ko= ORDERED ;
	    // $ANTLR start "p_FTOrder"
	    p_FTOrder: function() {
	        var retval = new XQueryParser.p_FTOrder_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ko = null;

	        var ko_tree=null;

	        try {
	            // XQueryParser.g:1678:9: (ko= ORDERED )
	            // XQueryParser.g:1678:11: ko= ORDERED
	            root_0 = this.adaptor.nil();

	            ko=this.match(this.input,ORDERED,XQueryParser.FOLLOW_ORDERED_in_p_FTOrder14436); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            ko_tree = this.adaptor.create(ko);
	            this.adaptor.addChild(root_0, ko_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(ko);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTWindow_return: (function() {
	        XQueryParser.p_FTWindow_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTWindow_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1682:1: p_FTWindow : kw= WINDOW p_AdditiveExpr p_FTUnit ;
	    // $ANTLR start "p_FTWindow"
	    p_FTWindow: function() {
	        var retval = new XQueryParser.p_FTWindow_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var kw = null;
	         var p_AdditiveExpr674 = null;
	         var p_FTUnit675 = null;

	        var kw_tree=null;

	        try {
	            // XQueryParser.g:1683:9: (kw= WINDOW p_AdditiveExpr p_FTUnit )
	            // XQueryParser.g:1683:11: kw= WINDOW p_AdditiveExpr p_FTUnit
	            root_0 = this.adaptor.nil();

	            kw=this.match(this.input,WINDOW,XQueryParser.FOLLOW_WINDOW_in_p_FTWindow14466); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            kw_tree = this.adaptor.create(kw);
	            this.adaptor.addChild(root_0, kw_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(kw);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTWindow14470);
	            p_AdditiveExpr674=this.p_AdditiveExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr674.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_FTUnit_in_p_FTWindow14472);
	            p_FTUnit675=this.p_FTUnit();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTUnit675.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTDistance_return: (function() {
	        XQueryParser.p_FTDistance_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTDistance_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1687:1: p_FTDistance : kd= DISTANCE p_FTRange p_FTUnit ;
	    // $ANTLR start "p_FTDistance"
	    p_FTDistance: function() {
	        var retval = new XQueryParser.p_FTDistance_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var kd = null;
	         var p_FTRange676 = null;
	         var p_FTUnit677 = null;

	        var kd_tree=null;

	        try {
	            // XQueryParser.g:1688:9: (kd= DISTANCE p_FTRange p_FTUnit )
	            // XQueryParser.g:1688:11: kd= DISTANCE p_FTRange p_FTUnit
	            root_0 = this.adaptor.nil();

	            kd=this.match(this.input,DISTANCE,XQueryParser.FOLLOW_DISTANCE_in_p_FTDistance14500); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            kd_tree = this.adaptor.create(kd);
	            this.adaptor.addChild(root_0, kd_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(kd);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_FTRange_in_p_FTDistance14504);
	            p_FTRange676=this.p_FTRange();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTRange676.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_FTUnit_in_p_FTDistance14506);
	            p_FTUnit677=this.p_FTUnit();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTUnit677.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTUnit_return: (function() {
	        XQueryParser.p_FTUnit_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTUnit_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1692:1: p_FTUnit : (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS ) ;
	    // $ANTLR start "p_FTUnit"
	    p_FTUnit: function() {
	        var retval = new XQueryParser.p_FTUnit_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1693:9: ( (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS ) )
	            // XQueryParser.g:1693:11: (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1693:11: (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS )
	            var alt209=3;
	            switch ( this.input.LA(1) ) {
	            case WORDS:
	                alt209=1;
	                break;
	            case SENTENCES:
	                alt209=2;
	                break;
	            case PARAGRAPHS:
	                alt209=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 209, 0, this.input);

	                throw nvae;
	            }

	            switch (alt209) {
	                case 1 :
	                    // XQueryParser.g:1693:13: k+= WORDS
	                    k=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTUnit14536); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:1693:24: k+= SENTENCES
	                    k=this.match(this.input,SENTENCES,XQueryParser.FOLLOW_SENTENCES_in_p_FTUnit14542); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 3 :
	                    // XQueryParser.g:1693:39: k+= PARAGRAPHS
	                    k=this.match(this.input,PARAGRAPHS,XQueryParser.FOLLOW_PARAGRAPHS_in_p_FTUnit14548); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTScope_return: (function() {
	        XQueryParser.p_FTScope_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTScope_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1697:1: p_FTScope : (k+= SAME | k+= DIFFERENT ) p_FTBigUnit ;
	    // $ANTLR start "p_FTScope"
	    p_FTScope: function() {
	        var retval = new XQueryParser.p_FTScope_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_FTBigUnit678 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1698:9: ( (k+= SAME | k+= DIFFERENT ) p_FTBigUnit )
	            // XQueryParser.g:1698:11: (k+= SAME | k+= DIFFERENT ) p_FTBigUnit
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1698:11: (k+= SAME | k+= DIFFERENT )
	            var alt210=2;
	            var LA210_0 = this.input.LA(1);

	            if ( (LA210_0==SAME) ) {
	                alt210=1;
	            }
	            else if ( (LA210_0==DIFFERENT) ) {
	                alt210=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 210, 0, this.input);

	                throw nvae;
	            }
	            switch (alt210) {
	                case 1 :
	                    // XQueryParser.g:1698:12: k+= SAME
	                    k=this.match(this.input,SAME,XQueryParser.FOLLOW_SAME_in_p_FTScope14581); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:1698:22: k+= DIFFERENT
	                    k=this.match(this.input,DIFFERENT,XQueryParser.FOLLOW_DIFFERENT_in_p_FTScope14587); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_FTBigUnit_in_p_FTScope14592);
	            p_FTBigUnit678=this.p_FTBigUnit();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTBigUnit678.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTBigUnit_return: (function() {
	        XQueryParser.p_FTBigUnit_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTBigUnit_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1702:1: p_FTBigUnit : (k+= SENTENCE | k+= PARAGRAPH ) ;
	    // $ANTLR start "p_FTBigUnit"
	    p_FTBigUnit: function() {
	        var retval = new XQueryParser.p_FTBigUnit_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1703:9: ( (k+= SENTENCE | k+= PARAGRAPH ) )
	            // XQueryParser.g:1703:11: (k+= SENTENCE | k+= PARAGRAPH )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1703:11: (k+= SENTENCE | k+= PARAGRAPH )
	            var alt211=2;
	            var LA211_0 = this.input.LA(1);

	            if ( (LA211_0==SENTENCE) ) {
	                alt211=1;
	            }
	            else if ( (LA211_0==PARAGRAPH) ) {
	                alt211=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 211, 0, this.input);

	                throw nvae;
	            }
	            switch (alt211) {
	                case 1 :
	                    // XQueryParser.g:1703:13: k+= SENTENCE
	                    k=this.match(this.input,SENTENCE,XQueryParser.FOLLOW_SENTENCE_in_p_FTBigUnit14622); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:1703:27: k+= PARAGRAPH
	                    k=this.match(this.input,PARAGRAPH,XQueryParser.FOLLOW_PARAGRAPH_in_p_FTBigUnit14628); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTContent_return: (function() {
	        XQueryParser.p_FTContent_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTContent_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1707:1: p_FTContent : ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) ;
	    // $ANTLR start "p_FTContent"
	    p_FTContent: function() {
	        var retval = new XQueryParser.p_FTContent_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1708:9: ( ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) )
	            // XQueryParser.g:1708:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1708:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
	            var alt212=3;
	            var LA212_0 = this.input.LA(1);

	            if ( (LA212_0==AT) ) {
	                var LA212_1 = this.input.LA(2);

	                if ( (LA212_1==START) ) {
	                    alt212=1;
	                }
	                else if ( (LA212_1==END) ) {
	                    alt212=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 212, 1, this.input);

	                    throw nvae;
	                }
	            }
	            else if ( (LA212_0==ENTIRE) ) {
	                alt212=3;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 212, 0, this.input);

	                throw nvae;
	            }
	            switch (alt212) {
	                case 1 :
	                    // XQueryParser.g:1708:13: (k+= AT k+= START )
	                    // XQueryParser.g:1708:13: (k+= AT k+= START )
	                    // XQueryParser.g:1708:14: k+= AT k+= START
	                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTContent14663); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,START,XQueryParser.FOLLOW_START_in_p_FTContent14667); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;
	                case 2 :
	                    // XQueryParser.g:1708:32: (k+= AT k+= END )
	                    // XQueryParser.g:1708:32: (k+= AT k+= END )
	                    // XQueryParser.g:1708:33: k+= AT k+= END
	                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTContent14675); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,END,XQueryParser.FOLLOW_END_in_p_FTContent14679); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;
	                case 3 :
	                    // XQueryParser.g:1708:49: (k+= ENTIRE k+= CONTENT )
	                    // XQueryParser.g:1708:49: (k+= ENTIRE k+= CONTENT )
	                    // XQueryParser.g:1708:50: k+= ENTIRE k+= CONTENT
	                    k=this.match(this.input,ENTIRE,XQueryParser.FOLLOW_ENTIRE_in_p_FTContent14687); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,CONTENT,XQueryParser.FOLLOW_CONTENT_in_p_FTContent14691); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTMatchOptions_return: (function() {
	        XQueryParser.p_FTMatchOptions_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTMatchOptions_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1712:1: p_FTMatchOptions : (ku= USING p_FTMatchOption )+ ;
	    // $ANTLR start "p_FTMatchOptions"
	    p_FTMatchOptions: function() {
	        var retval = new XQueryParser.p_FTMatchOptions_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ku = null;
	         var p_FTMatchOption679 = null;

	        var ku_tree=null;

	        try {
	            // XQueryParser.g:1713:9: ( (ku= USING p_FTMatchOption )+ )
	            // XQueryParser.g:1713:11: (ku= USING p_FTMatchOption )+
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1713:11: (ku= USING p_FTMatchOption )+
	            var cnt213=0;
	            loop213:
	            do {
	                var alt213=2;
	                var LA213_0 = this.input.LA(1);

	                if ( (LA213_0==USING) ) {
	                    alt213=1;
	                }


	                switch (alt213) {
	                case 1 :
	                    // XQueryParser.g:1713:12: ku= USING p_FTMatchOption
	                    ku=this.match(this.input,USING,XQueryParser.FOLLOW_USING_in_p_FTMatchOptions14725); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ku_tree = this.adaptor.create(ku);
	                    this.adaptor.addChild(root_0, ku_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(ku);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTMatchOption_in_p_FTMatchOptions14729);
	                    p_FTMatchOption679=this.p_FTMatchOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMatchOption679.getTree());


	                    break;

	                default :
	                    if ( cnt213 >= 1 ) {
	                        break loop213;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(213, this.input);
	                        throw eee;
	                }
	                cnt213++;
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTMatchOption_return: (function() {
	        XQueryParser.p_FTMatchOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTMatchOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1717:1: p_FTMatchOption : ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption );
	    // $ANTLR start "p_FTMatchOption"
	    p_FTMatchOption: function() {
	        var retval = new XQueryParser.p_FTMatchOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_FTLanguageOption680 = null;
	         var p_FTWildCardOption681 = null;
	         var p_FTThesaurusOption682 = null;
	         var p_FTStemOption683 = null;
	         var p_FTCaseOption684 = null;
	         var p_FTDiacriticsOption685 = null;
	         var p_FTStopWordOption686 = null;
	         var p_FTExtensionOption687 = null;


	        try {
	            // XQueryParser.g:1718:9: ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption )
	            var alt214=8;
	            alt214 = this.dfa214.predict(this.input);
	            switch (alt214) {
	                case 1 :
	                    // XQueryParser.g:1718:11: p_FTLanguageOption
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTLanguageOption_in_p_FTMatchOption14757);
	                    p_FTLanguageOption680=this.p_FTLanguageOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTLanguageOption680.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1719:11: p_FTWildCardOption
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTWildCardOption_in_p_FTMatchOption14769);
	                    p_FTWildCardOption681=this.p_FTWildCardOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWildCardOption681.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:1720:11: p_FTThesaurusOption
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption14781);
	                    p_FTThesaurusOption682=this.p_FTThesaurusOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTThesaurusOption682.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:1721:11: p_FTStemOption
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTStemOption_in_p_FTMatchOption14793);
	                    p_FTStemOption683=this.p_FTStemOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStemOption683.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:1722:11: p_FTCaseOption
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTCaseOption_in_p_FTMatchOption14805);
	                    p_FTCaseOption684=this.p_FTCaseOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTCaseOption684.getTree());


	                    break;
	                case 6 :
	                    // XQueryParser.g:1723:11: p_FTDiacriticsOption
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption14817);
	                    p_FTDiacriticsOption685=this.p_FTDiacriticsOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTDiacriticsOption685.getTree());


	                    break;
	                case 7 :
	                    // XQueryParser.g:1724:11: p_FTStopWordOption
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTStopWordOption_in_p_FTMatchOption14829);
	                    p_FTStopWordOption686=this.p_FTStopWordOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWordOption686.getTree());


	                    break;
	                case 8 :
	                    // XQueryParser.g:1725:11: p_FTExtensionOption
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTExtensionOption_in_p_FTMatchOption14841);
	                    p_FTExtensionOption687=this.p_FTExtensionOption();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTExtensionOption687.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTCaseOption_return: (function() {
	        XQueryParser.p_FTCaseOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTCaseOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1729:1: p_FTCaseOption : ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE ) ;
	    // $ANTLR start "p_FTCaseOption"
	    p_FTCaseOption: function() {
	        var retval = new XQueryParser.p_FTCaseOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1730:9: ( ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE ) )
	            // XQueryParser.g:1730:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1730:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE )
	            var alt215=4;
	            switch ( this.input.LA(1) ) {
	            case CASE:
	                var LA215_1 = this.input.LA(2);

	                if ( (LA215_1==INSENSITIVE) ) {
	                    alt215=1;
	                }
	                else if ( (LA215_1==SENSITIVE) ) {
	                    alt215=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 215, 1, this.input);

	                    throw nvae;
	                }
	                break;
	            case LOWERCASE:
	                alt215=3;
	                break;
	            case UPPERCASE:
	                alt215=4;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 215, 0, this.input);

	                throw nvae;
	            }

	            switch (alt215) {
	                case 1 :
	                    // XQueryParser.g:1730:13: (k+= CASE k+= INSENSITIVE )
	                    // XQueryParser.g:1730:13: (k+= CASE k+= INSENSITIVE )
	                    // XQueryParser.g:1730:14: k+= CASE k+= INSENSITIVE
	                    k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_FTCaseOption14872); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,INSENSITIVE,XQueryParser.FOLLOW_INSENSITIVE_in_p_FTCaseOption14876); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;
	                case 2 :
	                    // XQueryParser.g:1731:13: (k+= CASE k+= SENSITIVE )
	                    // XQueryParser.g:1731:13: (k+= CASE k+= SENSITIVE )
	                    // XQueryParser.g:1731:14: k+= CASE k+= SENSITIVE
	                    k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_FTCaseOption14894); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,SENSITIVE,XQueryParser.FOLLOW_SENSITIVE_in_p_FTCaseOption14898); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;
	                case 3 :
	                    // XQueryParser.g:1732:13: k+= LOWERCASE
	                    k=this.match(this.input,LOWERCASE,XQueryParser.FOLLOW_LOWERCASE_in_p_FTCaseOption14915); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 4 :
	                    // XQueryParser.g:1733:13: k+= UPPERCASE
	                    k=this.match(this.input,UPPERCASE,XQueryParser.FOLLOW_UPPERCASE_in_p_FTCaseOption14931); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTDiacriticsOption_return: (function() {
	        XQueryParser.p_FTDiacriticsOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTDiacriticsOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1737:1: p_FTDiacriticsOption : ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) ;
	    // $ANTLR start "p_FTDiacriticsOption"
	    p_FTDiacriticsOption: function() {
	        var retval = new XQueryParser.p_FTDiacriticsOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1738:9: ( ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) )
	            // XQueryParser.g:1738:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1738:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
	            var alt216=2;
	            var LA216_0 = this.input.LA(1);

	            if ( (LA216_0==DIACRITICS) ) {
	                var LA216_1 = this.input.LA(2);

	                if ( (LA216_1==INSENSITIVE) ) {
	                    alt216=1;
	                }
	                else if ( (LA216_1==SENSITIVE) ) {
	                    alt216=2;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 216, 1, this.input);

	                    throw nvae;
	                }
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 216, 0, this.input);

	                throw nvae;
	            }
	            switch (alt216) {
	                case 1 :
	                    // XQueryParser.g:1738:13: (k+= DIACRITICS k+= INSENSITIVE )
	                    // XQueryParser.g:1738:13: (k+= DIACRITICS k+= INSENSITIVE )
	                    // XQueryParser.g:1738:14: k+= DIACRITICS k+= INSENSITIVE
	                    k=this.match(this.input,DIACRITICS,XQueryParser.FOLLOW_DIACRITICS_in_p_FTDiacriticsOption14966); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,INSENSITIVE,XQueryParser.FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption14970); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;
	                case 2 :
	                    // XQueryParser.g:1739:13: (k+= DIACRITICS k+= SENSITIVE )
	                    // XQueryParser.g:1739:13: (k+= DIACRITICS k+= SENSITIVE )
	                    // XQueryParser.g:1739:14: k+= DIACRITICS k+= SENSITIVE
	                    k=this.match(this.input,DIACRITICS,XQueryParser.FOLLOW_DIACRITICS_in_p_FTDiacriticsOption14988); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,SENSITIVE,XQueryParser.FOLLOW_SENSITIVE_in_p_FTDiacriticsOption14992); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTStemOption_return: (function() {
	        XQueryParser.p_FTStemOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTStemOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1743:1: p_FTStemOption : (k+= STEMMING | (k+= NO k+= STEMMING ) ) ;
	    // $ANTLR start "p_FTStemOption"
	    p_FTStemOption: function() {
	        var retval = new XQueryParser.p_FTStemOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1744:9: ( (k+= STEMMING | (k+= NO k+= STEMMING ) ) )
	            // XQueryParser.g:1744:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1744:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
	            var alt217=2;
	            var LA217_0 = this.input.LA(1);

	            if ( (LA217_0==STEMMING) ) {
	                alt217=1;
	            }
	            else if ( (LA217_0==NO) ) {
	                alt217=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 217, 0, this.input);

	                throw nvae;
	            }
	            switch (alt217) {
	                case 1 :
	                    // XQueryParser.g:1744:13: k+= STEMMING
	                    k=this.match(this.input,STEMMING,XQueryParser.FOLLOW_STEMMING_in_p_FTStemOption15027); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:1744:27: (k+= NO k+= STEMMING )
	                    // XQueryParser.g:1744:27: (k+= NO k+= STEMMING )
	                    // XQueryParser.g:1744:28: k+= NO k+= STEMMING
	                    k=this.match(this.input,NO,XQueryParser.FOLLOW_NO_in_p_FTStemOption15034); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,STEMMING,XQueryParser.FOLLOW_STEMMING_in_p_FTStemOption15038); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTThesaurusOption_return: (function() {
	        XQueryParser.p_FTThesaurusOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTThesaurusOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1748:1: p_FTThesaurusOption : ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) ;
	    // $ANTLR start "p_FTThesaurusOption"
	    p_FTThesaurusOption: function() {
	        var retval = new XQueryParser.p_FTThesaurusOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LPAREN689 = null;
	        var COMMA691 = null;
	        var RPAREN693 = null;
	        var k = null;
	        var list_k=null;
	         var p_FTThesaurusID688 = null;
	         var p_FTThesaurusID690 = null;
	         var p_FTThesaurusID692 = null;

	        var LPAREN689_tree=null;
	        var COMMA691_tree=null;
	        var RPAREN693_tree=null;
	        var k_tree=null;

	        try {
	            // XQueryParser.g:1749:9: ( ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) )
	            // XQueryParser.g:1749:11: ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1749:11: ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
	            var alt221=3;
	            var LA221_0 = this.input.LA(1);

	            if ( (LA221_0==THESAURUS) ) {
	                var LA221_1 = this.input.LA(2);

	                if ( (LA221_1==LPAREN) ) {
	                    alt221=2;
	                }
	                else if ( (LA221_1==AT||LA221_1==DEFAULT) ) {
	                    alt221=1;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 221, 1, this.input);

	                    throw nvae;
	                }
	            }
	            else if ( (LA221_0==NO) ) {
	                alt221=3;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 221, 0, this.input);

	                throw nvae;
	            }
	            switch (alt221) {
	                case 1 :
	                    // XQueryParser.g:1749:13: (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) )
	                    // XQueryParser.g:1749:13: (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) )
	                    // XQueryParser.g:1749:14: k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT )
	                    k=this.match(this.input,THESAURUS,XQueryParser.FOLLOW_THESAURUS_in_p_FTThesaurusOption15074); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    // XQueryParser.g:1749:27: ( p_FTThesaurusID | k+= DEFAULT )
	                    var alt218=2;
	                    var LA218_0 = this.input.LA(1);

	                    if ( (LA218_0==AT) ) {
	                        alt218=1;
	                    }
	                    else if ( (LA218_0==DEFAULT) ) {
	                        alt218=2;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 218, 0, this.input);

	                        throw nvae;
	                    }
	                    switch (alt218) {
	                        case 1 :
	                            // XQueryParser.g:1749:28: p_FTThesaurusID
	                            this.pushFollow(XQueryParser.FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15077);
	                            p_FTThesaurusID688=this.p_FTThesaurusID();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTThesaurusID688.getTree());


	                            break;
	                        case 2 :
	                            // XQueryParser.g:1749:46: k+= DEFAULT
	                            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_FTThesaurusOption15083); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            k_tree = this.adaptor.create(k);
	                            this.adaptor.addChild(root_0, k_tree);
	                            }
	                            if (org.antlr.lang.isNull(list_k)) list_k = [];
	                            list_k.push(k);



	                            break;

	                    }






	                    break;
	                case 2 :
	                    // XQueryParser.g:1750:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
	                    // XQueryParser.g:1750:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
	                    // XQueryParser.g:1750:14: k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN
	                    k=this.match(this.input,THESAURUS,XQueryParser.FOLLOW_THESAURUS_in_p_FTThesaurusOption15102); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    LPAREN689=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_FTThesaurusOption15104); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    LPAREN689_tree = this.adaptor.create(LPAREN689);
	                    this.adaptor.addChild(root_0, LPAREN689_tree);
	                    }
	                    // XQueryParser.g:1750:34: ( p_FTThesaurusID | k+= DEFAULT )
	                    var alt219=2;
	                    var LA219_0 = this.input.LA(1);

	                    if ( (LA219_0==AT) ) {
	                        alt219=1;
	                    }
	                    else if ( (LA219_0==DEFAULT) ) {
	                        alt219=2;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 219, 0, this.input);

	                        throw nvae;
	                    }
	                    switch (alt219) {
	                        case 1 :
	                            // XQueryParser.g:1750:35: p_FTThesaurusID
	                            this.pushFollow(XQueryParser.FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15107);
	                            p_FTThesaurusID690=this.p_FTThesaurusID();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTThesaurusID690.getTree());


	                            break;
	                        case 2 :
	                            // XQueryParser.g:1750:53: k+= DEFAULT
	                            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_FTThesaurusOption15113); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            k_tree = this.adaptor.create(k);
	                            this.adaptor.addChild(root_0, k_tree);
	                            }
	                            if (org.antlr.lang.isNull(list_k)) list_k = [];
	                            list_k.push(k);



	                            break;

	                    }

	                    // XQueryParser.g:1750:65: ( COMMA p_FTThesaurusID )*
	                    loop220:
	                    do {
	                        var alt220=2;
	                        var LA220_0 = this.input.LA(1);

	                        if ( (LA220_0==COMMA) ) {
	                            alt220=1;
	                        }


	                        switch (alt220) {
	                        case 1 :
	                            // XQueryParser.g:1750:66: COMMA p_FTThesaurusID
	                            COMMA691=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_FTThesaurusOption15117); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            COMMA691_tree = this.adaptor.create(COMMA691);
	                            this.adaptor.addChild(root_0, COMMA691_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15119);
	                            p_FTThesaurusID692=this.p_FTThesaurusID();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTThesaurusID692.getTree());


	                            break;

	                        default :
	                            break loop220;
	                        }
	                    } while (true);

	                    RPAREN693=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_FTThesaurusOption15123); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    RPAREN693_tree = this.adaptor.create(RPAREN693);
	                    this.adaptor.addChild(root_0, RPAREN693_tree);
	                    }





	                    break;
	                case 3 :
	                    // XQueryParser.g:1751:13: (k+= NO k+= THESAURUS )
	                    // XQueryParser.g:1751:13: (k+= NO k+= THESAURUS )
	                    // XQueryParser.g:1751:14: k+= NO k+= THESAURUS
	                    k=this.match(this.input,NO,XQueryParser.FOLLOW_NO_in_p_FTThesaurusOption15141); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,THESAURUS,XQueryParser.FOLLOW_THESAURUS_in_p_FTThesaurusOption15145); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTThesaurusID_return: (function() {
	        XQueryParser.p_FTThesaurusID_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTThesaurusID_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1755:1: p_FTThesaurusID : k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? ;
	    // $ANTLR start "p_FTThesaurusID"
	    p_FTThesaurusID: function() {
	        var retval = new XQueryParser.p_FTThesaurusID_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_StringLiteral694 = null;
	         var p_StringLiteral695 = null;
	         var p_FTLiteralRange696 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1756:9: (k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? )
	            // XQueryParser.g:1756:11: k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )?
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTThesaurusID15178); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTThesaurusID15180);
	            p_StringLiteral694=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral694.getTree());
	            // XQueryParser.g:1756:33: (k+= RELATIONSHIP p_StringLiteral )?
	            var alt222=2;
	            var LA222_0 = this.input.LA(1);

	            if ( (LA222_0==RELATIONSHIP) ) {
	                alt222=1;
	            }
	            switch (alt222) {
	                case 1 :
	                    // XQueryParser.g:1756:34: k+= RELATIONSHIP p_StringLiteral
	                    k=this.match(this.input,RELATIONSHIP,XQueryParser.FOLLOW_RELATIONSHIP_in_p_FTThesaurusID15185); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTThesaurusID15187);
	                    p_StringLiteral695=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral695.getTree());


	                    break;

	            }

	            // XQueryParser.g:1756:68: ( p_FTLiteralRange k+= LEVELS )?
	            var alt223=2;
	            var LA223_0 = this.input.LA(1);

	            if ( ((LA223_0>=EXACTLY && LA223_0<=FROM)) ) {
	                alt223=1;
	            }
	            else if ( (LA223_0==AT) ) {
	                var LA223_2 = this.input.LA(2);

	                if ( (LA223_2==LEAST||LA223_2==MOST) ) {
	                    alt223=1;
	                }
	            }
	            switch (alt223) {
	                case 1 :
	                    // XQueryParser.g:1756:69: p_FTLiteralRange k+= LEVELS
	                    this.pushFollow(XQueryParser.FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID15192);
	                    p_FTLiteralRange696=this.p_FTLiteralRange();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTLiteralRange696.getTree());
	                    k=this.match(this.input,LEVELS,XQueryParser.FOLLOW_LEVELS_in_p_FTThesaurusID15196); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTLiteralRange_return: (function() {
	        XQueryParser.p_FTLiteralRange_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTLiteralRange_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1760:1: p_FTLiteralRange : ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) ;
	    // $ANTLR start "p_FTLiteralRange"
	    p_FTLiteralRange: function() {
	        var retval = new XQueryParser.p_FTLiteralRange_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var L_IntegerLiteral697 = null;
	        var L_IntegerLiteral698 = null;
	        var L_IntegerLiteral699 = null;
	        var L_IntegerLiteral700 = null;
	        var TO701 = null;
	        var L_IntegerLiteral702 = null;
	        var k = null;
	        var list_k=null;

	        var L_IntegerLiteral697_tree=null;
	        var L_IntegerLiteral698_tree=null;
	        var L_IntegerLiteral699_tree=null;
	        var L_IntegerLiteral700_tree=null;
	        var TO701_tree=null;
	        var L_IntegerLiteral702_tree=null;
	        var k_tree=null;

	        try {
	            // XQueryParser.g:1761:9: ( ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) )
	            // XQueryParser.g:1761:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1761:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
	            var alt224=4;
	            switch ( this.input.LA(1) ) {
	            case EXACTLY:
	                alt224=1;
	                break;
	            case AT:
	                var LA224_2 = this.input.LA(2);

	                if ( (LA224_2==LEAST) ) {
	                    alt224=2;
	                }
	                else if ( (LA224_2==MOST) ) {
	                    alt224=3;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 224, 2, this.input);

	                    throw nvae;
	                }
	                break;
	            case FROM:
	                alt224=4;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 224, 0, this.input);

	                throw nvae;
	            }

	            switch (alt224) {
	                case 1 :
	                    // XQueryParser.g:1761:13: (k+= EXACTLY L_IntegerLiteral )
	                    // XQueryParser.g:1761:13: (k+= EXACTLY L_IntegerLiteral )
	                    // XQueryParser.g:1761:14: k+= EXACTLY L_IntegerLiteral
	                    k=this.match(this.input,EXACTLY,XQueryParser.FOLLOW_EXACTLY_in_p_FTLiteralRange15231); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    L_IntegerLiteral697=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15233); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    L_IntegerLiteral697_tree = this.adaptor.create(L_IntegerLiteral697);
	                    this.adaptor.addChild(root_0, L_IntegerLiteral697_tree);
	                    }





	                    break;
	                case 2 :
	                    // XQueryParser.g:1762:13: (k+= AT k+= LEAST L_IntegerLiteral )
	                    // XQueryParser.g:1762:13: (k+= AT k+= LEAST L_IntegerLiteral )
	                    // XQueryParser.g:1762:14: k+= AT k+= LEAST L_IntegerLiteral
	                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTLiteralRange15251); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,LEAST,XQueryParser.FOLLOW_LEAST_in_p_FTLiteralRange15255); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    L_IntegerLiteral698=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15257); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    L_IntegerLiteral698_tree = this.adaptor.create(L_IntegerLiteral698);
	                    this.adaptor.addChild(root_0, L_IntegerLiteral698_tree);
	                    }





	                    break;
	                case 3 :
	                    // XQueryParser.g:1763:13: (k+= AT k+= MOST L_IntegerLiteral )
	                    // XQueryParser.g:1763:13: (k+= AT k+= MOST L_IntegerLiteral )
	                    // XQueryParser.g:1763:14: k+= AT k+= MOST L_IntegerLiteral
	                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTLiteralRange15275); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,MOST,XQueryParser.FOLLOW_MOST_in_p_FTLiteralRange15279); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    L_IntegerLiteral699=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15281); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    L_IntegerLiteral699_tree = this.adaptor.create(L_IntegerLiteral699);
	                    this.adaptor.addChild(root_0, L_IntegerLiteral699_tree);
	                    }





	                    break;
	                case 4 :
	                    // XQueryParser.g:1764:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
	                    // XQueryParser.g:1764:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
	                    // XQueryParser.g:1764:14: k+= FROM L_IntegerLiteral TO L_IntegerLiteral
	                    k=this.match(this.input,FROM,XQueryParser.FOLLOW_FROM_in_p_FTLiteralRange15299); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    L_IntegerLiteral700=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15301); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    L_IntegerLiteral700_tree = this.adaptor.create(L_IntegerLiteral700);
	                    this.adaptor.addChild(root_0, L_IntegerLiteral700_tree);
	                    }
	                    TO701=this.match(this.input,TO,XQueryParser.FOLLOW_TO_in_p_FTLiteralRange15303); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    TO701_tree = this.adaptor.create(TO701);
	                    this.adaptor.addChild(root_0, TO701_tree);
	                    }
	                    L_IntegerLiteral702=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15305); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    L_IntegerLiteral702_tree = this.adaptor.create(L_IntegerLiteral702);
	                    this.adaptor.addChild(root_0, L_IntegerLiteral702_tree);
	                    }





	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTStopWordOption_return: (function() {
	        XQueryParser.p_FTStopWordOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTStopWordOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1768:1: p_FTStopWordOption : ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) ;
	    // $ANTLR start "p_FTStopWordOption"
	    p_FTStopWordOption: function() {
	        var retval = new XQueryParser.p_FTStopWordOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_FTStopWords703 = null;
	         var p_FTStopWordsInclExcl704 = null;
	         var p_FTStopWordsInclExcl705 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1769:9: ( ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) )
	            // XQueryParser.g:1769:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1769:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
	            var alt227=3;
	            var LA227_0 = this.input.LA(1);

	            if ( (LA227_0==STOP) ) {
	                var LA227_1 = this.input.LA(2);

	                if ( (LA227_1==WORDS) ) {
	                    var LA227_3 = this.input.LA(3);

	                    if ( (LA227_3==DEFAULT) ) {
	                        alt227=2;
	                    }
	                    else if ( (LA227_3==AT||LA227_3==LPAREN) ) {
	                        alt227=1;
	                    }
	                    else {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var nvae =
	                            new org.antlr.runtime.NoViableAltException("", 227, 3, this.input);

	                        throw nvae;
	                    }
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                    var nvae =
	                        new org.antlr.runtime.NoViableAltException("", 227, 1, this.input);

	                    throw nvae;
	                }
	            }
	            else if ( (LA227_0==NO) ) {
	                alt227=3;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 227, 0, this.input);

	                throw nvae;
	            }
	            switch (alt227) {
	                case 1 :
	                    // XQueryParser.g:1769:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
	                    // XQueryParser.g:1769:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
	                    // XQueryParser.g:1769:14: k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )*
	                    k=this.match(this.input,STOP,XQueryParser.FOLLOW_STOP_in_p_FTStopWordOption15341); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTStopWordOption15345); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    this.pushFollow(XQueryParser.FOLLOW_p_FTStopWords_in_p_FTStopWordOption15347);
	                    p_FTStopWords703=this.p_FTStopWords();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWords703.getTree());
	                    // XQueryParser.g:1769:45: ( p_FTStopWordsInclExcl )*
	                    loop225:
	                    do {
	                        var alt225=2;
	                        var LA225_0 = this.input.LA(1);

	                        if ( (LA225_0==EXCEPT||LA225_0==UNION) ) {
	                            alt225=1;
	                        }


	                        switch (alt225) {
	                        case 1 :
	                            // XQueryParser.g:1769:45: p_FTStopWordsInclExcl
	                            this.pushFollow(XQueryParser.FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15349);
	                            p_FTStopWordsInclExcl704=this.p_FTStopWordsInclExcl();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWordsInclExcl704.getTree());


	                            break;

	                        default :
	                            break loop225;
	                        }
	                    } while (true);






	                    break;
	                case 2 :
	                    // XQueryParser.g:1770:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
	                    // XQueryParser.g:1770:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
	                    // XQueryParser.g:1770:14: k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )*
	                    k=this.match(this.input,STOP,XQueryParser.FOLLOW_STOP_in_p_FTStopWordOption15368); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTStopWordOption15372); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_FTStopWordOption15376); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    // XQueryParser.g:1770:42: ( p_FTStopWordsInclExcl )*
	                    loop226:
	                    do {
	                        var alt226=2;
	                        var LA226_0 = this.input.LA(1);

	                        if ( (LA226_0==EXCEPT||LA226_0==UNION) ) {
	                            alt226=1;
	                        }


	                        switch (alt226) {
	                        case 1 :
	                            // XQueryParser.g:1770:42: p_FTStopWordsInclExcl
	                            this.pushFollow(XQueryParser.FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15378);
	                            p_FTStopWordsInclExcl705=this.p_FTStopWordsInclExcl();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWordsInclExcl705.getTree());


	                            break;

	                        default :
	                            break loop226;
	                        }
	                    } while (true);






	                    break;
	                case 3 :
	                    // XQueryParser.g:1771:13: (k+= NO k+= STOP k+= WORDS )
	                    // XQueryParser.g:1771:13: (k+= NO k+= STOP k+= WORDS )
	                    // XQueryParser.g:1771:14: k+= NO k+= STOP k+= WORDS
	                    k=this.match(this.input,NO,XQueryParser.FOLLOW_NO_in_p_FTStopWordOption15397); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,STOP,XQueryParser.FOLLOW_STOP_in_p_FTStopWordOption15401); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTStopWordOption15405); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTStopWords_return: (function() {
	        XQueryParser.p_FTStopWords_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTStopWords_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1775:1: p_FTStopWords : ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) );
	    // $ANTLR start "p_FTStopWords"
	    p_FTStopWords: function() {
	        var retval = new XQueryParser.p_FTStopWords_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ka = null;
	        var LPAREN707 = null;
	        var COMMA709 = null;
	        var RPAREN711 = null;
	         var p_StringLiteral706 = null;
	         var p_StringLiteral708 = null;
	         var p_StringLiteral710 = null;

	        var ka_tree=null;
	        var LPAREN707_tree=null;
	        var COMMA709_tree=null;
	        var RPAREN711_tree=null;

	        try {
	            // XQueryParser.g:1776:9: ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) )
	            var alt229=2;
	            var LA229_0 = this.input.LA(1);

	            if ( (LA229_0==AT) ) {
	                alt229=1;
	            }
	            else if ( (LA229_0==LPAREN) ) {
	                alt229=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 229, 0, this.input);

	                throw nvae;
	            }
	            switch (alt229) {
	                case 1 :
	                    // XQueryParser.g:1776:11: (ka= AT p_StringLiteral )
	                    root_0 = this.adaptor.nil();

	                    // XQueryParser.g:1776:11: (ka= AT p_StringLiteral )
	                    // XQueryParser.g:1776:12: ka= AT p_StringLiteral
	                    ka=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTStopWords15439); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    ka_tree = this.adaptor.create(ka);
	                    this.adaptor.addChild(root_0, ka_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      ak(ka);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTStopWords15443);
	                    p_StringLiteral706=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral706.getTree());





	                    break;
	                case 2 :
	                    // XQueryParser.g:1777:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
	                    root_0 = this.adaptor.nil();

	                    // XQueryParser.g:1777:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
	                    // XQueryParser.g:1777:12: LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN
	                    LPAREN707=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_FTStopWords15457); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    LPAREN707_tree = this.adaptor.create(LPAREN707);
	                    this.adaptor.addChild(root_0, LPAREN707_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTStopWords15459);
	                    p_StringLiteral708=this.p_StringLiteral();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral708.getTree());
	                    // XQueryParser.g:1777:35: ( COMMA p_StringLiteral )*
	                    loop228:
	                    do {
	                        var alt228=2;
	                        var LA228_0 = this.input.LA(1);

	                        if ( (LA228_0==COMMA) ) {
	                            alt228=1;
	                        }


	                        switch (alt228) {
	                        case 1 :
	                            // XQueryParser.g:1777:36: COMMA p_StringLiteral
	                            COMMA709=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_FTStopWords15462); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            COMMA709_tree = this.adaptor.create(COMMA709);
	                            this.adaptor.addChild(root_0, COMMA709_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTStopWords15464);
	                            p_StringLiteral710=this.p_StringLiteral();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral710.getTree());


	                            break;

	                        default :
	                            break loop228;
	                        }
	                    } while (true);

	                    RPAREN711=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_FTStopWords15468); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    RPAREN711_tree = this.adaptor.create(RPAREN711);
	                    this.adaptor.addChild(root_0, RPAREN711_tree);
	                    }





	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTStopWordsInclExcl_return: (function() {
	        XQueryParser.p_FTStopWordsInclExcl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTStopWordsInclExcl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1781:1: p_FTStopWordsInclExcl : ( (k+= UNION | k+= EXCEPT ) p_FTStopWords ) ;
	    // $ANTLR start "p_FTStopWordsInclExcl"
	    p_FTStopWordsInclExcl: function() {
	        var retval = new XQueryParser.p_FTStopWordsInclExcl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_FTStopWords712 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1782:9: ( ( (k+= UNION | k+= EXCEPT ) p_FTStopWords ) )
	            // XQueryParser.g:1782:11: ( (k+= UNION | k+= EXCEPT ) p_FTStopWords )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1782:11: ( (k+= UNION | k+= EXCEPT ) p_FTStopWords )
	            // XQueryParser.g:1782:13: (k+= UNION | k+= EXCEPT ) p_FTStopWords
	            // XQueryParser.g:1782:13: (k+= UNION | k+= EXCEPT )
	            var alt230=2;
	            var LA230_0 = this.input.LA(1);

	            if ( (LA230_0==UNION) ) {
	                alt230=1;
	            }
	            else if ( (LA230_0==EXCEPT) ) {
	                alt230=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 230, 0, this.input);

	                throw nvae;
	            }
	            switch (alt230) {
	                case 1 :
	                    // XQueryParser.g:1782:14: k+= UNION
	                    k=this.match(this.input,UNION,XQueryParser.FOLLOW_UNION_in_p_FTStopWordsInclExcl15500); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:1782:25: k+= EXCEPT
	                    k=this.match(this.input,EXCEPT,XQueryParser.FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl15506); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl15509);
	            p_FTStopWords712=this.p_FTStopWords();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWords712.getTree());



	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTLanguageOption_return: (function() {
	        XQueryParser.p_FTLanguageOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTLanguageOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1786:1: p_FTLanguageOption : kl= LANGUAGE p_StringLiteral ;
	    // $ANTLR start "p_FTLanguageOption"
	    p_FTLanguageOption: function() {
	        var retval = new XQueryParser.p_FTLanguageOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var kl = null;
	         var p_StringLiteral713 = null;

	        var kl_tree=null;

	        try {
	            // XQueryParser.g:1787:9: (kl= LANGUAGE p_StringLiteral )
	            // XQueryParser.g:1787:11: kl= LANGUAGE p_StringLiteral
	            root_0 = this.adaptor.nil();

	            kl=this.match(this.input,LANGUAGE,XQueryParser.FOLLOW_LANGUAGE_in_p_FTLanguageOption15541); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            kl_tree = this.adaptor.create(kl);
	            this.adaptor.addChild(root_0, kl_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              ak(kl);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTLanguageOption15545);
	            p_StringLiteral713=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral713.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTWildCardOption_return: (function() {
	        XQueryParser.p_FTWildCardOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTWildCardOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1791:1: p_FTWildCardOption : (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) ;
	    // $ANTLR start "p_FTWildCardOption"
	    p_FTWildCardOption: function() {
	        var retval = new XQueryParser.p_FTWildCardOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1792:9: ( (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) )
	            // XQueryParser.g:1792:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1792:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
	            var alt231=2;
	            var LA231_0 = this.input.LA(1);

	            if ( (LA231_0==WILDCARDS) ) {
	                alt231=1;
	            }
	            else if ( (LA231_0==NO) ) {
	                alt231=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 231, 0, this.input);

	                throw nvae;
	            }
	            switch (alt231) {
	                case 1 :
	                    // XQueryParser.g:1792:13: k+= WILDCARDS
	                    k=this.match(this.input,WILDCARDS,XQueryParser.FOLLOW_WILDCARDS_in_p_FTWildCardOption15575); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);



	                    break;
	                case 2 :
	                    // XQueryParser.g:1792:28: (k+= NO k+= WILDCARDS )
	                    // XQueryParser.g:1792:28: (k+= NO k+= WILDCARDS )
	                    // XQueryParser.g:1792:29: k+= NO k+= WILDCARDS
	                    k=this.match(this.input,NO,XQueryParser.FOLLOW_NO_in_p_FTWildCardOption15582); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);

	                    k=this.match(this.input,WILDCARDS,XQueryParser.FOLLOW_WILDCARDS_in_p_FTWildCardOption15586); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if (org.antlr.lang.isNull(list_k)) list_k = [];
	                    list_k.push(k);






	                    break;

	            }

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTExtensionOption_return: (function() {
	        XQueryParser.p_FTExtensionOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTExtensionOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1796:1: p_FTExtensionOption : ko= OPTION p_QName p_StringLiteral ;
	    // $ANTLR start "p_FTExtensionOption"
	    p_FTExtensionOption: function() {
	        var retval = new XQueryParser.p_FTExtensionOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var ko = null;
	         var p_QName714 = null;
	         var p_StringLiteral715 = null;

	        var ko_tree=null;

	        try {
	            // XQueryParser.g:1797:9: (ko= OPTION p_QName p_StringLiteral )
	            // XQueryParser.g:1797:11: ko= OPTION p_QName p_StringLiteral
	            root_0 = this.adaptor.nil();

	            ko=this.match(this.input,OPTION,XQueryParser.FOLLOW_OPTION_in_p_FTExtensionOption15619); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            ko_tree = this.adaptor.create(ko);
	            this.adaptor.addChild(root_0, ko_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              ak(ko);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_FTExtensionOption15623);
	            p_QName714=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName714.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTExtensionOption15625);
	            p_StringLiteral715=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral715.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FTIgnoreOption_return: (function() {
	        XQueryParser.p_FTIgnoreOption_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FTIgnoreOption_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1801:1: p_FTIgnoreOption : k+= WITHOUT k+= CONTENT p_UnionExpr ;
	    // $ANTLR start "p_FTIgnoreOption"
	    p_FTIgnoreOption: function() {
	        var retval = new XQueryParser.p_FTIgnoreOption_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var list_k=null;
	         var p_UnionExpr716 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1802:9: (k+= WITHOUT k+= CONTENT p_UnionExpr )
	            // XQueryParser.g:1802:11: k+= WITHOUT k+= CONTENT p_UnionExpr
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,WITHOUT,XQueryParser.FOLLOW_WITHOUT_in_p_FTIgnoreOption15653); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            k=this.match(this.input,CONTENT,XQueryParser.FOLLOW_CONTENT_in_p_FTIgnoreOption15657); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if (org.antlr.lang.isNull(list_k)) list_k = [];
	            list_k.push(k);

	            if ( this.state.backtracking===0 ) {
	              this.ak(list_k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_UnionExpr_in_p_FTIgnoreOption15661);
	            p_UnionExpr716=this.p_UnionExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnionExpr716.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Program_return: (function() {
	        XQueryParser.p_Program_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Program_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1812:1: p_Program : p_StatementsAndOptionalExpr ;
	    // $ANTLR start "p_Program"
	    p_Program: function() {
	        var retval = new XQueryParser.p_Program_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_StatementsAndOptionalExpr717 = null;


	        try {
	            // XQueryParser.g:1813:9: ( p_StatementsAndOptionalExpr )
	            // XQueryParser.g:1813:11: p_StatementsAndOptionalExpr
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_p_Program15693);
	            p_StatementsAndOptionalExpr717=this.p_StatementsAndOptionalExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr717.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Statements_return: (function() {
	        XQueryParser.p_Statements_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Statements_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1817:1: p_Statements[strict] : ( p_Hybrid[$strict,true] )* ;
	    // $ANTLR start "p_Statements"
	    p_Statements: function(strict) {
	        var retval = new XQueryParser.p_Statements_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Hybrid718 = null;


	        try {
	            // XQueryParser.g:1818:9: ( ( p_Hybrid[$strict,true] )* )
	            // XQueryParser.g:1818:11: ( p_Hybrid[$strict,true] )*
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1818:11: ( p_Hybrid[$strict,true] )*
	            loop232:
	            do {
	                var alt232=2;
	                var LA232_0 = this.input.LA(1);

	                if ( ((LA232_0>=ANCESTOR && LA232_0<=DECIMAL_SEPARATOR)||(LA232_0>=DIGIT && LA232_0<=LPAREN)||(LA232_0>=DOLLAR && LA232_0<=LBRACKET)||LA232_0==ANN_PERCENT||(LA232_0>=STAR && LA232_0<=SMALLER)||(LA232_0>=SLASH && LA232_0<=DOT_DOT)||LA232_0==ATTR_SIGN||(LA232_0>=APOS && LA232_0<=QUOT)||LA232_0==L_NCName||(LA232_0>=L_Pragma && LA232_0<=L_DoubleLiteral)||LA232_0==EXPLICITLY) ) {
	                    alt232=1;
	                }


	                switch (alt232) {
	                case 1 :
	                    // XQueryParser.g:1818:11: p_Hybrid[$strict,true]
	                    this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_Statements15720);
	                    p_Hybrid718=this.p_Hybrid(strict, true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid718.getTree());


	                    break;

	                default :
	                    break loop232;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_StatementsAndExpr_return: (function() {
	        XQueryParser.p_StatementsAndExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_StatementsAndExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1822:1: p_StatementsAndExpr : p_Statements[false] ;
	    // $ANTLR start "p_StatementsAndExpr"
	    p_StatementsAndExpr: function() {
	        var retval = new XQueryParser.p_StatementsAndExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Statements719 = null;


	        try {
	            // XQueryParser.g:1823:9: ( p_Statements[false] )
	            // XQueryParser.g:1823:11: p_Statements[false]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_Statements_in_p_StatementsAndExpr15748);
	            p_Statements719=this.p_Statements(false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statements719.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_StatementsAndOptionalExpr_return: (function() {
	        XQueryParser.p_StatementsAndOptionalExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_StatementsAndOptionalExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1827:1: p_StatementsAndOptionalExpr : p_Statements[false] ;
	    // $ANTLR start "p_StatementsAndOptionalExpr"
	    p_StatementsAndOptionalExpr: function() {
	        var retval = new XQueryParser.p_StatementsAndOptionalExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_Statements720 = null;


	        try {
	            // XQueryParser.g:1828:9: ( p_Statements[false] )
	            // XQueryParser.g:1828:11: p_Statements[false]
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_Statements_in_p_StatementsAndOptionalExpr15775);
	            p_Statements720=this.p_Statements(false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statements720.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Hybrid_return: (function() {
	        XQueryParser.p_Hybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Hybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1831:1: p_Hybrid[strict, allowConcat] : ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement );
	    // $ANTLR start "p_Hybrid"
	    p_Hybrid: function(strict, allowConcat) {
	        var retval = new XQueryParser.p_Hybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_HybridExprSingle721 = null;
	         var p_Statement722 = null;


	        try {
	            // XQueryParser.g:1832:9: ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement )
	            var alt233=2;
	            alt233 = this.dfa233.predict(this.input);
	            switch (alt233) {
	                case 1 :
	                    // XQueryParser.g:1832:11: p_HybridExprSingle[$strict,$allowConcat]
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_HybridExprSingle_in_p_Hybrid15802);
	                    p_HybridExprSingle721=this.p_HybridExprSingle(strict, allowConcat);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_HybridExprSingle721.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1833:11: p_Statement
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_Statement_in_p_Hybrid15815);
	                    p_Statement722=this.p_Statement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statement722.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {

	              if(re instanceof org.antlr.runtime.RecognitionException) {
	                v = this.p_StepExpr();
	                root_0 = this.adaptor.nil();
	                this.adaptor.addChild(root_0, v.getTree());
	                retval.stop = this.input.LT(-1);
	                retval.tree = this.adaptor.rulePostProcessing(root_0);
	                this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	              } else {
	                throw re;
	              }

	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_Statement_return: (function() {
	        XQueryParser.p_Statement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_Statement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1848:1: p_Statement : ( p_AssignStatement | p_BreakStatement | p_ContinueStatement | p_ExitStatement | p_VarDeclStatement | p_WhileStatement );
	    // $ANTLR start "p_Statement"
	    p_Statement: function() {
	        var retval = new XQueryParser.p_Statement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_AssignStatement723 = null;
	         var p_BreakStatement724 = null;
	         var p_ContinueStatement725 = null;
	         var p_ExitStatement726 = null;
	         var p_VarDeclStatement727 = null;
	         var p_WhileStatement728 = null;


	        try {
	            // XQueryParser.g:1849:9: ( p_AssignStatement | p_BreakStatement | p_ContinueStatement | p_ExitStatement | p_VarDeclStatement | p_WhileStatement )
	            var alt234=6;
	            switch ( this.input.LA(1) ) {
	            case DOLLAR:
	                alt234=1;
	                break;
	            case BREAK:
	                alt234=2;
	                break;
	            case CONTINUE:
	                alt234=3;
	                break;
	            case EXIT:
	                alt234=4;
	                break;
	            case VARIABLE:
	            case ANN_PERCENT:
	                alt234=5;
	                break;
	            case WHILE:
	                alt234=6;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 234, 0, this.input);

	                throw nvae;
	            }

	            switch (alt234) {
	                case 1 :
	                    // XQueryParser.g:1849:11: p_AssignStatement
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_AssignStatement_in_p_Statement15846);
	                    p_AssignStatement723=this.p_AssignStatement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AssignStatement723.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1850:11: p_BreakStatement
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_BreakStatement_in_p_Statement15858);
	                    p_BreakStatement724=this.p_BreakStatement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BreakStatement724.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:1851:11: p_ContinueStatement
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ContinueStatement_in_p_Statement15870);
	                    p_ContinueStatement725=this.p_ContinueStatement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ContinueStatement725.getTree());


	                    break;
	                case 4 :
	                    // XQueryParser.g:1852:11: p_ExitStatement
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_ExitStatement_in_p_Statement15882);
	                    p_ExitStatement726=this.p_ExitStatement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExitStatement726.getTree());


	                    break;
	                case 5 :
	                    // XQueryParser.g:1853:11: p_VarDeclStatement
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_VarDeclStatement_in_p_Statement15894);
	                    p_VarDeclStatement727=this.p_VarDeclStatement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarDeclStatement727.getTree());


	                    break;
	                case 6 :
	                    // XQueryParser.g:1854:11: p_WhileStatement
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_WhileStatement_in_p_Statement15906);
	                    p_WhileStatement728=this.p_WhileStatement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WhileStatement728.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_HybridExprSingle_return: (function() {
	        XQueryParser.p_HybridExprSingle_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_HybridExprSingle_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1856:1: p_HybridExprSingle[strict, allowConcat] : e= p_Expr[$strict,$allowConcat] SEMICOLON ;
	    // $ANTLR start "p_HybridExprSingle"
	    p_HybridExprSingle: function(strict, allowConcat) {
	        var retval = new XQueryParser.p_HybridExprSingle_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var SEMICOLON729 = null;
	         var e = null;

	        var SEMICOLON729_tree=null;

	        try {
	            // XQueryParser.g:1857:9: (e= p_Expr[$strict,$allowConcat] SEMICOLON )
	            // XQueryParser.g:1857:11: e= p_Expr[$strict,$allowConcat] SEMICOLON
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_HybridExprSingle15933);
	            e=this.p_Expr(strict, allowConcat);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, e.getTree());
	            if ( this.state.backtracking===0 ) {
	               if (strict || this.input.LT(1).getType() != SEMICOLON) throw new org.antlr.runtime.RecognitionException(this.input); 
	            }
	            SEMICOLON729=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_HybridExprSingle15948); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON729_tree = this.adaptor.create(SEMICOLON729);
	            this.adaptor.addChild(root_0, SEMICOLON729_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {

	                if(re instanceof org.antlr.runtime.RecognitionException) {
	                  root_0 = this.adaptor.nil();
	                  this.adaptor.addChild(root_0, e.getTree());
	                  retval.stop = this.input.LT(-1);
	                  retval.tree = this.adaptor.rulePostProcessing(root_0);
	                  this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	                } else {
	                  throw re;
	                }

	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ApplyStatement_return: (function() {
	        XQueryParser.p_ApplyStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ApplyStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1891:1: p_ApplyStatement : p_ExprSimple SEMICOLON ;
	    // $ANTLR start "p_ApplyStatement"
	    p_ApplyStatement: function() {
	        var retval = new XQueryParser.p_ApplyStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var SEMICOLON731 = null;
	         var p_ExprSimple730 = null;

	        var SEMICOLON731_tree=null;

	        try {
	            // XQueryParser.g:1892:9: ( p_ExprSimple SEMICOLON )
	            // XQueryParser.g:1892:11: p_ExprSimple SEMICOLON
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSimple_in_p_ApplyStatement15998);
	            p_ExprSimple730=this.p_ExprSimple();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSimple730.getTree());
	            SEMICOLON731=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_ApplyStatement16000); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON731_tree = this.adaptor.create(SEMICOLON731);
	            this.adaptor.addChild(root_0, SEMICOLON731_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AssignStatement_return: (function() {
	        XQueryParser.p_AssignStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AssignStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1896:1: p_AssignStatement : DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON ;
	    // $ANTLR start "p_AssignStatement"
	    p_AssignStatement: function() {
	        var retval = new XQueryParser.p_AssignStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var DOLLAR732 = null;
	        var BIND734 = null;
	        var SEMICOLON736 = null;
	         var p_VarName733 = null;
	         var p_ExprSingle735 = null;

	        var DOLLAR732_tree=null;
	        var BIND734_tree=null;
	        var SEMICOLON736_tree=null;

	        try {
	            // XQueryParser.g:1897:9: ( DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON )
	            // XQueryParser.g:1897:11: DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON
	            root_0 = this.adaptor.nil();

	            DOLLAR732=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_AssignStatement16026); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR732_tree = this.adaptor.create(DOLLAR732);
	            this.adaptor.addChild(root_0, DOLLAR732_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_AssignStatement16028);
	            p_VarName733=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName733.getTree());
	            BIND734=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_AssignStatement16030); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            BIND734_tree = this.adaptor.create(BIND734);
	            this.adaptor.addChild(root_0, BIND734_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_AssignStatement16032);
	            p_ExprSingle735=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle735.getTree());
	            SEMICOLON736=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_AssignStatement16035); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON736_tree = this.adaptor.create(SEMICOLON736);
	            this.adaptor.addChild(root_0, SEMICOLON736_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_BlockStatement_return: (function() {
	        XQueryParser.p_BlockStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_BlockStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1901:1: p_BlockStatement : LBRACKET p_Statements[false] RBRACKET ;
	    // $ANTLR start "p_BlockStatement"
	    p_BlockStatement: function() {
	        var retval = new XQueryParser.p_BlockStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LBRACKET737 = null;
	        var RBRACKET739 = null;
	         var p_Statements738 = null;

	        var LBRACKET737_tree=null;
	        var RBRACKET739_tree=null;

	        try {
	            // XQueryParser.g:1902:9: ( LBRACKET p_Statements[false] RBRACKET )
	            // XQueryParser.g:1902:11: LBRACKET p_Statements[false] RBRACKET
	            root_0 = this.adaptor.nil();

	            LBRACKET737=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_BlockStatement16061); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET737_tree = this.adaptor.create(LBRACKET737);
	            this.adaptor.addChild(root_0, LBRACKET737_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Statements_in_p_BlockStatement16063);
	            p_Statements738=this.p_Statements(false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statements738.getTree());
	            RBRACKET739=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_BlockStatement16066); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET739_tree = this.adaptor.create(RBRACKET739);
	            this.adaptor.addChild(root_0, RBRACKET739_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_BlockHybrid_return: (function() {
	        XQueryParser.p_BlockHybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_BlockHybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1905:1: p_BlockHybrid[strict] : LBRACKET p_Statements[$strict] RBRACKET ;
	    // $ANTLR start "p_BlockHybrid"
	    p_BlockHybrid: function(strict) {
	        var retval = new XQueryParser.p_BlockHybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LBRACKET740 = null;
	        var RBRACKET742 = null;
	         var p_Statements741 = null;

	        var LBRACKET740_tree=null;
	        var RBRACKET742_tree=null;

	        try {
	            // XQueryParser.g:1906:9: ( LBRACKET p_Statements[$strict] RBRACKET )
	            // XQueryParser.g:1906:11: LBRACKET p_Statements[$strict] RBRACKET
	            root_0 = this.adaptor.nil();

	            LBRACKET740=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_BlockHybrid16092); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET740_tree = this.adaptor.create(LBRACKET740);
	            this.adaptor.addChild(root_0, LBRACKET740_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Statements_in_p_BlockHybrid16094);
	            p_Statements741=this.p_Statements(strict);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statements741.getTree());
	            RBRACKET742=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_BlockHybrid16097); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET742_tree = this.adaptor.create(RBRACKET742);
	            this.adaptor.addChild(root_0, RBRACKET742_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_BreakStatement_return: (function() {
	        XQueryParser.p_BreakStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_BreakStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1910:1: p_BreakStatement : k= BREAK k= LOOP SEMICOLON ;
	    // $ANTLR start "p_BreakStatement"
	    p_BreakStatement: function() {
	        var retval = new XQueryParser.p_BreakStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON743 = null;

	        var k_tree=null;
	        var SEMICOLON743_tree=null;

	        try {
	            // XQueryParser.g:1911:9: (k= BREAK k= LOOP SEMICOLON )
	            // XQueryParser.g:1911:11: k= BREAK k= LOOP SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,BREAK,XQueryParser.FOLLOW_BREAK_in_p_BreakStatement16125); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,LOOP,XQueryParser.FOLLOW_LOOP_in_p_BreakStatement16131); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            SEMICOLON743=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_BreakStatement16135); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON743_tree = this.adaptor.create(SEMICOLON743);
	            this.adaptor.addChild(root_0, SEMICOLON743_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ContinueStatement_return: (function() {
	        XQueryParser.p_ContinueStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ContinueStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1915:1: p_ContinueStatement : k= CONTINUE k= LOOP SEMICOLON ;
	    // $ANTLR start "p_ContinueStatement"
	    p_ContinueStatement: function() {
	        var retval = new XQueryParser.p_ContinueStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON744 = null;

	        var k_tree=null;
	        var SEMICOLON744_tree=null;

	        try {
	            // XQueryParser.g:1916:9: (k= CONTINUE k= LOOP SEMICOLON )
	            // XQueryParser.g:1916:11: k= CONTINUE k= LOOP SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,CONTINUE,XQueryParser.FOLLOW_CONTINUE_in_p_ContinueStatement16163); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,LOOP,XQueryParser.FOLLOW_LOOP_in_p_ContinueStatement16169); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            SEMICOLON744=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_ContinueStatement16173); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON744_tree = this.adaptor.create(SEMICOLON744);
	            this.adaptor.addChild(root_0, SEMICOLON744_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ExitStatement_return: (function() {
	        XQueryParser.p_ExitStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ExitStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1920:1: p_ExitStatement : k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON ;
	    // $ANTLR start "p_ExitStatement"
	    p_ExitStatement: function() {
	        var retval = new XQueryParser.p_ExitStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var SEMICOLON746 = null;
	         var p_ExprSingle745 = null;

	        var k_tree=null;
	        var SEMICOLON746_tree=null;

	        try {
	            // XQueryParser.g:1921:9: (k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON )
	            // XQueryParser.g:1921:11: k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,EXIT,XQueryParser.FOLLOW_EXIT_in_p_ExitStatement16201); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,RETURNING,XQueryParser.FOLLOW_RETURNING_in_p_ExitStatement16207); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ExitStatement16211);
	            p_ExprSingle745=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle745.getTree());
	            SEMICOLON746=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_ExitStatement16214); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON746_tree = this.adaptor.create(SEMICOLON746);
	            this.adaptor.addChild(root_0, SEMICOLON746_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_FLWORStatement_return: (function() {
	        XQueryParser.p_FLWORStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_FLWORStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1925:1: p_FLWORStatement : p_InitialClause ( p_IntermediateClause )* p_ReturnStatement ;
	    // $ANTLR start "p_FLWORStatement"
	    p_FLWORStatement: function() {
	        var retval = new XQueryParser.p_FLWORStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_InitialClause747 = null;
	         var p_IntermediateClause748 = null;
	         var p_ReturnStatement749 = null;


	        try {
	            // XQueryParser.g:1926:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnStatement )
	            // XQueryParser.g:1926:11: p_InitialClause ( p_IntermediateClause )* p_ReturnStatement
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_InitialClause_in_p_FLWORStatement16240);
	            p_InitialClause747=this.p_InitialClause();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InitialClause747.getTree());
	            // XQueryParser.g:1926:27: ( p_IntermediateClause )*
	            loop235:
	            do {
	                var alt235=2;
	                var LA235_0 = this.input.LA(1);

	                if ( (LA235_0==FOR||LA235_0==LET||LA235_0==ORDER||LA235_0==STABLE||LA235_0==WHERE||LA235_0==COUNT||LA235_0==GROUP) ) {
	                    alt235=1;
	                }


	                switch (alt235) {
	                case 1 :
	                    // XQueryParser.g:1926:27: p_IntermediateClause
	                    this.pushFollow(XQueryParser.FOLLOW_p_IntermediateClause_in_p_FLWORStatement16242);
	                    p_IntermediateClause748=this.p_IntermediateClause();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IntermediateClause748.getTree());


	                    break;

	                default :
	                    break loop235;
	                }
	            } while (true);

	            this.pushFollow(XQueryParser.FOLLOW_p_ReturnStatement_in_p_FLWORStatement16245);
	            p_ReturnStatement749=this.p_ReturnStatement();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReturnStatement749.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ReturnStatement_return: (function() {
	        XQueryParser.p_ReturnStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ReturnStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1930:1: p_ReturnStatement : k= RETURN p_Hybrid[false,false] ;
	    // $ANTLR start "p_ReturnStatement"
	    p_ReturnStatement: function() {
	        var retval = new XQueryParser.p_ReturnStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_Hybrid750 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1931:9: (k= RETURN p_Hybrid[false,false] )
	            // XQueryParser.g:1931:11: k= RETURN p_Hybrid[false,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_ReturnStatement16277); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_ReturnStatement16281);
	            p_Hybrid750=this.p_Hybrid(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid750.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IfStatement_return: (function() {
	        XQueryParser.p_IfStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IfStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1935:1: p_IfStatement : k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false] ;
	    // $ANTLR start "p_IfStatement"
	    p_IfStatement: function() {
	        var retval = new XQueryParser.p_IfStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LPAREN751 = null;
	        var RPAREN753 = null;
	         var p_Expr752 = null;
	         var p_Hybrid754 = null;
	         var p_Hybrid755 = null;

	        var k_tree=null;
	        var LPAREN751_tree=null;
	        var RPAREN753_tree=null;

	        try {
	            // XQueryParser.g:1936:9: (k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false] )
	            // XQueryParser.g:1936:11: k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,IF,XQueryParser.FOLLOW_IF_in_p_IfStatement16310); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LPAREN751=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_IfStatement16314); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN751_tree = this.adaptor.create(LPAREN751);
	            this.adaptor.addChild(root_0, LPAREN751_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_IfStatement16316);
	            p_Expr752=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr752.getTree());
	            RPAREN753=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_IfStatement16319); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN753_tree = this.adaptor.create(RPAREN753);
	            this.adaptor.addChild(root_0, RPAREN753_tree);
	            }
	            k=this.match(this.input,THEN,XQueryParser.FOLLOW_THEN_in_p_IfStatement16323); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_IfStatement16327);
	            p_Hybrid754=this.p_Hybrid(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid754.getTree());
	            k=this.match(this.input,ELSE,XQueryParser.FOLLOW_ELSE_in_p_IfStatement16332); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_IfStatement16336);
	            p_Hybrid755=this.p_Hybrid(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid755.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SwitchStatement_return: (function() {
	        XQueryParser.p_SwitchStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SwitchStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1940:1: p_SwitchStatement : k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false] ;
	    // $ANTLR start "p_SwitchStatement"
	    p_SwitchStatement: function() {
	        var retval = new XQueryParser.p_SwitchStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LPAREN756 = null;
	        var RPAREN758 = null;
	         var p_Expr757 = null;
	         var p_SwitchCaseStatement759 = null;
	         var p_Hybrid760 = null;

	        var k_tree=null;
	        var LPAREN756_tree=null;
	        var RPAREN758_tree=null;

	        try {
	            // XQueryParser.g:1941:9: (k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false] )
	            // XQueryParser.g:1941:11: k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,SWITCH,XQueryParser.FOLLOW_SWITCH_in_p_SwitchStatement16365); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LPAREN756=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SwitchStatement16369); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN756_tree = this.adaptor.create(LPAREN756);
	            this.adaptor.addChild(root_0, LPAREN756_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_SwitchStatement16371);
	            p_Expr757=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr757.getTree());
	            RPAREN758=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SwitchStatement16374); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN758_tree = this.adaptor.create(RPAREN758);
	            this.adaptor.addChild(root_0, RPAREN758_tree);
	            }
	            // XQueryParser.g:1941:67: ( p_SwitchCaseStatement )+
	            var cnt236=0;
	            loop236:
	            do {
	                var alt236=2;
	                var LA236_0 = this.input.LA(1);

	                if ( (LA236_0==CASE) ) {
	                    alt236=1;
	                }


	                switch (alt236) {
	                case 1 :
	                    // XQueryParser.g:1941:67: p_SwitchCaseStatement
	                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchCaseStatement_in_p_SwitchStatement16376);
	                    p_SwitchCaseStatement759=this.p_SwitchCaseStatement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchCaseStatement759.getTree());


	                    break;

	                default :
	                    if ( cnt236 >= 1 ) {
	                        break loop236;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(236, this.input);
	                        throw eee;
	                }
	                cnt236++;
	            } while (true);

	            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_SwitchStatement16381); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_SwitchStatement16387); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_SwitchStatement16391);
	            p_Hybrid760=this.p_Hybrid(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid760.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_SwitchCaseStatement_return: (function() {
	        XQueryParser.p_SwitchCaseStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_SwitchCaseStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1945:1: p_SwitchCaseStatement : (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false] ;
	    // $ANTLR start "p_SwitchCaseStatement"
	    p_SwitchCaseStatement: function() {
	        var retval = new XQueryParser.p_SwitchCaseStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_SwitchCaseOperand761 = null;
	         var p_Hybrid762 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1946:9: ( (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false] )
	            // XQueryParser.g:1946:11: (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false]
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1946:11: (k= CASE p_SwitchCaseOperand )+
	            var cnt237=0;
	            loop237:
	            do {
	                var alt237=2;
	                var LA237_0 = this.input.LA(1);

	                if ( (LA237_0==CASE) ) {
	                    alt237=1;
	                }


	                switch (alt237) {
	                case 1 :
	                    // XQueryParser.g:1946:12: k= CASE p_SwitchCaseOperand
	                    k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_SwitchCaseStatement16421); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseStatement16425);
	                    p_SwitchCaseOperand761=this.p_SwitchCaseOperand();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchCaseOperand761.getTree());


	                    break;

	                default :
	                    if ( cnt237 >= 1 ) {
	                        break loop237;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(237, this.input);
	                        throw eee;
	                }
	                cnt237++;
	            } while (true);

	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_SwitchCaseStatement16431); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_SwitchCaseStatement16435);
	            p_Hybrid762=this.p_Hybrid(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid762.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TryCatchStatement_return: (function() {
	        XQueryParser.p_TryCatchStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TryCatchStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1950:1: p_TryCatchStatement : k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+ ;
	    // $ANTLR start "p_TryCatchStatement"
	    p_TryCatchStatement: function() {
	        var retval = new XQueryParser.p_TryCatchStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_BlockStatement763 = null;
	         var p_CatchErrorList764 = null;
	         var p_BlockStatement765 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1951:9: (k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+ )
	            // XQueryParser.g:1951:11: k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,TRY,XQueryParser.FOLLOW_TRY_in_p_TryCatchStatement16464); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_BlockStatement_in_p_TryCatchStatement16468);
	            p_BlockStatement763=this.p_BlockStatement();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockStatement763.getTree());
	            // XQueryParser.g:1951:49: (k= CATCH p_CatchErrorList p_BlockStatement )+
	            var cnt238=0;
	            loop238:
	            do {
	                var alt238=2;
	                var LA238_0 = this.input.LA(1);

	                if ( (LA238_0==CATCH) ) {
	                    alt238=1;
	                }


	                switch (alt238) {
	                case 1 :
	                    // XQueryParser.g:1951:50: k= CATCH p_CatchErrorList p_BlockStatement
	                    k=this.match(this.input,CATCH,XQueryParser.FOLLOW_CATCH_in_p_TryCatchStatement16473); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_CatchErrorList_in_p_TryCatchStatement16477);
	                    p_CatchErrorList764=this.p_CatchErrorList();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CatchErrorList764.getTree());
	                    this.pushFollow(XQueryParser.FOLLOW_p_BlockStatement_in_p_TryCatchStatement16479);
	                    p_BlockStatement765=this.p_BlockStatement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockStatement765.getTree());


	                    break;

	                default :
	                    if ( cnt238 >= 1 ) {
	                        break loop238;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(238, this.input);
	                        throw eee;
	                }
	                cnt238++;
	            } while (true);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TryCatchHybrid_return: (function() {
	        XQueryParser.p_TryCatchHybrid_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TryCatchHybrid_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1954:1: p_TryCatchHybrid[strict] : k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+ ;
	    // $ANTLR start "p_TryCatchHybrid"
	    p_TryCatchHybrid: function(strict) {
	        var retval = new XQueryParser.p_TryCatchHybrid_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_BlockHybrid766 = null;
	         var p_CatchErrorList767 = null;
	         var p_BlockHybrid768 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1955:9: (k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+ )
	            // XQueryParser.g:1955:11: k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,TRY,XQueryParser.FOLLOW_TRY_in_p_TryCatchHybrid16511); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16515);
	            p_BlockHybrid766=this.p_BlockHybrid(strict);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockHybrid766.getTree());
	            // XQueryParser.g:1955:55: (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+
	            var cnt239=0;
	            loop239:
	            do {
	                var alt239=2;
	                var LA239_0 = this.input.LA(1);

	                if ( (LA239_0==CATCH) ) {
	                    alt239=1;
	                }


	                switch (alt239) {
	                case 1 :
	                    // XQueryParser.g:1955:56: k= CATCH p_CatchErrorList p_BlockHybrid[$strict]
	                    k=this.match(this.input,CATCH,XQueryParser.FOLLOW_CATCH_in_p_TryCatchHybrid16521); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    k_tree = this.adaptor.create(k);
	                    this.adaptor.addChild(root_0, k_tree);
	                    }
	                    if ( this.state.backtracking===0 ) {
	                      this.ak(k);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_CatchErrorList_in_p_TryCatchHybrid16525);
	                    p_CatchErrorList767=this.p_CatchErrorList();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CatchErrorList767.getTree());
	                    this.pushFollow(XQueryParser.FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16527);
	                    p_BlockHybrid768=this.p_BlockHybrid(strict);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockHybrid768.getTree());


	                    break;

	                default :
	                    if ( cnt239 >= 1 ) {
	                        break loop239;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(239, this.input);
	                        throw eee;
	                }
	                cnt239++;
	            } while (true);

	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_TypeswitchStatement_return: (function() {
	        XQueryParser.p_TypeswitchStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_TypeswitchStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1959:1: p_TypeswitchStatement : k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false] ;
	    // $ANTLR start "p_TypeswitchStatement"
	    p_TypeswitchStatement: function() {
	        var retval = new XQueryParser.p_TypeswitchStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LPAREN769 = null;
	        var RPAREN771 = null;
	        var DOLLAR773 = null;
	         var p_Expr770 = null;
	         var p_CaseStatement772 = null;
	         var p_VarName774 = null;
	         var p_Hybrid775 = null;

	        var k_tree=null;
	        var LPAREN769_tree=null;
	        var RPAREN771_tree=null;
	        var DOLLAR773_tree=null;

	        try {
	            // XQueryParser.g:1960:9: (k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false] )
	            // XQueryParser.g:1960:11: k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,TYPESWITCH,XQueryParser.FOLLOW_TYPESWITCH_in_p_TypeswitchStatement16560); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LPAREN769=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_TypeswitchStatement16564); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN769_tree = this.adaptor.create(LPAREN769);
	            this.adaptor.addChild(root_0, LPAREN769_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_TypeswitchStatement16566);
	            p_Expr770=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr770.getTree());
	            RPAREN771=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_TypeswitchStatement16569); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN771_tree = this.adaptor.create(RPAREN771);
	            this.adaptor.addChild(root_0, RPAREN771_tree);
	            }
	            // XQueryParser.g:1960:71: ( p_CaseStatement )+
	            var cnt240=0;
	            loop240:
	            do {
	                var alt240=2;
	                var LA240_0 = this.input.LA(1);

	                if ( (LA240_0==CASE) ) {
	                    alt240=1;
	                }


	                switch (alt240) {
	                case 1 :
	                    // XQueryParser.g:1960:71: p_CaseStatement
	                    this.pushFollow(XQueryParser.FOLLOW_p_CaseStatement_in_p_TypeswitchStatement16571);
	                    p_CaseStatement772=this.p_CaseStatement();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CaseStatement772.getTree());


	                    break;

	                default :
	                    if ( cnt240 >= 1 ) {
	                        break loop240;
	                    }
	                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        var eee = new org.antlr.runtime.EarlyExitException(240, this.input);
	                        throw eee;
	                }
	                cnt240++;
	            } while (true);

	            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_TypeswitchStatement16576); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:1960:113: ( DOLLAR p_VarName )?
	            var alt241=2;
	            var LA241_0 = this.input.LA(1);

	            if ( (LA241_0==DOLLAR) ) {
	                alt241=1;
	            }
	            switch (alt241) {
	                case 1 :
	                    // XQueryParser.g:1960:114: DOLLAR p_VarName
	                    DOLLAR773=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TypeswitchStatement16581); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR773_tree = this.adaptor.create(DOLLAR773);
	                    this.adaptor.addChild(root_0, DOLLAR773_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TypeswitchStatement16583);
	                    p_VarName774=this.p_VarName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName774.getTree());


	                    break;

	            }

	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_TypeswitchStatement16589); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_TypeswitchStatement16593);
	            p_Hybrid775=this.p_Hybrid(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid775.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CaseStatement_return: (function() {
	        XQueryParser.p_CaseStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CaseStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1964:1: p_CaseStatement : k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false] ;
	    // $ANTLR start "p_CaseStatement"
	    p_CaseStatement: function() {
	        var retval = new XQueryParser.p_CaseStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR776 = null;
	        var AS778 = null;
	         var p_VarName777 = null;
	         var p_SequenceType779 = null;
	         var p_Hybrid780 = null;

	        var k_tree=null;
	        var DOLLAR776_tree=null;
	        var AS778_tree=null;

	        try {
	            // XQueryParser.g:1965:9: (k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false] )
	            // XQueryParser.g:1965:11: k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_CaseStatement16622); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            // XQueryParser.g:1965:33: ( DOLLAR p_VarName AS )?
	            var alt242=2;
	            var LA242_0 = this.input.LA(1);

	            if ( (LA242_0==DOLLAR) ) {
	                alt242=1;
	            }
	            switch (alt242) {
	                case 1 :
	                    // XQueryParser.g:1965:34: DOLLAR p_VarName AS
	                    DOLLAR776=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_CaseStatement16627); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR776_tree = this.adaptor.create(DOLLAR776);
	                    this.adaptor.addChild(root_0, DOLLAR776_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_CaseStatement16629);
	                    p_VarName777=this.p_VarName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName777.getTree());
	                    AS778=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CaseStatement16631); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    AS778_tree = this.adaptor.create(AS778);
	                    this.adaptor.addChild(root_0, AS778_tree);
	                    }


	                    break;

	            }

	            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_CaseStatement16635);
	            p_SequenceType779=this.p_SequenceType();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType779.getTree());
	            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_CaseStatement16639); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_CaseStatement16643);
	            p_Hybrid780=this.p_Hybrid(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid780.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_VarDeclStatement_return: (function() {
	        XQueryParser.p_VarDeclStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_VarDeclStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1969:1: p_VarDeclStatement : ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON ;
	    // $ANTLR start "p_VarDeclStatement"
	    p_VarDeclStatement: function() {
	        var retval = new XQueryParser.p_VarDeclStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR782 = null;
	        var BIND785 = null;
	        var COMMA787 = null;
	        var DOLLAR788 = null;
	        var BIND791 = null;
	        var SEMICOLON793 = null;
	         var p_Annotation781 = null;
	         var p_VarName783 = null;
	         var p_TypeDeclaration784 = null;
	         var p_ExprSingle786 = null;
	         var p_VarName789 = null;
	         var p_TypeDeclaration790 = null;
	         var p_ExprSingle792 = null;

	        var k_tree=null;
	        var DOLLAR782_tree=null;
	        var BIND785_tree=null;
	        var COMMA787_tree=null;
	        var DOLLAR788_tree=null;
	        var BIND791_tree=null;
	        var SEMICOLON793_tree=null;

	        try {
	            // XQueryParser.g:1970:9: ( ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON )
	            // XQueryParser.g:1970:11: ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:1970:11: ( p_Annotation )*
	            loop243:
	            do {
	                var alt243=2;
	                var LA243_0 = this.input.LA(1);

	                if ( (LA243_0==ANN_PERCENT) ) {
	                    alt243=1;
	                }


	                switch (alt243) {
	                case 1 :
	                    // XQueryParser.g:1970:11: p_Annotation
	                    this.pushFollow(XQueryParser.FOLLOW_p_Annotation_in_p_VarDeclStatement16670);
	                    p_Annotation781=this.p_Annotation();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Annotation781.getTree());


	                    break;

	                default :
	                    break loop243;
	                }
	            } while (true);

	            k=this.match(this.input,VARIABLE,XQueryParser.FOLLOW_VARIABLE_in_p_VarDeclStatement16675); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR782=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_VarDeclStatement16679); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR782_tree = this.adaptor.create(DOLLAR782);
	            this.adaptor.addChild(root_0, DOLLAR782_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_VarDeclStatement16681);
	            p_VarName783=this.p_VarName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName783.getTree());
	            // XQueryParser.g:1970:68: ( p_TypeDeclaration )?
	            var alt244=2;
	            var LA244_0 = this.input.LA(1);

	            if ( (LA244_0==AS) ) {
	                alt244=1;
	            }
	            switch (alt244) {
	                case 1 :
	                    // XQueryParser.g:1970:68: p_TypeDeclaration
	                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16683);
	                    p_TypeDeclaration784=this.p_TypeDeclaration();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration784.getTree());


	                    break;

	            }

	            // XQueryParser.g:1970:87: ( BIND p_ExprSingle[true] )?
	            var alt245=2;
	            var LA245_0 = this.input.LA(1);

	            if ( (LA245_0==BIND) ) {
	                alt245=1;
	            }
	            switch (alt245) {
	                case 1 :
	                    // XQueryParser.g:1970:88: BIND p_ExprSingle[true]
	                    BIND785=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_VarDeclStatement16687); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    BIND785_tree = this.adaptor.create(BIND785);
	                    this.adaptor.addChild(root_0, BIND785_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_VarDeclStatement16689);
	                    p_ExprSingle786=this.p_ExprSingle(true);

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle786.getTree());


	                    break;

	            }

	            // XQueryParser.g:1971:11: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )*
	            loop248:
	            do {
	                var alt248=2;
	                var LA248_0 = this.input.LA(1);

	                if ( (LA248_0==COMMA) ) {
	                    alt248=1;
	                }


	                switch (alt248) {
	                case 1 :
	                    // XQueryParser.g:1971:12: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )?
	                    COMMA787=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_VarDeclStatement16705); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COMMA787_tree = this.adaptor.create(COMMA787);
	                    this.adaptor.addChild(root_0, COMMA787_tree);
	                    }
	                    DOLLAR788=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_VarDeclStatement16707); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    DOLLAR788_tree = this.adaptor.create(DOLLAR788);
	                    this.adaptor.addChild(root_0, DOLLAR788_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_VarDeclStatement16709);
	                    p_VarName789=this.p_VarName();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName789.getTree());
	                    // XQueryParser.g:1971:35: ( p_TypeDeclaration )?
	                    var alt246=2;
	                    var LA246_0 = this.input.LA(1);

	                    if ( (LA246_0==AS) ) {
	                        alt246=1;
	                    }
	                    switch (alt246) {
	                        case 1 :
	                            // XQueryParser.g:1971:35: p_TypeDeclaration
	                            this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16711);
	                            p_TypeDeclaration790=this.p_TypeDeclaration();

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration790.getTree());


	                            break;

	                    }

	                    // XQueryParser.g:1971:54: ( BIND p_ExprSingle[true] )?
	                    var alt247=2;
	                    var LA247_0 = this.input.LA(1);

	                    if ( (LA247_0==BIND) ) {
	                        alt247=1;
	                    }
	                    switch (alt247) {
	                        case 1 :
	                            // XQueryParser.g:1971:55: BIND p_ExprSingle[true]
	                            BIND791=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_VarDeclStatement16715); if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) {
	                            BIND791_tree = this.adaptor.create(BIND791);
	                            this.adaptor.addChild(root_0, BIND791_tree);
	                            }
	                            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_VarDeclStatement16717);
	                            p_ExprSingle792=this.p_ExprSingle(true);

	                            this.state._fsp--;
	                            if (this.state.failed) return retval;
	                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle792.getTree());


	                            break;

	                    }



	                    break;

	                default :
	                    break loop248;
	                }
	            } while (true);

	            SEMICOLON793=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_VarDeclStatement16734); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            SEMICOLON793_tree = this.adaptor.create(SEMICOLON793);
	            this.adaptor.addChild(root_0, SEMICOLON793_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_WhileStatement_return: (function() {
	        XQueryParser.p_WhileStatement_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_WhileStatement_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1976:1: p_WhileStatement : k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false] ;
	    // $ANTLR start "p_WhileStatement"
	    p_WhileStatement: function() {
	        var retval = new XQueryParser.p_WhileStatement_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var LPAREN794 = null;
	        var RPAREN796 = null;
	         var p_Expr795 = null;
	         var p_Hybrid797 = null;

	        var k_tree=null;
	        var LPAREN794_tree=null;
	        var RPAREN796_tree=null;

	        try {
	            // XQueryParser.g:1977:9: (k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false] )
	            // XQueryParser.g:1977:11: k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,WHILE,XQueryParser.FOLLOW_WHILE_in_p_WhileStatement16762); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            LPAREN794=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_WhileStatement16766); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LPAREN794_tree = this.adaptor.create(LPAREN794);
	            this.adaptor.addChild(root_0, LPAREN794_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_WhileStatement16768);
	            p_Expr795=this.p_Expr(true, true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr795.getTree());
	            RPAREN796=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_WhileStatement16771); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RPAREN796_tree = this.adaptor.create(RPAREN796);
	            this.adaptor.addChild(root_0, RPAREN796_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_WhileStatement16773);
	            p_Hybrid797=this.p_Hybrid(false, false);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid797.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ExprSimple_return: (function() {
	        XQueryParser.p_ExprSimple_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ExprSimple_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1981:1: p_ExprSimple : ( p_QuantifiedExpr | p_OrExpr | {...}? => pg_UpdateExpr );
	    // $ANTLR start "p_ExprSimple"
	    p_ExprSimple: function() {
	        var retval = new XQueryParser.p_ExprSimple_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QuantifiedExpr798 = null;
	         var p_OrExpr799 = null;
	         var pg_UpdateExpr800 = null;


	        try {
	            // XQueryParser.g:1982:9: ( p_QuantifiedExpr | p_OrExpr | {...}? => pg_UpdateExpr )
	            var alt249=3;
	            alt249 = this.dfa249.predict(this.input);
	            switch (alt249) {
	                case 1 :
	                    // XQueryParser.g:1982:11: p_QuantifiedExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_QuantifiedExpr_in_p_ExprSimple16800);
	                    p_QuantifiedExpr798=this.p_QuantifiedExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QuantifiedExpr798.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:1983:11: p_OrExpr
	                    root_0 = this.adaptor.nil();

	                    this.pushFollow(XQueryParser.FOLLOW_p_OrExpr_in_p_ExprSimple16812);
	                    p_OrExpr799=this.p_OrExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrExpr799.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:1984:11: {...}? => pg_UpdateExpr
	                    root_0 = this.adaptor.nil();

	                    if ( !((this.lc(XQU))) ) {
	                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_ExprSimple", "this.lc(XQU)");
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_pg_UpdateExpr_in_p_ExprSimple16827);
	                    pg_UpdateExpr800=this.pg_UpdateExpr();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_UpdateExpr800.getTree());


	                    break;

	            }
	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_BlockExpr_return: (function() {
	        XQueryParser.p_BlockExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_BlockExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1988:1: p_BlockExpr : LBRACKET p_StatementsAndExpr RBRACKET ;
	    // $ANTLR start "p_BlockExpr"
	    p_BlockExpr: function() {
	        var retval = new XQueryParser.p_BlockExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var LBRACKET801 = null;
	        var RBRACKET803 = null;
	         var p_StatementsAndExpr802 = null;

	        var LBRACKET801_tree=null;
	        var RBRACKET803_tree=null;

	        try {
	            // XQueryParser.g:1989:9: ( LBRACKET p_StatementsAndExpr RBRACKET )
	            // XQueryParser.g:1989:11: LBRACKET p_StatementsAndExpr RBRACKET
	            root_0 = this.adaptor.nil();

	            LBRACKET801=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_BlockExpr16853); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            LBRACKET801_tree = this.adaptor.create(LBRACKET801);
	            this.adaptor.addChild(root_0, LBRACKET801_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndExpr_in_p_BlockExpr16855);
	            p_StatementsAndExpr802=this.p_StatementsAndExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndExpr802.getTree());
	            RBRACKET803=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_BlockExpr16857); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            RBRACKET803_tree = this.adaptor.create(RBRACKET803);
	            this.adaptor.addChild(root_0, RBRACKET803_tree);
	            }



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CollectionDecl_return: (function() {
	        XQueryParser.p_CollectionDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CollectionDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:1996:1: p_CollectionDecl : k= COLLECTION p_QName ( p_CollectionTypeDecl )? ;
	    // $ANTLR start "p_CollectionDecl"
	    p_CollectionDecl: function() {
	        var retval = new XQueryParser.p_CollectionDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_QName804 = null;
	         var p_CollectionTypeDecl805 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:1997:9: (k= COLLECTION p_QName ( p_CollectionTypeDecl )? )
	            // XQueryParser.g:1997:11: k= COLLECTION p_QName ( p_CollectionTypeDecl )?
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,COLLECTION,XQueryParser.FOLLOW_COLLECTION_in_p_CollectionDecl16888); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_CollectionDecl16892);
	            p_QName804=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName804.getTree());
	            // XQueryParser.g:1997:47: ( p_CollectionTypeDecl )?
	            var alt250=2;
	            var LA250_0 = this.input.LA(1);

	            if ( (LA250_0==AS) ) {
	                alt250=1;
	            }
	            switch (alt250) {
	                case 1 :
	                    // XQueryParser.g:1997:47: p_CollectionTypeDecl
	                    this.pushFollow(XQueryParser.FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl16894);
	                    p_CollectionTypeDecl805=this.p_CollectionTypeDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CollectionTypeDecl805.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_CollectionTypeDecl_return: (function() {
	        XQueryParser.p_CollectionTypeDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_CollectionTypeDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2000:1: p_CollectionTypeDecl : (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) ;
	    // $ANTLR start "p_CollectionTypeDecl"
	    p_CollectionTypeDecl: function() {
	        var retval = new XQueryParser.p_CollectionTypeDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_KindTest806 = null;
	         var p_OccurrenceIndicator807 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:2001:9: ( (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) )
	            // XQueryParser.g:2001:11: (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
	            root_0 = this.adaptor.nil();

	            // XQueryParser.g:2001:11: (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
	            // XQueryParser.g:2001:12: k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
	            k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CollectionTypeDecl16923); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_KindTest_in_p_CollectionTypeDecl16927);
	            p_KindTest806=this.p_KindTest();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_KindTest806.getTree());
	            // XQueryParser.g:2001:43: ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
	            var alt251=2;
	            var LA251_0 = this.input.LA(1);

	            if ( ((LA251_0>=QUESTION && LA251_0<=PLUS)) && (this.synpred18_XQueryParser())) {
	                alt251=1;
	            }
	            switch (alt251) {
	                case 1 :
	                    // XQueryParser.g:2001:44: ( p_OccurrenceIndicator )=> p_OccurrenceIndicator
	                    this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl16936);
	                    p_OccurrenceIndicator807=this.p_OccurrenceIndicator();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OccurrenceIndicator807.getTree());


	                    break;

	            }







	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IndexDecl_return: (function() {
	        XQueryParser.p_IndexDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IndexDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2004:1: p_IndexDecl : k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* ;
	    // $ANTLR start "p_IndexDecl"
	    p_IndexDecl: function() {
	        var retval = new XQueryParser.p_IndexDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var COMMA811 = null;
	         var p_IndexName808 = null;
	         var p_IndexDomainExpr809 = null;
	         var p_IndexKeySpec810 = null;
	         var p_IndexKeySpec812 = null;

	        var k_tree=null;
	        var COMMA811_tree=null;

	        try {
	            // XQueryParser.g:2005:9: (k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* )
	            // XQueryParser.g:2005:11: k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )*
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,INDEX,XQueryParser.FOLLOW_INDEX_in_p_IndexDecl16966); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_IndexName_in_p_IndexDecl16970);
	            p_IndexName808=this.p_IndexName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexName808.getTree());
	            k=this.match(this.input,ON,XQueryParser.FOLLOW_ON_in_p_IndexDecl16974); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,NODES,XQueryParser.FOLLOW_NODES_in_p_IndexDecl16980); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_IndexDomainExpr_in_p_IndexDecl16984);
	            p_IndexDomainExpr809=this.p_IndexDomainExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexDomainExpr809.getTree());
	            k=this.match(this.input,BY,XQueryParser.FOLLOW_BY_in_p_IndexDecl16988); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_IndexKeySpec_in_p_IndexDecl16992);
	            p_IndexKeySpec810=this.p_IndexKeySpec();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeySpec810.getTree());
	            // XQueryParser.g:2005:142: ( COMMA p_IndexKeySpec )*
	            loop252:
	            do {
	                var alt252=2;
	                var LA252_0 = this.input.LA(1);

	                if ( (LA252_0==COMMA) ) {
	                    alt252=1;
	                }


	                switch (alt252) {
	                case 1 :
	                    // XQueryParser.g:2005:143: COMMA p_IndexKeySpec
	                    COMMA811=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_IndexDecl16995); if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) {
	                    COMMA811_tree = this.adaptor.create(COMMA811);
	                    this.adaptor.addChild(root_0, COMMA811_tree);
	                    }
	                    this.pushFollow(XQueryParser.FOLLOW_p_IndexKeySpec_in_p_IndexDecl16997);
	                    p_IndexKeySpec812=this.p_IndexKeySpec();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeySpec812.getTree());


	                    break;

	                default :
	                    break loop252;
	                }
	            } while (true);




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IndexName_return: (function() {
	        XQueryParser.p_IndexName_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IndexName_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2008:1: p_IndexName : p_QName ;
	    // $ANTLR start "p_IndexName"
	    p_IndexName: function() {
	        var retval = new XQueryParser.p_IndexName_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName813 = null;


	        try {
	            // XQueryParser.g:2009:9: ( p_QName )
	            // XQueryParser.g:2009:11: p_QName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_IndexName17024);
	            p_QName813=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName813.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IndexDomainExpr_return: (function() {
	        XQueryParser.p_IndexDomainExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IndexDomainExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2012:1: p_IndexDomainExpr : p_PathExpr ;
	    // $ANTLR start "p_IndexDomainExpr"
	    p_IndexDomainExpr: function() {
	        var retval = new XQueryParser.p_IndexDomainExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_PathExpr814 = null;


	        try {
	            // XQueryParser.g:2013:9: ( p_PathExpr )
	            // XQueryParser.g:2013:11: p_PathExpr
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_IndexDomainExpr17049);
	            p_PathExpr814=this.p_PathExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr814.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IndexKeySpec_return: (function() {
	        XQueryParser.p_IndexKeySpec_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IndexKeySpec_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2016:1: p_IndexKeySpec : p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )? ;
	    // $ANTLR start "p_IndexKeySpec"
	    p_IndexKeySpec: function() {
	        var retval = new XQueryParser.p_IndexKeySpec_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_IndexKeyExpr815 = null;
	         var p_IndexKeyTypeDecl816 = null;
	         var p_IndexKeyCollation817 = null;


	        try {
	            // XQueryParser.g:2017:9: ( p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )? )
	            // XQueryParser.g:2017:11: p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )?
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec17074);
	            p_IndexKeyExpr815=this.p_IndexKeyExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeyExpr815.getTree());
	            // XQueryParser.g:2017:26: ( p_IndexKeyTypeDecl )?
	            var alt253=2;
	            var LA253_0 = this.input.LA(1);

	            if ( (LA253_0==AS) ) {
	                alt253=1;
	            }
	            switch (alt253) {
	                case 1 :
	                    // XQueryParser.g:2017:26: p_IndexKeyTypeDecl
	                    this.pushFollow(XQueryParser.FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec17076);
	                    p_IndexKeyTypeDecl816=this.p_IndexKeyTypeDecl();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeyTypeDecl816.getTree());


	                    break;

	            }

	            // XQueryParser.g:2017:46: ( p_IndexKeyCollation )?
	            var alt254=2;
	            var LA254_0 = this.input.LA(1);

	            if ( (LA254_0==COLLATION) ) {
	                alt254=1;
	            }
	            switch (alt254) {
	                case 1 :
	                    // XQueryParser.g:2017:46: p_IndexKeyCollation
	                    this.pushFollow(XQueryParser.FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec17079);
	                    p_IndexKeyCollation817=this.p_IndexKeyCollation();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeyCollation817.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IndexKeyExpr_return: (function() {
	        XQueryParser.p_IndexKeyExpr_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IndexKeyExpr_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2020:1: p_IndexKeyExpr : p_PathExpr ;
	    // $ANTLR start "p_IndexKeyExpr"
	    p_IndexKeyExpr: function() {
	        var retval = new XQueryParser.p_IndexKeyExpr_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_PathExpr818 = null;


	        try {
	            // XQueryParser.g:2021:9: ( p_PathExpr )
	            // XQueryParser.g:2021:11: p_PathExpr
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_IndexKeyExpr17105);
	            p_PathExpr818=this.p_PathExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr818.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IndexKeyTypeDecl_return: (function() {
	        XQueryParser.p_IndexKeyTypeDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IndexKeyTypeDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2024:1: p_IndexKeyTypeDecl : k= AS p_AtomicType ( p_OccurrenceIndicator )? ;
	    // $ANTLR start "p_IndexKeyTypeDecl"
	    p_IndexKeyTypeDecl: function() {
	        var retval = new XQueryParser.p_IndexKeyTypeDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_AtomicType819 = null;
	         var p_OccurrenceIndicator820 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:2025:9: (k= AS p_AtomicType ( p_OccurrenceIndicator )? )
	            // XQueryParser.g:2025:11: k= AS p_AtomicType ( p_OccurrenceIndicator )?
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_IndexKeyTypeDecl17132); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl17136);
	            p_AtomicType819=this.p_AtomicType();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AtomicType819.getTree());
	            // XQueryParser.g:2025:44: ( p_OccurrenceIndicator )?
	            var alt255=2;
	            var LA255_0 = this.input.LA(1);

	            if ( ((LA255_0>=QUESTION && LA255_0<=PLUS)) ) {
	                alt255=1;
	            }
	            switch (alt255) {
	                case 1 :
	                    // XQueryParser.g:2025:44: p_OccurrenceIndicator
	                    this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_p_IndexKeyTypeDecl17138);
	                    p_OccurrenceIndicator820=this.p_OccurrenceIndicator();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OccurrenceIndicator820.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_AtomicType_return: (function() {
	        XQueryParser.p_AtomicType_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_AtomicType_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2028:1: p_AtomicType : p_QName ;
	    // $ANTLR start "p_AtomicType"
	    p_AtomicType: function() {
	        var retval = new XQueryParser.p_AtomicType_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	         var p_QName821 = null;


	        try {
	            // XQueryParser.g:2029:9: ( p_QName )
	            // XQueryParser.g:2029:11: p_QName
	            root_0 = this.adaptor.nil();

	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_AtomicType17164);
	            p_QName821=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName821.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_IndexKeyCollation_return: (function() {
	        XQueryParser.p_IndexKeyCollation_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_IndexKeyCollation_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2032:1: p_IndexKeyCollation : k= COLLATION p_StringLiteral ;
	    // $ANTLR start "p_IndexKeyCollation"
	    p_IndexKeyCollation: function() {
	        var retval = new XQueryParser.p_IndexKeyCollation_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_StringLiteral822 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:2033:9: (k= COLLATION p_StringLiteral )
	            // XQueryParser.g:2033:11: k= COLLATION p_StringLiteral
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,COLLATION,XQueryParser.FOLLOW_COLLATION_in_p_IndexKeyCollation17191); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_IndexKeyCollation17195);
	            p_StringLiteral822=this.p_StringLiteral();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral822.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ICDecl_return: (function() {
	        XQueryParser.p_ICDecl_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ICDecl_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2036:1: p_ICDecl : k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) ;
	    // $ANTLR start "p_ICDecl"
	    p_ICDecl: function() {
	        var retval = new XQueryParser.p_ICDecl_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_QName823 = null;
	         var p_ICCollection824 = null;
	         var p_ICForeignKey825 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:2037:9: (k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) )
	            // XQueryParser.g:2037:11: k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey )
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,INTEGRITY,XQueryParser.FOLLOW_INTEGRITY_in_p_ICDecl17222); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,CONSTRAINT,XQueryParser.FOLLOW_CONSTRAINT_in_p_ICDecl17228); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICDecl17232);
	            p_QName823=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName823.getTree());
	            // XQueryParser.g:2037:74: ( p_ICCollection | p_ICForeignKey )
	            var alt256=2;
	            var LA256_0 = this.input.LA(1);

	            if ( (LA256_0==ON) ) {
	                alt256=1;
	            }
	            else if ( (LA256_0==FOREIGN) ) {
	                alt256=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 256, 0, this.input);

	                throw nvae;
	            }
	            switch (alt256) {
	                case 1 :
	                    // XQueryParser.g:2037:75: p_ICCollection
	                    this.pushFollow(XQueryParser.FOLLOW_p_ICCollection_in_p_ICDecl17235);
	                    p_ICCollection824=this.p_ICCollection();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICCollection824.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:2037:92: p_ICForeignKey
	                    this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKey_in_p_ICDecl17239);
	                    p_ICForeignKey825=this.p_ICForeignKey();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKey825.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ICCollection_return: (function() {
	        XQueryParser.p_ICCollection_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ICCollection_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2040:1: p_ICCollection : k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) ;
	    // $ANTLR start "p_ICCollection"
	    p_ICCollection: function() {
	        var retval = new XQueryParser.p_ICCollection_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_QName826 = null;
	         var p_ICCollSequence827 = null;
	         var p_ICCollSequenceUnique828 = null;
	         var p_ICCollNode829 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:2041:9: (k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) )
	            // XQueryParser.g:2041:11: k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,ON,XQueryParser.FOLLOW_ON_in_p_ICCollection17267); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,COLLECTION,XQueryParser.FOLLOW_COLLECTION_in_p_ICCollection17273); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICCollection17277);
	            p_QName826=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName826.getTree());
	            // XQueryParser.g:2041:67: ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
	            var alt257=3;
	            switch ( this.input.LA(1) ) {
	            case DOLLAR:
	                alt257=1;
	                break;
	            case NODE:
	                alt257=2;
	                break;
	            case FOREACH:
	                alt257=3;
	                break;
	            default:
	                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 257, 0, this.input);

	                throw nvae;
	            }

	            switch (alt257) {
	                case 1 :
	                    // XQueryParser.g:2041:68: p_ICCollSequence
	                    this.pushFollow(XQueryParser.FOLLOW_p_ICCollSequence_in_p_ICCollection17280);
	                    p_ICCollSequence827=this.p_ICCollSequence();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICCollSequence827.getTree());


	                    break;
	                case 2 :
	                    // XQueryParser.g:2041:87: p_ICCollSequenceUnique
	                    this.pushFollow(XQueryParser.FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection17284);
	                    p_ICCollSequenceUnique828=this.p_ICCollSequenceUnique();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICCollSequenceUnique828.getTree());


	                    break;
	                case 3 :
	                    // XQueryParser.g:2041:112: p_ICCollNode
	                    this.pushFollow(XQueryParser.FOLLOW_p_ICCollNode_in_p_ICCollection17288);
	                    p_ICCollNode829=this.p_ICCollNode();

	                    this.state._fsp--;
	                    if (this.state.failed) return retval;
	                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICCollNode829.getTree());


	                    break;

	            }




	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ICCollSequence_return: (function() {
	        XQueryParser.p_ICCollSequence_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ICCollSequence_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2044:1: p_ICCollSequence : DOLLAR p_QName k= CHECK p_ExprSingle[true] ;
	    // $ANTLR start "p_ICCollSequence"
	    p_ICCollSequence: function() {
	        var retval = new XQueryParser.p_ICCollSequence_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR830 = null;
	         var p_QName831 = null;
	         var p_ExprSingle832 = null;

	        var k_tree=null;
	        var DOLLAR830_tree=null;

	        try {
	            // XQueryParser.g:2045:9: ( DOLLAR p_QName k= CHECK p_ExprSingle[true] )
	            // XQueryParser.g:2045:11: DOLLAR p_QName k= CHECK p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            DOLLAR830=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ICCollSequence17314); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR830_tree = this.adaptor.create(DOLLAR830);
	            this.adaptor.addChild(root_0, DOLLAR830_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICCollSequence17316);
	            p_QName831=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName831.getTree());
	            k=this.match(this.input,CHECK,XQueryParser.FOLLOW_CHECK_in_p_ICCollSequence17320); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ICCollSequence17324);
	            p_ExprSingle832=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle832.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ICCollSequenceUnique_return: (function() {
	        XQueryParser.p_ICCollSequenceUnique_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ICCollSequenceUnique_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2048:1: p_ICCollSequenceUnique : k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr ;
	    // $ANTLR start "p_ICCollSequenceUnique"
	    p_ICCollSequenceUnique: function() {
	        var retval = new XQueryParser.p_ICCollSequenceUnique_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR833 = null;
	         var p_QName834 = null;
	         var p_PathExpr835 = null;

	        var k_tree=null;
	        var DOLLAR833_tree=null;

	        try {
	            // XQueryParser.g:2049:9: (k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr )
	            // XQueryParser.g:2049:11: k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_ICCollSequenceUnique17352); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR833=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ICCollSequenceUnique17356); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR833_tree = this.adaptor.create(DOLLAR833);
	            this.adaptor.addChild(root_0, DOLLAR833_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICCollSequenceUnique17358);
	            p_QName834=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName834.getTree());
	            k=this.match(this.input,CHECK,XQueryParser.FOLLOW_CHECK_in_p_ICCollSequenceUnique17362); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,UNIQUE,XQueryParser.FOLLOW_UNIQUE_in_p_ICCollSequenceUnique17368); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,KEY,XQueryParser.FOLLOW_KEY_in_p_ICCollSequenceUnique17374); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique17378);
	            p_PathExpr835=this.p_PathExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr835.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ICCollNode_return: (function() {
	        XQueryParser.p_ICCollNode_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ICCollNode_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2052:1: p_ICCollNode : k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true] ;
	    // $ANTLR start "p_ICCollNode"
	    p_ICCollNode: function() {
	        var retval = new XQueryParser.p_ICCollNode_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR836 = null;
	         var p_QName837 = null;
	         var p_ExprSingle838 = null;

	        var k_tree=null;
	        var DOLLAR836_tree=null;

	        try {
	            // XQueryParser.g:2053:9: (k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true] )
	            // XQueryParser.g:2053:11: k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true]
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,FOREACH,XQueryParser.FOLLOW_FOREACH_in_p_ICCollNode17405); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_ICCollNode17411); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR836=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ICCollNode17415); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR836_tree = this.adaptor.create(DOLLAR836);
	            this.adaptor.addChild(root_0, DOLLAR836_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICCollNode17417);
	            p_QName837=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName837.getTree());
	            k=this.match(this.input,CHECK,XQueryParser.FOLLOW_CHECK_in_p_ICCollNode17421); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ICCollNode17425);
	            p_ExprSingle838=this.p_ExprSingle(true);

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle838.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ICForeignKey_return: (function() {
	        XQueryParser.p_ICForeignKey_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ICForeignKey_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2056:1: p_ICForeignKey : k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget ;
	    // $ANTLR start "p_ICForeignKey"
	    p_ICForeignKey: function() {
	        var retval = new XQueryParser.p_ICForeignKey_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_ICForeignKeySource839 = null;
	         var p_ICForeignKeyTarget840 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:2057:9: (k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget )
	            // XQueryParser.g:2057:11: k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,FOREIGN,XQueryParser.FOLLOW_FOREIGN_in_p_ICForeignKey17453); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            k=this.match(this.input,KEY,XQueryParser.FOLLOW_KEY_in_p_ICForeignKey17459); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey17463);
	            p_ICForeignKeySource839=this.p_ICForeignKeySource();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKeySource839.getTree());
	            this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey17465);
	            p_ICForeignKeyTarget840=this.p_ICForeignKeyTarget();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKeyTarget840.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ICForeignKeySource_return: (function() {
	        XQueryParser.p_ICForeignKeySource_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ICForeignKeySource_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2060:1: p_ICForeignKeySource : k= FROM p_ICForeignKeyValues ;
	    // $ANTLR start "p_ICForeignKeySource"
	    p_ICForeignKeySource: function() {
	        var retval = new XQueryParser.p_ICForeignKeySource_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_ICForeignKeyValues841 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:2061:9: (k= FROM p_ICForeignKeyValues )
	            // XQueryParser.g:2061:11: k= FROM p_ICForeignKeyValues
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,FROM,XQueryParser.FOLLOW_FROM_in_p_ICForeignKeySource17492); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource17496);
	            p_ICForeignKeyValues841=this.p_ICForeignKeyValues();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKeyValues841.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ICForeignKeyTarget_return: (function() {
	        XQueryParser.p_ICForeignKeyTarget_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ICForeignKeyTarget_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2064:1: p_ICForeignKeyTarget : k= TO p_ICForeignKeyValues ;
	    // $ANTLR start "p_ICForeignKeyTarget"
	    p_ICForeignKeyTarget: function() {
	        var retval = new XQueryParser.p_ICForeignKeyTarget_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	         var p_ICForeignKeyValues842 = null;

	        var k_tree=null;

	        try {
	            // XQueryParser.g:2065:9: (k= TO p_ICForeignKeyValues )
	            // XQueryParser.g:2065:11: k= TO p_ICForeignKeyValues
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,TO,XQueryParser.FOLLOW_TO_in_p_ICForeignKeyTarget17523); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget17527);
	            p_ICForeignKeyValues842=this.p_ICForeignKeyValues();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKeyValues842.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // inline static return class
	    p_ICForeignKeyValues_return: (function() {
	        XQueryParser.p_ICForeignKeyValues_return = function(){};
	        org.antlr.lang.extend(XQueryParser.p_ICForeignKeyValues_return,
	                          org.antlr.runtime.ParserRuleReturnScope,
	        {
	            getTree: function() { return this.tree; }
	        });
	        return;
	    })(),

	    // XQueryParser.g:2068:1: p_ICForeignKeyValues : k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr ;
	    // $ANTLR start "p_ICForeignKeyValues"
	    p_ICForeignKeyValues: function() {
	        var retval = new XQueryParser.p_ICForeignKeyValues_return();
	        retval.start = this.input.LT(1);

	        var root_0 = null;

	        var k = null;
	        var DOLLAR844 = null;
	         var p_QName843 = null;
	         var p_QName845 = null;
	         var p_PathExpr846 = null;

	        var k_tree=null;
	        var DOLLAR844_tree=null;

	        try {
	            // XQueryParser.g:2069:9: (k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr )
	            // XQueryParser.g:2069:11: k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr
	            root_0 = this.adaptor.nil();

	            k=this.match(this.input,COLLECTION,XQueryParser.FOLLOW_COLLECTION_in_p_ICForeignKeyValues17554); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICForeignKeyValues17558);
	            p_QName843=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName843.getTree());
	            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_ICForeignKeyValues17562); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            DOLLAR844=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ICForeignKeyValues17566); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            DOLLAR844_tree = this.adaptor.create(DOLLAR844);
	            this.adaptor.addChild(root_0, DOLLAR844_tree);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICForeignKeyValues17568);
	            p_QName845=this.p_QName();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName845.getTree());
	            k=this.match(this.input,KEY,XQueryParser.FOLLOW_KEY_in_p_ICForeignKeyValues17572); if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) {
	            k_tree = this.adaptor.create(k);
	            this.adaptor.addChild(root_0, k_tree);
	            }
	            if ( this.state.backtracking===0 ) {
	              this.ak(k);
	            }
	            this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_ICForeignKeyValues17576);
	            p_PathExpr846=this.p_PathExpr();

	            this.state._fsp--;
	            if (this.state.failed) return retval;
	            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr846.getTree());



	            retval.stop = this.input.LT(-1);

	            if ( this.state.backtracking===0 ) {

	            retval.tree = this.adaptor.rulePostProcessing(root_0);
	            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
	            }
	        }
	        catch (re) {
	            if (re instanceof org.antlr.runtime.RecognitionException) {
	                this.reportError(re);
	                this.recover(this.input,re);
	                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
	            } else {
	                throw re;
	            }
	        }
	        finally {
	        }
	        return retval;
	    },

	    // $ANTLR start "synpred1_XQueryParser"
	    synpred1_XQueryParser_fragment: function() {
	        // XQueryParser.g:444:11: ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )
	        var alt258=2;
	        var LA258_0 = this.input.LA(1);

	        if ( (LA258_0==FOR) ) {
	            var LA258_1 = this.input.LA(2);

	            if ( (LA258_1==DOLLAR) ) {
	                alt258=1;
	            }
	            else if ( (LA258_1==SLIDING||LA258_1==TUMBLING) ) {
	                alt258=2;
	            }
	            else {
	                if (this.state.backtracking>0) {this.state.failed=true; return ;}
	                var nvae =
	                    new org.antlr.runtime.NoViableAltException("", 258, 1, this.input);

	                throw nvae;
	            }
	        }
	        else if ( (LA258_0==LET) ) {
	            alt258=1;
	        }
	        else {
	            if (this.state.backtracking>0) {this.state.failed=true; return ;}
	            var nvae =
	                new org.antlr.runtime.NoViableAltException("", 258, 0, this.input);

	            throw nvae;
	        }
	        switch (alt258) {
	            case 1 :
	                // XQueryParser.g:444:12: ( ( FOR | LET ) DOLLAR )
	                // XQueryParser.g:444:12: ( ( FOR | LET ) DOLLAR )
	                // XQueryParser.g:444:13: ( FOR | LET ) DOLLAR
	                if ( this.input.LA(1)==FOR||this.input.LA(1)==LET ) {
	                    this.input.consume();
	                    this.state.errorRecovery=false;this.state.failed=false;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
	                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                    throw mse;
	                }

	                this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_synpred1_XQueryParser3531); if (this.state.failed) return ;





	                break;
	            case 2 :
	                // XQueryParser.g:444:35: ( FOR ( TUMBLING | SLIDING ) )
	                // XQueryParser.g:444:35: ( FOR ( TUMBLING | SLIDING ) )
	                // XQueryParser.g:444:36: FOR ( TUMBLING | SLIDING )
	                this.match(this.input,FOR,XQueryParser.FOLLOW_FOR_in_synpred1_XQueryParser3537); if (this.state.failed) return ;
	                if ( this.input.LA(1)==SLIDING||this.input.LA(1)==TUMBLING ) {
	                    this.input.consume();
	                    this.state.errorRecovery=false;this.state.failed=false;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
	                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                    throw mse;
	                }






	                break;

	        }},
	    // $ANTLR end "synpred1_XQueryParser",

	    // $ANTLR start "synpred2_XQueryParser"
	    synpred2_XQueryParser_fragment: function() {
	        // XQueryParser.g:445:11: ( IF LPAREN )
	        // XQueryParser.g:445:12: IF LPAREN
	        this.match(this.input,IF,XQueryParser.FOLLOW_IF_in_synpred2_XQueryParser3565); if (this.state.failed) return ;
	        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred2_XQueryParser3567); if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred2_XQueryParser",

	    // $ANTLR start "synpred3_XQueryParser"
	    synpred3_XQueryParser_fragment: function() {
	        // XQueryParser.g:446:11: ( SWITCH LPAREN )
	        // XQueryParser.g:446:12: SWITCH LPAREN
	        this.match(this.input,SWITCH,XQueryParser.FOLLOW_SWITCH_in_synpred3_XQueryParser3595); if (this.state.failed) return ;
	        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred3_XQueryParser3597); if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred3_XQueryParser",

	    // $ANTLR start "synpred4_XQueryParser"
	    synpred4_XQueryParser_fragment: function() {
	        // XQueryParser.g:447:11: ( TYPESWITCH LPAREN )
	        // XQueryParser.g:447:12: TYPESWITCH LPAREN
	        this.match(this.input,TYPESWITCH,XQueryParser.FOLLOW_TYPESWITCH_in_synpred4_XQueryParser3621); if (this.state.failed) return ;
	        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred4_XQueryParser3623); if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred4_XQueryParser",

	    // $ANTLR start "synpred5_XQueryParser"
	    synpred5_XQueryParser_fragment: function() {
	        // XQueryParser.g:448:11: ( TRY LBRACKET )
	        // XQueryParser.g:448:12: TRY LBRACKET
	        this.match(this.input,TRY,XQueryParser.FOLLOW_TRY_in_synpred5_XQueryParser3643); if (this.state.failed) return ;
	        this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_synpred5_XQueryParser3645); if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred5_XQueryParser",

	    // $ANTLR start "synpred6_XQueryParser"
	    synpred6_XQueryParser_fragment: function() {
	        // XQueryParser.g:729:11: ( VALIDATE ( p_ValidationMode | TYPE )? )
	        // XQueryParser.g:729:12: VALIDATE ( p_ValidationMode | TYPE )?
	        this.match(this.input,VALIDATE,XQueryParser.FOLLOW_VALIDATE_in_synpred6_XQueryParser6057); if (this.state.failed) return ;
	        // XQueryParser.g:729:21: ( p_ValidationMode | TYPE )?
	        var alt259=3;
	        var LA259_0 = this.input.LA(1);

	        if ( (LA259_0==LAX||LA259_0==STRICT) ) {
	            alt259=1;
	        }
	        else if ( (LA259_0==TYPE) ) {
	            alt259=2;
	        }
	        switch (alt259) {
	            case 1 :
	                // XQueryParser.g:729:23: p_ValidationMode
	                this.pushFollow(XQueryParser.FOLLOW_p_ValidationMode_in_synpred6_XQueryParser6061);
	                this.p_ValidationMode();

	                this.state._fsp--;
	                if (this.state.failed) return ;


	                break;
	            case 2 :
	                // XQueryParser.g:729:42: TYPE
	                this.match(this.input,TYPE,XQueryParser.FOLLOW_TYPE_in_synpred6_XQueryParser6065); if (this.state.failed) return ;


	                break;

	        }



	    },
	    // $ANTLR end "synpred6_XQueryParser",

	    // $ANTLR start "synpred7_XQueryParser"
	    synpred7_XQueryParser_fragment: function() {
	        // XQueryParser.g:774:11: ( SLASH p_RelativePathExpr )
	        // XQueryParser.g:774:12: SLASH p_RelativePathExpr
	        this.match(this.input,SLASH,XQueryParser.FOLLOW_SLASH_in_synpred7_XQueryParser6405); if (this.state.failed) return ;
	        this.pushFollow(XQueryParser.FOLLOW_p_RelativePathExpr_in_synpred7_XQueryParser6407);
	        this.p_RelativePathExpr();

	        this.state._fsp--;
	        if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred7_XQueryParser",

	    // $ANTLR start "synpred8_XQueryParser"
	    synpred8_XQueryParser_fragment: function() {
	        // XQueryParser.g:787:11: ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )
	        // XQueryParser.g:
	        if ( this.input.LA(1)==LPAREN||(this.input.LA(1)>=DOLLAR && this.input.LA(1)<=LBRACKET)||this.input.LA(1)==SMALLER||(this.input.LA(1)>=APOS && this.input.LA(1)<=QUOT) ) {
	            this.input.consume();
	            this.state.errorRecovery=false;this.state.failed=false;
	        }
	        else {
	            if (this.state.backtracking>0) {this.state.failed=true; return ;}
	            var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	            throw mse;
	        }



	    },
	    // $ANTLR end "synpred8_XQueryParser",

	    // $ANTLR start "synpred9_XQueryParser"
	    synpred9_XQueryParser_fragment: function() {
	        // XQueryParser.g:788:11: ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )
	        var alt262=3;
	        switch ( this.input.LA(1) ) {
	        case ATTRIBUTE:
	        case ELEMENT:
	            alt262=1;
	            break;
	        case NAMESPACE:
	        case PROCESSING_INSTRUCTION:
	            alt262=2;
	            break;
	        case COMMENT:
	        case DOCUMENT:
	        case TEXT:
	            alt262=3;
	            break;
	        default:
	            if (this.state.backtracking>0) {this.state.failed=true; return ;}
	            var nvae =
	                new org.antlr.runtime.NoViableAltException("", 262, 0, this.input);

	            throw nvae;
	        }

	        switch (alt262) {
	            case 1 :
	                // XQueryParser.g:789:13: ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET )
	                // XQueryParser.g:789:13: ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET )
	                // XQueryParser.g:789:14: ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET
	                if ( this.input.LA(1)==ATTRIBUTE||this.input.LA(1)==ELEMENT ) {
	                    this.input.consume();
	                    this.state.errorRecovery=false;this.state.failed=false;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
	                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                    throw mse;
	                }

	                // XQueryParser.g:789:36: ( p_QName )?
	                var alt260=2;
	                var LA260_0 = this.input.LA(1);

	                if ( ((LA260_0>=ANCESTOR && LA260_0<=DECIMAL_SEPARATOR)||(LA260_0>=DIGIT && LA260_0<=SKIP)||(LA260_0>=VALUE && LA260_0<=QUOT_ER)||LA260_0==L_NCName||LA260_0==EXPLICITLY) ) {
	                    alt260=1;
	                }
	                switch (alt260) {
	                    case 1 :
	                        // XQueryParser.g:789:36: p_QName
	                        this.pushFollow(XQueryParser.FOLLOW_p_QName_in_synpred9_XQueryParser6582);
	                        this.p_QName();

	                        this.state._fsp--;
	                        if (this.state.failed) return ;


	                        break;

	                }

	                this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_synpred9_XQueryParser6585); if (this.state.failed) return ;





	                break;
	            case 2 :
	                // XQueryParser.g:790:13: ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET )
	                // XQueryParser.g:790:13: ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET )
	                // XQueryParser.g:790:14: ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET
	                if ( this.input.LA(1)==NAMESPACE||this.input.LA(1)==PROCESSING_INSTRUCTION ) {
	                    this.input.consume();
	                    this.state.errorRecovery=false;this.state.failed=false;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
	                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                    throw mse;
	                }

	                // XQueryParser.g:790:51: ( p_NCName )?
	                var alt261=2;
	                var LA261_0 = this.input.LA(1);

	                if ( ((LA261_0>=ANCESTOR && LA261_0<=DECIMAL_SEPARATOR)||(LA261_0>=DIGIT && LA261_0<=SKIP)||(LA261_0>=VALUE && LA261_0<=QUOT_ER)||LA261_0==L_NCName||LA261_0==EXPLICITLY) ) {
	                    alt261=1;
	                }
	                switch (alt261) {
	                    case 1 :
	                        // XQueryParser.g:790:51: p_NCName
	                        this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_synpred9_XQueryParser6611);
	                        this.p_NCName();

	                        this.state._fsp--;
	                        if (this.state.failed) return ;


	                        break;

	                }

	                this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_synpred9_XQueryParser6614); if (this.state.failed) return ;





	                break;
	            case 3 :
	                // XQueryParser.g:791:13: ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET )
	                // XQueryParser.g:791:13: ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET )
	                // XQueryParser.g:791:14: ( DOCUMENT | TEXT | COMMENT ) LBRACKET
	                if ( this.input.LA(1)==COMMENT||this.input.LA(1)==DOCUMENT||this.input.LA(1)==TEXT ) {
	                    this.input.consume();
	                    this.state.errorRecovery=false;this.state.failed=false;
	                }
	                else {
	                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
	                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
	                    throw mse;
	                }

	                this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_synpred9_XQueryParser6644); if (this.state.failed) return ;





	                break;

	        }},
	    // $ANTLR end "synpred9_XQueryParser",

	    // $ANTLR start "synpred10_XQueryParser"
	    synpred10_XQueryParser_fragment: function() {
	        // XQueryParser.g:793:11: ( p_KindTest )
	        // XQueryParser.g:793:12: p_KindTest
	        this.pushFollow(XQueryParser.FOLLOW_p_KindTest_in_synpred10_XQueryParser6674);
	        this.p_KindTest();

	        this.state._fsp--;
	        if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred10_XQueryParser",

	    // $ANTLR start "synpred11_XQueryParser"
	    synpred11_XQueryParser_fragment: function() {
	        // XQueryParser.g:794:11: ( p_QName LPAREN )
	        // XQueryParser.g:794:12: p_QName LPAREN
	        this.pushFollow(XQueryParser.FOLLOW_p_QName_in_synpred11_XQueryParser6693);
	        this.p_QName();

	        this.state._fsp--;
	        if (this.state.failed) return ;
	        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred11_XQueryParser6695); if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred11_XQueryParser",

	    // $ANTLR start "synpred12_XQueryParser"
	    synpred12_XQueryParser_fragment: function() {
	        // XQueryParser.g:795:11: ( p_PrimaryExpr )
	        // XQueryParser.g:795:12: p_PrimaryExpr
	        this.pushFollow(XQueryParser.FOLLOW_p_PrimaryExpr_in_synpred12_XQueryParser6713);
	        this.p_PrimaryExpr();

	        this.state._fsp--;
	        if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred12_XQueryParser",

	    // $ANTLR start "synpred13_XQueryParser"
	    synpred13_XQueryParser_fragment: function() {
	        // XQueryParser.g:853:11: ( p_Wildcard )
	        // XQueryParser.g:853:12: p_Wildcard
	        this.pushFollow(XQueryParser.FOLLOW_p_Wildcard_in_synpred13_XQueryParser7152);
	        this.p_Wildcard();

	        this.state._fsp--;
	        if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred13_XQueryParser",

	    // $ANTLR start "synpred14_XQueryParser"
	    synpred14_XQueryParser_fragment: function() {
	        // XQueryParser.g:854:11: ( p_NCName COLON )
	        // XQueryParser.g:854:12: p_NCName COLON
	        this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_synpred14_XQueryParser7171);
	        this.p_NCName();

	        this.state._fsp--;
	        if (this.state.failed) return ;
	        this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_synpred14_XQueryParser7173); if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred14_XQueryParser",

	    // $ANTLR start "synpred15_XQueryParser"
	    synpred15_XQueryParser_fragment: function() {
	        // XQueryParser.g:855:11: ( p_NCName )
	        // XQueryParser.g:855:12: p_NCName
	        this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_synpred15_XQueryParser7191);
	        this.p_NCName();

	        this.state._fsp--;
	        if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred15_XQueryParser",

	    // $ANTLR start "synpred16_XQueryParser"
	    synpred16_XQueryParser_fragment: function() {
	        // XQueryParser.g:892:11: ( LPAREN )
	        // XQueryParser.g:892:12: LPAREN
	        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred16_XQueryParser7447); if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred16_XQueryParser",

	    // $ANTLR start "synpred17_XQueryParser"
	    synpred17_XQueryParser_fragment: function() {
	        // XQueryParser.g:1171:26: ( p_OccurrenceIndicator )
	        // XQueryParser.g:1171:27: p_OccurrenceIndicator
	        this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_synpred17_XQueryParser9411);
	        this.p_OccurrenceIndicator();

	        this.state._fsp--;
	        if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred17_XQueryParser",

	    // $ANTLR start "synpred18_XQueryParser"
	    synpred18_XQueryParser_fragment: function() {
	        // XQueryParser.g:2001:44: ( p_OccurrenceIndicator )
	        // XQueryParser.g:2001:45: p_OccurrenceIndicator
	        this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_synpred18_XQueryParser16931);
	        this.p_OccurrenceIndicator();

	        this.state._fsp--;
	        if (this.state.failed) return ;


	    },
	    // $ANTLR end "synpred18_XQueryParser"

	    // Delegated rules



	    synpred3_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred3_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred15_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred15_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred7_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred7_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred9_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred9_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred10_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred10_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred17_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred17_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred5_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred5_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred12_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred12_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred16_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred16_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred14_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred14_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred6_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred6_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred18_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred18_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred8_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred8_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred13_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred13_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred4_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred4_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred11_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred11_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred1_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred1_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    },
	    synpred2_XQueryParser: function() {
	        this.state.backtracking++;
	        var start = this.input.mark();
	        try {
	            this.synpred2_XQueryParser_fragment(); // can never throw exception
	        } catch (re) {
	            alert("impossible: "+re.toString());
	        }
	        var success = !this.state.failed;
	        this.input.rewind(start);
	        this.state.backtracking--;
	        this.state.failed=false;
	        return success;
	    }

	}, true); // important to pass true to overwrite default implementations

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA1_eotS:
	        "\u000a\uffff",
	    DFA1_eofS:
	        "\u0001\u0005\u0001\u0009\u0008\uffff",
	    DFA1_minS:
	        "\u0001\u0010\u0001\u0012\u0008\uffff",
	    DFA1_maxS:
	        "\u0001\u0154\u0001\u00fe\u0008\uffff",
	    DFA1_acceptS:
	        "\u0002\uffff\u0004\u0002\u0001\u0001\u0003\u0002",
	    DFA1_specialS:
	        "\u0001\u0001\u0001\u0000\u0008\uffff}>",
	    DFA1_transitionS: [
	            "\u0002\u0002\u0004\u0004\u0001\u0002\u0006\u0004\u0001\u0002"+
	            "\u0001\u0004\u0001\u0002\u0002\u0004\u0001\u0002\u0001\u0004"+
	            "\u0002\u0002\u0002\u0004\u0003\u0002\u0005\u0004\u0001\u0002"+
	            "\u0002\u0004\u0003\u0002\u0005\u0004\u0002\u0002\u0009\u0004"+
	            "\u0001\u0002\u0002\u0004\u0002\u0002\u0003\u0004\u0001\u0002"+
	            "\u0004\u0004\u0001\u0002\u0001\u0004\u0003\u0002\u0001\u0004"+
	            "\u0001\u0002\u0003\u0004\u0004\u0002\u0003\u0004\u0001\u0002"+
	            "\u0003\u0004\u0001\u0002\u0001\u0004\u0003\u0002\u0002\u0004"+
	            "\u0001\u0001\u0006\u0004\u0001\uffff\u0006\u0004\u0001\u0002"+
	            "\u0009\u0004\u0002\u0002\u0007\u0004\u0002\u0002\u0001\u0004"+
	            "\u0001\u0002\u0004\u0004\u0002\u0002\u0002\u0004\u0001\u0002"+
	            "\u002c\u0004\u0003\u0002\u0002\u0004\u0001\u0002\u000a\u0004"+
	            "\u0001\u0002\u0003\u0004\u0001\u0002\u0001\uffff\u0002\u0002"+
	            "\u0006\uffff\u0001\u0003\u0004\uffff\u0004\u0002\u0005\uffff"+
	            "\u0004\u0002\u000c\uffff\u0001\u0002\u0002\uffff\u0002\u0002"+
	            "\u0002\uffff\u0001\u0004\u0006\uffff\u0006\u0002\u003b\uffff"+
	            "\u0001\u0004",
	            "\u0001\u0007\u0008\uffff\u0002\u0007\u000a\uffff\u0001\u0007"+
	            "\u0006\uffff\u0001\u0006\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0005\uffff\u0001\u0007\u0001\uffff\u0002\u0007\u0004\uffff"+
	            "\u0003\u0007\u0002\uffff\u0001\u0007\u0002\uffff\u0002\u0007"+
	            "\u0002\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0014\uffff"+
	            "\u0002\u0007\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0006"+
	            "\u0033\uffff\u0001\u0007\u003b\uffff\u0001\u0007\u0004\uffff"+
	            "\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0003\uffff\u0001\u0007\u0001\uffff\u000b\u0007\u0002\uffff"+
	            "\u0001\u0007\u0003\uffff\u0001\u0008\u0001\u0007",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA1_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_eotS),
	    DFA1_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_eofS),
	    DFA1_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA1_minS),
	    DFA1_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA1_maxS),
	    DFA1_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_acceptS),
	    DFA1_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_specialS),
	    DFA1_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA1_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA1 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 1;
	    this.eot = XQueryParser.DFA1_eot;
	    this.eof = XQueryParser.DFA1_eof;
	    this.min = XQueryParser.DFA1_min;
	    this.max = XQueryParser.DFA1_max;
	    this.accept = XQueryParser.DFA1_accept;
	    this.special = XQueryParser.DFA1_special;
	    this.transition = XQueryParser.DFA1_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA1, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "167:13: (vd= p_VersionDecl )?";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA1_1 = input.LA(1);


	                            var index1_1 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA1_1==ENCODING||LA1_1==VERSION) ) {s = 6;}

	                            else if ( (LA1_1==AND||(LA1_1>=CAST && LA1_1<=CASTABLE)||LA1_1==DIV||LA1_1==EQ||LA1_1==EXCEPT||LA1_1==GE||(LA1_1>=GT && LA1_1<=IDIV)||(LA1_1>=INSTANCE && LA1_1<=IS)||LA1_1==LE||(LA1_1>=LT && LA1_1<=MOD)||LA1_1==NE||LA1_1==OR||(LA1_1>=TO && LA1_1<=TREAT)||LA1_1==UNION||LA1_1==CONTAINS||LA1_1==LPAREN||LA1_1==LSQUARE||LA1_1==EQUAL||LA1_1==NOTEQUAL||LA1_1==COMMA||(LA1_1>=STAR && LA1_1<=SLASH_SLASH)||LA1_1==COLON||LA1_1==VBAR) ) {s = 7;}

	                            else if ( (LA1_1==SEMICOLON) && ((this.lc(XQS)))) {s = 8;}

	                            else if ( (LA1_1==EOF) ) {s = 9;}


	                            input.seek(index1_1);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 1 : 
	                            var LA1_0 = input.LA(1);


	                            var index1_0 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA1_0==XQUERY) ) {s = 1;}

	                            else if ( ((LA1_0>=ANCESTOR && LA1_0<=ANCESTOR_OR_SELF)||LA1_0==ATTRIBUTE||LA1_0==CHILD||LA1_0==COMMENT||LA1_0==DECLARE||(LA1_0>=DESCENDANT && LA1_0<=DESCENDANT_OR_SELF)||(LA1_0>=DOCUMENT && LA1_0<=ELEMENT)||LA1_0==EVERY||(LA1_0>=FOLLOWING && LA1_0<=FOR)||(LA1_0>=IF && LA1_0<=IMPORT)||LA1_0==LET||(LA1_0>=MODULE && LA1_0<=NAMESPACE)||LA1_0==NODE||LA1_0==ORDERED||(LA1_0>=PARENT && LA1_0<=PRECEDING_SIBLING)||LA1_0==PROCESSING_INSTRUCTION||(LA1_0>=SCHEMA_ATTRIBUTE && LA1_0<=SOME)||LA1_0==TEXT||LA1_0==TYPESWITCH||(LA1_0>=UNORDERED && LA1_0<=VARIABLE)||LA1_0==NAMESPACE_NODE||(LA1_0>=SWITCH && LA1_0<=TRY)||(LA1_0>=COPY && LA1_0<=DELETE)||LA1_0==INSERT||(LA1_0>=RENAME && LA1_0<=REPLACE)||LA1_0==UPDATING||(LA1_0>=BREAK && LA1_0<=EXIT)||LA1_0==WHILE||LA1_0==BINARY||LA1_0==LPAREN||(LA1_0>=DOLLAR && LA1_0<=LBRACKET)||(LA1_0>=STAR && LA1_0<=SMALLER)||(LA1_0>=SLASH && LA1_0<=DOT_DOT)||LA1_0==ATTR_SIGN||(LA1_0>=APOS && LA1_0<=QUOT)||(LA1_0>=L_Pragma && LA1_0<=L_DoubleLiteral)) ) {s = 2;}

	                            else if ( (LA1_0==ANN_PERCENT) && ((this.lc(XQS)))) {s = 3;}

	                            else if ( ((LA1_0>=AND && LA1_0<=AT)||(LA1_0>=BASE_URI && LA1_0<=CASTABLE)||LA1_0==COLLATION||(LA1_0>=CONSTRUCTION && LA1_0<=COPY_NAMESPACES)||LA1_0==DEFAULT||(LA1_0>=DESCENDING && LA1_0<=DIV)||(LA1_0>=ELSE && LA1_0<=EQ)||(LA1_0>=EXCEPT && LA1_0<=EXTERNAL)||(LA1_0>=FUNCTION && LA1_0<=IDIV)||(LA1_0>=IN && LA1_0<=LEAST)||(LA1_0>=LT && LA1_0<=MOD)||(LA1_0>=NE && LA1_0<=NO_PRESERVE)||(LA1_0>=OF && LA1_0<=ORDER)||LA1_0==ORDERING||LA1_0==PRESERVE||(LA1_0>=RETURN && LA1_0<=SCHEMA)||(LA1_0>=STABLE && LA1_0<=STRIP)||(LA1_0>=THEN && LA1_0<=TREAT)||LA1_0==UNION||(LA1_0>=VERSION && LA1_0<=WHERE)||(LA1_0>=ALLOWING && LA1_0<=DECIMAL_SEPARATOR)||(LA1_0>=DIGIT && LA1_0<=MINUS_SIGN)||(LA1_0>=NAN && LA1_0<=START)||(LA1_0>=TUMBLING && LA1_0<=BEFORE)||LA1_0==FIRST||(LA1_0>=INTO && LA1_0<=NODES)||(LA1_0>=REVALIDATION && LA1_0<=SKIP)||(LA1_0>=VALUE && LA1_0<=WORDS)||(LA1_0>=LOOP && LA1_0<=RETURNING)||(LA1_0>=CHECK && LA1_0<=UNIQUE)||(LA1_0>=AMP_ER && LA1_0<=QUOT_ER)||LA1_0==L_NCName||LA1_0==EXPLICITLY) ) {s = 4;}

	                            else if ( (LA1_0==EOF) && ((this.lc(XQS)))) {s = 5;}


	                            input.seek(index1_0);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 1, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA2_eotS:
	        "\u000a\uffff",
	    DFA2_eofS:
	        "\u0001\u0005\u0001\u0009\u0008\uffff",
	    DFA2_minS:
	        "\u0001\u0010\u0001\u0012\u0008\uffff",
	    DFA2_maxS:
	        "\u0001\u0154\u0001\u00fe\u0008\uffff",
	    DFA2_acceptS:
	        "\u0002\uffff\u0004\u0002\u0001\u0001\u0003\u0002",
	    DFA2_specialS:
	        "\u0001\u0001\u0001\u0000\u0008\uffff}>",
	    DFA2_transitionS: [
	            "\u0002\u0002\u0004\u0004\u0001\u0002\u0006\u0004\u0001\u0002"+
	            "\u0001\u0004\u0001\u0002\u0002\u0004\u0001\u0002\u0001\u0004"+
	            "\u0002\u0002\u0002\u0004\u0003\u0002\u0005\u0004\u0001\u0002"+
	            "\u0002\u0004\u0003\u0002\u0005\u0004\u0002\u0002\u0009\u0004"+
	            "\u0001\u0002\u0002\u0004\u0001\u0001\u0001\u0002\u0003\u0004"+
	            "\u0001\u0002\u0004\u0004\u0001\u0002\u0001\u0004\u0003\u0002"+
	            "\u0001\u0004\u0001\u0002\u0003\u0004\u0004\u0002\u0003\u0004"+
	            "\u0001\u0002\u0003\u0004\u0001\u0002\u0001\u0004\u0003\u0002"+
	            "\u0009\u0004\u0001\uffff\u0006\u0004\u0001\u0002\u0009\u0004"+
	            "\u0002\u0002\u0007\u0004\u0002\u0002\u0001\u0004\u0001\u0002"+
	            "\u0004\u0004\u0002\u0002\u0002\u0004\u0001\u0002\u002c\u0004"+
	            "\u0003\u0002\u0002\u0004\u0001\u0002\u000a\u0004\u0001\u0002"+
	            "\u0003\u0004\u0001\u0002\u0001\uffff\u0002\u0002\u0006\uffff"+
	            "\u0001\u0003\u0004\uffff\u0004\u0002\u0005\uffff\u0004\u0002"+
	            "\u000c\uffff\u0001\u0002\u0002\uffff\u0002\u0002\u0002\uffff"+
	            "\u0001\u0004\u0006\uffff\u0006\u0002\u003b\uffff\u0001\u0004",
	            "\u0001\u0007\u0008\uffff\u0002\u0007\u000a\uffff\u0001\u0007"+
	            "\u0007\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0005\uffff"+
	            "\u0001\u0007\u0001\uffff\u0002\u0007\u0004\uffff\u0003\u0007"+
	            "\u0002\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0001\uffff"+
	            "\u0001\u0006\u0001\u0007\u0005\uffff\u0001\u0007\u0014\uffff"+
	            "\u0002\u0007\u0001\uffff\u0001\u0007\u0037\uffff\u0001\u0007"+
	            "\u003b\uffff\u0001\u0007\u0004\uffff\u0001\u0007\u0001\uffff"+
	            "\u0001\u0007\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0007"+
	            "\u0001\uffff\u000b\u0007\u0002\uffff\u0001\u0007\u0003\uffff"+
	            "\u0001\u0008\u0001\u0007",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA2_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_eotS),
	    DFA2_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_eofS),
	    DFA2_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA2_minS),
	    DFA2_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA2_maxS),
	    DFA2_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_acceptS),
	    DFA2_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_specialS),
	    DFA2_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA2_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA2 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 2;
	    this.eot = XQueryParser.DFA2_eot;
	    this.eof = XQueryParser.DFA2_eof;
	    this.min = XQueryParser.DFA2_min;
	    this.max = XQueryParser.DFA2_max;
	    this.accept = XQueryParser.DFA2_accept;
	    this.special = XQueryParser.DFA2_special;
	    this.transition = XQueryParser.DFA2_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA2, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "168:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA2_1 = input.LA(1);


	                            var index2_1 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA2_1==NAMESPACE) ) {s = 6;}

	                            else if ( (LA2_1==AND||(LA2_1>=CAST && LA2_1<=CASTABLE)||LA2_1==DIV||LA2_1==EQ||LA2_1==EXCEPT||LA2_1==GE||(LA2_1>=GT && LA2_1<=IDIV)||(LA2_1>=INSTANCE && LA2_1<=IS)||LA2_1==LE||(LA2_1>=LT && LA2_1<=MOD)||LA2_1==NE||LA2_1==OR||(LA2_1>=TO && LA2_1<=TREAT)||LA2_1==UNION||LA2_1==CONTAINS||LA2_1==LPAREN||LA2_1==LSQUARE||LA2_1==EQUAL||LA2_1==NOTEQUAL||LA2_1==COMMA||(LA2_1>=STAR && LA2_1<=SLASH_SLASH)||LA2_1==COLON||LA2_1==VBAR) ) {s = 7;}

	                            else if ( (LA2_1==SEMICOLON) && ((this.lc(XQS)))) {s = 8;}

	                            else if ( (LA2_1==EOF) ) {s = 9;}


	                            input.seek(index2_1);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 1 : 
	                            var LA2_0 = input.LA(1);


	                            var index2_0 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA2_0==MODULE) ) {s = 1;}

	                            else if ( ((LA2_0>=ANCESTOR && LA2_0<=ANCESTOR_OR_SELF)||LA2_0==ATTRIBUTE||LA2_0==CHILD||LA2_0==COMMENT||LA2_0==DECLARE||(LA2_0>=DESCENDANT && LA2_0<=DESCENDANT_OR_SELF)||(LA2_0>=DOCUMENT && LA2_0<=ELEMENT)||LA2_0==EVERY||(LA2_0>=FOLLOWING && LA2_0<=FOR)||(LA2_0>=IF && LA2_0<=IMPORT)||LA2_0==LET||LA2_0==NAMESPACE||LA2_0==NODE||LA2_0==ORDERED||(LA2_0>=PARENT && LA2_0<=PRECEDING_SIBLING)||LA2_0==PROCESSING_INSTRUCTION||(LA2_0>=SCHEMA_ATTRIBUTE && LA2_0<=SOME)||LA2_0==TEXT||LA2_0==TYPESWITCH||(LA2_0>=UNORDERED && LA2_0<=VARIABLE)||LA2_0==NAMESPACE_NODE||(LA2_0>=SWITCH && LA2_0<=TRY)||(LA2_0>=COPY && LA2_0<=DELETE)||LA2_0==INSERT||(LA2_0>=RENAME && LA2_0<=REPLACE)||LA2_0==UPDATING||(LA2_0>=BREAK && LA2_0<=EXIT)||LA2_0==WHILE||LA2_0==BINARY||LA2_0==LPAREN||(LA2_0>=DOLLAR && LA2_0<=LBRACKET)||(LA2_0>=STAR && LA2_0<=SMALLER)||(LA2_0>=SLASH && LA2_0<=DOT_DOT)||LA2_0==ATTR_SIGN||(LA2_0>=APOS && LA2_0<=QUOT)||(LA2_0>=L_Pragma && LA2_0<=L_DoubleLiteral)) ) {s = 2;}

	                            else if ( (LA2_0==ANN_PERCENT) && ((this.lc(XQS)))) {s = 3;}

	                            else if ( ((LA2_0>=AND && LA2_0<=AT)||(LA2_0>=BASE_URI && LA2_0<=CASTABLE)||LA2_0==COLLATION||(LA2_0>=CONSTRUCTION && LA2_0<=COPY_NAMESPACES)||LA2_0==DEFAULT||(LA2_0>=DESCENDING && LA2_0<=DIV)||(LA2_0>=ELSE && LA2_0<=EQ)||(LA2_0>=EXCEPT && LA2_0<=EXTERNAL)||(LA2_0>=FUNCTION && LA2_0<=IDIV)||(LA2_0>=IN && LA2_0<=LEAST)||(LA2_0>=LT && LA2_0<=MOD)||(LA2_0>=NE && LA2_0<=NO_PRESERVE)||(LA2_0>=OF && LA2_0<=ORDER)||LA2_0==ORDERING||LA2_0==PRESERVE||(LA2_0>=RETURN && LA2_0<=SCHEMA)||(LA2_0>=STABLE && LA2_0<=STRIP)||(LA2_0>=THEN && LA2_0<=TREAT)||LA2_0==UNION||(LA2_0>=VERSION && LA2_0<=DECIMAL_SEPARATOR)||(LA2_0>=DIGIT && LA2_0<=MINUS_SIGN)||(LA2_0>=NAN && LA2_0<=START)||(LA2_0>=TUMBLING && LA2_0<=BEFORE)||LA2_0==FIRST||(LA2_0>=INTO && LA2_0<=NODES)||(LA2_0>=REVALIDATION && LA2_0<=SKIP)||(LA2_0>=VALUE && LA2_0<=WORDS)||(LA2_0>=LOOP && LA2_0<=RETURNING)||(LA2_0>=CHECK && LA2_0<=UNIQUE)||(LA2_0>=AMP_ER && LA2_0<=QUOT_ER)||LA2_0==L_NCName||LA2_0==EXPLICITLY) ) {s = 4;}

	                            else if ( (LA2_0==EOF) && ((this.lc(XQS)))) {s = 5;}


	                            input.seek(index2_0);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 2, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA6_eotS:
	        "\u000a\uffff",
	    DFA6_eofS:
	        "\u0001\u0005\u0001\u0009\u0002\uffff\u0001\u0009\u0005\uffff",
	    DFA6_minS:
	        "\u0001\u0010\u0001\u0012\u0002\uffff\u0001\u0012\u0005\uffff",
	    DFA6_maxS:
	        "\u0001\u0154\u0001\u00fe\u0002\uffff\u0001\u00fe\u0005\uffff",
	    DFA6_acceptS:
	        "\u0002\uffff\u0002\u0002\u0001\uffff\u0001\u0002\u0002\u0001\u0002"+
	    "\u0002",
	    DFA6_specialS:
	        "\u0001\u0001\u0001\u0000\u0002\uffff\u0001\u0002\u0005\uffff}>",
	    DFA6_transitionS: [
	            "\u0002\u0002\u0004\u0005\u0001\u0002\u0006\u0005\u0001\u0002"+
	            "\u0001\u0005\u0001\u0002\u0002\u0005\u0001\u0001\u0001\u0005"+
	            "\u0002\u0002\u0002\u0005\u0003\u0002\u0005\u0005\u0001\u0002"+
	            "\u0002\u0005\u0003\u0002\u0005\u0005\u0001\u0002\u0001\u0004"+
	            "\u0009\u0005\u0001\u0002\u0003\u0005\u0001\u0002\u0003\u0005"+
	            "\u0001\u0002\u0004\u0005\u0001\u0002\u0001\u0005\u0003\u0002"+
	            "\u0001\u0005\u0001\u0002\u0003\u0005\u0004\u0002\u0003\u0005"+
	            "\u0001\u0002\u0003\u0005\u0001\u0002\u0001\u0005\u0003\u0002"+
	            "\u0009\u0005\u0001\uffff\u0006\u0005\u0001\u0002\u0009\u0005"+
	            "\u0002\u0002\u0007\u0005\u0002\u0002\u0001\u0005\u0001\u0002"+
	            "\u0004\u0005\u0002\u0002\u0002\u0005\u0001\u0002\u002c\u0005"+
	            "\u0003\u0002\u0002\u0005\u0001\u0002\u000a\u0005\u0001\u0002"+
	            "\u0003\u0005\u0001\u0002\u0001\uffff\u0002\u0002\u0006\uffff"+
	            "\u0001\u0003\u0004\uffff\u0004\u0002\u0005\uffff\u0004\u0002"+
	            "\u000c\uffff\u0001\u0002\u0002\uffff\u0002\u0002\u0002\uffff"+
	            "\u0001\u0005\u0006\uffff\u0006\u0002\u003b\uffff\u0001\u0005",
	            "\u0001\u0005\u0004\uffff\u0002\u0007\u0002\uffff\u0002\u0005"+
	            "\u0003\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0003\uffff"+
	            "\u0001\u0005\u0007\uffff\u0001\u0005\u0001\uffff\u0001\u0005"+
	            "\u0004\uffff\u0002\u0005\u0001\uffff\u0002\u0005\u0004\uffff"+
	            "\u0003\u0005\u0002\uffff\u0001\u0005\u0002\uffff\u0002\u0005"+
	            "\u0001\uffff\u0001\u0007\u0001\u0005\u0004\uffff\u0002\u0005"+
	            "\u0002\uffff\u0001\u0007\u0011\uffff\u0002\u0005\u0001\uffff"+
	            "\u0001\u0005\u0002\uffff\u0001\u0005\u0005\uffff\u0001\u0005"+
	            "\u0001\uffff\u0001\u0007\u0025\uffff\u0001\u0006\u0001\uffff"+
	            "\u0001\u0005\u0004\uffff\u0001\u0005\u0007\uffff\u0001\u0007"+
	            "\u0026\uffff\u0001\u0005\u0003\uffff\u0002\u0005\u0007\uffff"+
	            "\u0001\u0005\u0004\uffff\u0001\u0005\u0001\uffff\u0001\u0005"+
	            "\u0001\uffff\u0002\u0005\u0002\uffff\u0001\u0005\u0001\uffff"+
	            "\u000b\u0005\u0002\uffff\u0001\u0005\u0003\uffff\u0001\u0008"+
	            "\u0001\u0005",
	            "",
	            "",
	            "\u0001\u0009\u0008\uffff\u0002\u0009\u000a\uffff\u0001\u0009"+
	            "\u0007\uffff\u0001\u0009\u0001\uffff\u0001\u0009\u0005\uffff"+
	            "\u0001\u0009\u0001\uffff\u0002\u0009\u0004\uffff\u0003\u0009"+
	            "\u0002\uffff\u0001\u0009\u0002\uffff\u0002\u0009\u0001\u0007"+
	            "\u0001\uffff\u0001\u0009\u0005\uffff\u0001\u0009\u000a\uffff"+
	            "\u0001\u0007\u0009\uffff\u0002\u0009\u0001\uffff\u0001\u0009"+
	            "\u0037\uffff\u0001\u0009\u003b\uffff\u0001\u0009\u0004\uffff"+
	            "\u0001\u0009\u0001\uffff\u0001\u0009\u0001\uffff\u0001\u0009"+
	            "\u0003\uffff\u0001\u0009\u0001\uffff\u000b\u0009\u0002\uffff"+
	            "\u0001\u0009\u0003\uffff\u0001\u0008\u0001\u0009",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA6_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_eotS),
	    DFA6_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_eofS),
	    DFA6_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA6_minS),
	    DFA6_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA6_maxS),
	    DFA6_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_acceptS),
	    DFA6_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_specialS),
	    DFA6_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA6_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA6 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 6;
	    this.eot = XQueryParser.DFA6_eot;
	    this.eof = XQueryParser.DFA6_eof;
	    this.min = XQueryParser.DFA6_min;
	    this.max = XQueryParser.DFA6_max;
	    this.accept = XQueryParser.DFA6_accept;
	    this.special = XQueryParser.DFA6_special;
	    this.transition = XQueryParser.DFA6_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA6, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "()* loopback of 203:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )*";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA6_1 = input.LA(1);


	                            var index6_1 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA6_1==REVALIDATION) && ((this.lc(XQU)))) {s = 6;}

	                            else if ( ((LA6_1>=BASE_URI && LA6_1<=BOUNDARY_SPACE)||(LA6_1>=CONSTRUCTION && LA6_1<=COPY_NAMESPACES)||LA6_1==DEFAULT||LA6_1==NAMESPACE||LA6_1==ORDERING||LA6_1==DECIMAL_FORMAT||LA6_1==FT_OPTION) ) {s = 7;}

	                            else if ( (LA6_1==AND||(LA6_1>=CAST && LA6_1<=CASTABLE)||LA6_1==DIV||LA6_1==EQ||LA6_1==EXCEPT||(LA6_1>=FUNCTION && LA6_1<=GE)||(LA6_1>=GT && LA6_1<=IDIV)||(LA6_1>=INSTANCE && LA6_1<=IS)||LA6_1==LE||(LA6_1>=LT && LA6_1<=MOD)||LA6_1==NE||(LA6_1>=OPTION && LA6_1<=OR)||(LA6_1>=TO && LA6_1<=TREAT)||LA6_1==UNION||LA6_1==VARIABLE||LA6_1==CONTEXT||LA6_1==UPDATING||LA6_1==CONTAINS||LA6_1==COLLECTION||(LA6_1>=INDEX && LA6_1<=INTEGRITY)||LA6_1==LPAREN||LA6_1==LSQUARE||LA6_1==EQUAL||(LA6_1>=NOTEQUAL && LA6_1<=ANN_PERCENT)||LA6_1==COMMA||(LA6_1>=STAR && LA6_1<=SLASH_SLASH)||LA6_1==COLON||LA6_1==VBAR) ) {s = 5;}

	                            else if ( (LA6_1==SEMICOLON) && ((this.lc(XQS)))) {s = 8;}

	                            else if ( (LA6_1==EOF) ) {s = 9;}


	                            input.seek(index6_1);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 1 : 
	                            var LA6_0 = input.LA(1);


	                            var index6_0 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA6_0==DECLARE) ) {s = 1;}

	                            else if ( ((LA6_0>=ANCESTOR && LA6_0<=ANCESTOR_OR_SELF)||LA6_0==ATTRIBUTE||LA6_0==CHILD||LA6_0==COMMENT||(LA6_0>=DESCENDANT && LA6_0<=DESCENDANT_OR_SELF)||(LA6_0>=DOCUMENT && LA6_0<=ELEMENT)||LA6_0==EVERY||(LA6_0>=FOLLOWING && LA6_0<=FOR)||LA6_0==IF||LA6_0==LET||LA6_0==NAMESPACE||LA6_0==NODE||LA6_0==ORDERED||(LA6_0>=PARENT && LA6_0<=PRECEDING_SIBLING)||LA6_0==PROCESSING_INSTRUCTION||(LA6_0>=SCHEMA_ATTRIBUTE && LA6_0<=SOME)||LA6_0==TEXT||LA6_0==TYPESWITCH||(LA6_0>=UNORDERED && LA6_0<=VARIABLE)||LA6_0==NAMESPACE_NODE||(LA6_0>=SWITCH && LA6_0<=TRY)||(LA6_0>=COPY && LA6_0<=DELETE)||LA6_0==INSERT||(LA6_0>=RENAME && LA6_0<=REPLACE)||LA6_0==UPDATING||(LA6_0>=BREAK && LA6_0<=EXIT)||LA6_0==WHILE||LA6_0==BINARY||LA6_0==LPAREN||(LA6_0>=DOLLAR && LA6_0<=LBRACKET)||(LA6_0>=STAR && LA6_0<=SMALLER)||(LA6_0>=SLASH && LA6_0<=DOT_DOT)||LA6_0==ATTR_SIGN||(LA6_0>=APOS && LA6_0<=QUOT)||(LA6_0>=L_Pragma && LA6_0<=L_DoubleLiteral)) ) {s = 2;}

	                            else if ( (LA6_0==ANN_PERCENT) && ((this.lc(XQS)))) {s = 3;}

	                            else if ( (LA6_0==IMPORT) ) {s = 4;}

	                            else if ( (LA6_0==EOF||(LA6_0>=AND && LA6_0<=AT)||(LA6_0>=BASE_URI && LA6_0<=CASTABLE)||LA6_0==COLLATION||(LA6_0>=CONSTRUCTION && LA6_0<=COPY_NAMESPACES)||LA6_0==DEFAULT||(LA6_0>=DESCENDING && LA6_0<=DIV)||(LA6_0>=ELSE && LA6_0<=EQ)||(LA6_0>=EXCEPT && LA6_0<=EXTERNAL)||(LA6_0>=FUNCTION && LA6_0<=IDIV)||(LA6_0>=IN && LA6_0<=LEAST)||(LA6_0>=LT && LA6_0<=MODULE)||(LA6_0>=NE && LA6_0<=NO_PRESERVE)||(LA6_0>=OF && LA6_0<=ORDER)||LA6_0==ORDERING||LA6_0==PRESERVE||(LA6_0>=RETURN && LA6_0<=SCHEMA)||(LA6_0>=STABLE && LA6_0<=STRIP)||(LA6_0>=THEN && LA6_0<=TREAT)||LA6_0==UNION||(LA6_0>=VERSION && LA6_0<=DECIMAL_SEPARATOR)||(LA6_0>=DIGIT && LA6_0<=MINUS_SIGN)||(LA6_0>=NAN && LA6_0<=START)||(LA6_0>=TUMBLING && LA6_0<=BEFORE)||LA6_0==FIRST||(LA6_0>=INTO && LA6_0<=NODES)||(LA6_0>=REVALIDATION && LA6_0<=SKIP)||(LA6_0>=VALUE && LA6_0<=WORDS)||(LA6_0>=LOOP && LA6_0<=RETURNING)||(LA6_0>=CHECK && LA6_0<=UNIQUE)||(LA6_0>=AMP_ER && LA6_0<=QUOT_ER)||LA6_0==L_NCName||LA6_0==EXPLICITLY) ) {s = 5;}


	                            input.seek(index6_0);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 2 : 
	                            var LA6_4 = input.LA(1);


	                            var index6_4 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA6_4==EOF||LA6_4==AND||(LA6_4>=CAST && LA6_4<=CASTABLE)||LA6_4==DIV||LA6_4==EQ||LA6_4==EXCEPT||LA6_4==GE||(LA6_4>=GT && LA6_4<=IDIV)||(LA6_4>=INSTANCE && LA6_4<=IS)||LA6_4==LE||(LA6_4>=LT && LA6_4<=MOD)||LA6_4==NE||LA6_4==OR||(LA6_4>=TO && LA6_4<=TREAT)||LA6_4==UNION||LA6_4==CONTAINS||LA6_4==LPAREN||LA6_4==LSQUARE||LA6_4==EQUAL||LA6_4==NOTEQUAL||LA6_4==COMMA||(LA6_4>=STAR && LA6_4<=SLASH_SLASH)||LA6_4==COLON||LA6_4==VBAR) ) {s = 9;}

	                            else if ( (LA6_4==SEMICOLON) && ((this.lc(XQS)))) {s = 8;}

	                            else if ( (LA6_4==MODULE||LA6_4==SCHEMA) ) {s = 7;}


	                            input.seek(index6_4);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 6, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA9_eotS:
	        "\u000c\uffff",
	    DFA9_eofS:
	        "\u000c\uffff",
	    DFA9_minS:
	        "\u0001\u0022\u0001\u0017\u0002\uffff\u0001\u001e\u0007\uffff",
	    DFA9_maxS:
	        "\u0001\u0022\u0001\u009a\u0002\uffff\u0001\u0074\u0007\uffff",
	    DFA9_acceptS:
	        "\u0002\uffff\u0001\u0007\u0001\u0001\u0001\uffff\u0001\u0003\u0001"+
	    "\u0004\u0001\u0005\u0001\u0008\u0001\u0009\u0001\u0002\u0001\u0006",
	    DFA9_specialS:
	        "\u0001\uffff\u0001\u0000\u000a\uffff}>",
	    DFA9_transitionS: [
	            "\u0001\u0001",
	            "\u0001\u0005\u0001\u0003\u0007\uffff\u0001\u0006\u0001\u0008"+
	            "\u0001\uffff\u0001\u0004\u0030\uffff\u0001\u0007\u001f\uffff"+
	            "\u0001\u0009\u0025\uffff\u0001\u0002",
	            "",
	            "",
	            "\u0001\u000a\u0033\uffff\u0001\u000b\u0021\uffff\u0001\u0009",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA9_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_eotS),
	    DFA9_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_eofS),
	    DFA9_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA9_minS),
	    DFA9_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA9_maxS),
	    DFA9_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_acceptS),
	    DFA9_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_specialS),
	    DFA9_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA9_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA9 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 9;
	    this.eot = XQueryParser.DFA9_eot;
	    this.eof = XQueryParser.DFA9_eof;
	    this.min = XQueryParser.DFA9_min;
	    this.max = XQueryParser.DFA9_max;
	    this.accept = XQueryParser.DFA9_accept;
	    this.special = XQueryParser.DFA9_special;
	    this.transition = XQueryParser.DFA9_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA9, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "229:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl );";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA9_1 = input.LA(1);


	                            var index9_1 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA9_1==REVALIDATION) && ((this.lc(XQU)))) {s = 2;}

	                            else if ( (LA9_1==BOUNDARY_SPACE) ) {s = 3;}

	                            else if ( (LA9_1==DEFAULT) ) {s = 4;}

	                            else if ( (LA9_1==BASE_URI) ) {s = 5;}

	                            else if ( (LA9_1==CONSTRUCTION) ) {s = 6;}

	                            else if ( (LA9_1==ORDERING) ) {s = 7;}

	                            else if ( (LA9_1==COPY_NAMESPACES) ) {s = 8;}

	                            else if ( (LA9_1==DECIMAL_FORMAT) ) {s = 9;}


	                            input.seek(index9_1);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 9, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA44_eotS:
	        "\u0046\uffff",
	    DFA44_eofS:
	        "\u0001\u0041\u0045\uffff",
	    DFA44_minS:
	        "\u0001\u0010\u0040\u0000\u0001\uffff\u0002\u0000\u0002\uffff",
	    DFA44_maxS:
	        "\u0001\u0154\u0040\u0000\u0001\uffff\u0002\u0000\u0002\uffff",
	    DFA44_acceptS:
	        "\u0041\uffff\u0001\u0001\u0003\uffff\u0001\u0002",
	    DFA44_specialS:
	        "\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001"+
	    "\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u000a\u0001"+
	    "\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001\u0010\u0001"+
	    "\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001"+
	    "\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001"+
	    "\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001\u0022\u0001"+
	    "\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001\u0028\u0001"+
	    "\u0029\u0001\u002a\u0001\u002b\u0001\u002c\u0001\u002d\u0001\u002e\u0001"+
	    "\u002f\u0001\u0030\u0001\u0031\u0001\u0032\u0001\u0033\u0001\u0034\u0001"+
	    "\u0035\u0001\u0036\u0001\u0037\u0001\u0038\u0001\u0039\u0001\u003a\u0001"+
	    "\u003b\u0001\u003c\u0001\u003d\u0001\u003e\u0001\u003f\u0001\u0040\u0001"+
	    "\uffff\u0001\u0041\u0001\u0042\u0002\uffff}>",
	    DFA44_transitionS: [
	            "\u0001\u0025\u0001\u0028\u0004\u0042\u0001\u001d\u0006\u0042"+
	            "\u0001\u0029\u0001\u0042\u0001\u0020\u0004\u0042\u0001\u002b"+
	            "\u0001\u002d\u0002\u0042\u0001\u0018\u0001\u0022\u0001\u0015"+
	            "\u0002\u0042\u0001\u0043\u0002\u0042\u0001\u0008\u0002\u0042"+
	            "\u0001\u002f\u0001\u002e\u0001\u0001\u0005\u0042\u0001\u0003"+
	            "\u0006\u0042\u0001\u0043\u0003\u0042\u0001\u0002\u0003\u0042"+
	            "\u0001\u001c\u0003\u0042\u0001\u0035\u0004\u0042\u0001\u0014"+
	            "\u0001\u0042\u0001\u0023\u0001\u0027\u0001\u0026\u0001\u0042"+
	            "\u0001\u0021\u0003\u0042\u0001\u0033\u0001\u0032\u0001\u002c"+
	            "\u0001\u0007\u0003\u0042\u0001\u001e\u0003\u0042\u0001\u0005"+
	            "\u0001\u0042\u0001\u0017\u0001\u000b\u0001\u0040\u0009\u0042"+
	            "\u0001\uffff\u0006\u0042\u0001\u0034\u0009\u0042\u0001\u0004"+
	            "\u0001\u0006\u0007\u0042\u0001\u003c\u0001\u0039\u0001\u0042"+
	            "\u0001\u0030\u0004\u0042\u0001\u003a\u0001\u003b\u0002\u0042"+
	            "\u0001\u0016\u002c\u0042\u0001\u003d\u0001\u003e\u0001\u003f"+
	            "\u0002\u0042\u0001\u0036\u000a\u0042\u0001\u001f\u0003\u0042"+
	            "\u0001\u000e\u0001\uffff\u0001\u0012\u0001\u0024\u0006\uffff"+
	            "\u0001\u0041\u0004\uffff\u0001\u0037\u0001\u0009\u0001\u000a"+
	            "\u0001\u0019\u0005\uffff\u0001\u000c\u0001\u000d\u0001\u0013"+
	            "\u0001\u002a\u000c\uffff\u0001\u0031\u0002\uffff\u0001\u0011"+
	            "\u0001\u0010\u0002\uffff\u0001\u0042\u0006\uffff\u0001\u0038"+
	            "\u0001\u001a\u0001\u001b\u0003\u000f\u003b\uffff\u0001\u0042",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA44_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_eotS),
	    DFA44_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_eofS),
	    DFA44_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA44_minS),
	    DFA44_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA44_maxS),
	    DFA44_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_acceptS),
	    DFA44_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_specialS),
	    DFA44_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA44_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA44 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 44;
	    this.eot = XQueryParser.DFA44_eot;
	    this.eof = XQueryParser.DFA44_eof;
	    this.min = XQueryParser.DFA44_min;
	    this.max = XQueryParser.DFA44_max;
	    this.accept = XQueryParser.DFA44_accept;
	    this.special = XQueryParser.DFA44_special;
	    this.transition = XQueryParser.DFA44_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA44, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "408:1: pm_QueryBody : ({...}? => p_Program | p_Expr[true,true] );";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA44_0 = input.LA(1);


	                            var index44_0 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA44_0==FOR) ) {s = 1;}

	                            else if ( (LA44_0==LET) ) {s = 2;}

	                            else if ( (LA44_0==IF) ) {s = 3;}

	                            else if ( (LA44_0==SWITCH) ) {s = 4;}

	                            else if ( (LA44_0==TYPESWITCH) ) {s = 5;}

	                            else if ( (LA44_0==TRY) ) {s = 6;}

	                            else if ( (LA44_0==SOME) ) {s = 7;}

	                            else if ( (LA44_0==EVERY) ) {s = 8;}

	                            else if ( (LA44_0==PLUS) ) {s = 9;}

	                            else if ( (LA44_0==MINUS) ) {s = 10;}

	                            else if ( (LA44_0==VALIDATE) ) {s = 11;}

	                            else if ( (LA44_0==SLASH) ) {s = 12;}

	                            else if ( (LA44_0==SLASH_SLASH) ) {s = 13;}

	                            else if ( (LA44_0==LPAREN) ) {s = 14;}

	                            else if ( ((LA44_0>=L_IntegerLiteral && LA44_0<=L_DoubleLiteral)) ) {s = 15;}

	                            else if ( (LA44_0==QUOT) ) {s = 16;}

	                            else if ( (LA44_0==APOS) ) {s = 17;}

	                            else if ( (LA44_0==DOLLAR) ) {s = 18;}

	                            else if ( (LA44_0==DOT) ) {s = 19;}

	                            else if ( (LA44_0==ORDERED) ) {s = 20;}

	                            else if ( (LA44_0==ELEMENT) ) {s = 21;}

	                            else if ( (LA44_0==UPDATING) ) {s = 22;}

	                            else if ( (LA44_0==UNORDERED) ) {s = 23;}

	                            else if ( (LA44_0==DOCUMENT) ) {s = 24;}

	                            else if ( (LA44_0==SMALLER) ) {s = 25;}

	                            else if ( (LA44_0==L_DirCommentConstructor) ) {s = 26;}

	                            else if ( (LA44_0==L_DirPIConstructor) ) {s = 27;}

	                            else if ( (LA44_0==NAMESPACE) ) {s = 28;}

	                            else if ( (LA44_0==ATTRIBUTE) ) {s = 29;}

	                            else if ( (LA44_0==TEXT) ) {s = 30;}

	                            else if ( (LA44_0==BINARY) ) {s = 31;}

	                            else if ( (LA44_0==COMMENT) ) {s = 32;}

	                            else if ( (LA44_0==PROCESSING_INSTRUCTION) ) {s = 33;}

	                            else if ( (LA44_0==DOCUMENT_NODE) ) {s = 34;}

	                            else if ( (LA44_0==PARENT) ) {s = 35;}

	                            else if ( (LA44_0==LBRACKET) ) {s = 36;}

	                            else if ( (LA44_0==ANCESTOR) ) {s = 37;}

	                            else if ( (LA44_0==PRECEDING_SIBLING) ) {s = 38;}

	                            else if ( (LA44_0==PRECEDING) ) {s = 39;}

	                            else if ( (LA44_0==ANCESTOR_OR_SELF) ) {s = 40;}

	                            else if ( (LA44_0==CHILD) ) {s = 41;}

	                            else if ( (LA44_0==DOT_DOT) ) {s = 42;}

	                            else if ( (LA44_0==DESCENDANT) ) {s = 43;}

	                            else if ( (LA44_0==SELF) ) {s = 44;}

	                            else if ( (LA44_0==DESCENDANT_OR_SELF) ) {s = 45;}

	                            else if ( (LA44_0==FOLLOWING_SIBLING) ) {s = 46;}

	                            else if ( (LA44_0==FOLLOWING) ) {s = 47;}

	                            else if ( (LA44_0==INSERT) ) {s = 48;}

	                            else if ( (LA44_0==ATTR_SIGN) ) {s = 49;}

	                            else if ( (LA44_0==SCHEMA_ELEMENT) ) {s = 50;}

	                            else if ( (LA44_0==SCHEMA_ATTRIBUTE) ) {s = 51;}

	                            else if ( (LA44_0==NAMESPACE_NODE) ) {s = 52;}

	                            else if ( (LA44_0==NODE) ) {s = 53;}

	                            else if ( (LA44_0==WHILE) ) {s = 54;}

	                            else if ( (LA44_0==STAR) ) {s = 55;}

	                            else if ( (LA44_0==L_Pragma) ) {s = 56;}

	                            else if ( (LA44_0==DELETE) ) {s = 57;}

	                            else if ( (LA44_0==RENAME) ) {s = 58;}

	                            else if ( (LA44_0==REPLACE) ) {s = 59;}

	                            else if ( (LA44_0==COPY) ) {s = 60;}

	                            else if ( (LA44_0==BREAK) ) {s = 61;}

	                            else if ( (LA44_0==CONTINUE) ) {s = 62;}

	                            else if ( (LA44_0==EXIT) ) {s = 63;}

	                            else if ( (LA44_0==VARIABLE) ) {s = 64;}

	                            else if ( (LA44_0==EOF||LA44_0==ANN_PERCENT) && ((this.lc(XQS)))) {s = 65;}

	                            else if ( ((LA44_0>=AND && LA44_0<=AT)||(LA44_0>=BASE_URI && LA44_0<=CASTABLE)||LA44_0==COLLATION||(LA44_0>=CONSTRUCTION && LA44_0<=DEFAULT)||(LA44_0>=DESCENDING && LA44_0<=DIV)||(LA44_0>=ELSE && LA44_0<=EMPTY)||(LA44_0>=ENCODING && LA44_0<=EQ)||(LA44_0>=EXCEPT && LA44_0<=EXTERNAL)||(LA44_0>=FUNCTION && LA44_0<=IDIV)||(LA44_0>=IMPORT && LA44_0<=IS)||(LA44_0>=LAX && LA44_0<=LEAST)||(LA44_0>=LT && LA44_0<=MODULE)||(LA44_0>=NE && LA44_0<=NO_PRESERVE)||(LA44_0>=OF && LA44_0<=ORDER)||LA44_0==ORDERING||LA44_0==PRESERVE||(LA44_0>=RETURN && LA44_0<=SCHEMA)||(LA44_0>=STABLE && LA44_0<=STRIP)||(LA44_0>=THEN && LA44_0<=TREAT)||LA44_0==UNION||(LA44_0>=VERSION && LA44_0<=DECIMAL_SEPARATOR)||(LA44_0>=DIGIT && LA44_0<=MINUS_SIGN)||(LA44_0>=NAN && LA44_0<=START)||(LA44_0>=TUMBLING && LA44_0<=BEFORE)||LA44_0==FIRST||(LA44_0>=INTO && LA44_0<=NODES)||(LA44_0>=REVALIDATION && LA44_0<=SKIP)||(LA44_0>=VALUE && LA44_0<=WORDS)||(LA44_0>=LOOP && LA44_0<=RETURNING)||(LA44_0>=CHECK && LA44_0<=UNIQUE)||(LA44_0>=AMP_ER && LA44_0<=QUOT_ER)||LA44_0==L_NCName||LA44_0==EXPLICITLY) ) {s = 66;}

	                            else if ( (LA44_0==EMPTY_SEQUENCE||LA44_0==ITEM) ) {s = 67;}


	                            input.seek(index44_0);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 1 : 
	                            var LA44_1 = input.LA(1);


	                            var index44_1 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_1);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 2 : 
	                            var LA44_2 = input.LA(1);


	                            var index44_2 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_2);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 3 : 
	                            var LA44_3 = input.LA(1);


	                            var index44_3 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_3);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 4 : 
	                            var LA44_4 = input.LA(1);


	                            var index44_4 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_4);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 5 : 
	                            var LA44_5 = input.LA(1);


	                            var index44_5 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_5);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 6 : 
	                            var LA44_6 = input.LA(1);


	                            var index44_6 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_6);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 7 : 
	                            var LA44_7 = input.LA(1);


	                            var index44_7 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_7);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 8 : 
	                            var LA44_8 = input.LA(1);


	                            var index44_8 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_8);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 9 : 
	                            var LA44_9 = input.LA(1);


	                            var index44_9 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_9);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 10 : 
	                            var LA44_10 = input.LA(1);


	                            var index44_10 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_10);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 11 : 
	                            var LA44_11 = input.LA(1);


	                            var index44_11 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_11);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 12 : 
	                            var LA44_12 = input.LA(1);


	                            var index44_12 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_12);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 13 : 
	                            var LA44_13 = input.LA(1);


	                            var index44_13 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_13);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 14 : 
	                            var LA44_14 = input.LA(1);


	                            var index44_14 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_14);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 15 : 
	                            var LA44_15 = input.LA(1);


	                            var index44_15 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_15);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 16 : 
	                            var LA44_16 = input.LA(1);


	                            var index44_16 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_16);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 17 : 
	                            var LA44_17 = input.LA(1);


	                            var index44_17 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_17);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 18 : 
	                            var LA44_18 = input.LA(1);


	                            var index44_18 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_18);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 19 : 
	                            var LA44_19 = input.LA(1);


	                            var index44_19 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_19);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 20 : 
	                            var LA44_20 = input.LA(1);


	                            var index44_20 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_20);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 21 : 
	                            var LA44_21 = input.LA(1);


	                            var index44_21 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_21);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 22 : 
	                            var LA44_22 = input.LA(1);


	                            var index44_22 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_22);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 23 : 
	                            var LA44_23 = input.LA(1);


	                            var index44_23 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_23);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 24 : 
	                            var LA44_24 = input.LA(1);


	                            var index44_24 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_24);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 25 : 
	                            var LA44_25 = input.LA(1);


	                            var index44_25 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_25);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 26 : 
	                            var LA44_26 = input.LA(1);


	                            var index44_26 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_26);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 27 : 
	                            var LA44_27 = input.LA(1);


	                            var index44_27 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_27);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 28 : 
	                            var LA44_28 = input.LA(1);


	                            var index44_28 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_28);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 29 : 
	                            var LA44_29 = input.LA(1);


	                            var index44_29 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_29);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 30 : 
	                            var LA44_30 = input.LA(1);


	                            var index44_30 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_30);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 31 : 
	                            var LA44_31 = input.LA(1);


	                            var index44_31 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((((this.lc(XQS))&&(this.lc(MLS)))||((this.lc(XQS))&&(this.lc(MLS)))||((this.lc(XQS))&&(this.lc(MLS)))||(this.lc(XQS))||((this.lc(XQS))&&(this.lc(MLS))))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_31);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 32 : 
	                            var LA44_32 = input.LA(1);


	                            var index44_32 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_32);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 33 : 
	                            var LA44_33 = input.LA(1);


	                            var index44_33 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_33);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 34 : 
	                            var LA44_34 = input.LA(1);


	                            var index44_34 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_34);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 35 : 
	                            var LA44_35 = input.LA(1);


	                            var index44_35 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_35);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 36 : 
	                            var LA44_36 = input.LA(1);


	                            var index44_36 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_36);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 37 : 
	                            var LA44_37 = input.LA(1);


	                            var index44_37 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_37);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 38 : 
	                            var LA44_38 = input.LA(1);


	                            var index44_38 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_38);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 39 : 
	                            var LA44_39 = input.LA(1);


	                            var index44_39 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_39);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 40 : 
	                            var LA44_40 = input.LA(1);


	                            var index44_40 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_40);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 41 : 
	                            var LA44_41 = input.LA(1);


	                            var index44_41 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_41);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 42 : 
	                            var LA44_42 = input.LA(1);


	                            var index44_42 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_42);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 43 : 
	                            var LA44_43 = input.LA(1);


	                            var index44_43 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_43);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 44 : 
	                            var LA44_44 = input.LA(1);


	                            var index44_44 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_44);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 45 : 
	                            var LA44_45 = input.LA(1);


	                            var index44_45 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_45);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 46 : 
	                            var LA44_46 = input.LA(1);


	                            var index44_46 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_46);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 47 : 
	                            var LA44_47 = input.LA(1);


	                            var index44_47 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_47);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 48 : 
	                            var LA44_48 = input.LA(1);


	                            var index44_48 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (((this.lc(XQS))||((this.lc(XQS))&&(this.lc(XQU))))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_48);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 49 : 
	                            var LA44_49 = input.LA(1);


	                            var index44_49 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_49);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 50 : 
	                            var LA44_50 = input.LA(1);


	                            var index44_50 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_50);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 51 : 
	                            var LA44_51 = input.LA(1);


	                            var index44_51 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_51);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 52 : 
	                            var LA44_52 = input.LA(1);


	                            var index44_52 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_52);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 53 : 
	                            var LA44_53 = input.LA(1);


	                            var index44_53 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_53);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 54 : 
	                            var LA44_54 = input.LA(1);


	                            var index44_54 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_54);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 55 : 
	                            var LA44_55 = input.LA(1);


	                            var index44_55 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_55);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 56 : 
	                            var LA44_56 = input.LA(1);


	                            var index44_56 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_56);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 57 : 
	                            var LA44_57 = input.LA(1);


	                            var index44_57 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (((this.lc(XQS))||((this.lc(XQS))&&(this.lc(XQU))))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_57);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 58 : 
	                            var LA44_58 = input.LA(1);


	                            var index44_58 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (((this.lc(XQS))||((this.lc(XQS))&&(this.lc(XQU))))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_58);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 59 : 
	                            var LA44_59 = input.LA(1);


	                            var index44_59 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (((this.lc(XQS))||((this.lc(XQS))&&(this.lc(XQU))))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_59);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 60 : 
	                            var LA44_60 = input.LA(1);


	                            var index44_60 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (((this.lc(XQS))||((this.lc(XQS))&&(this.lc(XQU))))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_60);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 61 : 
	                            var LA44_61 = input.LA(1);


	                            var index44_61 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_61);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 62 : 
	                            var LA44_62 = input.LA(1);


	                            var index44_62 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_62);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 63 : 
	                            var LA44_63 = input.LA(1);


	                            var index44_63 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_63);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 64 : 
	                            var LA44_64 = input.LA(1);


	                            var index44_64 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_64);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 65 : 
	                            var LA44_66 = input.LA(1);


	                            var index44_66 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_66);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 66 : 
	                            var LA44_67 = input.LA(1);


	                            var index44_67 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.lc(XQS))) ) {s = 65;}

	                            else if ( (true) ) {s = 69;}


	                            input.seek(index44_67);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 44, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA46_eotS:
	        "\u0011\uffff",
	    DFA46_eofS:
	        "\u0001\uffff\u0006\u0007\u000a\uffff",
	    DFA46_minS:
	        "\u0001\u0010\u0006\u0012\u000a\uffff",
	    DFA46_maxS:
	        "\u0001\u0154\u0006\u00fe\u000a\uffff",
	    DFA46_acceptS:
	        "\u0007\uffff\u0001\u0006\u0005\u0001\u0001\u0002\u0001\u0003\u0001"+
	    "\u0004\u0001\u0005",
	    DFA46_specialS:
	        "\u0001\uffff\u0001\u0004\u0001\u0003\u0001\u0005\u0001\u0002\u0001"+
	    "\u0001\u0001\u0000\u000a\uffff}>",
	    DFA46_transitionS: [
	            "\u0025\u0007\u0001\u0001\u0005\u0007\u0001\u0003\u000a\u0007"+
	            "\u0001\u0002\u0021\u0007\u0001\u0005\u000d\u0007\u0001\uffff"+
	            "\u0010\u0007\u0001\u0004\u0001\u0006\u0055\u0007\u0001\uffff"+
	            "\u0002\u0007\u000b\uffff\u0004\u0007\u0005\uffff\u0004\u0007"+
	            "\u000c\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0002\uffff"+
	            "\u0001\u0007\u0006\uffff\u0006\u0007\u003b\uffff\u0001\u0007",
	            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
	            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
	            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
	            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
	            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
	            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
	            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
	            "\u0001\u0007\u0004\uffff\u0001\u0007\u0004\uffff\u0002\u0007"+
	            "\u0006\uffff\u0001\u0007\u0004\uffff\u0001\u000a\u0001\u0007"+
	            "\u0002\uffff\u0001\u0009\u0004\uffff\u0002\u0007\u0004\uffff"+
	            "\u0001\u0007\u0001\uffff\u0001\u0007\u0007\uffff\u0001\u0007"+
	            "\u0002\uffff\u0001\u0007\u003b\uffff\u0002\u0007\u0001\u0008"+
	            "\u0001\uffff\u0004\u0007\u0001\uffff\u0001\u0007\u0003\uffff"+
	            "\u0001\u0007\u0001\uffff\u000b\u0007\u0002\uffff\u0001\u0007"+
	            "\u0003\uffff\u0002\u0007",
	            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
	            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
	            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
	            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
	            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
	            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
	            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
	            "\u0001\u0007\u0004\uffff\u0001\u0007\u0004\uffff\u0002\u0007"+
	            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
	            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u0018\uffff"+
	            "\u0001\u000c\u0022\uffff\u0002\u0007\u0001\u000b\u0001\uffff"+
	            "\u0004\u0007\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0007"+
	            "\u0001\uffff\u000b\u0007\u0002\uffff\u0001\u0007\u0003\uffff"+
	            "\u0002\u0007",
	            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
	            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
	            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
	            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
	            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
	            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
	            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
	            "\u0001\u0007\u0004\uffff\u0001\u0007\u0004\uffff\u0002\u0007"+
	            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
	            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u003b\uffff"+
	            "\u0001\u000d\u0001\u0007\u0002\uffff\u0004\u0007\u0001\uffff"+
	            "\u0001\u0007\u0003\uffff\u0001\u0007\u0001\uffff\u000b\u0007"+
	            "\u0002\uffff\u0001\u0007\u0003\uffff\u0002\u0007",
	            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
	            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
	            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
	            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
	            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
	            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
	            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
	            "\u0001\u0007\u0004\uffff\u0001\u0007\u0004\uffff\u0002\u0007"+
	            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
	            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u003b\uffff"+
	            "\u0001\u000e\u0001\u0007\u0002\uffff\u0004\u0007\u0001\uffff"+
	            "\u0001\u0007\u0003\uffff\u0001\u0007\u0001\uffff\u000b\u0007"+
	            "\u0002\uffff\u0001\u0007\u0003\uffff\u0002\u0007",
	            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
	            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
	            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
	            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
	            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
	            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
	            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
	            "\u0001\u0007\u0004\uffff\u0001\u0007\u0004\uffff\u0002\u0007"+
	            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
	            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u003b\uffff"+
	            "\u0001\u000f\u0001\u0007\u0002\uffff\u0004\u0007\u0001\uffff"+
	            "\u0001\u0007\u0003\uffff\u0001\u0007\u0001\uffff\u000b\u0007"+
	            "\u0002\uffff\u0001\u0007\u0003\uffff\u0002\u0007",
	            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
	            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
	            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
	            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
	            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
	            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
	            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
	            "\u0001\u0007\u0004\uffff\u0001\u0007\u0004\uffff\u0002\u0007"+
	            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
	            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
	            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u003b\uffff"+
	            "\u0002\u0007\u0001\uffff\u0001\u0010\u0004\u0007\u0001\uffff"+
	            "\u0001\u0007\u0003\uffff\u0001\u0007\u0001\uffff\u000b\u0007"+
	            "\u0002\uffff\u0001\u0007\u0003\uffff\u0002\u0007",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA46_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_eotS),
	    DFA46_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_eofS),
	    DFA46_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA46_minS),
	    DFA46_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA46_maxS),
	    DFA46_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_acceptS),
	    DFA46_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_specialS),
	    DFA46_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA46_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA46 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 46;
	    this.eot = XQueryParser.DFA46_eot;
	    this.eof = XQueryParser.DFA46_eof;
	    this.min = XQueryParser.DFA46_min;
	    this.max = XQueryParser.DFA46_max;
	    this.accept = XQueryParser.DFA46_accept;
	    this.special = XQueryParser.DFA46_special;
	    this.transition = XQueryParser.DFA46_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA46, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "443:1: p_ExprSingle[strict] : ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple );";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA46_6 = input.LA(1);


	                            var index46_6 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA46_6==LBRACKET) && (this.synpred5_XQueryParser())) {s = 16;}

	                            else if ( (LA46_6==EOF||(LA46_6>=AND && LA46_6<=ASCENDING)||(LA46_6>=CASE && LA46_6<=CASTABLE)||LA46_6==COLLATION||LA46_6==DEFAULT||(LA46_6>=DESCENDING && LA46_6<=DIV)||LA46_6==EMPTY||LA46_6==EQ||LA46_6==EXCEPT||LA46_6==FOR||LA46_6==GE||(LA46_6>=GT && LA46_6<=IDIV)||(LA46_6>=INSTANCE && LA46_6<=IS)||LA46_6==LE||(LA46_6>=LET && LA46_6<=MOD)||LA46_6==NE||(LA46_6>=OR && LA46_6<=ORDER)||(LA46_6>=RETURN && LA46_6<=SATISFIES)||LA46_6==STABLE||(LA46_6>=TO && LA46_6<=TREAT)||LA46_6==UNION||LA46_6==WHERE||LA46_6==COUNT||(LA46_6>=END && LA46_6<=GROUP)||LA46_6==ONLY||LA46_6==START||(LA46_6>=AFTER && LA46_6<=BEFORE)||LA46_6==INTO||LA46_6==MODIFY||LA46_6==WITH||LA46_6==CONTAINS||(LA46_6>=LPAREN && LA46_6<=RPAREN)||(LA46_6>=RBRACKET && LA46_6<=EQUAL)||LA46_6==NOTEQUAL||LA46_6==COMMA||(LA46_6>=STAR && LA46_6<=SLASH_SLASH)||LA46_6==COLON||(LA46_6>=SEMICOLON && LA46_6<=VBAR)) ) {s = 7;}


	                            input.seek(index46_6);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 1 : 
	                            var LA46_5 = input.LA(1);


	                            var index46_5 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA46_5==LPAREN) && (this.synpred4_XQueryParser())) {s = 15;}

	                            else if ( (LA46_5==EOF||(LA46_5>=AND && LA46_5<=ASCENDING)||(LA46_5>=CASE && LA46_5<=CASTABLE)||LA46_5==COLLATION||LA46_5==DEFAULT||(LA46_5>=DESCENDING && LA46_5<=DIV)||LA46_5==EMPTY||LA46_5==EQ||LA46_5==EXCEPT||LA46_5==FOR||LA46_5==GE||(LA46_5>=GT && LA46_5<=IDIV)||(LA46_5>=INSTANCE && LA46_5<=IS)||LA46_5==LE||(LA46_5>=LET && LA46_5<=MOD)||LA46_5==NE||(LA46_5>=OR && LA46_5<=ORDER)||(LA46_5>=RETURN && LA46_5<=SATISFIES)||LA46_5==STABLE||(LA46_5>=TO && LA46_5<=TREAT)||LA46_5==UNION||LA46_5==WHERE||LA46_5==COUNT||(LA46_5>=END && LA46_5<=GROUP)||LA46_5==ONLY||LA46_5==START||(LA46_5>=AFTER && LA46_5<=BEFORE)||LA46_5==INTO||LA46_5==MODIFY||LA46_5==WITH||LA46_5==CONTAINS||LA46_5==RPAREN||(LA46_5>=RBRACKET && LA46_5<=EQUAL)||LA46_5==NOTEQUAL||LA46_5==COMMA||(LA46_5>=STAR && LA46_5<=SLASH_SLASH)||LA46_5==COLON||(LA46_5>=SEMICOLON && LA46_5<=VBAR)) ) {s = 7;}


	                            input.seek(index46_5);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 2 : 
	                            var LA46_4 = input.LA(1);


	                            var index46_4 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA46_4==LPAREN) && (this.synpred3_XQueryParser())) {s = 14;}

	                            else if ( (LA46_4==EOF||(LA46_4>=AND && LA46_4<=ASCENDING)||(LA46_4>=CASE && LA46_4<=CASTABLE)||LA46_4==COLLATION||LA46_4==DEFAULT||(LA46_4>=DESCENDING && LA46_4<=DIV)||LA46_4==EMPTY||LA46_4==EQ||LA46_4==EXCEPT||LA46_4==FOR||LA46_4==GE||(LA46_4>=GT && LA46_4<=IDIV)||(LA46_4>=INSTANCE && LA46_4<=IS)||LA46_4==LE||(LA46_4>=LET && LA46_4<=MOD)||LA46_4==NE||(LA46_4>=OR && LA46_4<=ORDER)||(LA46_4>=RETURN && LA46_4<=SATISFIES)||LA46_4==STABLE||(LA46_4>=TO && LA46_4<=TREAT)||LA46_4==UNION||LA46_4==WHERE||LA46_4==COUNT||(LA46_4>=END && LA46_4<=GROUP)||LA46_4==ONLY||LA46_4==START||(LA46_4>=AFTER && LA46_4<=BEFORE)||LA46_4==INTO||LA46_4==MODIFY||LA46_4==WITH||LA46_4==CONTAINS||LA46_4==RPAREN||(LA46_4>=RBRACKET && LA46_4<=EQUAL)||LA46_4==NOTEQUAL||LA46_4==COMMA||(LA46_4>=STAR && LA46_4<=SLASH_SLASH)||LA46_4==COLON||(LA46_4>=SEMICOLON && LA46_4<=VBAR)) ) {s = 7;}


	                            input.seek(index46_4);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 3 : 
	                            var LA46_2 = input.LA(1);


	                            var index46_2 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA46_2==DOLLAR) && (this.synpred1_XQueryParser())) {s = 11;}

	                            else if ( (LA46_2==SCORE) && (this.synpred1_XQueryParser())) {s = 12;}

	                            else if ( (LA46_2==EOF||(LA46_2>=AND && LA46_2<=ASCENDING)||(LA46_2>=CASE && LA46_2<=CASTABLE)||LA46_2==COLLATION||LA46_2==DEFAULT||(LA46_2>=DESCENDING && LA46_2<=DIV)||LA46_2==EMPTY||LA46_2==EQ||LA46_2==EXCEPT||LA46_2==FOR||LA46_2==GE||(LA46_2>=GT && LA46_2<=IDIV)||(LA46_2>=INSTANCE && LA46_2<=IS)||LA46_2==LE||(LA46_2>=LET && LA46_2<=MOD)||LA46_2==NE||(LA46_2>=OR && LA46_2<=ORDER)||(LA46_2>=RETURN && LA46_2<=SATISFIES)||LA46_2==STABLE||(LA46_2>=TO && LA46_2<=TREAT)||LA46_2==UNION||LA46_2==WHERE||LA46_2==COUNT||(LA46_2>=END && LA46_2<=GROUP)||LA46_2==ONLY||LA46_2==START||(LA46_2>=AFTER && LA46_2<=BEFORE)||LA46_2==INTO||LA46_2==MODIFY||LA46_2==WITH||LA46_2==CONTAINS||(LA46_2>=LPAREN && LA46_2<=RPAREN)||(LA46_2>=RBRACKET && LA46_2<=EQUAL)||LA46_2==NOTEQUAL||LA46_2==COMMA||(LA46_2>=STAR && LA46_2<=SLASH_SLASH)||LA46_2==COLON||(LA46_2>=SEMICOLON && LA46_2<=VBAR)) ) {s = 7;}


	                            input.seek(index46_2);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 4 : 
	                            var LA46_1 = input.LA(1);


	                            var index46_1 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA46_1==DOLLAR) && (this.synpred1_XQueryParser())) {s = 8;}

	                            else if ( (LA46_1==TUMBLING) && (this.synpred1_XQueryParser())) {s = 9;}

	                            else if ( (LA46_1==SLIDING) && (this.synpred1_XQueryParser())) {s = 10;}

	                            else if ( (LA46_1==EOF||(LA46_1>=AND && LA46_1<=ASCENDING)||(LA46_1>=CASE && LA46_1<=CASTABLE)||LA46_1==COLLATION||LA46_1==DEFAULT||(LA46_1>=DESCENDING && LA46_1<=DIV)||LA46_1==EMPTY||LA46_1==EQ||LA46_1==EXCEPT||LA46_1==FOR||LA46_1==GE||(LA46_1>=GT && LA46_1<=IDIV)||(LA46_1>=INSTANCE && LA46_1<=IS)||LA46_1==LE||(LA46_1>=LET && LA46_1<=MOD)||LA46_1==NE||(LA46_1>=OR && LA46_1<=ORDER)||(LA46_1>=RETURN && LA46_1<=SATISFIES)||LA46_1==STABLE||(LA46_1>=TO && LA46_1<=TREAT)||LA46_1==UNION||LA46_1==WHERE||LA46_1==COUNT||(LA46_1>=END && LA46_1<=GROUP)||LA46_1==ONLY||LA46_1==START||(LA46_1>=AFTER && LA46_1<=BEFORE)||LA46_1==INTO||LA46_1==MODIFY||LA46_1==WITH||LA46_1==CONTAINS||(LA46_1>=LPAREN && LA46_1<=RPAREN)||(LA46_1>=RBRACKET && LA46_1<=EQUAL)||LA46_1==NOTEQUAL||LA46_1==COMMA||(LA46_1>=STAR && LA46_1<=SLASH_SLASH)||LA46_1==COLON||(LA46_1>=SEMICOLON && LA46_1<=VBAR)) ) {s = 7;}


	                            input.seek(index46_1);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 5 : 
	                            var LA46_3 = input.LA(1);


	                            var index46_3 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA46_3==LPAREN) && (this.synpred2_XQueryParser())) {s = 13;}

	                            else if ( (LA46_3==EOF||(LA46_3>=AND && LA46_3<=ASCENDING)||(LA46_3>=CASE && LA46_3<=CASTABLE)||LA46_3==COLLATION||LA46_3==DEFAULT||(LA46_3>=DESCENDING && LA46_3<=DIV)||LA46_3==EMPTY||LA46_3==EQ||LA46_3==EXCEPT||LA46_3==FOR||LA46_3==GE||(LA46_3>=GT && LA46_3<=IDIV)||(LA46_3>=INSTANCE && LA46_3<=IS)||LA46_3==LE||(LA46_3>=LET && LA46_3<=MOD)||LA46_3==NE||(LA46_3>=OR && LA46_3<=ORDER)||(LA46_3>=RETURN && LA46_3<=SATISFIES)||LA46_3==STABLE||(LA46_3>=TO && LA46_3<=TREAT)||LA46_3==UNION||LA46_3==WHERE||LA46_3==COUNT||(LA46_3>=END && LA46_3<=GROUP)||LA46_3==ONLY||LA46_3==START||(LA46_3>=AFTER && LA46_3<=BEFORE)||LA46_3==INTO||LA46_3==MODIFY||LA46_3==WITH||LA46_3==CONTAINS||LA46_3==RPAREN||(LA46_3>=RBRACKET && LA46_3<=EQUAL)||LA46_3==NOTEQUAL||LA46_3==COMMA||(LA46_3>=STAR && LA46_3<=SLASH_SLASH)||LA46_3==COLON||(LA46_3>=SEMICOLON && LA46_3<=VBAR)) ) {s = 7;}


	                            input.seek(index46_3);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 46, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA114_eotS:
	        "\u002f\uffff",
	    DFA114_eofS:
	        "\u002f\uffff",
	    DFA114_minS:
	        "\u0001\u0010\u0001\u0000\u002d\uffff",
	    DFA114_maxS:
	        "\u0001\u0154\u0001\u0000\u002d\uffff",
	    DFA114_acceptS:
	        "\u0002\uffff\u0001\u0003\u0001\u0004\u0029\uffff\u0001\u0001\u0001"+
	    "\u0002",
	    DFA114_specialS:
	        "\u0001\uffff\u0001\u0000\u002d\uffff}>",
	    DFA114_transitionS: [
	            "\u0066\u0003\u0001\uffff\u0067\u0003\u0001\uffff\u0002\u0003"+
	            "\u000b\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u0005\uffff"+
	            "\u0001\u0001\u0001\u0002\u0002\u0003\u000c\uffff\u0001\u0003"+
	            "\u0002\uffff\u0002\u0003\u0002\uffff\u0001\u0003\u0007\uffff"+
	            "\u0005\u0003\u003b\uffff\u0001\u0003",
	            "\u0001\uffff",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA114_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA114_eotS),
	    DFA114_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA114_eofS),
	    DFA114_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA114_minS),
	    DFA114_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA114_maxS),
	    DFA114_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA114_acceptS),
	    DFA114_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA114_specialS),
	    DFA114_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA114_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA114_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA114 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 114;
	    this.eot = XQueryParser.DFA114_eot;
	    this.eof = XQueryParser.DFA114_eof;
	    this.min = XQueryParser.DFA114_min;
	    this.max = XQueryParser.DFA114_max;
	    this.accept = XQueryParser.DFA114_accept;
	    this.special = XQueryParser.DFA114_special;
	    this.transition = XQueryParser.DFA114_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA114, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "773:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA114_1 = input.LA(1);


	                            var index114_1 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred7_XQueryParser()) ) {s = 45;}

	                            else if ( (true) ) {s = 46;}


	                            input.seek(index114_1);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 114, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA116_eotS:
	        "\u0031\uffff",
	    DFA116_eofS:
	        "\u0031\uffff",
	    DFA116_minS:
	        "\u0001\u0010\u002a\u0000\u0006\uffff",
	    DFA116_maxS:
	        "\u0001\u0154\u002a\u0000\u0006\uffff",
	    DFA116_acceptS:
	        "\u002b\uffff\u0001\u0001\u0001\u0002\u0001\u0004\u0001\u0005\u0001"+
	    "\u0003\u0001\u0006",
	    DFA116_specialS:
	        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
	    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
	    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
	    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
	    "\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
	    "\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001"+
	    "\u0022\u0001\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001"+
	    "\u0028\u0001\u0029\u0006\uffff}>",
	    DFA116_transitionS: [
	            "\u0001\u0018\u0001\u001b\u0004\u0023\u0001\u0010\u0006\u0023"+
	            "\u0001\u001c\u0001\u0023\u0001\u0013\u0004\u0023\u0001\u001e"+
	            "\u0001\u0020\u0002\u0023\u0001\u000b\u0001\u0015\u0001\u0008"+
	            "\u0002\u0023\u0001\u0029\u0005\u0023\u0001\u0022\u0001\u0021"+
	            "\u0006\u0023\u0001\u0029\u0006\u0023\u0001\u0029\u0007\u0023"+
	            "\u0001\u000f\u0003\u0023\u0001\u0028\u0004\u0023\u0001\u0007"+
	            "\u0001\u0023\u0001\u0016\u0001\u001a\u0001\u0019\u0001\u0023"+
	            "\u0001\u0014\u0003\u0023\u0001\u0026\u0001\u0025\u0001\u001f"+
	            "\u0004\u0023\u0001\u0011\u0003\u0023\u0001\u0029\u0001\u0023"+
	            "\u0001\u000a\u000b\u0023\u0001\uffff\u0006\u0023\u0001\u0027"+
	            "\u0009\u0023\u0001\u0029\u0014\u0023\u0001\u0009\u0031\u0023"+
	            "\u0001\u0029\u000a\u0023\u0001\u0012\u0003\u0023\u0001\u0001"+
	            "\u0001\uffff\u0001\u0005\u0001\u0017\u000b\uffff\u0001\u002a"+
	            "\u0002\uffff\u0001\u000c\u0007\uffff\u0001\u0006\u0001\u001d"+
	            "\u000c\uffff\u0001\u0024\u0002\uffff\u0001\u0004\u0001\u0003"+
	            "\u0002\uffff\u0001\u0023\u0007\uffff\u0001\u000d\u0001\u000e"+
	            "\u0003\u0002\u003b\uffff\u0001\u0023",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "\u0001\uffff",
	            "",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA116_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA116_eotS),
	    DFA116_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA116_eofS),
	    DFA116_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA116_minS),
	    DFA116_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA116_maxS),
	    DFA116_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA116_acceptS),
	    DFA116_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA116_specialS),
	    DFA116_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA116_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA116_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA116 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 116;
	    this.eot = XQueryParser.DFA116_eot;
	    this.eof = XQueryParser.DFA116_eof;
	    this.min = XQueryParser.DFA116_min;
	    this.max = XQueryParser.DFA116_max;
	    this.accept = XQueryParser.DFA116_accept;
	    this.special = XQueryParser.DFA116_special;
	    this.transition = XQueryParser.DFA116_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA116, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "786:1: p_StepExpr : ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep );";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA116_1 = input.LA(1);


	                            var index116_1 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}


	                            input.seek(index116_1);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 1 : 
	                            var LA116_2 = input.LA(1);


	                            var index116_2 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}


	                            input.seek(index116_2);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 2 : 
	                            var LA116_3 = input.LA(1);


	                            var index116_3 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_3);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 3 : 
	                            var LA116_4 = input.LA(1);


	                            var index116_4 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_4);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 4 : 
	                            var LA116_5 = input.LA(1);


	                            var index116_5 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}


	                            input.seek(index116_5);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 5 : 
	                            var LA116_6 = input.LA(1);


	                            var index116_6 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}


	                            input.seek(index116_6);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 6 : 
	                            var LA116_7 = input.LA(1);


	                            var index116_7 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_7);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 7 : 
	                            var LA116_8 = input.LA(1);


	                            var index116_8 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_8);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 8 : 
	                            var LA116_9 = input.LA(1);


	                            var index116_9 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}


	                            input.seek(index116_9);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 9 : 
	                            var LA116_10 = input.LA(1);


	                            var index116_10 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_10);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 10 : 
	                            var LA116_11 = input.LA(1);


	                            var index116_11 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_11);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 11 : 
	                            var LA116_12 = input.LA(1);


	                            var index116_12 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}


	                            input.seek(index116_12);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 12 : 
	                            var LA116_13 = input.LA(1);


	                            var index116_13 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}


	                            input.seek(index116_13);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 13 : 
	                            var LA116_14 = input.LA(1);


	                            var index116_14 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}


	                            input.seek(index116_14);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 14 : 
	                            var LA116_15 = input.LA(1);


	                            var index116_15 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_15);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 15 : 
	                            var LA116_16 = input.LA(1);


	                            var index116_16 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_16);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 16 : 
	                            var LA116_17 = input.LA(1);


	                            var index116_17 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_17);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 17 : 
	                            var LA116_18 = input.LA(1);


	                            var index116_18 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( ((this.synpred8_XQueryParser()||(this.synpred8_XQueryParser()&&(this.lc(MLS))))) ) {s = 43;}

	                            else if ( ((this.synpred9_XQueryParser()||(this.synpred9_XQueryParser()&&(this.lc(MLS))))) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (((this.synpred11_XQueryParser()&&(this.lc(MLS)))||this.synpred11_XQueryParser())) ) {s = 45;}

	                            else if ( (((this.synpred12_XQueryParser()&&(this.lc(MLS)))||this.synpred12_XQueryParser())) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_18);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 18 : 
	                            var LA116_19 = input.LA(1);


	                            var index116_19 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_19);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 19 : 
	                            var LA116_20 = input.LA(1);


	                            var index116_20 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_20);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 20 : 
	                            var LA116_21 = input.LA(1);


	                            var index116_21 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_21);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 21 : 
	                            var LA116_22 = input.LA(1);


	                            var index116_22 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_22);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 22 : 
	                            var LA116_23 = input.LA(1);


	                            var index116_23 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}


	                            input.seek(index116_23);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 23 : 
	                            var LA116_24 = input.LA(1);


	                            var index116_24 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_24);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 24 : 
	                            var LA116_25 = input.LA(1);


	                            var index116_25 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_25);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 25 : 
	                            var LA116_26 = input.LA(1);


	                            var index116_26 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_26);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 26 : 
	                            var LA116_27 = input.LA(1);


	                            var index116_27 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_27);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 27 : 
	                            var LA116_28 = input.LA(1);


	                            var index116_28 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_28);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 28 : 
	                            var LA116_29 = input.LA(1);


	                            var index116_29 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_29);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 29 : 
	                            var LA116_30 = input.LA(1);


	                            var index116_30 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_30);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 30 : 
	                            var LA116_31 = input.LA(1);


	                            var index116_31 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_31);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 31 : 
	                            var LA116_32 = input.LA(1);


	                            var index116_32 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_32);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 32 : 
	                            var LA116_33 = input.LA(1);


	                            var index116_33 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_33);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 33 : 
	                            var LA116_34 = input.LA(1);


	                            var index116_34 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_34);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 34 : 
	                            var LA116_35 = input.LA(1);


	                            var index116_35 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_35);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 35 : 
	                            var LA116_36 = input.LA(1);


	                            var index116_36 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_36);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 36 : 
	                            var LA116_37 = input.LA(1);


	                            var index116_37 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_37);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 37 : 
	                            var LA116_38 = input.LA(1);


	                            var index116_38 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_38);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 38 : 
	                            var LA116_39 = input.LA(1);


	                            var index116_39 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_39);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 39 : 
	                            var LA116_40 = input.LA(1);


	                            var index116_40 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_40);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 40 : 
	                            var LA116_41 = input.LA(1);


	                            var index116_41 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

	                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

	                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

	                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_41);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 41 : 
	                            var LA116_42 = input.LA(1);


	                            var index116_42 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred10_XQueryParser()) ) {s = 47;}

	                            else if ( (true) ) {s = 48;}


	                            input.seek(index116_42);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 116, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA118_eotS:
	        "\u000a\uffff",
	    DFA118_eofS:
	        "\u0001\uffff\u0007\u0008\u0002\uffff",
	    DFA118_minS:
	        "\u0001\u0010\u0007\u0012\u0002\uffff",
	    DFA118_maxS:
	        "\u0001\u0154\u0007\u00fe\u0002\uffff",
	    DFA118_acceptS:
	        "\u0008\uffff\u0001\u0002\u0001\u0001",
	    DFA118_specialS:
	        "\u000a\uffff}>",
	    DFA118_transitionS: [
	            "\u0006\u0008\u0001\u0003\u0006\u0008\u0001\u0001\u0006\u0008"+
	            "\u0001\u0002\u0001\u0005\u000d\u0008\u0001\u0007\u0001\u0006"+
	            "\u002a\u0008\u0001\u0004\u0016\u0008\u0001\uffff\u0025\u0008"+
	            "\u0001\uffff\u0040\u0008\u000f\uffff\u0001\u0008\u0018\uffff"+
	            "\u0001\u0008\u0002\uffff\u0002\u0008\u0002\uffff\u0001\u0008"+
	            "\u0047\uffff\u0001\u0008",
	            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
	            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
	            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
	            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
	            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
	            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
	            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
	            "\u0001\u0008\u0004\uffff\u0001\u0008\u0004\uffff\u0002\u0008"+
	            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
	            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
	            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0006\uffff\u0001\u0008\u0015\uffff\u0001\u0008\u0002\uffff"+
	            "\u0004\u0008\u0001\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0001\uffff\u000b\u0008\u0002\uffff\u0001\u0008\u0001\u0009"+
	            "\u0002\uffff\u0002\u0008",
	            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
	            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
	            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
	            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
	            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
	            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
	            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
	            "\u0001\u0008\u0004\uffff\u0001\u0008\u0004\uffff\u0002\u0008"+
	            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
	            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
	            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0006\uffff\u0001\u0008\u0015\uffff\u0001\u0008\u0002\uffff"+
	            "\u0004\u0008\u0001\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0001\uffff\u000b\u0008\u0002\uffff\u0001\u0008\u0001\u0009"+
	            "\u0002\uffff\u0002\u0008",
	            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
	            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
	            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
	            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
	            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
	            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
	            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
	            "\u0001\u0008\u0004\uffff\u0001\u0008\u0004\uffff\u0002\u0008"+
	            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
	            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
	            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0006\uffff\u0001\u0008\u0014\uffff\u0002\u0008\u0002\uffff"+
	            "\u0004\u0008\u0001\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0001\uffff\u000b\u0008\u0002\uffff\u0001\u0008\u0001\u0009"+
	            "\u0002\uffff\u0002\u0008",
	            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
	            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
	            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
	            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
	            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
	            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
	            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
	            "\u0001\u0008\u0004\uffff\u0001\u0008\u0004\uffff\u0002\u0008"+
	            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
	            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
	            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0006\uffff\u0001\u0008\u0015\uffff\u0001\u0008\u0002\uffff"+
	            "\u0004\u0008\u0001\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0001\uffff\u000b\u0008\u0002\uffff\u0001\u0008\u0001\u0009"+
	            "\u0002\uffff\u0002\u0008",
	            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
	            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
	            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
	            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
	            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
	            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
	            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
	            "\u0001\u0008\u0004\uffff\u0001\u0008\u0004\uffff\u0002\u0008"+
	            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
	            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
	            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0006\uffff\u0001\u0008\u0015\uffff\u0001\u0008\u0002\uffff"+
	            "\u0004\u0008\u0001\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0001\uffff\u000b\u0008\u0002\uffff\u0001\u0008\u0001\u0009"+
	            "\u0002\uffff\u0002\u0008",
	            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
	            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
	            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
	            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
	            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
	            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
	            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
	            "\u0001\u0008\u0004\uffff\u0001\u0008\u0004\uffff\u0002\u0008"+
	            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
	            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
	            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0006\uffff\u0001\u0008\u0015\uffff\u0001\u0008\u0002\uffff"+
	            "\u0004\u0008\u0001\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0001\uffff\u000b\u0008\u0002\uffff\u0001\u0008\u0001\u0009"+
	            "\u0002\uffff\u0002\u0008",
	            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
	            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
	            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
	            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
	            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
	            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
	            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
	            "\u0001\u0008\u0004\uffff\u0001\u0008\u0004\uffff\u0002\u0008"+
	            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
	            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
	            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
	            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0006\uffff\u0001\u0008\u0015\uffff\u0001\u0008\u0002\uffff"+
	            "\u0004\u0008\u0001\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
	            "\u0001\uffff\u000b\u0008\u0002\uffff\u0001\u0008\u0001\u0009"+
	            "\u0002\uffff\u0002\u0008",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA118_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA118_eotS),
	    DFA118_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA118_eofS),
	    DFA118_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA118_minS),
	    DFA118_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA118_maxS),
	    DFA118_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA118_acceptS),
	    DFA118_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA118_specialS),
	    DFA118_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA118_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA118_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA118 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 118;
	    this.eot = XQueryParser.DFA118_eot;
	    this.eof = XQueryParser.DFA118_eof;
	    this.min = XQueryParser.DFA118_min;
	    this.max = XQueryParser.DFA118_max;
	    this.accept = XQueryParser.DFA118_accept;
	    this.special = XQueryParser.DFA118_special;
	    this.transition = XQueryParser.DFA118_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA118, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "805:1: p_ForwardStep : ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep );";
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA123_eotS:
	        "\u000d\uffff",
	    DFA123_eofS:
	        "\u0001\uffff\u000a\u000b\u0002\uffff",
	    DFA123_minS:
	        "\u0001\u0010\u000a\u0012\u0002\uffff",
	    DFA123_maxS:
	        "\u0001\u0154\u000a\u00fe\u0002\uffff",
	    DFA123_acceptS:
	        "\u000b\uffff\u0001\u0002\u0001\u0001",
	    DFA123_specialS:
	        "\u000d\uffff}>",
	    DFA123_transitionS: [
	            "\u0006\u000b\u0001\u0003\u0008\u000b\u0001\u0007\u0009\u000b"+
	            "\u0001\u0001\u0001\u0002\u0023\u000b\u0001\u000a\u000a\u000b"+
	            "\u0001\u0006\u0003\u000b\u0001\u0005\u0001\u0004\u0005\u000b"+
	            "\u0001\u0008\u0011\u000b\u0001\uffff\u0006\u000b\u0001\u0009"+
	            "\u001e\u000b\u0001\uffff\u0040\u000b\u000f\uffff\u0001\u000b"+
	            "\u001b\uffff\u0002\u000b\u0002\uffff\u0001\u000b\u0047\uffff"+
	            "\u0001\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
	            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
	            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
	            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
	            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
	            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
	            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
	            "\u0001\u000b\u0004\uffff\u0001\u000b\u0004\uffff\u0002\u000b"+
	            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
	            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
	            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
	            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
	            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000c\u0001\u000b"+
	            "\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b\u0003\uffff"+
	            "\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff\u0001\u000b"+
	            "\u0003\uffff\u0002\u000b",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA123_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA123_eotS),
	    DFA123_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA123_eofS),
	    DFA123_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA123_minS),
	    DFA123_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA123_maxS),
	    DFA123_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA123_acceptS),
	    DFA123_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA123_specialS),
	    DFA123_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA123_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA123_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA123 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 123;
	    this.eot = XQueryParser.DFA123_eot;
	    this.eof = XQueryParser.DFA123_eof;
	    this.min = XQueryParser.DFA123_min;
	    this.max = XQueryParser.DFA123_max;
	    this.accept = XQueryParser.DFA123_accept;
	    this.special = XQueryParser.DFA123_special;
	    this.transition = XQueryParser.DFA123_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA123, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "847:1: p_NodeTest : ( p_KindTest | p_NameTest );";
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA131_eotS:
	        "\u0016\uffff",
	    DFA131_eofS:
	        "\u0016\uffff",
	    DFA131_minS:
	        "\u0001\u0010\u0004\uffff\u0001\u00dd\u0001\u0010\u0001\uffff\u0002"+
	    "\u00dd\u0001\uffff\u0002\u0010\u0001\u00e0\u0001\u00dd\u0001\u00e0\u0001"+
	    "\u0010\u0005\uffff",
	    DFA131_maxS:
	        "\u0001\u0154\u0004\uffff\u0001\u00f9\u0001\u0154\u0001\uffff\u0002"+
	    "\u00f9\u0001\uffff\u0002\u0154\u0003\u00f9\u0001\u0154\u0005\uffff",
	    DFA131_acceptS:
	        "\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0002"+
	    "\uffff\u0001\u0005\u0002\uffff\u0001\u0008\u0006\uffff\u0001\u0009\u0001"+
	    "\u0006\u0001\u0007\u0002\u0008",
	    DFA131_specialS:
	        "\u0001\u0000\u000d\uffff\u0001\u0001\u0007\uffff}>",
	    DFA131_transitionS: [
	            "\u0006\u0007\u0001\u000c\u0008\u0007\u0001\u000f\u0008\u0007"+
	            "\u0001\u0009\u0001\u0007\u0001\u0006\u001f\u0007\u0001\u000b"+
	            "\u0008\u0007\u0001\u0005\u0005\u0007\u0001\u0010\u000a\u0007"+
	            "\u0001\u000d\u0005\u0007\u0001\u0008\u000b\u0007\u0001\uffff"+
	            "\u0062\u0007\u0001\u000e\u0003\u0007\u0001\u0001\u0001\uffff"+
	            "\u0001\u0003\u0001\u0011\u000e\uffff\u0001\u000a\u0007\uffff"+
	            "\u0001\u0004\u0010\uffff\u0002\u0002\u0002\uffff\u0001\u0007"+
	            "\u0007\uffff\u0002\u000a\u0003\u0002\u003b\uffff\u0001\u0007",
	            "",
	            "",
	            "",
	            "",
	            "\u0001\u0007\u0002\uffff\u0001\u0012\u0018\uffff\u0001\u0007",
	            "\u0066\u000a\u0001\uffff\u0025\u000a\u0001\uffff\u0040\u000a"+
	            "\u0003\uffff\u0001\u000a\u0018\uffff\u0001\u0007\u0012\uffff"+
	            "\u0001\u000a\u0047\uffff\u0001\u000a",
	            "",
	            "\u0001\u0007\u0002\uffff\u0001\u0013\u0018\uffff\u0001\u0007",
	            "\u0001\u0007\u0002\uffff\u0001\u000a\u0018\uffff\u0001\u0007",
	            "",
	            "\u0066\u000a\u0001\uffff\u0025\u000a\u0001\uffff\u0040\u000a"+
	            "\u0001\u0007\u0002\uffff\u0001\u000a\u0018\uffff\u0001\u0007"+
	            "\u0012\uffff\u0001\u000a\u0047\uffff\u0001\u000a",
	            "\u0066\u000a\u0001\uffff\u0025\u000a\u0001\uffff\u0040\u000a"+
	            "\u0003\uffff\u0001\u000a\u0018\uffff\u0001\u0007\u0012\uffff"+
	            "\u0001\u000a\u0047\uffff\u0001\u000a",
	            "\u0001\u000a\u0018\uffff\u0001\u0007",
	            "\u0001\u0007\u0002\uffff\u0001\u0014\u0018\uffff\u0001\u0007",
	            "\u0001\u0015\u0018\uffff\u0001\u0007",
	            "\u0066\u0015\u0001\uffff\u0025\u0015\u0001\uffff\u0040\u0015"+
	            "\u0003\uffff\u0001\u0015\u0018\uffff\u0001\u0007\u0012\uffff"+
	            "\u0001\u0015\u0047\uffff\u0001\u0015",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA131_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA131_eotS),
	    DFA131_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA131_eofS),
	    DFA131_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA131_minS),
	    DFA131_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA131_maxS),
	    DFA131_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA131_acceptS),
	    DFA131_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA131_specialS),
	    DFA131_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA131_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA131_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA131 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 131;
	    this.eot = XQueryParser.DFA131_eot;
	    this.eof = XQueryParser.DFA131_eof;
	    this.min = XQueryParser.DFA131_min;
	    this.max = XQueryParser.DFA131_max;
	    this.accept = XQueryParser.DFA131_accept;
	    this.special = XQueryParser.DFA131_special;
	    this.transition = XQueryParser.DFA131_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA131, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "891:1: p_PrimaryExpr : ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr );";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA131_0 = input.LA(1);


	                            var index131_0 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA131_0==LPAREN) && (this.synpred16_XQueryParser())) {s = 1;}

	                            else if ( ((LA131_0>=APOS && LA131_0<=QUOT)||(LA131_0>=L_IntegerLiteral && LA131_0<=L_DoubleLiteral)) ) {s = 2;}

	                            else if ( (LA131_0==DOLLAR) ) {s = 3;}

	                            else if ( (LA131_0==DOT) ) {s = 4;}

	                            else if ( (LA131_0==ORDERED) ) {s = 5;}

	                            else if ( (LA131_0==ELEMENT) ) {s = 6;}

	                            else if ( ((LA131_0>=ANCESTOR && LA131_0<=AT)||(LA131_0>=BASE_URI && LA131_0<=COLLATION)||(LA131_0>=CONSTRUCTION && LA131_0<=DIV)||LA131_0==DOCUMENT_NODE||(LA131_0>=ELSE && LA131_0<=MODULE)||(LA131_0>=NE && LA131_0<=ORDER)||(LA131_0>=ORDERING && LA131_0<=PRESERVE)||(LA131_0>=RETURN && LA131_0<=STRIP)||(LA131_0>=THEN && LA131_0<=UNION)||(LA131_0>=VALIDATE && LA131_0<=DECIMAL_SEPARATOR)||(LA131_0>=DIGIT && LA131_0<=UNIQUE)||(LA131_0>=AMP_ER && LA131_0<=QUOT_ER)||LA131_0==L_NCName||LA131_0==EXPLICITLY) ) {s = 7;}

	                            else if ( (LA131_0==UNORDERED) ) {s = 8;}

	                            else if ( (LA131_0==DOCUMENT) ) {s = 9;}

	                            else if ( (LA131_0==SMALLER||(LA131_0>=L_DirCommentConstructor && LA131_0<=L_DirPIConstructor)) ) {s = 10;}

	                            else if ( (LA131_0==NAMESPACE) ) {s = 11;}

	                            else if ( (LA131_0==ATTRIBUTE) ) {s = 12;}

	                            else if ( (LA131_0==TEXT) ) {s = 13;}

	                            else if ( (LA131_0==BINARY) ) {s = 14;}

	                            else if ( (LA131_0==COMMENT) ) {s = 15;}

	                            else if ( (LA131_0==PROCESSING_INSTRUCTION) ) {s = 16;}

	                            else if ( (LA131_0==LBRACKET) ) {s = 17;}


	                            input.seek(index131_0);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 1 : 
	                            var LA131_14 = input.LA(1);


	                            var index131_14 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA131_14==LPAREN||LA131_14==COLON) ) {s = 7;}

	                            else if ( (LA131_14==LBRACKET) && ((this.lc(MLS)))) {s = 20;}


	                            input.seek(index131_14);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 131, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA158_eotS:
	        "\u0044\uffff",
	    DFA158_eofS:
	        "\u0001\u0002\u0043\uffff",
	    DFA158_minS:
	        "\u0001\u0012\u0001\u0000\u0007\uffff\u0001\u0000\u003a\uffff",
	    DFA158_maxS:
	        "\u0001\u00fe\u0001\u0000\u0007\uffff\u0001\u0000\u003a\uffff",
	    DFA158_acceptS:
	        "\u0002\uffff\u0001\u0002\u000a\uffff\u0001\u0001\u0036\uffff",
	    DFA158_specialS:
	        "\u0001\u0000\u0001\u0001\u0007\uffff\u0001\u0002\u003a\uffff}>",
	    DFA158_transitionS: [
	            "\u0004\u0002\u0004\uffff\u0001\u0002\u0003\uffff\u0001\u0002"+
	            "\u0004\uffff\u0001\u0002\u0002\uffff\u0002\u0002\u0004\uffff"+
	            "\u0001\u0002\u0002\uffff\u0001\u0002\u0001\uffff\u0002\u0002"+
	            "\u0002\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0001\uffff"+
	            "\u0002\u0002\u0002\uffff\u0001\u0002\u0001\uffff\u0003\u0002"+
	            "\u0002\uffff\u0001\u0002\u0001\uffff\u0003\u0002\u0002\uffff"+
	            "\u0001\u0002\u0005\uffff\u0002\u0002\u0007\uffff\u0002\u0002"+
	            "\u0005\uffff\u0001\u0002\u0004\uffff\u0001\u0002\u0002\uffff"+
	            "\u0001\u0002\u0004\uffff\u0001\u0002\u0001\uffff\u0001\u0002"+
	            "\u0002\uffff\u0001\u0002\u0004\uffff\u0002\u0002\u0006\uffff"+
	            "\u0001\u0002\u0005\uffff\u0001\u0002\u0007\uffff\u0002\u0002"+
	            "\u0004\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0007\uffff"+
	            "\u0001\u0002\u0002\uffff\u0001\u0002\u0014\uffff\u0001\u0002"+
	            "\u0003\uffff\u0001\u0002\u0002\uffff\u0001\u0002\u0003\uffff"+
	            "\u0001\u0002\u0006\uffff\u0001\u0002\u0015\uffff\u0001\u0002"+
	            "\u0001\uffff\u0002\u0002\u0001\uffff\u0004\u0002\u0003\uffff"+
	            "\u0001\u0002\u0001\u000d\u0001\u0001\u0001\u0009\u0007\u0002"+
	            "\u0008\uffff\u0002\u0002",
	            "\u0001\uffff",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "\u0001\uffff",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA158_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA158_eotS),
	    DFA158_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA158_eofS),
	    DFA158_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA158_minS),
	    DFA158_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA158_maxS),
	    DFA158_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA158_acceptS),
	    DFA158_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA158_specialS),
	    DFA158_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA158_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA158_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA158 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 158;
	    this.eot = XQueryParser.DFA158_eot;
	    this.eof = XQueryParser.DFA158_eof;
	    this.min = XQueryParser.DFA158_min;
	    this.max = XQueryParser.DFA158_max;
	    this.accept = XQueryParser.DFA158_accept;
	    this.special = XQueryParser.DFA158_special;
	    this.transition = XQueryParser.DFA158_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA158, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "1171:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA158_0 = input.LA(1);


	                            var index158_0 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA158_0==STAR) ) {s = 1;}

	                            else if ( (LA158_0==EOF||(LA158_0>=AND && LA158_0<=AT)||LA158_0==CASE||LA158_0==COLLATION||LA158_0==DEFAULT||(LA158_0>=DESCENDING && LA158_0<=DIV)||LA158_0==EMPTY||LA158_0==EQ||(LA158_0>=EXCEPT && LA158_0<=EXTERNAL)||LA158_0==FOR||LA158_0==GE||(LA158_0>=GT && LA158_0<=IDIV)||LA158_0==IN||(LA158_0>=INSTANCE && LA158_0<=IS)||LA158_0==LE||(LA158_0>=LET && LA158_0<=MOD)||LA158_0==NE||(LA158_0>=OR && LA158_0<=ORDER)||(LA158_0>=RETURN && LA158_0<=SATISFIES)||LA158_0==STABLE||LA158_0==TO||LA158_0==UNION||LA158_0==WHERE||LA158_0==ALLOWING||LA158_0==COUNT||(LA158_0>=END && LA158_0<=GROUP)||LA158_0==ONLY||LA158_0==START||(LA158_0>=AFTER && LA158_0<=BEFORE)||LA158_0==INTO||LA158_0==MODIFY||LA158_0==WITH||LA158_0==CONTAINS||LA158_0==PARAGRAPHS||LA158_0==SCORE||LA158_0==SENTENCES||LA158_0==TIMES||LA158_0==WORDS||LA158_0==RPAREN||(LA158_0>=LBRACKET && LA158_0<=RBRACKET)||(LA158_0>=RSQUARE && LA158_0<=NOTEQUAL)||LA158_0==COMMA||(LA158_0>=MINUS && LA158_0<=GREATER_GREATER)||(LA158_0>=SEMICOLON && LA158_0<=VBAR)) ) {s = 2;}

	                            else if ( (LA158_0==PLUS) ) {s = 9;}

	                            else if ( (LA158_0==QUESTION) && (this.synpred17_XQueryParser())) {s = 13;}


	                            input.seek(index158_0);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 1 : 
	                            var LA158_1 = input.LA(1);


	                            var index158_1 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred17_XQueryParser()) ) {s = 13;}

	                            else if ( (true) ) {s = 2;}


	                            input.seek(index158_1);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 2 : 
	                            var LA158_9 = input.LA(1);


	                            var index158_9 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (this.synpred17_XQueryParser()) ) {s = 13;}

	                            else if ( (true) ) {s = 2;}


	                            input.seek(index158_9);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 158, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA160_eotS:
	        "\u0012\uffff",
	    DFA160_eofS:
	        "\u0001\uffff\u000c\u000d\u0005\uffff",
	    DFA160_minS:
	        "\u0001\u0010\u000c\u0012\u0005\uffff",
	    DFA160_maxS:
	        "\u0001\u0154\u000c\u00fe\u0005\uffff",
	    DFA160_acceptS:
	        "\u000d\uffff\u0001\u0004\u0001\u0005\u0001\u0001\u0001\u0002\u0001"+
	    "\u0003",
	    DFA160_specialS:
	        "\u000b\uffff\u0001\u0000\u0006\uffff}>",
	    DFA160_transitionS: [
	            "\u0006\u000d\u0001\u0003\u0008\u000d\u0001\u0007\u0009\u000d"+
	            "\u0001\u0001\u0001\u0002\u0017\u000d\u0001\u000c\u000b\u000d"+
	            "\u0001\u000a\u000a\u000d\u0001\u0006\u0003\u000d\u0001\u0005"+
	            "\u0001\u0004\u0005\u000d\u0001\u0008\u0011\u000d\u0001\uffff"+
	            "\u0006\u000d\u0001\u0009\u001e\u000d\u0001\uffff\u003c\u000d"+
	            "\u0001\u000b\u0003\u000d\u0001\u000e\u002e\uffff\u0001\u000d"+
	            "\u0047\uffff\u0001\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000f"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u0010"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
	            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
	            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
	            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
	            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
	            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
	            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
	            "\u0002\uffff\u0001\u000d\u0004\uffff\u0002\u000d\u0006\uffff"+
	            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
	            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
	            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
	            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
	            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u0011"+
	            "\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff\u0004\u000d"+
	            "\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d\u0003\uffff"+
	            "\u0002\u000d",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA160_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA160_eotS),
	    DFA160_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA160_eofS),
	    DFA160_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA160_minS),
	    DFA160_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA160_maxS),
	    DFA160_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA160_acceptS),
	    DFA160_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA160_specialS),
	    DFA160_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA160_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA160_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA160 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 160;
	    this.eot = XQueryParser.DFA160_eot;
	    this.eof = XQueryParser.DFA160_eof;
	    this.min = XQueryParser.DFA160_min;
	    this.max = XQueryParser.DFA160_max;
	    this.accept = XQueryParser.DFA160_accept;
	    this.special = XQueryParser.DFA160_special;
	    this.transition = XQueryParser.DFA160_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA160, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "1181:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType );";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA160_11 = input.LA(1);


	                            var index160_11 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA160_11==LPAREN) && ((this.lc(MLS)))) {s = 16;}

	                            else if ( (LA160_11==EOF||(LA160_11>=AND && LA160_11<=AT)||LA160_11==CASE||LA160_11==COLLATION||LA160_11==DEFAULT||(LA160_11>=DESCENDING && LA160_11<=DIV)||LA160_11==EMPTY||LA160_11==EQ||(LA160_11>=EXCEPT && LA160_11<=EXTERNAL)||LA160_11==FOR||LA160_11==GE||(LA160_11>=GT && LA160_11<=IDIV)||LA160_11==IN||(LA160_11>=INSTANCE && LA160_11<=IS)||LA160_11==LE||(LA160_11>=LET && LA160_11<=MOD)||LA160_11==NE||(LA160_11>=OR && LA160_11<=ORDER)||(LA160_11>=RETURN && LA160_11<=SATISFIES)||LA160_11==STABLE||LA160_11==TO||LA160_11==UNION||LA160_11==WHERE||LA160_11==ALLOWING||LA160_11==COUNT||(LA160_11>=END && LA160_11<=GROUP)||LA160_11==ONLY||LA160_11==START||(LA160_11>=AFTER && LA160_11<=BEFORE)||LA160_11==INTO||LA160_11==MODIFY||LA160_11==WITH||LA160_11==CONTAINS||LA160_11==PARAGRAPHS||LA160_11==SCORE||LA160_11==SENTENCES||LA160_11==TIMES||LA160_11==WORDS||LA160_11==RPAREN||(LA160_11>=LBRACKET && LA160_11<=RBRACKET)||(LA160_11>=RSQUARE && LA160_11<=NOTEQUAL)||(LA160_11>=COMMA && LA160_11<=GREATER_GREATER)||LA160_11==COLON||(LA160_11>=SEMICOLON && LA160_11<=VBAR)) ) {s = 13;}


	                            input.seek(index160_11);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 160, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA214_eotS:
	        "\u000a\uffff",
	    DFA214_eofS:
	        "\u000a\uffff",
	    DFA214_minS:
	        "\u0001\u001a\u0002\uffff\u0001\u00be\u0006\uffff",
	    DFA214_maxS:
	        "\u0001\u00c5\u0002\uffff\u0001\u00c5\u0006\uffff",
	    DFA214_acceptS:
	        "\u0001\uffff\u0001\u0001\u0001\u0002\u0001\uffff\u0001\u0003\u0001"+
	    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008",
	    DFA214_specialS:
	        "\u000a\uffff}>",
	    DFA214_transitionS: [
	            "\u0001\u0006\u0035\uffff\u0001\u0009\u0052\uffff\u0001\u0007"+
	            "\u000a\uffff\u0001\u0001\u0001\uffff\u0001\u0006\u0001\uffff"+
	            "\u0001\u0003\u000b\uffff\u0001\u0005\u0001\u0008\u0001\u0004"+
	            "\u0001\uffff\u0001\u0006\u0002\uffff\u0001\u0002",
	            "",
	            "",
	            "\u0001\u0005\u0001\u0008\u0001\u0004\u0004\uffff\u0001\u0002",
	            "",
	            "",
	            "",
	            "",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA214_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA214_eotS),
	    DFA214_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA214_eofS),
	    DFA214_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA214_minS),
	    DFA214_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA214_maxS),
	    DFA214_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA214_acceptS),
	    DFA214_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA214_specialS),
	    DFA214_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA214_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA214_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA214 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 214;
	    this.eot = XQueryParser.DFA214_eot;
	    this.eof = XQueryParser.DFA214_eof;
	    this.min = XQueryParser.DFA214_min;
	    this.max = XQueryParser.DFA214_max;
	    this.accept = XQueryParser.DFA214_accept;
	    this.special = XQueryParser.DFA214_special;
	    this.transition = XQueryParser.DFA214_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA214, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "1717:1: p_FTMatchOption : ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption );";
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA233_eotS:
	        "\u000c\uffff",
	    DFA233_eofS:
	        "\u000c\uffff",
	    DFA233_minS:
	        "\u0001\u0010\u0001\uffff\u0001\u0010\u0005\u0012\u0001\uffff\u0001"+
	    "\u0012\u0001\u0010\u0001\u0012",
	    DFA233_maxS:
	        "\u0001\u0154\u0001\uffff\u0001\u0154\u0005\u00fe\u0001\uffff\u0001"+
	    "\u00fe\u0001\u0154\u0001\u00fe",
	    DFA233_acceptS:
	        "\u0001\uffff\u0001\u0001\u0006\uffff\u0001\u0002\u0003\uffff",
	    DFA233_specialS:
	        "\u000c\uffff}>",
	    DFA233_transitionS: [
	            "\u005c\u0001\u0001\u0007\u0009\u0001\u0001\uffff\u0052\u0001"+
	            "\u0001\u0004\u0001\u0005\u0001\u0006\u0002\u0001\u0001\u0003"+
	            "\u000f\u0001\u0001\uffff\u0001\u0002\u0001\u0001\u0006\uffff"+
	            "\u0001\u0008\u0004\uffff\u0004\u0001\u0005\uffff\u0004\u0001"+
	            "\u000c\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
	            "\u0001\u0001\u0006\uffff\u0006\u0001\u003b\uffff\u0001\u0001",
	            "",
	            "\u0066\u0009\u0001\uffff\u0025\u0009\u0001\uffff\u0040\u0009"+
	            "\u002f\uffff\u0001\u0009\u0047\uffff\u0001\u0009",
	            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
	            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
	            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
	            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
	            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
	            "\u0001\uffff\u0001\u0001\u0037\uffff\u0001\u0001\u003b\uffff"+
	            "\u0001\u0008\u0004\uffff\u0001\u0001\u0001\uffff\u0001\u0001"+
	            "\u0001\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0001\uffff"+
	            "\u000b\u0001\u0002\uffff\u0001\u0001\u0003\uffff\u0002\u0001",
	            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
	            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
	            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
	            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
	            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
	            "\u0001\uffff\u0001\u0001\u0037\uffff\u0001\u0001\u002a\uffff"+
	            "\u0001\u0008\u0010\uffff\u0001\u0001\u0004\uffff\u0001\u0001"+
	            "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff"+
	            "\u0001\u0001\u0001\uffff\u000b\u0001\u0002\uffff\u0001\u0001"+
	            "\u0003\uffff\u0002\u0001",
	            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
	            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
	            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
	            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
	            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
	            "\u0001\uffff\u0001\u0001\u0037\uffff\u0001\u0001\u002a\uffff"+
	            "\u0001\u0008\u0010\uffff\u0001\u0001\u0004\uffff\u0001\u0001"+
	            "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff"+
	            "\u0001\u0001\u0001\uffff\u000b\u0001\u0002\uffff\u0001\u0001"+
	            "\u0003\uffff\u0002\u0001",
	            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
	            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
	            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
	            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
	            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
	            "\u0001\uffff\u0001\u0001\u0037\uffff\u0001\u0001\u002b\uffff"+
	            "\u0001\u0008\u000f\uffff\u0001\u0001\u0004\uffff\u0001\u0001"+
	            "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff"+
	            "\u0001\u0001\u0001\uffff\u000b\u0001\u0002\uffff\u0001\u0001"+
	            "\u0003\uffff\u0002\u0001",
	            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
	            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
	            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
	            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
	            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
	            "\u0001\uffff\u0001\u0001\u0037\uffff\u0001\u0001\u003b\uffff"+
	            "\u0001\u0001\u0001\uffff\u0001\u0008\u0002\uffff\u0001\u0001"+
	            "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff"+
	            "\u0001\u0001\u0001\uffff\u000b\u0001\u0002\uffff\u0001\u0001"+
	            "\u0003\uffff\u0002\u0001",
	            "",
	            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
	            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
	            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
	            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
	            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
	            "\u0001\uffff\u0001\u0001\u0037\uffff\u0001\u0001\u0040\uffff"+
	            "\u0001\u0001\u0001\uffff\u0001\u0001\u0001\u0008\u0001\u0001"+
	            "\u0003\uffff\u0001\u0001\u0001\uffff\u000b\u0001\u0002\uffff"+
	            "\u0001\u000a\u0003\uffff\u0002\u0001",
	            "\u0066\u000b\u0001\uffff\u0025\u000b\u0001\uffff\u0040\u000b"+
	            "\u002f\uffff\u0001\u000b\u0047\uffff\u0001\u000b",
	            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
	            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
	            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
	            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
	            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
	            "\u0001\uffff\u0001\u0001\u0037\uffff\u0001\u0001\u0040\uffff"+
	            "\u0001\u0001\u0001\uffff\u0001\u0001\u0001\u0008\u0001\u0001"+
	            "\u0003\uffff\u0001\u0001\u0001\uffff\u000b\u0001\u0006\uffff"+
	            "\u0002\u0001"
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA233_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA233_eotS),
	    DFA233_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA233_eofS),
	    DFA233_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA233_minS),
	    DFA233_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA233_maxS),
	    DFA233_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA233_acceptS),
	    DFA233_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA233_specialS),
	    DFA233_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA233_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA233_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA233 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 233;
	    this.eot = XQueryParser.DFA233_eot;
	    this.eof = XQueryParser.DFA233_eof;
	    this.min = XQueryParser.DFA233_min;
	    this.max = XQueryParser.DFA233_max;
	    this.accept = XQueryParser.DFA233_accept;
	    this.special = XQueryParser.DFA233_special;
	    this.transition = XQueryParser.DFA233_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA233, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "1831:1: p_Hybrid[strict, allowConcat] : ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement );";
	    },
	    dummy: null
	});
	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA249_eotS:
	        "\u000b\uffff",
	    DFA249_eofS:
	        "\u0001\uffff\u0002\u0003\u0001\uffff\u0005\u0003\u0002\uffff",
	    DFA249_minS:
	        "\u0001\u0010\u0002\u0012\u0001\uffff\u0005\u0012\u0002\uffff",
	    DFA249_maxS:
	        "\u0001\u0154\u0002\u00fe\u0001\uffff\u0005\u00fe\u0002\uffff",
	    DFA249_acceptS:
	        "\u0003\uffff\u0001\u0002\u0005\uffff\u0001\u0001\u0001\u0003",
	    DFA249_specialS:
	        "\u0004\uffff\u0001\u0002\u0001\u0004\u0001\u0000\u0001\u0001\u0001"+
	    "\u0003\u0002\uffff}>",
	    DFA249_transitionS: [
	            "\u0020\u0003\u0001\u0002\u002f\u0003\u0001\u0001\u0015\u0003"+
	            "\u0001\uffff\u0019\u0003\u0001\u0008\u0001\u0005\u0001\u0003"+
	            "\u0001\u0004\u0004\u0003\u0001\u0006\u0001\u0007\u0044\u0003"+
	            "\u0001\uffff\u0002\u0003\u000b\uffff\u0004\u0003\u0005\uffff"+
	            "\u0004\u0003\u000c\uffff\u0001\u0003\u0002\uffff\u0002\u0003"+
	            "\u0002\uffff\u0001\u0003\u0006\uffff\u0006\u0003\u003b\uffff"+
	            "\u0001\u0003",
	            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
	            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
	            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
	            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
	            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0005\uffff"+
	            "\u0002\u0003\u0007\uffff\u0002\u0003\u0005\uffff\u0001\u0003"+
	            "\u0004\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0004\uffff"+
	            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0002\u0003"+
	            "\u0006\uffff\u0001\u0003\u0005\uffff\u0001\u0003\u0007\uffff"+
	            "\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0007\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u003b\uffff"+
	            "\u0002\u0003\u0001\u0009\u0001\uffff\u0004\u0003\u0001\uffff"+
	            "\u0001\u0003\u0003\uffff\u0001\u0003\u0001\uffff\u000b\u0003"+
	            "\u0002\uffff\u0001\u0003\u0003\uffff\u0002\u0003",
	            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
	            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
	            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
	            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
	            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0005\uffff"+
	            "\u0002\u0003\u0007\uffff\u0002\u0003\u0005\uffff\u0001\u0003"+
	            "\u0004\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0004\uffff"+
	            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0002\u0003"+
	            "\u0006\uffff\u0001\u0003\u0005\uffff\u0001\u0003\u0007\uffff"+
	            "\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0007\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u003b\uffff"+
	            "\u0002\u0003\u0001\u0009\u0001\uffff\u0004\u0003\u0001\uffff"+
	            "\u0001\u0003\u0003\uffff\u0001\u0003\u0001\uffff\u000b\u0003"+
	            "\u0002\uffff\u0001\u0003\u0003\uffff\u0002\u0003",
	            "",
	            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
	            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
	            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
	            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
	            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0002\uffff"+
	            "\u0001\u000a\u0002\uffff\u0002\u0003\u0007\uffff\u0002\u0003"+
	            "\u0005\uffff\u0001\u0003\u0004\uffff\u0002\u0003\u0001\uffff"+
	            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0001\u0003"+
	            "\u0004\uffff\u0002\u0003\u0006\uffff\u0001\u0003\u0005\uffff"+
	            "\u0001\u0003\u0007\uffff\u0002\u0003\u0004\uffff\u0001\u0003"+
	            "\u0001\uffff\u0001\u0003\u0001\u000a\u0006\uffff\u0001\u0003"+
	            "\u0002\uffff\u0001\u0003\u003b\uffff\u0002\u0003\u0002\uffff"+
	            "\u0004\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\u0003"+
	            "\u0001\uffff\u000b\u0003\u0002\uffff\u0001\u0003\u0003\uffff"+
	            "\u0002\u0003",
	            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
	            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
	            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
	            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
	            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0002\uffff"+
	            "\u0001\u000a\u0002\uffff\u0002\u0003\u0007\uffff\u0002\u0003"+
	            "\u0005\uffff\u0001\u0003\u0004\uffff\u0002\u0003\u0001\uffff"+
	            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0001\u0003"+
	            "\u0004\uffff\u0002\u0003\u0006\uffff\u0001\u0003\u0005\uffff"+
	            "\u0001\u0003\u0007\uffff\u0002\u0003\u0004\uffff\u0001\u0003"+
	            "\u0001\uffff\u0001\u0003\u0001\u000a\u0006\uffff\u0001\u0003"+
	            "\u0002\uffff\u0001\u0003\u003b\uffff\u0002\u0003\u0002\uffff"+
	            "\u0004\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\u0003"+
	            "\u0001\uffff\u000b\u0003\u0002\uffff\u0001\u0003\u0003\uffff"+
	            "\u0002\u0003",
	            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
	            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
	            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
	            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
	            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0002\uffff"+
	            "\u0001\u000a\u0002\uffff\u0002\u0003\u0007\uffff\u0002\u0003"+
	            "\u0005\uffff\u0001\u0003\u0004\uffff\u0002\u0003\u0001\uffff"+
	            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0001\u0003"+
	            "\u0004\uffff\u0002\u0003\u0006\uffff\u0001\u0003\u0005\uffff"+
	            "\u0001\u0003\u0007\uffff\u0002\u0003\u0004\uffff\u0001\u0003"+
	            "\u0001\uffff\u0001\u0003\u0007\uffff\u0001\u0003\u0002\uffff"+
	            "\u0001\u0003\u003b\uffff\u0002\u0003\u0002\uffff\u0004\u0003"+
	            "\u0001\uffff\u0001\u0003\u0003\uffff\u0001\u0003\u0001\uffff"+
	            "\u000b\u0003\u0002\uffff\u0001\u0003\u0003\uffff\u0002\u0003",
	            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
	            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
	            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
	            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
	            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0002\uffff"+
	            "\u0001\u000a\u0002\uffff\u0002\u0003\u0007\uffff\u0002\u0003"+
	            "\u0005\uffff\u0001\u0003\u0004\uffff\u0002\u0003\u0001\uffff"+
	            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0001\u0003"+
	            "\u0004\uffff\u0002\u0003\u0006\uffff\u0001\u0003\u0005\uffff"+
	            "\u0001\u0003\u0007\uffff\u0002\u0003\u0004\uffff\u0001\u0003"+
	            "\u0001\uffff\u0001\u0003\u0006\uffff\u0001\u000a\u0001\u0003"+
	            "\u0002\uffff\u0001\u0003\u003b\uffff\u0002\u0003\u0002\uffff"+
	            "\u0004\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\u0003"+
	            "\u0001\uffff\u000b\u0003\u0002\uffff\u0001\u0003\u0003\uffff"+
	            "\u0002\u0003",
	            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
	            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
	            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
	            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
	            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0005\uffff"+
	            "\u0002\u0003\u0007\uffff\u0002\u0003\u0005\uffff\u0001\u0003"+
	            "\u0004\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0004\uffff"+
	            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0002\u0003"+
	            "\u0006\uffff\u0001\u0003\u0005\uffff\u0001\u0003\u0007\uffff"+
	            "\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
	            "\u0007\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u003b\uffff"+
	            "\u0002\u0003\u0001\u000a\u0001\uffff\u0004\u0003\u0001\uffff"+
	            "\u0001\u0003\u0003\uffff\u0001\u0003\u0001\uffff\u000b\u0003"+
	            "\u0002\uffff\u0001\u0003\u0003\uffff\u0002\u0003",
	            "",
	            ""
	    ]
	});

	org.antlr.lang.augmentObject(XQueryParser, {
	    DFA249_eot:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA249_eotS),
	    DFA249_eof:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA249_eofS),
	    DFA249_min:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA249_minS),
	    DFA249_max:
	        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA249_maxS),
	    DFA249_accept:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA249_acceptS),
	    DFA249_special:
	        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA249_specialS),
	    DFA249_transition: (function() {
	        var a = [],
	            i,
	            numStates = XQueryParser.DFA249_transitionS.length;
	        for (i=0; i<numStates; i++) {
	            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA249_transitionS[i]));
	        }
	        return a;
	    })()
	});

	XQueryParser.DFA249 = function(recognizer) {
	    this.recognizer = recognizer;
	    this.decisionNumber = 249;
	    this.eot = XQueryParser.DFA249_eot;
	    this.eof = XQueryParser.DFA249_eof;
	    this.min = XQueryParser.DFA249_min;
	    this.max = XQueryParser.DFA249_max;
	    this.accept = XQueryParser.DFA249_accept;
	    this.special = XQueryParser.DFA249_special;
	    this.transition = XQueryParser.DFA249_transition;
	};

	org.antlr.lang.extend(XQueryParser.DFA249, org.antlr.runtime.DFA, {
	    getDescription: function() {
	        return "1981:1: p_ExprSimple : ( p_QuantifiedExpr | p_OrExpr | {...}? => pg_UpdateExpr );";
	    },
	    specialStateTransition: function(s, input) {
	        var _s = s;
	        /* bind to recognizer so semantic predicates can be evaluated */
	        var retval = (function(s, input) {
	            switch ( s ) {
	                        case 0 : 
	                            var LA249_6 = input.LA(1);


	                            var index249_6 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA249_6==NODE) && ((this.lc(XQU)))) {s = 10;}

	                            else if ( (LA249_6==EOF||(LA249_6>=AND && LA249_6<=ASCENDING)||(LA249_6>=CASE && LA249_6<=CASTABLE)||LA249_6==COLLATION||LA249_6==DEFAULT||(LA249_6>=DESCENDING && LA249_6<=DIV)||LA249_6==EMPTY||LA249_6==EQ||LA249_6==EXCEPT||LA249_6==FOR||LA249_6==GE||(LA249_6>=GT && LA249_6<=IDIV)||(LA249_6>=INSTANCE && LA249_6<=IS)||LA249_6==LE||(LA249_6>=LET && LA249_6<=MOD)||LA249_6==NE||(LA249_6>=OR && LA249_6<=ORDER)||(LA249_6>=RETURN && LA249_6<=SATISFIES)||LA249_6==STABLE||(LA249_6>=TO && LA249_6<=TREAT)||LA249_6==UNION||LA249_6==WHERE||LA249_6==COUNT||(LA249_6>=END && LA249_6<=GROUP)||LA249_6==ONLY||LA249_6==START||(LA249_6>=AFTER && LA249_6<=BEFORE)||LA249_6==INTO||LA249_6==MODIFY||LA249_6==WITH||LA249_6==CONTAINS||(LA249_6>=LPAREN && LA249_6<=RPAREN)||(LA249_6>=RBRACKET && LA249_6<=EQUAL)||LA249_6==NOTEQUAL||LA249_6==COMMA||(LA249_6>=STAR && LA249_6<=SLASH_SLASH)||LA249_6==COLON||(LA249_6>=SEMICOLON && LA249_6<=VBAR)) ) {s = 3;}


	                            input.seek(index249_6);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 1 : 
	                            var LA249_7 = input.LA(1);


	                            var index249_7 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA249_7==EOF||(LA249_7>=AND && LA249_7<=ASCENDING)||(LA249_7>=CASE && LA249_7<=CASTABLE)||LA249_7==COLLATION||LA249_7==DEFAULT||(LA249_7>=DESCENDING && LA249_7<=DIV)||LA249_7==EMPTY||LA249_7==EQ||LA249_7==EXCEPT||LA249_7==FOR||LA249_7==GE||(LA249_7>=GT && LA249_7<=IDIV)||(LA249_7>=INSTANCE && LA249_7<=IS)||LA249_7==LE||(LA249_7>=LET && LA249_7<=MOD)||LA249_7==NE||(LA249_7>=OR && LA249_7<=ORDER)||(LA249_7>=RETURN && LA249_7<=SATISFIES)||LA249_7==STABLE||(LA249_7>=TO && LA249_7<=TREAT)||LA249_7==UNION||LA249_7==WHERE||LA249_7==COUNT||(LA249_7>=END && LA249_7<=GROUP)||LA249_7==ONLY||LA249_7==START||(LA249_7>=AFTER && LA249_7<=BEFORE)||LA249_7==INTO||LA249_7==MODIFY||LA249_7==WITH||LA249_7==CONTAINS||(LA249_7>=LPAREN && LA249_7<=RPAREN)||(LA249_7>=RBRACKET && LA249_7<=EQUAL)||LA249_7==NOTEQUAL||LA249_7==COMMA||(LA249_7>=STAR && LA249_7<=SLASH_SLASH)||LA249_7==COLON||(LA249_7>=SEMICOLON && LA249_7<=VBAR)) ) {s = 3;}

	                            else if ( (LA249_7==NODE||LA249_7==VALUE) && ((this.lc(XQU)))) {s = 10;}


	                            input.seek(index249_7);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 2 : 
	                            var LA249_4 = input.LA(1);


	                            var index249_4 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA249_4==EOF||(LA249_4>=AND && LA249_4<=ASCENDING)||(LA249_4>=CASE && LA249_4<=CASTABLE)||LA249_4==COLLATION||LA249_4==DEFAULT||(LA249_4>=DESCENDING && LA249_4<=DIV)||LA249_4==EMPTY||LA249_4==EQ||LA249_4==EXCEPT||LA249_4==FOR||LA249_4==GE||(LA249_4>=GT && LA249_4<=IDIV)||(LA249_4>=INSTANCE && LA249_4<=IS)||LA249_4==LE||(LA249_4>=LET && LA249_4<=MOD)||LA249_4==NE||(LA249_4>=OR && LA249_4<=ORDER)||(LA249_4>=RETURN && LA249_4<=SATISFIES)||LA249_4==STABLE||(LA249_4>=TO && LA249_4<=TREAT)||LA249_4==UNION||LA249_4==WHERE||LA249_4==COUNT||(LA249_4>=END && LA249_4<=GROUP)||LA249_4==ONLY||LA249_4==START||(LA249_4>=AFTER && LA249_4<=BEFORE)||LA249_4==INTO||LA249_4==MODIFY||LA249_4==WITH||LA249_4==CONTAINS||(LA249_4>=LPAREN && LA249_4<=RPAREN)||(LA249_4>=RBRACKET && LA249_4<=EQUAL)||LA249_4==NOTEQUAL||LA249_4==COMMA||(LA249_4>=STAR && LA249_4<=SLASH_SLASH)||LA249_4==COLON||(LA249_4>=SEMICOLON && LA249_4<=VBAR)) ) {s = 3;}

	                            else if ( (LA249_4==NODE||LA249_4==NODES) && ((this.lc(XQU)))) {s = 10;}


	                            input.seek(index249_4);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 3 : 
	                            var LA249_8 = input.LA(1);


	                            var index249_8 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA249_8==DOLLAR) && ((this.lc(XQU)))) {s = 10;}

	                            else if ( (LA249_8==EOF||(LA249_8>=AND && LA249_8<=ASCENDING)||(LA249_8>=CASE && LA249_8<=CASTABLE)||LA249_8==COLLATION||LA249_8==DEFAULT||(LA249_8>=DESCENDING && LA249_8<=DIV)||LA249_8==EMPTY||LA249_8==EQ||LA249_8==EXCEPT||LA249_8==FOR||LA249_8==GE||(LA249_8>=GT && LA249_8<=IDIV)||(LA249_8>=INSTANCE && LA249_8<=IS)||LA249_8==LE||(LA249_8>=LET && LA249_8<=MOD)||LA249_8==NE||(LA249_8>=OR && LA249_8<=ORDER)||(LA249_8>=RETURN && LA249_8<=SATISFIES)||LA249_8==STABLE||(LA249_8>=TO && LA249_8<=TREAT)||LA249_8==UNION||LA249_8==WHERE||LA249_8==COUNT||(LA249_8>=END && LA249_8<=GROUP)||LA249_8==ONLY||LA249_8==START||(LA249_8>=AFTER && LA249_8<=BEFORE)||LA249_8==INTO||LA249_8==MODIFY||LA249_8==WITH||LA249_8==CONTAINS||(LA249_8>=LPAREN && LA249_8<=RPAREN)||(LA249_8>=RBRACKET && LA249_8<=EQUAL)||LA249_8==NOTEQUAL||LA249_8==COMMA||(LA249_8>=STAR && LA249_8<=SLASH_SLASH)||LA249_8==COLON||(LA249_8>=SEMICOLON && LA249_8<=VBAR)) ) {s = 3;}


	                            input.seek(index249_8);
	                            if ( s>=0 ) return s;
	                            break;
	                        case 4 : 
	                            var LA249_5 = input.LA(1);


	                            var index249_5 = input.index();
	                            input.rewind();
	                            s = -1;
	                            if ( (LA249_5==EOF||(LA249_5>=AND && LA249_5<=ASCENDING)||(LA249_5>=CASE && LA249_5<=CASTABLE)||LA249_5==COLLATION||LA249_5==DEFAULT||(LA249_5>=DESCENDING && LA249_5<=DIV)||LA249_5==EMPTY||LA249_5==EQ||LA249_5==EXCEPT||LA249_5==FOR||LA249_5==GE||(LA249_5>=GT && LA249_5<=IDIV)||(LA249_5>=INSTANCE && LA249_5<=IS)||LA249_5==LE||(LA249_5>=LET && LA249_5<=MOD)||LA249_5==NE||(LA249_5>=OR && LA249_5<=ORDER)||(LA249_5>=RETURN && LA249_5<=SATISFIES)||LA249_5==STABLE||(LA249_5>=TO && LA249_5<=TREAT)||LA249_5==UNION||LA249_5==WHERE||LA249_5==COUNT||(LA249_5>=END && LA249_5<=GROUP)||LA249_5==ONLY||LA249_5==START||(LA249_5>=AFTER && LA249_5<=BEFORE)||LA249_5==INTO||LA249_5==MODIFY||LA249_5==WITH||LA249_5==CONTAINS||(LA249_5>=LPAREN && LA249_5<=RPAREN)||(LA249_5>=RBRACKET && LA249_5<=EQUAL)||LA249_5==NOTEQUAL||LA249_5==COMMA||(LA249_5>=STAR && LA249_5<=SLASH_SLASH)||LA249_5==COLON||(LA249_5>=SEMICOLON && LA249_5<=VBAR)) ) {s = 3;}

	                            else if ( (LA249_5==NODE||LA249_5==NODES) && ((this.lc(XQU)))) {s = 10;}


	                            input.seek(index249_5);
	                            if ( s>=0 ) return s;
	                            break;
	            }
	        }).call(this.recognizer, s, input);
	        if (!org.antlr.lang.isUndefined(retval)) {
	            return retval;
	        }
	        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
	        var nvae =
	            new org.antlr.runtime.NoViableAltException(this.getDescription(), 249, _s, input);
	        this.error(nvae);
	        throw nvae;
	    },
	    dummy: null
	});


	// public class variables
	org.antlr.lang.augmentObject(XQueryParser, {
	    tokenNames: ["<invalid>", "<EOR>", "<DOWN>", "<UP>", "L_QuotAttrContentChar", "L_AposAttrContentChar", "L_ElementContentChar", "L_CDataSection", "L_PredefinedEntityRef", "L_CharRef", "ESCAPE_LBRACKET", "ESCAPE_RBRACKET", "ESCAPE_APOS", "ESCAPE_QUOT", "CDATA_START", "CDATA_END", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BOUNDARY_SPACE", "BY", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "EMPTY", "EMPTY_SEQUENCE", "ENCODING", "EQ", "EVERY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSTANCE", "INTERSECT", "IS", "ITEM", "LAX", "LE", "LEAST", "LET", "LT", "MOD", "MODULE", "NAMESPACE", "NE", "NO_INHERIT", "NO_PRESERVE", "NODE", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARENT", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RETURN", "SATISFIES", "SCHEMA", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "SELF", "SOME", "STABLE", "STRICT", "STRIP", "TEXT", "THEN", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "VALIDATE", "VARIABLE", "VERSION", "WHERE", "XQUERY", "ALLOWING", "CATCH", "CONTEXT", "COUNT", "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "DETERMINISTIC", "DIGIT", "END", "GROUP", "GROUPING_SEPARATOR", "INFINITY", "MINUS_SIGN", "NAMESPACE_NODE", "NAN", "NEXT", "ONLY", "PATTERN_SEPARATOR", "PERCENT", "PER_MILLE", "PREVIOUS", "SLIDING", "START", "SWITCH", "TRY", "TUMBLING", "TYPE", "WHEN", "WINDOW", "ZERO_DIGIT", "AFTER", "BEFORE", "COPY", "DELETE", "FIRST", "INSERT", "INTO", "LAST", "MODIFY", "NODES", "RENAME", "REPLACE", "REVALIDATION", "SKIP", "UPDATING", "VALUE", "WITH", "ALL", "ANY", "CONTAINS", "CONTENT", "DIACRITICS", "DIFFERENT", "DISTANCE", "ENTIRE", "EXACTLY", "FROM", "FT_OPTION", "FTAND", "FTNOT", "FTOR", "INSENSITIVE", "LANGUAGE", "LEVELS", "LOWERCASE", "MOST", "NO", "NOT", "OCCURS", "PARAGRAPH", "PARAGRAPHS", "PHRASE", "RELATIONSHIP", "SAME", "SCORE", "SENSITIVE", "SENTENCE", "SENTENCES", "STEMMING", "STOP", "THESAURUS", "TIMES", "UPPERCASE", "USING", "WEIGHT", "WILDCARDS", "WITHOUT", "WORD", "WORDS", "BREAK", "CONTINUE", "EXIT", "LOOP", "RETURNING", "WHILE", "CHECK", "COLLECTION", "CONSTRAINT", "FOREACH", "FOREIGN", "INDEX", "INTEGRITY", "KEY", "ON", "UNIQUE", "BINARY", "AMP_ER", "APOS_ER", "QUOT_ER", "LPAREN", "RPAREN", "DOLLAR", "LBRACKET", "RBRACKET", "LSQUARE", "RSQUARE", "EQUAL", "BIND", "NOTEQUAL", "ANN_PERCENT", "HASH", "AMP", "COMMA", "QUESTION", "STAR", "PLUS", "MINUS", "SMALLER", "GREATER", "SMALLEREQ", "GREATEREQ", "SMALLER_SMALLER", "GREATER_GREATER", "SLASH", "SLASH_SLASH", "DOT", "DOT_DOT", "COLON", "COLON_COLON", "EMPTY_CLOSE_TAG", "CLOSE_TAG", "SEMICOLON", "VBAR", "PRAGMA_START", "PRAGMA_END", "XML_COMMENT_START", "XML_COMMENT_END", "PI_START", "PI_END", "ATTR_SIGN", "CHARREF_DEC", "CHARREF_HEX", "APOS", "QUOT", "NCNameStartChar", "NCNameChar", "L_NCName", "Letter", "HexLetter", "Digit", "Digits", "S", "SU", "L_Pragma", "L_DirCommentConstructor", "L_DirPIConstructor", "L_IntegerLiteral", "L_DecimalLiteral", "L_DoubleLiteral", "L_Comment", "L_AnyChar", "L_QuotStringLiteralChar", "L_AposStringLiteralChar", "LibraryModule", "MainModule", "VersionDecl", "VersionDeclEncoding", "VersionDeclVersion", "ModuleDecl", "Prolog", "DefaultNamespaceDecls", "DefaultNamespaceDecl", "Setters", "Setter", "NamespaceDecls", "NamespaceDecl", "Imports", "FTOptionDecls", "SchemaImport", "SchemaPrefix", "NamespaceName", "DefaultElementNamespace", "AtHints", "ModuleImport", "BaseURIDecl", "OrderedDecls", "VarDecl", "VarType", "VarValue", "VarDefaultValue", "VarVariableDecl", "FunctionDecl", "ParamList", "ReturnType", "OptionDecl", "TypeDeclaration", "Param", "EnclosedExpr", "QueryBody", "UnaryExpr", "DirElemConstructor", "DirAttributeList", "DirAttributeValue", "DirElemContent", "CommonContent", "SequenceType", "EmptySequenceTest", "KindTest", "ItemTest", "FunctionTest", "AtomicType", "AtomicOrUnionType", "StringLiteral", "ElementContentChar", "AttributeValueChar", "QName", "BlockExpr", "BinaryTest", "EXPLICITLY"],
	    FOLLOW_p_VersionDecl_in_p_Module503: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_LibraryModule_in_p_Module536: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
	    FOLLOW_p_MainModule_in_p_Module559: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
	    FOLLOW_EOF_in_p_Module583: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_XQUERY_in_p_VersionDecl611: new org.antlr.runtime.BitSet([0x00000000, 0x00004000,0x00000000, 0x00002000]),
	    FOLLOW_ENCODING_in_p_VersionDecl619: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_VersionDecl625: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_VERSION_in_p_VersionDecl646: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_VersionDecl652: new org.antlr.runtime.BitSet([0x00000000, 0x00004000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_ENCODING_in_p_VersionDecl657: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_VersionDecl663: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_p_VersionDecl669: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_Prolog_in_p_MainModule735: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_pm_QueryBody_in_p_MainModule737: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ModuleDecl_in_p_LibraryModule793: new org.antlr.runtime.BitSet([0x00000000, 0x10000004]),
	    FOLLOW_pm_Prolog_in_p_LibraryModule795: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_MODULE_in_p_ModuleDecl851: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
	    FOLLOW_NAMESPACE_in_p_ModuleDecl855: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NCName_in_p_ModuleDecl859: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
	    FOLLOW_EQUAL_in_p_ModuleDecl861: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_ModuleDecl863: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_p_ModuleDecl865: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog924: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
	    FOLLOW_p_Setter_in_pm_Prolog930: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
	    FOLLOW_pm_NamespaceDecl_in_pm_Prolog936: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
	    FOLLOW_p_Import_in_pm_Prolog942: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
	    FOLLOW_pm_FTOptionDecl_in_pm_Prolog948: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
	    FOLLOW_pg_OrderedDecl_in_pm_Prolog955: new org.antlr.runtime.BitSet([0x00000002, 0x00000004]),
	    FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1270: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_AnnotatedDecl_in_pg_OrderedDecl1282: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1294: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1324: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_DefaultCollationDecl_in_p_Setter1336: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_BaseURIDecl_in_p_Setter1348: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_ConstructionDecl_in_p_Setter1360: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_OrderingModeDecl_in_p_Setter1372: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_EmptyOrderDecl_in_p_Setter1384: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_RevalidationDecl_in_p_Setter1399: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1411: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_DecimalFormatDecl_in_p_Setter1423: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1455: new org.antlr.runtime.BitSet([0x01000000, 0x00000000]),
	    FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1461: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x01000000, 0x00000008]),
	    FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1470: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_STRIP_in_pm_BoundarySpaceDecl1480: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1487: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_DefaultCollationDecl1515: new org.antlr.runtime.BitSet([0x00000000, 0x00000008]),
	    FOLLOW_DEFAULT_in_pm_DefaultCollationDecl1521: new org.antlr.runtime.BitSet([0x40000000, 0x00000000]),
	    FOLLOW_COLLATION_in_pm_DefaultCollationDecl1527: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl1531: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl1533: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_BaseURIDecl1569: new org.antlr.runtime.BitSet([0x00800000, 0x00000000]),
	    FOLLOW_BASE_URI_in_pm_BaseURIDecl1575: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_BaseURIDecl1581: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_BaseURIDecl1583: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_ConstructionDecl1636: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
	    FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl1642: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x01000000, 0x00000008]),
	    FOLLOW_STRIP_in_pm_ConstructionDecl1651: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_PRESERVE_in_pm_ConstructionDecl1657: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_ConstructionDecl1664: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_OrderingModeDecl1692: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_ORDERING_in_pm_OrderingModeDecl1698: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00080000, 0x00000400]),
	    FOLLOW_ORDERED_in_pm_OrderingModeDecl1707: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_UNORDERED_in_pm_OrderingModeDecl1713: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1720: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_EmptyOrderDecl1748: new org.antlr.runtime.BitSet([0x00000000, 0x00000008]),
	    FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1754: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00040000, 0x00000000]),
	    FOLLOW_ORDER_in_pm_EmptyOrderDecl1760: new org.antlr.runtime.BitSet([0x00000000, 0x00001000]),
	    FOLLOW_EMPTY_in_pm_EmptyOrderDecl1766: new org.antlr.runtime.BitSet([0x00000000, 0x01000000,0x00000020, 0x00000000]),
	    FOLLOW_GREATEST_in_pm_EmptyOrderDecl1775: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_LEAST_in_pm_EmptyOrderDecl1781: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1788: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1816: new org.antlr.runtime.BitSet([0x00000000, 0x00000002]),
	    FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1822: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x01002000, 0x00000000]),
	    FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1826: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_pm_CopyNamespacesDecl1828: new org.antlr.runtime.BitSet([0x00000000, 0x40000000,0x00001000, 0x00000000]),
	    FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1830: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1832: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PRESERVE_in_p_PreserveMode1861: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NO_PRESERVE_in_p_PreserveMode1867: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_INHERIT_in_p_InheritMode1899: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NO_INHERIT_in_p_InheritMode1905: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_DecimalFormatDecl1944: new org.antlr.runtime.BitSet([0x00000000, 0x00000008,0x00000000, 0x00100000]),
	    FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1952: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_pm_DecimalFormatDecl1956: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x5CA00000,0x0000200E, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_DEFAULT_in_pm_DecimalFormatDecl1964: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00100000]),
	    FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1970: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x5CA00000,0x0000200E, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_p_DFPropertyName_in_pm_DecimalFormatDecl1977: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
	    FOLLOW_EQUAL_in_pm_DecimalFormatDecl1979: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_DecimalFormatDecl1981: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x5CA00000,0x0000200E, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_DecimalFormatDecl1985: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2014: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2020: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_INFINITY_in_p_DFPropertyName2026: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_MINUS_SIGN_in_p_DFPropertyName2032: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NAN_in_p_DFPropertyName2038: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PERCENT_in_p_DFPropertyName2044: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PER_MILLE_in_p_DFPropertyName2050: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2056: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DIGIT_in_p_DFPropertyName2062: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2068: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_SchemaImport_in_p_Import2097: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_ModuleImport_in_p_Import2101: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_IMPORT_in_pm_SchemaImport2137: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x10000000, 0x00000000]),
	    FOLLOW_SCHEMA_in_pm_SchemaImport2143: new org.antlr.runtime.BitSet([0x00000000, 0x00000008,0x00000400, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2149: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_SchemaImport2154: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_AT_in_pm_SchemaImport2159: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_SchemaImport2165: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
	    FOLLOW_COMMA_in_pm_SchemaImport2168: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_SchemaImport2172: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
	    FOLLOW_SEMICOLON_in_pm_SchemaImport2178: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NAMESPACE_in_p_SchemaPrefix2248: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NCName_in_p_SchemaPrefix2254: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
	    FOLLOW_EQUAL_in_p_SchemaPrefix2256: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DEFAULT_in_p_SchemaPrefix2295: new org.antlr.runtime.BitSet([0x00000000, 0x00000400]),
	    FOLLOW_ELEMENT_in_p_SchemaPrefix2301: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
	    FOLLOW_NAMESPACE_in_p_SchemaPrefix2307: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_IMPORT_in_pm_ModuleImport2357: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000200, 0x00000000]),
	    FOLLOW_MODULE_in_pm_ModuleImport2363: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_NAMESPACE_in_pm_ModuleImport2370: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NCName_in_pm_ModuleImport2376: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
	    FOLLOW_EQUAL_in_pm_ModuleImport2378: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_ModuleImport2384: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_AT_in_pm_ModuleImport2389: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_ModuleImport2395: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
	    FOLLOW_COMMA_in_pm_ModuleImport2398: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_ModuleImport2402: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
	    FOLLOW_SEMICOLON_in_pm_ModuleImport2408: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_NamespaceDecl2477: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
	    FOLLOW_NAMESPACE_in_pm_NamespaceDecl2483: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NCName_in_pm_NamespaceDecl2489: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
	    FOLLOW_EQUAL_in_pm_NamespaceDecl2491: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_NamespaceDecl2495: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_NamespaceDecl2497: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl2554: new org.antlr.runtime.BitSet([0x00000000, 0x00000008]),
	    FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl2560: new org.antlr.runtime.BitSet([0x00000000, 0x00400400]),
	    FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl2567: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
	    FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl2573: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
	    FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl2580: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl2584: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl2586: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_AnnotatedDecl2614: new org.antlr.runtime.BitSet([0x00000000, 0x00400000,0x00000000, 0x00001000,0x10000000, 0x00000000,0x00310000, 0x00000080]),
	    FOLLOW_p_Annotation_in_pm_AnnotatedDecl2618: new org.antlr.runtime.BitSet([0x00000000, 0x00400000,0x00000000, 0x00001000,0x10000000, 0x00000000,0x00310000, 0x00000080]),
	    FOLLOW_pg_AnnotatedDecl_in_pm_AnnotatedDecl2621: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_AnnotatedDecl2623: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_VarDecl_in_pg_AnnotatedDecl2647: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_FunctionDecl_in_pg_AnnotatedDecl2659: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_CollectionDecl_in_pg_AnnotatedDecl2674: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_IndexDecl_in_pg_AnnotatedDecl2689: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ICDecl_in_pg_AnnotatedDecl2704: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ANN_PERCENT_in_p_Annotation2730: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_Annotation2732: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_Annotation2735: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_Literal_in_p_Annotation2737: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_Annotation2740: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_Literal_in_p_Annotation2742: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_RPAREN_in_p_Annotation2746: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_VARIABLE_in_p_VarDecl2776: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_VarDecl2780: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_VarDecl2784: new org.antlr.runtime.BitSet([0x00080000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_p_TypeDeclaration_in_p_VarDecl2788: new org.antlr.runtime.BitSet([0x00000000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_BIND_in_p_VarDecl2793: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarValue_in_p_VarDecl2797: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_EXTERNAL_in_p_VarDecl2805: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_BIND_in_p_VarDecl2810: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarDefaultValue_in_p_VarDecl2814: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_VarValue2893: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_VarDefaultValue2920: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_ContextItemDecl2949: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00040000]),
	    FOLLOW_CONTEXT_in_pm_ContextItemDecl2955: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000004, 0x00000000]),
	    FOLLOW_ITEM_in_pm_ContextItemDecl2961: new org.antlr.runtime.BitSet([0x00080000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_AS_in_pm_ContextItemDecl2968: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ItemType_in_pm_ContextItemDecl2972: new org.antlr.runtime.BitSet([0x00000000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_BIND_in_pm_ContextItemDecl2978: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarValue_in_pm_ContextItemDecl2980: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_EXTERNAL_in_pm_ContextItemDecl2988: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000020]),
	    FOLLOW_BIND_in_pm_ContextItemDecl2993: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarDefaultValue_in_pm_ContextItemDecl2995: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_ContextItemDecl3001: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_UPDATING_in_pm_FunctionDecl3034: new org.antlr.runtime.BitSet([0x00000000, 0x00400000]),
	    FOLLOW_FUNCTION_in_pm_FunctionDecl3042: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_pg_FQName_in_pm_FunctionDecl3048: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_pm_FunctionDecl3050: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0xC0000000, 0x00000000]),
	    FOLLOW_p_ParamList_in_pm_FunctionDecl3054: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_pm_FunctionDecl3057: new org.antlr.runtime.BitSet([0x00080000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_AS_in_pm_FunctionDecl3062: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceType_in_pm_FunctionDecl3068: new org.antlr.runtime.BitSet([0x00000000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_pm_FunctionDecl3073: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_StatementsAndOptionalExpr_in_pm_FunctionDecl3077: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pm_FunctionDecl3079: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_EXTERNAL_in_pm_FunctionDecl3085: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Param_in_p_ParamList3162: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_ParamList3165: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_p_Param_in_p_ParamList3169: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_DOLLAR_in_p_Param3227: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_Param3231: new org.antlr.runtime.BitSet([0x00080002, 0x00000000]),
	    FOLLOW_p_TypeDeclaration_in_p_Param3235: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_EnclosedExpr_in_pm_FunctionBody3291: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LBRACKET_in_p_EnclosedExpr3318: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_EnclosedExpr3320: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_EnclosedExpr3323: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_OptionDecl3375: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00010000, 0x00000000]),
	    FOLLOW_OPTION_in_pm_OptionDecl3381: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_pm_OptionDecl3385: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_pm_OptionDecl3387: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_OptionDecl3389: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Program_in_pm_QueryBody3418: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Expr_in_pm_QueryBody3430: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_Expr3466: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_Expr3482: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_Expr3484: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_p_FLWORHybrid_in_p_ExprSingle3551: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_IfHybrid_in_p_ExprSingle3581: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_SwitchHybrid_in_p_ExprSingle3607: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_TypeswitchHybrid_in_p_ExprSingle3629: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_TryCatchHybrid_in_p_ExprSingle3656: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSimple_in_p_ExprSingle3669: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_InitialClause_in_p_FLWORHybrid3696: new org.antlr.runtime.BitSet([0x00000000, 0x00200000,0x04040040, 0x02084002]),
	    FOLLOW_p_IntermediateClause_in_p_FLWORHybrid3698: new org.antlr.runtime.BitSet([0x00000000, 0x00200000,0x04040040, 0x02084002]),
	    FOLLOW_p_ReturnHybrid_in_p_FLWORHybrid3701: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ForClause_in_p_InitialClause3728: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_LetClause_in_p_InitialClause3732: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_WindowClause_in_p_InitialClause3736: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_InitialClause_in_p_IntermediateClause3762: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_WhereClause_in_p_IntermediateClause3766: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_GroupByClause_in_p_IntermediateClause3770: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_OrderByClause_in_p_IntermediateClause3774: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_CountClause_in_p_IntermediateClause3778: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FOR_in_p_ForClause3807: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_p_ForBinding_in_p_ForClause3811: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_ForClause3814: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_p_ForBinding_in_p_ForClause3816: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_DOLLAR_in_p_ForBinding3844: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_ForBinding3846: new org.antlr.runtime.BitSet([0x00280000, 0x20000000,0x00000000, 0x00010000,0x00000000, 0x04000000]),
	    FOLLOW_p_TypeDeclaration_in_p_ForBinding3848: new org.antlr.runtime.BitSet([0x00200000, 0x20000000,0x00000000, 0x00010000,0x00000000, 0x04000000]),
	    FOLLOW_p_AllowingEmpty_in_p_ForBinding3851: new org.antlr.runtime.BitSet([0x00200000, 0x20000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_p_PositionalVar_in_p_ForBinding3854: new org.antlr.runtime.BitSet([0x00000000, 0x20000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_p_FTScoreVar_in_p_ForBinding3857: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
	    FOLLOW_IN_in_p_ForBinding3862: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_ForBinding3866: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ALLOWING_in_p_AllowingEmpty3895: new org.antlr.runtime.BitSet([0x00000000, 0x00001000]),
	    FOLLOW_EMPTY_in_p_AllowingEmpty3901: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AT_in_p_PositionalVar3931: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_PositionalVar3935: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_PositionalVar3937: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LET_in_p_LetClause3965: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000,0x80000000, 0x00000000]),
	    FOLLOW_p_LetBinding_in_p_LetClause3969: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_LetClause3972: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000,0x80000000, 0x00000000]),
	    FOLLOW_p_LetBinding_in_p_LetClause3974: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_DOLLAR_in_p_LetBinding4006: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_LetBinding4008: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_p_TypeDeclaration_in_p_LetBinding4010: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_p_FTScoreVar_in_p_LetBinding4016: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_BIND_in_p_LetBinding4020: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_LetBinding4022: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FOR_in_p_WindowClause4051: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000220, 0x00000000]),
	    FOLLOW_p_TumblingWindowClause_in_p_WindowClause4056: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_SlidingWindowClause_in_p_WindowClause4060: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_TUMBLING_in_p_TumblingWindowClause4097: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00001000, 0x00000000]),
	    FOLLOW_WINDOW_in_p_TumblingWindowClause4103: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_TumblingWindowClause4107: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_TumblingWindowClause4109: new org.antlr.runtime.BitSet([0x00080000, 0x20000000]),
	    FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4111: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
	    FOLLOW_IN_in_p_TumblingWindowClause4116: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4120: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000040, 0x00000000]),
	    FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4123: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x01000000,0x00000001, 0x00000000]),
	    FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4125: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SLIDING_in_p_SlidingWindowClause4154: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00001000, 0x00000000]),
	    FOLLOW_WINDOW_in_p_SlidingWindowClause4160: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_SlidingWindowClause4164: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_SlidingWindowClause4166: new org.antlr.runtime.BitSet([0x00080000, 0x20000000]),
	    FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4168: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
	    FOLLOW_IN_in_p_SlidingWindowClause4173: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4177: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000040, 0x00000000]),
	    FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4180: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x01000000,0x00000001, 0x00000000]),
	    FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4182: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_START_in_p_WindowStartCondition4211: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x80000000,0x00000810, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_p_WindowVars_in_p_WindowStartCondition4215: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
	    FOLLOW_WHEN_in_p_WindowStartCondition4219: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_WindowStartCondition4223: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ONLY_in_p_WindowEndCondition4253: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x01000000]),
	    FOLLOW_END_in_p_WindowEndCondition4261: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x80000000,0x00000810, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_p_WindowVars_in_p_WindowEndCondition4265: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
	    FOLLOW_WHEN_in_p_WindowEndCondition4269: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_WindowEndCondition4273: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_WindowVars4301: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_CurrentItem_in_p_WindowVars4303: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00000000, 0x80000000,0x00000010, 0x00000000]),
	    FOLLOW_p_PositionalVar_in_p_WindowVars4307: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x80000000,0x00000010, 0x00000000]),
	    FOLLOW_PREVIOUS_in_p_WindowVars4313: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_WindowVars4317: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_PreviousItem_in_p_WindowVars4319: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x80000000]),
	    FOLLOW_NEXT_in_p_WindowVars4326: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_WindowVars4330: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NextItem_in_p_WindowVars4332: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_CurrentItem4360: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_PreviousItem4386: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_NextItem4412: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_COUNT_in_p_CountClause4440: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_CountClause4444: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_CountClause4446: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_WHERE_in_p_WhereClause4482: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_WhereClause4486: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_GROUP_in_p_GroupByClause4515: new org.antlr.runtime.BitSet([0x02000000, 0x00000000]),
	    FOLLOW_BY_in_p_GroupByClause4521: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_p_GroupingSpecList_in_p_GroupByClause4525: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4551: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_GroupingSpecList4554: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4556: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_DOLLAR_in_p_GroupingSpec4584: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_GroupingSpec4586: new org.antlr.runtime.BitSet([0x40000002, 0x00000000]),
	    FOLLOW_COLLATION_in_p_GroupingSpec4591: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_GroupingSpec4595: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ORDER_in_p_OrderByClause4627: new org.antlr.runtime.BitSet([0x02000000, 0x00000000]),
	    FOLLOW_BY_in_p_OrderByClause4631: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_STABLE_in_p_OrderByClause4639: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00040000, 0x00000000]),
	    FOLLOW_ORDER_in_p_OrderByClause4643: new org.antlr.runtime.BitSet([0x02000000, 0x00000000]),
	    FOLLOW_BY_in_p_OrderByClause4647: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_OrderSpecList_in_p_OrderByClause4653: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_OrderSpec_in_p_OrderSpecList4679: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_OrderSpecList4682: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_OrderSpec_in_p_OrderSpecList4684: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_p_ExprSingle_in_p_OrderSpec4712: new org.antlr.runtime.BitSet([0x40100000, 0x00001040]),
	    FOLLOW_p_OrderModifier_in_p_OrderSpec4715: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ASCENDING_in_p_OrderModifier4744: new org.antlr.runtime.BitSet([0x40000002, 0x00001000]),
	    FOLLOW_DESCENDING_in_p_OrderModifier4750: new org.antlr.runtime.BitSet([0x40000002, 0x00001000]),
	    FOLLOW_EMPTY_in_p_OrderModifier4757: new org.antlr.runtime.BitSet([0x00000000, 0x01000000,0x00000020, 0x00000000]),
	    FOLLOW_GREATEST_in_p_OrderModifier4762: new org.antlr.runtime.BitSet([0x40000002, 0x00000000]),
	    FOLLOW_LEAST_in_p_OrderModifier4768: new org.antlr.runtime.BitSet([0x40000002, 0x00000000]),
	    FOLLOW_COLLATION_in_p_OrderModifier4776: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_OrderModifier4778: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_RETURN_in_p_ReturnHybrid4811: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_ReturnHybrid4815: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SOME_in_p_QuantifiedExpr4845: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_EVERY_in_p_QuantifiedExpr4851: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_QuantifiedExpr4856: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_QuantifiedExpr4858: new org.antlr.runtime.BitSet([0x00080000, 0x20000000]),
	    FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4860: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
	    FOLLOW_IN_in_p_QuantifiedExpr4865: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4869: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x08000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_QuantifiedExpr4873: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_QuantifiedExpr4875: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_QuantifiedExpr4877: new org.antlr.runtime.BitSet([0x00080000, 0x20000000]),
	    FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4879: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
	    FOLLOW_IN_in_p_QuantifiedExpr4884: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4888: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x08000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_SATISFIES_in_p_QuantifiedExpr4895: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4899: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SWITCH_in_p_SwitchHybrid4929: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_SwitchHybrid4933: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_SwitchHybrid4935: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_SwitchHybrid4938: new org.antlr.runtime.BitSet([0x04000000, 0x00000000]),
	    FOLLOW_p_SwitchCaseHybrid_in_p_SwitchHybrid4940: new org.antlr.runtime.BitSet([0x04000000, 0x00000008]),
	    FOLLOW_DEFAULT_in_p_SwitchHybrid4946: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_RETURN_in_p_SwitchHybrid4952: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_SwitchHybrid4956: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_CASE_in_p_SwitchCaseHybrid4987: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseHybrid4991: new org.antlr.runtime.BitSet([0x04000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_RETURN_in_p_SwitchCaseHybrid4997: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_SwitchCaseHybrid5001: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand5028: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_TYPESWITCH_in_p_TypeswitchHybrid5058: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_TypeswitchHybrid5062: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_TypeswitchHybrid5064: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_TypeswitchHybrid5067: new org.antlr.runtime.BitSet([0x04000000, 0x00000000]),
	    FOLLOW_p_CaseHybrid_in_p_TypeswitchHybrid5069: new org.antlr.runtime.BitSet([0x04000000, 0x00000008]),
	    FOLLOW_DEFAULT_in_p_TypeswitchHybrid5075: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_TypeswitchHybrid5080: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_TypeswitchHybrid5082: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_RETURN_in_p_TypeswitchHybrid5088: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_TypeswitchHybrid5092: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_CASE_in_p_CaseHybrid5122: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_CaseHybrid5127: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_CaseHybrid5129: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
	    FOLLOW_AS_in_p_CaseHybrid5133: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceTypeUnion_in_p_CaseHybrid5139: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_RETURN_in_p_CaseHybrid5143: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_CaseHybrid5147: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5174: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
	    FOLLOW_VBAR_in_p_SequenceTypeUnion5177: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5179: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
	    FOLLOW_IF_in_p_IfHybrid5210: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_IfHybrid5214: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_IfHybrid5216: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_IfHybrid5219: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_THEN_in_p_IfHybrid5223: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_IfHybrid5227: new org.antlr.runtime.BitSet([0x00000000, 0x00000800]),
	    FOLLOW_ELSE_in_p_IfHybrid5232: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_IfHybrid5236: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_TryClause_in_p_TryCatchExpr5263: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00020000]),
	    FOLLOW_p_CatchClause_in_p_TryCatchExpr5265: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00020000]),
	    FOLLOW_TRY_in_p_TryClause5294: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_TryClause5298: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_TryTargetExpr_in_p_TryClause5300: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_TryClause5302: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Expr_in_p_TryTargetExpr5328: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_CATCH_in_p_CatchClause5357: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x01001001,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_CatchErrorList_in_p_CatchClause5361: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_CatchClause5363: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_CatchClause5365: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_CatchClause5368: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NameTest_in_p_CatchErrorList5394: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
	    FOLLOW_VBAR_in_p_CatchErrorList5397: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x01001000,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NameTest_in_p_CatchErrorList5399: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
	    FOLLOW_p_AndExpr_in_p_OrExpr5444: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00020000, 0x00000000]),
	    FOLLOW_OR_in_p_OrExpr5450: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AndExpr_in_p_OrExpr5454: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00020000, 0x00000000]),
	    FOLLOW_p_ComparisonExpr_in_p_AndExpr5483: new org.antlr.runtime.BitSet([0x00040002, 0x00000000]),
	    FOLLOW_AND_in_p_AndExpr5489: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ComparisonExpr_in_p_AndExpr5493: new org.antlr.runtime.BitSet([0x00040002, 0x00000000]),
	    FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5523: new org.antlr.runtime.BitSet([0x00000002, 0x02808000,0x00000892, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x001F8050]),
	    FOLLOW_p_ValueComp_in_p_ComparisonExpr5528: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_GeneralComp_in_p_ComparisonExpr5532: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NodeComp_in_p_ComparisonExpr5536: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5539: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AdditiveExpr_in_p_RangeExpr5568: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000040]),
	    FOLLOW_TO_in_p_RangeExpr5574: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AdditiveExpr_in_p_RangeExpr5578: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5607: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00006000]),
	    FOLLOW_set_in_p_AdditiveExpr5611: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5619: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00006000]),
	    FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5648: new org.antlr.runtime.BitSet([0x00000002, 0x04000080,0x00000100, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
	    FOLLOW_STAR_in_p_MultiplicativeExpr5653: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_DIV_in_p_MultiplicativeExpr5660: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_IDIV_in_p_MultiplicativeExpr5666: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_MOD_in_p_MultiplicativeExpr5672: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5678: new org.antlr.runtime.BitSet([0x00000002, 0x04000080,0x00000100, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
	    FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5707: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000200,0x00000000, 0x00000000,0x00000000, 0x40000000]),
	    FOLLOW_UNION_in_p_UnionExpr5714: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_VBAR_in_p_UnionExpr5720: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5723: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000200,0x00000000, 0x00000000,0x00000000, 0x40000000]),
	    FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5752: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000001, 0x00000000]),
	    FOLLOW_INTERSECT_in_p_IntersectExceptExpr5759: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_EXCEPT_in_p_IntersectExceptExpr5765: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5770: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000001, 0x00000000]),
	    FOLLOW_p_TreatExpr_in_p_InstanceofExpr5799: new org.antlr.runtime.BitSet([0x00000002, 0x80000000]),
	    FOLLOW_INSTANCE_in_p_InstanceofExpr5805: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00008000, 0x00000000]),
	    FOLLOW_OF_in_p_InstanceofExpr5811: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceType_in_p_InstanceofExpr5815: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_CastableExpr_in_p_TreatExpr5843: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000080]),
	    FOLLOW_TREAT_in_p_TreatExpr5849: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
	    FOLLOW_AS_in_p_TreatExpr5855: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceType_in_p_TreatExpr5859: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_CastExpr_in_p_CastableExpr5896: new org.antlr.runtime.BitSet([0x10000002, 0x00000000]),
	    FOLLOW_CASTABLE_in_p_CastableExpr5902: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
	    FOLLOW_AS_in_p_CastableExpr5908: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SingleType_in_p_CastableExpr5912: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_UnaryExpr_in_p_CastExpr5949: new org.antlr.runtime.BitSet([0x08000002, 0x00000000]),
	    FOLLOW_CAST_in_p_CastExpr5955: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
	    FOLLOW_AS_in_p_CastExpr5961: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SingleType_in_p_CastExpr5965: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PLUS_in_p_UnaryExpr5995: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_MINUS_in_p_UnaryExpr5999: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ValueExpr_in_p_UnaryExpr6003: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ValidateExpr_in_p_ValueExpr6073: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_PathExpr_in_p_ValueExpr6085: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExtensionExpr_in_p_ValueExpr6097: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_p_GeneralComp0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_EQ_in_p_ValueComp6172: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NE_in_p_ValueComp6178: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LT_in_p_ValueComp6184: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LE_in_p_ValueComp6190: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_GT_in_p_ValueComp6196: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_GE_in_p_ValueComp6202: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_IS_in_p_NodeComp6233: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SMALLER_SMALLER_in_p_NodeComp6239: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_GREATER_GREATER_in_p_NodeComp6243: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_VALIDATE_in_p_ValidateExpr6271: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000008, 0x00000004,0x00000400, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_p_ValidationMode_in_p_ValidateExpr6277: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_TYPE_in_p_ValidateExpr6283: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_TypeName_in_p_ValidateExpr6287: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_ValidateExpr6292: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_ValidateExpr6294: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_ValidateExpr6297: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LAX_in_p_ValidationMode6326: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_STRICT_in_p_ValidationMode6332: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_L_Pragma_in_p_ExtensionExpr6361: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00080000, 0x00000000]),
	    FOLLOW_LBRACKET_in_p_ExtensionExpr6364: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F003,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_ExtensionExpr6366: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_ExtensionExpr6370: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SLASH_in_p_PathExpr6413: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_RelativePathExpr_in_p_PathExpr6415: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SLASH_in_p_PathExpr6428: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SLASH_SLASH_in_p_PathExpr6440: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_RelativePathExpr_in_p_PathExpr6442: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_RelativePathExpr_in_p_PathExpr6454: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_StepExpr_in_p_RelativePathExpr6482: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00600000]),
	    FOLLOW_set_in_p_RelativePathExpr6485: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_StepExpr_in_p_RelativePathExpr6493: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00600000]),
	    FOLLOW_p_PostfixExpr_in_p_StepExpr6547: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_PostfixExpr_in_p_StepExpr6661: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AxisStep_in_p_StepExpr6679: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_PostfixExpr_in_p_StepExpr6700: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_PostfixExpr_in_p_StepExpr6718: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AxisStep_in_p_StepExpr6730: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ReverseStep_in_p_AxisStep6757: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
	    FOLLOW_p_ForwardStep_in_p_AxisStep6761: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
	    FOLLOW_p_PredicateList_in_p_AxisStep6764: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ForwardAxis_in_p_ForwardStep6790: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x01001000,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NodeTest_in_p_ForwardStep6792: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6804: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_CHILD_in_p_ForwardAxis6830: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ForwardAxis6832: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DESCENDANT_in_p_ForwardAxis6844: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ForwardAxis6846: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ATTRIBUTE_in_p_ForwardAxis6858: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ForwardAxis6860: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SELF_in_p_ForwardAxis6872: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ForwardAxis6874: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6886: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ForwardAxis6888: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6900: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ForwardAxis6902: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FOLLOWING_in_p_ForwardAxis6914: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ForwardAxis6916: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6942: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x01001000,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6945: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ReverseAxis_in_p_ReverseStep6971: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x01001000,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NodeTest_in_p_ReverseStep6973: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6985: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PARENT_in_p_ReverseAxis7011: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ReverseAxis7013: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ANCESTOR_in_p_ReverseAxis7025: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ReverseAxis7027: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis7039: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ReverseAxis7041: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PRECEDING_in_p_ReverseAxis7053: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ReverseAxis7055: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis7067: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
	    FOLLOW_COLON_COLON_in_p_ReverseAxis7069: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DOT_DOT_in_p_AbbrevReverseStep7095: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_KindTest_in_p_NodeTest7121: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NameTest_in_p_NodeTest7125: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Wildcard_in_p_NameTest7157: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_NameTest7178: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_NameTest7196: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_STAR_in_p_Wildcard7226: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
	    FOLLOW_COLON_in_p_Wildcard7229: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NCName_in_p_Wildcard7231: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NCName_in_p_Wildcard7245: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
	    FOLLOW_COLON_in_p_Wildcard7247: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
	    FOLLOW_STAR_in_p_Wildcard7249: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_Wildcard7261: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
	    FOLLOW_COLON_in_p_Wildcard7263: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
	    FOLLOW_STAR_in_p_Wildcard7265: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_PrimaryExpr_in_p_PostfixExpr7303: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
	    FOLLOW_p_Predicate_in_p_PostfixExpr7306: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
	    FOLLOW_LPAREN_in_p_ArgumentList7347: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0x01E0F801,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Argument_in_p_ArgumentList7350: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_ArgumentList7353: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F801,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Argument_in_p_ArgumentList7355: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_RPAREN_in_p_ArgumentList7361: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Predicate_in_p_PredicateList7387: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
	    FOLLOW_LSQUARE_in_p_Predicate7414: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_Predicate7416: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000008]),
	    FOLLOW_RSQUARE_in_p_Predicate7419: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7452: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Literal_in_p_PrimaryExpr7464: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_VarRef_in_p_PrimaryExpr7476: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7488: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FunctionCall_in_p_PrimaryExpr7500: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7512: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7524: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Constructor_in_p_PrimaryExpr7536: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_BlockExpr_in_p_PrimaryExpr7550: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NumericLiteral_in_p_Literal7576: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_Literal7580: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_p_NumericLiteral0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_VarRef7648: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_VarRef7650: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_VarName7676: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LPAREN_in_p_ParenthesizedExpr7702: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_ParenthesizedExpr7704: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_ParenthesizedExpr7708: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DOT_in_p_ContextItemExpr7734: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ORDERED_in_p_OrderedExpr7762: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_OrderedExpr7766: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_OrderedExpr7768: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_OrderedExpr7771: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_UNORDERED_in_p_UnorderedExpr7799: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_UnorderedExpr7803: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_UnorderedExpr7805: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_UnorderedExpr7808: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pg_FQName_in_p_FunctionCall7835: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_p_ArgumentList_in_p_FunctionCall7837: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_Argument7863: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ArgumentPlaceholder_in_p_Argument7868: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_QUESTION_in_p_ArgumentPlaceholder7894: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_DirectConstructor_in_p_Constructor7920: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ComputedConstructor_in_p_Constructor7932: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7958: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_DirCommentConstructor_in_p_DirectConstructor7970: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_DirPIConstructor_in_p_DirectConstructor7982: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SMALLER_in_p_DirElemConstructor8009: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_DirElemConstructor8023: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08010000,0x00020000, 0x00000000]),
	    FOLLOW_p_DirAttributeList_in_p_DirElemConstructor8025: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08010000]),
	    FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor8039: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_GREATER_in_p_DirElemConstructor8044: new org.antlr.runtime.BitSet([0x00000FC0, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10008001,0x00300000, 0x00000000]),
	    FOLLOW_pm_DirElemContent_in_p_DirElemConstructor8046: new org.antlr.runtime.BitSet([0x00000FC0, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10008001,0x00300000, 0x00000000]),
	    FOLLOW_CLOSE_TAG_in_p_DirElemConstructor8049: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_DirElemConstructor8051: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00010000,0x00020000, 0x00000000]),
	    FOLLOW_S_in_p_DirElemConstructor8053: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00010000]),
	    FOLLOW_GREATER_in_p_DirElemConstructor8056: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_S_in_p_DirAttributeList8133: new org.antlr.runtime.BitSet([0xFFFF0002, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00021000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_DirAttributeList8136: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010,0x00020000, 0x00000000]),
	    FOLLOW_S_in_p_DirAttributeList8138: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
	    FOLLOW_EQUAL_in_p_DirAttributeList8141: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00020300, 0x00000000]),
	    FOLLOW_S_in_p_DirAttributeList8143: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00020300, 0x00000000]),
	    FOLLOW_p_DirAttributeValue_in_p_DirAttributeList8146: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00020000, 0x00000000]),
	    FOLLOW_QUOT_in_p_DirAttributeValue8177: new org.antlr.runtime.BitSet([0x00002F10, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
	    FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue8180: new org.antlr.runtime.BitSet([0x00002F10, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
	    FOLLOW_APOS_in_p_DirAttributeValue8184: new org.antlr.runtime.BitSet([0x00002F10, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
	    FOLLOW_p_QuotAttrValueContent_in_p_DirAttributeValue8188: new org.antlr.runtime.BitSet([0x00002F10, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
	    FOLLOW_QUOT_in_p_DirAttributeValue8192: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_APOS_in_p_DirAttributeValue8231: new org.antlr.runtime.BitSet([0x00001F20, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
	    FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue8234: new org.antlr.runtime.BitSet([0x00001F20, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
	    FOLLOW_QUOT_in_p_DirAttributeValue8238: new org.antlr.runtime.BitSet([0x00001F20, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
	    FOLLOW_p_AposAttrValueContent_in_p_DirAttributeValue8242: new org.antlr.runtime.BitSet([0x00001F20, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
	    FOLLOW_APOS_in_p_DirAttributeValue8246: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QuotAttrContentChar_in_p_QuotAttrValueContent8298: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_CommonContent_in_p_QuotAttrValueContent8302: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AposAttrContentChar_in_p_AposAttrValueContent8328: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_CommonContent_in_p_AposAttrValueContent8332: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_DirectConstructor_in_pm_DirElemContent8358: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_CDataSection_in_pm_DirElemContent8370: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_CommonContent_in_pm_DirElemContent8382: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ElementContentChar_in_pm_DirElemContent8394: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_L_PredefinedEntityRef_in_pm_CommonContent8422: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_L_CharRef_in_pm_CommonContent8434: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ESCAPE_LBRACKET_in_pm_CommonContent8446: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ESCAPE_RBRACKET_in_pm_CommonContent8458: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pg_EnclosedExprXml_in_pm_CommonContent8470: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LBRACKET_in_pg_EnclosedExprXml8502: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_StatementsAndOptionalExpr_in_pg_EnclosedExprXml8518: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pg_EnclosedExprXml8532: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_L_DirCommentConstructor_in_p_DirCommentConstructor8561: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_L_DirPIConstructor_in_p_DirPIConstructor8593: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_L_CDataSection_in_p_CDataSection8626: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_CompDocConstructor_in_p_ComputedConstructor8658: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_CompElemConstructor_in_p_ComputedConstructor8670: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_CompAttrConstructor_in_p_ComputedConstructor8682: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8694: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8706: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_CompCommentConstructor_in_p_ComputedConstructor8718: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pm_CompPIConstructor_in_p_ComputedConstructor8730: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8745: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DOCUMENT_in_pm_CompDocConstructor8774: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_pm_CompDocConstructor8778: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompDocConstructor8780: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pm_CompDocConstructor8782: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ELEMENT_in_pm_CompElemConstructor8818: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_pm_CompElemConstructor8823: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_pm_CompElemConstructor8828: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_pm_CompElemConstructor8830: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pm_CompElemConstructor8833: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_pm_CompElemConstructor8837: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_pm_ContentExpr_in_pm_CompElemConstructor8839: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pm_CompElemConstructor8841: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_StatementsAndOptionalExpr_in_pm_ContentExpr8868: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ATTRIBUTE_in_pm_CompAttrConstructor8897: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_pm_CompAttrConstructor8902: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_pm_CompAttrConstructor8907: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_pm_CompAttrConstructor8909: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pm_CompAttrConstructor8912: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_pm_CompAttrConstructor8916: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompAttrConstructor8918: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pm_CompAttrConstructor8920: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8948: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Prefix_in_p_CompNamespaceConstructor8953: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8958: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_PrefixExpr_in_p_CompNamespaceConstructor8960: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8962: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8966: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F003,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_URIExpr_in_p_CompNamespaceConstructor8968: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8971: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NCName_in_p_Prefix8997: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Expr_in_p_PrefixExpr9023: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Expr_in_p_URIExpr9050: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_TEXT_in_p_CompTextConstructor9079: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_CompTextConstructor9083: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_CompTextConstructor9085: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_CompTextConstructor9088: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_BINARY_in_p_CompBinaryConstructor9116: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_CompBinaryConstructor9120: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_CompBinaryConstructor9122: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_CompBinaryConstructor9125: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_COMMENT_in_pm_CompCommentConstructor9154: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_pm_CompCommentConstructor9158: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompCommentConstructor9160: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pm_CompCommentConstructor9162: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PROCESSING_INSTRUCTION_in_pm_CompPIConstructor9191: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NCName_in_pm_CompPIConstructor9196: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_pm_CompPIConstructor9201: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_pm_CompPIConstructor9203: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pm_CompPIConstructor9206: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_pm_CompPIConstructor9210: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompPIConstructor9212: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_pm_CompPIConstructor9214: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AtomicOrUnionType_in_p_SingleType9258: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800]),
	    FOLLOW_QUESTION_in_p_SingleType9260: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AS_in_p_TypeDeclaration9289: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceType_in_p_TypeDeclaration9295: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType9348: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_SequenceType9354: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_SequenceType9358: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ItemType_in_p_SequenceType9407: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003800]),
	    FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9418: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_p_OccurrenceIndicator0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_KindTest_in_p_ItemType9520: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_BINARY_in_p_ItemType9560: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_ItemType9562: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_ItemType9564: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ITEM_in_p_ItemType9606: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_ItemType9608: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_ItemType9610: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AtomicOrUnionType_in_p_ItemType9654: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ParenthesizedItemType_in_p_ItemType9666: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_AtomicOrUnionType9692: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_DocumentTest_in_p_KindTest9742: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ElementTest_in_p_KindTest9754: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AttributeTest_in_p_KindTest9766: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_SchemaElementTest_in_p_KindTest9778: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_SchemaAttributeTest_in_p_KindTest9790: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_PITest_in_p_KindTest9802: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_CommentTest_in_p_KindTest9814: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_TextTest_in_p_KindTest9826: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NamespaceNodeTest_in_p_KindTest9838: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AnyKindTest_in_p_KindTest9850: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NODE_in_p_AnyKindTest9876: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_AnyKindTest9878: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_AnyKindTest9880: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9906: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_DocumentTest9908: new org.antlr.runtime.BitSet([0x00000000, 0x00000400,0x40000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_p_ElementTest_in_p_DocumentTest9911: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_p_SchemaElementTest_in_p_DocumentTest9915: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_DocumentTest9919: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_TEXT_in_p_TextTest9945: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_TextTest9947: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_TextTest9949: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_COMMENT_in_p_CommentTest9975: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_CommentTest9977: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_CommentTest9979: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest10005: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_NamespaceNodeTest10007: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_NamespaceNodeTest10009: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest10035: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_PITest10037: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x5FFFFFFF, 0x00000000,0x01C01300, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NCName_in_p_PITest10040: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_PITest10044: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_PITest10048: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ATTRIBUTE_in_p_AttributeTest10074: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_AttributeTest10076: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x5FFFFFFF, 0x00001000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest10079: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_AttributeTest10082: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_TypeName_in_p_AttributeTest10084: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_AttributeTest10090: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AttributeName_in_p_AttribNameOrWildcard10118: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_STAR_in_p_AttribNameOrWildcard10122: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest10148: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_SchemaAttributeTest10150: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest10152: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_SchemaAttributeTest10154: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AttributeName_in_p_AttributeDeclaration10180: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ELEMENT_in_p_ElementTest10206: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_ElementTest10208: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x5FFFFFFF, 0x00001000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest10211: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_ElementTest10214: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_TypeName_in_p_ElementTest10216: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000800]),
	    FOLLOW_QUESTION_in_p_ElementTest10218: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_ElementTest10225: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_ElementNameOrWildcard10251: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_STAR_in_p_ElementNameOrWildcard10255: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest10273: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_SchemaElementTest10275: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest10277: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_SchemaElementTest10279: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ElementName_in_p_ElementDeclaration10305: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_AttributeName10331: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_ElementName10357: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_TypeName10383: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Annotation_in_p_FunctionTest10409: new org.antlr.runtime.BitSet([0x00000000, 0x00400000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000080]),
	    FOLLOW_p_AnyFunctionTest_in_p_FunctionTest10413: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_TypedFunctionTest_in_p_FunctionTest10417: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FUNCTION_in_p_AnyFunctionTest10444: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_AnyFunctionTest10446: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
	    FOLLOW_STAR_in_p_AnyFunctionTest10448: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_AnyFunctionTest10450: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FUNCTION_in_p_TypedFunctionTest10476: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_TypedFunctionTest10478: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x7FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceType_in_p_TypedFunctionTest10481: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_TypedFunctionTest10484: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceType_in_p_TypedFunctionTest10486: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_RPAREN_in_p_TypedFunctionTest10492: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
	    FOLLOW_AS_in_p_TypedFunctionTest10494: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceType_in_p_TypedFunctionTest10496: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LPAREN_in_p_ParenthesizedItemType10522: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ItemType_in_p_ParenthesizedItemType10524: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_ParenthesizedItemType10526: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_QUOT_in_p_StringLiteral10577: new org.antlr.runtime.BitSet([0xFFFFFFF0, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFDFF,0xFFFFFFFF, 0xFFFFFFFF,0x001FFFFF, 0x00000000]),
	    FOLLOW_pg_QuotStringLiteralContent_in_p_StringLiteral10581: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
	    FOLLOW_QUOT_in_p_StringLiteral10583: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_APOS_in_p_StringLiteral10620: new org.antlr.runtime.BitSet([0xFFFFFFF0, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFDFF,0xFFFFFFFF, 0xFFFFFFFF,0x001FFFFF, 0x00000000]),
	    FOLLOW_pg_AposStringLiteralContent_in_p_StringLiteral10624: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000100, 0x00000000]),
	    FOLLOW_APOS_in_p_StringLiteral10626: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_pg_QuotStringLiteralContent10690: new org.antlr.runtime.BitSet([0xFFFFFFF2, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFDFF,0xFFFFFDFF, 0xFFFFFFFF,0x001FFFFF, 0x00000000]),
	    FOLLOW_set_in_pg_AposStringLiteralContent10741: new org.antlr.runtime.BitSet([0xFFFFFFF2, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFDFF,0xFFFFFEFF, 0xFFFFFFFF,0x001FFFFF, 0x00000000]),
	    FOLLOW_L_ElementContentChar_in_p_ElementContentChar10799: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_L_QuotAttrContentChar_in_p_QuotAttrContentChar10825: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_L_AposAttrContentChar_in_p_AposAttrContentChar10875: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pg_QName_in_p_QName10961: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NCName_in_p_QName10973: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pg_QName_in_pg_FQName11034: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FNCName_in_pg_FQName11046: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NCName_in_pg_QName11090: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
	    FOLLOW_COLON_in_pg_QName11092: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NCName_in_pg_QName11096: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_p_NCName0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_p_FNCName0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_InsertExpr_in_pg_UpdateExpr13087: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_DeleteExpr_in_pg_UpdateExpr13099: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_RenameExpr_in_pg_UpdateExpr13111: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ReplaceExpr_in_pg_UpdateExpr13123: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_TransformExpr_in_pg_UpdateExpr13135: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_RevalidationDecl13163: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_REVALIDATION_in_pm_RevalidationDecl13167: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000008, 0x00000004,0x08000000, 0x00000000]),
	    FOLLOW_STRICT_in_pm_RevalidationDecl13172: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_LAX_in_pm_RevalidationDecl13178: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SKIP_in_pm_RevalidationDecl13184: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_RevalidationDecl13189: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AS_in_p_InsertExprTargetChoice13219: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00240000, 0x00000000]),
	    FOLLOW_FIRST_in_p_InsertExprTargetChoice13224: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_LAST_in_p_InsertExprTargetChoice13230: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_INTO_in_p_InsertExprTargetChoice13237: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AFTER_in_p_InsertExprTargetChoice13254: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_BEFORE_in_p_InsertExprTargetChoice13270: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_INSERT_in_p_InsertExpr13300: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x00800000, 0x00000000]),
	    FOLLOW_NODE_in_p_InsertExpr13305: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_NODES_in_p_InsertExpr13311: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SourceExpr_in_p_InsertExpr13314: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000000, 0x00000000,0x0010C000, 0x00000000]),
	    FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr13316: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_TargetExpr_in_p_InsertExpr13318: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DELETE_in_p_DeleteExpr13348: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x00800000, 0x00000000]),
	    FOLLOW_NODE_in_p_DeleteExpr13353: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_NODES_in_p_DeleteExpr13359: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_TargetExpr_in_p_DeleteExpr13362: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_REPLACE_in_p_ReplaceExpr13392: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_VALUE_in_p_ReplaceExpr13397: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00008000, 0x00000000]),
	    FOLLOW_OF_in_p_ReplaceExpr13401: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000]),
	    FOLLOW_NODE_in_p_ReplaceExpr13407: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_ReplaceExpr13409: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_WITH_in_p_ReplaceExpr13414: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_ReplaceExpr13416: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_RENAME_in_p_RenameExpr13447: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000]),
	    FOLLOW_NODE_in_p_RenameExpr13451: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_TargetExpr_in_p_RenameExpr13453: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
	    FOLLOW_AS_in_p_RenameExpr13455: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NewNameExpr_in_p_RenameExpr13457: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_SourceExpr13485: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_TargetExpr13512: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_NewNameExpr13539: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_COPY_in_p_TransformExpr13568: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_TransformExpr13570: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_TransformExpr13572: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_BIND_in_p_TransformExpr13574: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_TransformExpr13576: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_TransformExpr13580: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_TransformExpr13582: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_TransformExpr13584: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_BIND_in_p_TransformExpr13586: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_TransformExpr13588: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_MODIFY_in_p_TransformExpr13595: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_TransformExpr13597: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_RETURN_in_p_TransformExpr13602: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_TransformExpr13604: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DECLARE_in_pm_FTOptionDecl13642: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000200]),
	    FOLLOW_FT_OPTION_in_pm_FTOptionDecl13646: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000008, 0x00000000]),
	    FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl13648: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_pm_FTOptionDecl13650: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SCORE_in_p_FTScoreVar13680: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_FTScoreVar13684: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_FTScoreVar13686: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_RangeExpr_in_p_FTContainsExpr13712: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_CONTAINS_in_p_FTContainsExpr13718: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000010]),
	    FOLLOW_TEXT_in_p_FTContainsExpr13722: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
	    FOLLOW_p_FTSelection_in_p_FTContainsExpr13726: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000040, 0x00000000]),
	    FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr13728: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTOr_in_p_FTSelection13758: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00080000, 0x00000000,0x00001000, 0x02000070]),
	    FOLLOW_p_FTPosFilter_in_p_FTSelection13760: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00080000, 0x00000000,0x00001000, 0x02000070]),
	    FOLLOW_WEIGHT_in_p_FTWeight13789: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_p_FTWeight13793: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_FTWeight13795: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_FTWeight13798: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTAnd_in_p_FTOr13824: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
	    FOLLOW_FTOR_in_p_FTOr13830: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
	    FOLLOW_p_FTAnd_in_p_FTOr13834: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
	    FOLLOW_p_FTMildNot_in_p_FTAnd13863: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_FTAND_in_p_FTAnd13869: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
	    FOLLOW_p_FTMildNot_in_p_FTAnd13873: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_p_FTUnaryNot_in_p_FTMildNot13902: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00080000]),
	    FOLLOW_NOT_in_p_FTMildNot13908: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
	    FOLLOW_IN_in_p_FTMildNot13912: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
	    FOLLOW_p_FTUnaryNot_in_p_FTMildNot13916: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00080000]),
	    FOLLOW_FTNOT_in_p_FTUnaryNot13949: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
	    FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot13956: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions13982: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000018, 0x00000000]),
	    FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions13984: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000010, 0x00000000]),
	    FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions13987: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTWords_in_p_FTPrimary14018: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00100000]),
	    FOLLOW_p_FTTimes_in_p_FTPrimary14020: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LPAREN_in_p_FTPrimary14035: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
	    FOLLOW_p_FTSelection_in_p_FTPrimary14037: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_FTPrimary14039: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTExtensionSelection_in_p_FTPrimary14052: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTWordsValue_in_p_FTWords14078: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00800001]),
	    FOLLOW_p_FTAnyallOption_in_p_FTWords14080: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_FTWordsValue14107: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LBRACKET_in_p_FTWordsValue14120: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_FTWordsValue14122: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_FTWordsValue14125: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_L_Pragma_in_p_FTExtensionSelection14152: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00080000, 0x00000000]),
	    FOLLOW_LBRACKET_in_p_FTExtensionSelection14155: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800,0x20000000, 0x00000003,0x01C80300, 0x00000000]),
	    FOLLOW_p_FTSelection_in_p_FTExtensionSelection14157: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_FTExtensionSelection14160: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ANY_in_p_FTAnyallOption14191: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000080, 0x00000000]),
	    FOLLOW_WORD_in_p_FTAnyallOption14195: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ALL_in_p_FTAnyallOption14204: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000100, 0x00000000]),
	    FOLLOW_WORDS_in_p_FTAnyallOption14206: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PHRASE_in_p_FTAnyallOption14214: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_OCCURS_in_p_FTTimes14246: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000180]),
	    FOLLOW_p_FTRange_in_p_FTTimes14248: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000002, 0x00000000]),
	    FOLLOW_TIMES_in_p_FTTimes14252: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_EXACTLY_in_p_FTRange14285: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AdditiveExpr_in_p_FTRange14287: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AT_in_p_FTRange14305: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
	    FOLLOW_LEAST_in_p_FTRange14309: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AdditiveExpr_in_p_FTRange14311: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AT_in_p_FTRange14329: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00020000]),
	    FOLLOW_MOST_in_p_FTRange14333: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AdditiveExpr_in_p_FTRange14335: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FROM_in_p_FTRange14353: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AdditiveExpr_in_p_FTRange14355: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000040]),
	    FOLLOW_TO_in_p_FTRange14359: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AdditiveExpr_in_p_FTRange14361: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTOrder_in_p_FTPosFilter14392: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTWindow_in_p_FTPosFilter14396: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTDistance_in_p_FTPosFilter14400: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTScope_in_p_FTPosFilter14404: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTContent_in_p_FTPosFilter14408: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ORDERED_in_p_FTOrder14436: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_WINDOW_in_p_FTWindow14466: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AdditiveExpr_in_p_FTWindow14470: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20400000,0x00000100, 0x00000000]),
	    FOLLOW_p_FTUnit_in_p_FTWindow14472: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DISTANCE_in_p_FTDistance14500: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000180]),
	    FOLLOW_p_FTRange_in_p_FTDistance14504: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20400000,0x00000100, 0x00000000]),
	    FOLLOW_p_FTUnit_in_p_FTDistance14506: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_WORDS_in_p_FTUnit14536: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SENTENCES_in_p_FTUnit14542: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PARAGRAPHS_in_p_FTUnit14548: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SAME_in_p_FTScope14581: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10200000]),
	    FOLLOW_DIFFERENT_in_p_FTScope14587: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10200000]),
	    FOLLOW_p_FTBigUnit_in_p_FTScope14592: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SENTENCE_in_p_FTBigUnit14622: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_PARAGRAPH_in_p_FTBigUnit14628: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AT_in_p_FTContent14663: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000040, 0x00000000]),
	    FOLLOW_START_in_p_FTContent14667: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AT_in_p_FTContent14675: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x01000000]),
	    FOLLOW_END_in_p_FTContent14679: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ENTIRE_in_p_FTContent14687: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
	    FOLLOW_CONTENT_in_p_FTContent14691: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_USING_in_p_FTMatchOptions14725: new org.antlr.runtime.BitSet([0x04000000, 0x00000000,0x00010000, 0x00000000,0x00000000, 0xC0054008,0x00000025, 0x00000000]),
	    FOLLOW_p_FTMatchOption_in_p_FTMatchOptions14729: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000008, 0x00000000]),
	    FOLLOW_p_FTLanguageOption_in_p_FTMatchOption14757: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTWildCardOption_in_p_FTMatchOption14769: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption14781: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTStemOption_in_p_FTMatchOption14793: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTCaseOption_in_p_FTMatchOption14805: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption14817: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTStopWordOption_in_p_FTMatchOption14829: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_FTExtensionOption_in_p_FTMatchOption14841: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_CASE_in_p_FTCaseOption14872: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00002000]),
	    FOLLOW_INSENSITIVE_in_p_FTCaseOption14876: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_CASE_in_p_FTCaseOption14894: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
	    FOLLOW_SENSITIVE_in_p_FTCaseOption14898: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LOWERCASE_in_p_FTCaseOption14915: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_UPPERCASE_in_p_FTCaseOption14931: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DIACRITICS_in_p_FTDiacriticsOption14966: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00002000]),
	    FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption14970: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DIACRITICS_in_p_FTDiacriticsOption14988: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08000000]),
	    FOLLOW_SENSITIVE_in_p_FTDiacriticsOption14992: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_STEMMING_in_p_FTStemOption15027: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NO_in_p_FTStemOption15034: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
	    FOLLOW_STEMMING_in_p_FTStemOption15038: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_THESAURUS_in_p_FTThesaurusOption15074: new org.antlr.runtime.BitSet([0x00200000, 0x00000008]),
	    FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15077: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DEFAULT_in_p_FTThesaurusOption15083: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_THESAURUS_in_p_FTThesaurusOption15102: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_FTThesaurusOption15104: new org.antlr.runtime.BitSet([0x00200000, 0x00000008]),
	    FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15107: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_DEFAULT_in_p_FTThesaurusOption15113: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_FTThesaurusOption15117: new org.antlr.runtime.BitSet([0x00200000, 0x00000000]),
	    FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15119: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_RPAREN_in_p_FTThesaurusOption15123: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NO_in_p_FTThesaurusOption15141: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000001, 0x00000000]),
	    FOLLOW_THESAURUS_in_p_FTThesaurusOption15145: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AT_in_p_FTThesaurusID15178: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_FTThesaurusID15180: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x01000180]),
	    FOLLOW_RELATIONSHIP_in_p_FTThesaurusID15185: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_FTThesaurusID15187: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000180]),
	    FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID15192: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00008000]),
	    FOLLOW_LEVELS_in_p_FTThesaurusID15196: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_EXACTLY_in_p_FTLiteralRange15231: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
	    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15233: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AT_in_p_FTLiteralRange15251: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
	    FOLLOW_LEAST_in_p_FTLiteralRange15255: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
	    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15257: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AT_in_p_FTLiteralRange15275: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00020000]),
	    FOLLOW_MOST_in_p_FTLiteralRange15279: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
	    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15281: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FROM_in_p_FTLiteralRange15299: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
	    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15301: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000040]),
	    FOLLOW_TO_in_p_FTLiteralRange15303: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
	    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15305: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_STOP_in_p_FTStopWordOption15341: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000100, 0x00000000]),
	    FOLLOW_WORDS_in_p_FTStopWordOption15345: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_p_FTStopWords_in_p_FTStopWordOption15347: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000000, 0x00000200]),
	    FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15349: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000000, 0x00000200]),
	    FOLLOW_STOP_in_p_FTStopWordOption15368: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000100, 0x00000000]),
	    FOLLOW_WORDS_in_p_FTStopWordOption15372: new org.antlr.runtime.BitSet([0x00000000, 0x00000008]),
	    FOLLOW_DEFAULT_in_p_FTStopWordOption15376: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000000, 0x00000200]),
	    FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15378: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000000, 0x00000200]),
	    FOLLOW_NO_in_p_FTStopWordOption15397: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x80000000]),
	    FOLLOW_STOP_in_p_FTStopWordOption15401: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000100, 0x00000000]),
	    FOLLOW_WORDS_in_p_FTStopWordOption15405: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AT_in_p_FTStopWords15439: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_FTStopWords15443: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LPAREN_in_p_FTStopWords15457: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_FTStopWords15459: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_FTStopWords15462: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_FTStopWords15464: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
	    FOLLOW_RPAREN_in_p_FTStopWords15468: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_UNION_in_p_FTStopWordsInclExcl15500: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl15506: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl15509: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LANGUAGE_in_p_FTLanguageOption15541: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_FTLanguageOption15545: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_WILDCARDS_in_p_FTWildCardOption15575: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NO_in_p_FTWildCardOption15582: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000020, 0x00000000]),
	    FOLLOW_WILDCARDS_in_p_FTWildCardOption15586: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_OPTION_in_p_FTExtensionOption15619: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_FTExtensionOption15623: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_FTExtensionOption15625: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_WITHOUT_in_p_FTIgnoreOption15653: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
	    FOLLOW_CONTENT_in_p_FTIgnoreOption15657: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_UnionExpr_in_p_FTIgnoreOption15661: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_StatementsAndOptionalExpr_in_p_Program15693: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_Statements15720: new org.antlr.runtime.BitSet([0xFFFF0002, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Statements_in_p_StatementsAndExpr15748: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Statements_in_p_StatementsAndOptionalExpr15775: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_HybridExprSingle_in_p_Hybrid15802: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Statement_in_p_Hybrid15815: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_AssignStatement_in_p_Statement15846: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_BreakStatement_in_p_Statement15858: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ContinueStatement_in_p_Statement15870: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExitStatement_in_p_Statement15882: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_VarDeclStatement_in_p_Statement15894: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_WhileStatement_in_p_Statement15906: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Expr_in_p_HybridExprSingle15933: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_p_HybridExprSingle15948: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ExprSimple_in_p_ApplyStatement15998: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_p_ApplyStatement16000: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_AssignStatement16026: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_AssignStatement16028: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_BIND_in_p_AssignStatement16030: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_AssignStatement16032: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_p_AssignStatement16035: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LBRACKET_in_p_BlockStatement16061: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F083,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Statements_in_p_BlockStatement16063: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_BlockStatement16066: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LBRACKET_in_p_BlockHybrid16092: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F083,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Statements_in_p_BlockHybrid16094: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_BlockHybrid16097: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_BREAK_in_p_BreakStatement16125: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00001000, 0x00000000]),
	    FOLLOW_LOOP_in_p_BreakStatement16131: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_p_BreakStatement16135: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_CONTINUE_in_p_ContinueStatement16163: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00001000, 0x00000000]),
	    FOLLOW_LOOP_in_p_ContinueStatement16169: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_p_ContinueStatement16173: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_EXIT_in_p_ExitStatement16201: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00002000, 0x00000000]),
	    FOLLOW_RETURNING_in_p_ExitStatement16207: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_ExitStatement16211: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
	    FOLLOW_SEMICOLON_in_p_ExitStatement16214: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_InitialClause_in_p_FLWORStatement16240: new org.antlr.runtime.BitSet([0x00000000, 0x00200000,0x04040040, 0x02084002]),
	    FOLLOW_p_IntermediateClause_in_p_FLWORStatement16242: new org.antlr.runtime.BitSet([0x00000000, 0x00200000,0x04040040, 0x02084002]),
	    FOLLOW_p_ReturnStatement_in_p_FLWORStatement16245: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_RETURN_in_p_ReturnStatement16277: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_ReturnStatement16281: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_IF_in_p_IfStatement16310: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_IfStatement16314: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_IfStatement16316: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_IfStatement16319: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000020]),
	    FOLLOW_THEN_in_p_IfStatement16323: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_IfStatement16327: new org.antlr.runtime.BitSet([0x00000000, 0x00000800]),
	    FOLLOW_ELSE_in_p_IfStatement16332: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_IfStatement16336: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SWITCH_in_p_SwitchStatement16365: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_SwitchStatement16369: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_SwitchStatement16371: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_SwitchStatement16374: new org.antlr.runtime.BitSet([0x04000000, 0x00000000]),
	    FOLLOW_p_SwitchCaseStatement_in_p_SwitchStatement16376: new org.antlr.runtime.BitSet([0x04000000, 0x00000008]),
	    FOLLOW_DEFAULT_in_p_SwitchStatement16381: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_RETURN_in_p_SwitchStatement16387: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_SwitchStatement16391: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_CASE_in_p_SwitchCaseStatement16421: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseStatement16425: new org.antlr.runtime.BitSet([0x04000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_RETURN_in_p_SwitchCaseStatement16431: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_SwitchCaseStatement16435: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_TRY_in_p_TryCatchStatement16464: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_p_BlockStatement_in_p_TryCatchStatement16468: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00020000]),
	    FOLLOW_CATCH_in_p_TryCatchStatement16473: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x01001001,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_CatchErrorList_in_p_TryCatchStatement16477: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_p_BlockStatement_in_p_TryCatchStatement16479: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00020000]),
	    FOLLOW_TRY_in_p_TryCatchHybrid16511: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16515: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00020000]),
	    FOLLOW_CATCH_in_p_TryCatchHybrid16521: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x01001001,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_CatchErrorList_in_p_TryCatchHybrid16525: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16527: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00020000]),
	    FOLLOW_TYPESWITCH_in_p_TypeswitchStatement16560: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_TypeswitchStatement16564: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_TypeswitchStatement16566: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_TypeswitchStatement16569: new org.antlr.runtime.BitSet([0x04000000, 0x00000000]),
	    FOLLOW_p_CaseStatement_in_p_TypeswitchStatement16571: new org.antlr.runtime.BitSet([0x04000000, 0x00000008]),
	    FOLLOW_DEFAULT_in_p_TypeswitchStatement16576: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_TypeswitchStatement16581: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_TypeswitchStatement16583: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_RETURN_in_p_TypeswitchStatement16589: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_TypeswitchStatement16593: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_CASE_in_p_CaseStatement16622: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_CaseStatement16627: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_CaseStatement16629: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
	    FOLLOW_AS_in_p_CaseStatement16631: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x3FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_SequenceType_in_p_CaseStatement16635: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
	    FOLLOW_RETURN_in_p_CaseStatement16639: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_CaseStatement16643: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Annotation_in_p_VarDeclStatement16670: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00001000,0x00000000, 0x00000000,0x00000000, 0x00000080]),
	    FOLLOW_VARIABLE_in_p_VarDeclStatement16675: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_VarDeclStatement16679: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_VarDeclStatement16681: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000420]),
	    FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16683: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000420]),
	    FOLLOW_BIND_in_p_VarDeclStatement16687: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_VarDeclStatement16689: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
	    FOLLOW_COMMA_in_p_VarDeclStatement16705: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_VarDeclStatement16707: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_VarName_in_p_VarDeclStatement16709: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000420]),
	    FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16711: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000420]),
	    FOLLOW_BIND_in_p_VarDeclStatement16715: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_VarDeclStatement16717: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
	    FOLLOW_SEMICOLON_in_p_VarDeclStatement16734: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_WHILE_in_p_WhileStatement16762: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_p_WhileStatement16766: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Expr_in_p_WhileStatement16768: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
	    FOLLOW_RPAREN_in_p_WhileStatement16771: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_Hybrid_in_p_WhileStatement16773: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QuantifiedExpr_in_p_ExprSimple16800: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_OrExpr_in_p_ExprSimple16812: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_pg_UpdateExpr_in_p_ExprSimple16827: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LBRACKET_in_p_BlockExpr16853: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_StatementsAndExpr_in_p_BlockExpr16855: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
	    FOLLOW_RBRACKET_in_p_BlockExpr16857: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_COLLECTION_in_p_CollectionDecl16888: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_CollectionDecl16892: new org.antlr.runtime.BitSet([0x00080002, 0x00000000]),
	    FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl16894: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AS_in_p_CollectionTypeDecl16923: new org.antlr.runtime.BitSet([0x80400000, 0x00000600,0x62004000, 0x20000010]),
	    FOLLOW_p_KindTest_in_p_CollectionTypeDecl16927: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003800]),
	    FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl16936: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_INDEX_in_p_IndexDecl16966: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_IndexName_in_p_IndexDecl16970: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00800000, 0x00000000]),
	    FOLLOW_ON_in_p_IndexDecl16974: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00800000, 0x00000000]),
	    FOLLOW_NODES_in_p_IndexDecl16980: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_IndexDomainExpr_in_p_IndexDecl16984: new org.antlr.runtime.BitSet([0x02000000, 0x00000000]),
	    FOLLOW_BY_in_p_IndexDecl16988: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_IndexKeySpec_in_p_IndexDecl16992: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_COMMA_in_p_IndexDecl16995: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_IndexKeySpec_in_p_IndexDecl16997: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
	    FOLLOW_p_QName_in_p_IndexName17024: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_PathExpr_in_p_IndexDomainExpr17049: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec17074: new org.antlr.runtime.BitSet([0x40080002, 0x00000000]),
	    FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec17076: new org.antlr.runtime.BitSet([0x40000002, 0x00000000]),
	    FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec17079: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_PathExpr_in_p_IndexKeyExpr17105: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_AS_in_p_IndexKeyTypeDecl17132: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl17136: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003800]),
	    FOLLOW_p_OccurrenceIndicator_in_p_IndexKeyTypeDecl17138: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_p_AtomicType17164: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_COLLATION_in_p_IndexKeyCollation17191: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
	    FOLLOW_p_StringLiteral_in_p_IndexKeyCollation17195: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_INTEGRITY_in_p_ICDecl17222: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00020000, 0x00000000]),
	    FOLLOW_CONSTRAINT_in_p_ICDecl17228: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_ICDecl17232: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00880000, 0x00000000]),
	    FOLLOW_p_ICCollection_in_p_ICDecl17235: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ICForeignKey_in_p_ICDecl17239: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_ON_in_p_ICCollection17267: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00010000, 0x00000000]),
	    FOLLOW_COLLECTION_in_p_ICCollection17273: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_ICCollection17277: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x00000000, 0x00000000,0x80040000, 0x00000000]),
	    FOLLOW_p_ICCollSequence_in_p_ICCollection17280: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection17284: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_ICCollNode_in_p_ICCollection17288: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_ICCollSequence17314: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_ICCollSequence17316: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00008000, 0x00000000]),
	    FOLLOW_CHECK_in_p_ICCollSequence17320: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_ICCollSequence17324: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_NODE_in_p_ICCollSequenceUnique17352: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_ICCollSequenceUnique17356: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_ICCollSequenceUnique17358: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00008000, 0x00000000]),
	    FOLLOW_CHECK_in_p_ICCollSequenceUnique17362: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01000000, 0x00000000]),
	    FOLLOW_UNIQUE_in_p_ICCollSequenceUnique17368: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
	    FOLLOW_KEY_in_p_ICCollSequenceUnique17374: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique17378: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FOREACH_in_p_ICCollNode17405: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000]),
	    FOLLOW_NODE_in_p_ICCollNode17411: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_ICCollNode17415: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_ICCollNode17417: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00008000, 0x00000000]),
	    FOLLOW_CHECK_in_p_ICCollNode17421: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_ExprSingle_in_p_ICCollNode17425: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FOREIGN_in_p_ICForeignKey17453: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
	    FOLLOW_KEY_in_p_ICForeignKey17459: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000100]),
	    FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey17463: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000040]),
	    FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey17465: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FROM_in_p_ICForeignKeySource17492: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00010000, 0x00000000]),
	    FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource17496: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_TO_in_p_ICForeignKeyTarget17523: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00010000, 0x00000000]),
	    FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget17527: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_COLLECTION_in_p_ICForeignKeyValues17554: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_ICForeignKeyValues17558: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000]),
	    FOLLOW_NODE_in_p_ICForeignKeyValues17562: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_p_ICForeignKeyValues17566: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_p_ICForeignKeyValues17568: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
	    FOLLOW_KEY_in_p_ICForeignKeyValues17572: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_PathExpr_in_p_ICForeignKeyValues17576: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_synpred1_XQueryParser3523: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
	    FOLLOW_DOLLAR_in_synpred1_XQueryParser3531: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_FOR_in_synpred1_XQueryParser3537: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000220, 0x00000000]),
	    FOLLOW_set_in_synpred1_XQueryParser3539: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_IF_in_synpred2_XQueryParser3565: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_synpred2_XQueryParser3567: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SWITCH_in_synpred3_XQueryParser3595: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_synpred3_XQueryParser3597: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_TYPESWITCH_in_synpred4_XQueryParser3621: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_synpred4_XQueryParser3623: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_TRY_in_synpred5_XQueryParser3643: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_synpred5_XQueryParser3645: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_VALIDATE_in_synpred6_XQueryParser6057: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000008, 0x00000004,0x00000400, 0x00000000]),
	    FOLLOW_p_ValidationMode_in_synpred6_XQueryParser6061: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_TYPE_in_synpred6_XQueryParser6065: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_SLASH_in_synpred7_XQueryParser6405: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xBFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_RelativePathExpr_in_synpred7_XQueryParser6407: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_synpred8_XQueryParser6521: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_synpred9_XQueryParser6574: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_QName_in_synpred9_XQueryParser6582: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_synpred9_XQueryParser6585: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_synpred9_XQueryParser6603: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFBFFFFF,0xEFFFFFFF, 0xFFFFFFFF,0x1FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
	    FOLLOW_p_NCName_in_synpred9_XQueryParser6611: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_synpred9_XQueryParser6614: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_set_in_synpred9_XQueryParser6632: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
	    FOLLOW_LBRACKET_in_synpred9_XQueryParser6644: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_KindTest_in_synpred10_XQueryParser6674: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_QName_in_synpred11_XQueryParser6693: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
	    FOLLOW_LPAREN_in_synpred11_XQueryParser6695: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_PrimaryExpr_in_synpred12_XQueryParser6713: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_Wildcard_in_synpred13_XQueryParser7152: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NCName_in_synpred14_XQueryParser7171: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
	    FOLLOW_COLON_in_synpred14_XQueryParser7173: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_NCName_in_synpred15_XQueryParser7191: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_LPAREN_in_synpred16_XQueryParser7447: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_OccurrenceIndicator_in_synpred17_XQueryParser9411: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
	    FOLLOW_p_OccurrenceIndicator_in_synpred18_XQueryParser16931: new org.antlr.runtime.BitSet([0x00000002, 0x00000000])
	});

	})();
});
