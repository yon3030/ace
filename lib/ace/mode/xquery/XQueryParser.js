define(function(require, exports, module) {
// $ANTLR 3.3 Nov 30, 2010 12:50:56 xquery/XQueryParser.g 2012-04-13 15:32:27

/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Ajax.org Code Editor (ACE).
 *
 * The Initial Developer of the Original Code is
 * Ajax.org B.V.
 * Portions created by the Initial Developer are Copyright (C) 2010
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *      William Candillon <wcandillon AT gmail DOT com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL. *
 * ***** END LICENSE BLOCK ***** */
var org =  require("./antlr3-all").org;
var StringLexer   = require("./StringLexer").StringLexer;
var XMLLexer   = require("./XMLLexer").XMLLexer;
var XQueryLexer   = require("./XQueryLexer").XQueryLexer;
var Exception = function(){};

var XQS = true;
var XQU = true;
var ZORBA = true;
var MLS = false;

var XQuerySemanticHighlighter = require("./XQuerySemanticHighlighter").XQuerySemanticHighlighter;


var XQueryParser = function(input, state) {
    if (!state) {
        state = new org.antlr.runtime.RecognizerSharedState();
    }

    (function(){


        this.highlighter = new XQuerySemanticHighlighter();

        this.errors = [];

        this.hasErrors = function(){
          return this.errors.length > 0;
        };

        this.addError = function(error){
          this.errors.push(error);
        };

        this.getErrors = function(){
          return this.errors;
        };

        this.source = null;
        this.setSource = function(s){
          this.source = s;
          this.highlighter.setSource(s);
        };

        this.stream = null;

        this.lexerStack = new Array();

        this.lc = function(b){ return b; };
        this.popLexer = function (){
          //console.log("popLexer");
          if(this.lexerStack.length == 0) return;
          this.stream.mark();
          var oldLexer = this.stream.getTokenSource();
          var newLexer = this.lexerStack.pop();
          if(oldLexer instanceof StringLexer && newLexer instanceof XQueryLexer) {
            newLexer.inStr = false;
          }
          this.stream.setTokenSource(newLexer);
        };

        this.pushXQueryLexer = function() {
          xqueryLexer = new XQueryLexer(this.source);
          this.pushLexer(xqueryLexer);
        };

        this.pushStringLexer = function(isAposStr){
          //console.log("pushStringLexer");
          var stringLexer = new StringLexer(this.source);
          stringLexer.inAposStr = isAposStr;
          stringLexer.inQuotStr = !isAposStr;
          stringLexer.setIsWsExplicit(true);
          this.pushLexer(stringLexer);
        };

        this.pushXMLLexer = function(){
          //console.log("pushXMLLexer");
          var xmlLexer = new XMLLexer(this.source);
          xmlLexer.setIsWsExplicit(true);
          this.pushLexer(xmlLexer);
        };

        this.pushLexer = function(lexer){
          var oldLexer = this.stream.getTokenSource();
          oldLexer.addToStack(this.lexerStack);
          this.stream.setTokenSource(lexer);
        };

        this.setWsExplicit = function(isExplicit){
          this.stream.setWsExplicit(isExplicit);
        };

        this.ak = function(t)
        {
          this.addToken(t, "keyword");
        };

        this.ac = function(t)
        {
          this.addToken(t, "comment");
        };

        this.addToken = function(k, type){
          if(org.antlr.lang.isArray(k)){
            for(i in k)
            {
              this.highlighter.addToken(k[i], type);
            }
          } else if(k != null ) {
            this.highlighter.addToken(k, type); 
          }
        };


    }).call(this);

    XQueryParser.superclass.constructor.call(this, input, state);

    this.dfa1 = new XQueryParser.DFA1(this);
    this.dfa2 = new XQueryParser.DFA2(this);
    this.dfa6 = new XQueryParser.DFA6(this);
    this.dfa9 = new XQueryParser.DFA9(this);
    this.dfa44 = new XQueryParser.DFA44(this);
    this.dfa46 = new XQueryParser.DFA46(this);
    this.dfa115 = new XQueryParser.DFA115(this);
    this.dfa117 = new XQueryParser.DFA117(this);
    this.dfa119 = new XQueryParser.DFA119(this);
    this.dfa124 = new XQueryParser.DFA124(this);
    this.dfa132 = new XQueryParser.DFA132(this);
    this.dfa159 = new XQueryParser.DFA159(this);
    this.dfa161 = new XQueryParser.DFA161(this);
    this.dfa215 = new XQueryParser.DFA215(this);
    this.dfa234 = new XQueryParser.DFA234(this);
    this.dfa250 = new XQueryParser.DFA250(this);

         

    /* @todo only create adaptor if output=AST */
    this.adaptor = new org.antlr.runtime.tree.CommonTreeAdaptor();

};

org.antlr.lang.augmentObject(XQueryParser, {
    EOF: -1,
    L_QuotAttrContentChar: 4,
    L_AposAttrContentChar: 5,
    L_ElementContentChar: 6,
    L_CDataSection: 7,
    L_PredefinedEntityRef: 8,
    L_CharRef: 9,
    ESCAPE_LBRACKET: 10,
    ESCAPE_RBRACKET: 11,
    ESCAPE_APOS: 12,
    ESCAPE_QUOT: 13,
    CDATA_START: 14,
    CDATA_END: 15,
    ANCESTOR: 16,
    ANCESTOR_OR_SELF: 17,
    AND: 18,
    AS: 19,
    ASCENDING: 20,
    AT: 21,
    ATTRIBUTE: 22,
    BASE_URI: 23,
    BOUNDARY_SPACE: 24,
    BY: 25,
    CASE: 26,
    CAST: 27,
    CASTABLE: 28,
    CHILD: 29,
    COLLATION: 30,
    COMMENT: 31,
    CONSTRUCTION: 32,
    COPY_NAMESPACES: 33,
    DECLARE: 34,
    DEFAULT: 35,
    DESCENDANT: 36,
    DESCENDANT_OR_SELF: 37,
    DESCENDING: 38,
    DIV: 39,
    DOCUMENT: 40,
    DOCUMENT_NODE: 41,
    ELEMENT: 42,
    ELSE: 43,
    EMPTY: 44,
    EMPTY_SEQUENCE: 45,
    ENCODING: 46,
    EQ: 47,
    EVERY: 48,
    EXCEPT: 49,
    EXTERNAL: 50,
    FOLLOWING: 51,
    FOLLOWING_SIBLING: 52,
    FOR: 53,
    FUNCTION: 54,
    GE: 55,
    GREATEST: 56,
    GT: 57,
    IDIV: 58,
    IF: 59,
    IMPORT: 60,
    IN: 61,
    INHERIT: 62,
    INSTANCE: 63,
    INTERSECT: 64,
    IS: 65,
    ITEM: 66,
    LAX: 67,
    LE: 68,
    LEAST: 69,
    LET: 70,
    LT: 71,
    MOD: 72,
    MODULE: 73,
    NAMESPACE: 74,
    NE: 75,
    NO_INHERIT: 76,
    NO_PRESERVE: 77,
    NODE: 78,
    OF: 79,
    OPTION: 80,
    OR: 81,
    ORDER: 82,
    ORDERED: 83,
    ORDERING: 84,
    PARENT: 85,
    PRECEDING: 86,
    PRECEDING_SIBLING: 87,
    PRESERVE: 88,
    PROCESSING_INSTRUCTION: 89,
    RETURN: 90,
    SATISFIES: 91,
    SCHEMA: 92,
    SCHEMA_ATTRIBUTE: 93,
    SCHEMA_ELEMENT: 94,
    SELF: 95,
    SOME: 96,
    STABLE: 97,
    STRICT: 98,
    STRIP: 99,
    TEXT: 100,
    THEN: 101,
    TO: 102,
    TREAT: 103,
    TYPESWITCH: 104,
    UNION: 105,
    UNORDERED: 106,
    VALIDATE: 107,
    VARIABLE: 108,
    VERSION: 109,
    WHERE: 110,
    XQUERY: 111,
    ALLOWING: 112,
    CATCH: 113,
    CONTEXT: 114,
    COUNT: 115,
    DECIMAL_FORMAT: 116,
    DECIMAL_SEPARATOR: 117,
    DIGIT: 118,
    END: 119,
    GROUP: 120,
    GROUPING_SEPARATOR: 121,
    INFINITY: 122,
    MINUS_SIGN: 123,
    NAMESPACE_NODE: 124,
    NAN: 125,
    NEXT: 126,
    ONLY: 127,
    PATTERN_SEPARATOR: 128,
    PERCENT: 129,
    PER_MILLE: 130,
    PREVIOUS: 131,
    SLIDING: 132,
    START: 133,
    SWITCH: 134,
    TRY: 135,
    TUMBLING: 136,
    TYPE: 137,
    WHEN: 138,
    WINDOW: 139,
    ZERO_DIGIT: 140,
    AFTER: 141,
    BEFORE: 142,
    COPY: 143,
    DELETE: 144,
    FIRST: 145,
    INSERT: 146,
    INTO: 147,
    LAST: 148,
    MODIFY: 149,
    NODES: 150,
    RENAME: 151,
    REPLACE: 152,
    REVALIDATION: 153,
    SKIP: 154,
    UPDATING: 155,
    VALUE: 156,
    WITH: 157,
    ALL: 158,
    ANY: 159,
    CONTAINS: 160,
    CONTENT: 161,
    DIACRITICS: 162,
    DIFFERENT: 163,
    DISTANCE: 164,
    ENTIRE: 165,
    EXACTLY: 166,
    FROM: 167,
    FT_OPTION: 168,
    FTAND: 169,
    FTNOT: 170,
    FTOR: 171,
    INSENSITIVE: 172,
    LANGUAGE: 173,
    LEVELS: 174,
    LOWERCASE: 175,
    MOST: 176,
    NO: 177,
    NOT: 178,
    OCCURS: 179,
    PARAGRAPH: 180,
    PARAGRAPHS: 181,
    PHRASE: 182,
    RELATIONSHIP: 183,
    SAME: 184,
    SCORE: 185,
    SENSITIVE: 186,
    SENTENCE: 187,
    SENTENCES: 188,
    STEMMING: 189,
    STOP: 190,
    THESAURUS: 191,
    TIMES: 192,
    UPPERCASE: 193,
    USING: 194,
    WEIGHT: 195,
    WILDCARDS: 196,
    WITHOUT: 197,
    WORD: 198,
    WORDS: 199,
    BREAK: 200,
    CONTINUE: 201,
    EXIT: 202,
    LOOP: 203,
    RETURNING: 204,
    WHILE: 205,
    CHECK: 206,
    COLLECTION: 207,
    CONSTRAINT: 208,
    FOREACH: 209,
    FOREIGN: 210,
    INDEX: 211,
    INTEGRITY: 212,
    KEY: 213,
    ON: 214,
    UNIQUE: 215,
    BINARY: 216,
    AMP_ER: 217,
    APOS_ER: 218,
    QUOT_ER: 219,
    CONCAT: 220,
    LPAREN: 221,
    RPAREN: 222,
    DOLLAR: 223,
    LBRACKET: 224,
    RBRACKET: 225,
    LSQUARE: 226,
    RSQUARE: 227,
    EQUAL: 228,
    BIND: 229,
    NOTEQUAL: 230,
    ANN_PERCENT: 231,
    HASH: 232,
    AMP: 233,
    COMMA: 234,
    QUESTION: 235,
    STAR: 236,
    PLUS: 237,
    MINUS: 238,
    SMALLER: 239,
    GREATER: 240,
    SMALLEREQ: 241,
    GREATEREQ: 242,
    SMALLER_SMALLER: 243,
    GREATER_GREATER: 244,
    SLASH: 245,
    SLASH_SLASH: 246,
    DOT: 247,
    DOT_DOT: 248,
    COLON: 249,
    COLON_COLON: 250,
    EMPTY_CLOSE_TAG: 251,
    CLOSE_TAG: 252,
    SEMICOLON: 253,
    VBAR: 254,
    PRAGMA_START: 255,
    PRAGMA_END: 256,
    XML_COMMENT_START: 257,
    XML_COMMENT_END: 258,
    PI_START: 259,
    PI_END: 260,
    ATTR_SIGN: 261,
    CHARREF_DEC: 262,
    CHARREF_HEX: 263,
    APOS: 264,
    QUOT: 265,
    NCNameStartChar: 266,
    NCNameChar: 267,
    L_NCName: 268,
    Letter: 269,
    HexLetter: 270,
    Digit: 271,
    Digits: 272,
    S: 273,
    SU: 274,
    L_Pragma: 275,
    L_DirCommentConstructor: 276,
    L_DirPIConstructor: 277,
    L_IntegerLiteral: 278,
    L_DecimalLiteral: 279,
    L_DoubleLiteral: 280,
    L_Comment: 281,
    L_AnyChar: 282,
    L_QuotStringLiteralChar: 283,
    L_AposStringLiteralChar: 284,
    LibraryModule: 285,
    MainModule: 286,
    VersionDecl: 287,
    VersionDeclEncoding: 288,
    VersionDeclVersion: 289,
    ModuleDecl: 290,
    Prolog: 291,
    DefaultNamespaceDecls: 292,
    DefaultNamespaceDecl: 293,
    Setters: 294,
    Setter: 295,
    NamespaceDecls: 296,
    NamespaceDecl: 297,
    Imports: 298,
    FTOptionDecls: 299,
    SchemaImport: 300,
    SchemaPrefix: 301,
    NamespaceName: 302,
    DefaultElementNamespace: 303,
    AtHints: 304,
    ModuleImport: 305,
    BaseURIDecl: 306,
    OrderedDecls: 307,
    VarDecl: 308,
    VarType: 309,
    VarValue: 310,
    VarDefaultValue: 311,
    VarVariableDecl: 312,
    FunctionDecl: 313,
    ParamList: 314,
    ReturnType: 315,
    OptionDecl: 316,
    TypeDeclaration: 317,
    Param: 318,
    EnclosedExpr: 319,
    QueryBody: 320,
    UnaryExpr: 321,
    DirElemConstructor: 322,
    DirAttributeList: 323,
    DirAttributeValue: 324,
    DirElemContent: 325,
    CommonContent: 326,
    SequenceType: 327,
    EmptySequenceTest: 328,
    KindTest: 329,
    ItemTest: 330,
    FunctionTest: 331,
    AtomicType: 332,
    AtomicOrUnionType: 333,
    StringLiteral: 334,
    ElementContentChar: 335,
    AttributeValueChar: 336,
    QName: 337,
    BlockExpr: 338,
    BinaryTest: 339,
    EXPLICITLY: 340
});

(function(){
// public class variables
var EOF= -1,
    L_QuotAttrContentChar= 4,
    L_AposAttrContentChar= 5,
    L_ElementContentChar= 6,
    L_CDataSection= 7,
    L_PredefinedEntityRef= 8,
    L_CharRef= 9,
    ESCAPE_LBRACKET= 10,
    ESCAPE_RBRACKET= 11,
    ESCAPE_APOS= 12,
    ESCAPE_QUOT= 13,
    CDATA_START= 14,
    CDATA_END= 15,
    ANCESTOR= 16,
    ANCESTOR_OR_SELF= 17,
    AND= 18,
    AS= 19,
    ASCENDING= 20,
    AT= 21,
    ATTRIBUTE= 22,
    BASE_URI= 23,
    BOUNDARY_SPACE= 24,
    BY= 25,
    CASE= 26,
    CAST= 27,
    CASTABLE= 28,
    CHILD= 29,
    COLLATION= 30,
    COMMENT= 31,
    CONSTRUCTION= 32,
    COPY_NAMESPACES= 33,
    DECLARE= 34,
    DEFAULT= 35,
    DESCENDANT= 36,
    DESCENDANT_OR_SELF= 37,
    DESCENDING= 38,
    DIV= 39,
    DOCUMENT= 40,
    DOCUMENT_NODE= 41,
    ELEMENT= 42,
    ELSE= 43,
    EMPTY= 44,
    EMPTY_SEQUENCE= 45,
    ENCODING= 46,
    EQ= 47,
    EVERY= 48,
    EXCEPT= 49,
    EXTERNAL= 50,
    FOLLOWING= 51,
    FOLLOWING_SIBLING= 52,
    FOR= 53,
    FUNCTION= 54,
    GE= 55,
    GREATEST= 56,
    GT= 57,
    IDIV= 58,
    IF= 59,
    IMPORT= 60,
    IN= 61,
    INHERIT= 62,
    INSTANCE= 63,
    INTERSECT= 64,
    IS= 65,
    ITEM= 66,
    LAX= 67,
    LE= 68,
    LEAST= 69,
    LET= 70,
    LT= 71,
    MOD= 72,
    MODULE= 73,
    NAMESPACE= 74,
    NE= 75,
    NO_INHERIT= 76,
    NO_PRESERVE= 77,
    NODE= 78,
    OF= 79,
    OPTION= 80,
    OR= 81,
    ORDER= 82,
    ORDERED= 83,
    ORDERING= 84,
    PARENT= 85,
    PRECEDING= 86,
    PRECEDING_SIBLING= 87,
    PRESERVE= 88,
    PROCESSING_INSTRUCTION= 89,
    RETURN= 90,
    SATISFIES= 91,
    SCHEMA= 92,
    SCHEMA_ATTRIBUTE= 93,
    SCHEMA_ELEMENT= 94,
    SELF= 95,
    SOME= 96,
    STABLE= 97,
    STRICT= 98,
    STRIP= 99,
    TEXT= 100,
    THEN= 101,
    TO= 102,
    TREAT= 103,
    TYPESWITCH= 104,
    UNION= 105,
    UNORDERED= 106,
    VALIDATE= 107,
    VARIABLE= 108,
    VERSION= 109,
    WHERE= 110,
    XQUERY= 111,
    ALLOWING= 112,
    CATCH= 113,
    CONTEXT= 114,
    COUNT= 115,
    DECIMAL_FORMAT= 116,
    DECIMAL_SEPARATOR= 117,
    DIGIT= 118,
    END= 119,
    GROUP= 120,
    GROUPING_SEPARATOR= 121,
    INFINITY= 122,
    MINUS_SIGN= 123,
    NAMESPACE_NODE= 124,
    NAN= 125,
    NEXT= 126,
    ONLY= 127,
    PATTERN_SEPARATOR= 128,
    PERCENT= 129,
    PER_MILLE= 130,
    PREVIOUS= 131,
    SLIDING= 132,
    START= 133,
    SWITCH= 134,
    TRY= 135,
    TUMBLING= 136,
    TYPE= 137,
    WHEN= 138,
    WINDOW= 139,
    ZERO_DIGIT= 140,
    AFTER= 141,
    BEFORE= 142,
    COPY= 143,
    DELETE= 144,
    FIRST= 145,
    INSERT= 146,
    INTO= 147,
    LAST= 148,
    MODIFY= 149,
    NODES= 150,
    RENAME= 151,
    REPLACE= 152,
    REVALIDATION= 153,
    SKIP= 154,
    UPDATING= 155,
    VALUE= 156,
    WITH= 157,
    ALL= 158,
    ANY= 159,
    CONTAINS= 160,
    CONTENT= 161,
    DIACRITICS= 162,
    DIFFERENT= 163,
    DISTANCE= 164,
    ENTIRE= 165,
    EXACTLY= 166,
    FROM= 167,
    FT_OPTION= 168,
    FTAND= 169,
    FTNOT= 170,
    FTOR= 171,
    INSENSITIVE= 172,
    LANGUAGE= 173,
    LEVELS= 174,
    LOWERCASE= 175,
    MOST= 176,
    NO= 177,
    NOT= 178,
    OCCURS= 179,
    PARAGRAPH= 180,
    PARAGRAPHS= 181,
    PHRASE= 182,
    RELATIONSHIP= 183,
    SAME= 184,
    SCORE= 185,
    SENSITIVE= 186,
    SENTENCE= 187,
    SENTENCES= 188,
    STEMMING= 189,
    STOP= 190,
    THESAURUS= 191,
    TIMES= 192,
    UPPERCASE= 193,
    USING= 194,
    WEIGHT= 195,
    WILDCARDS= 196,
    WITHOUT= 197,
    WORD= 198,
    WORDS= 199,
    BREAK= 200,
    CONTINUE= 201,
    EXIT= 202,
    LOOP= 203,
    RETURNING= 204,
    WHILE= 205,
    CHECK= 206,
    COLLECTION= 207,
    CONSTRAINT= 208,
    FOREACH= 209,
    FOREIGN= 210,
    INDEX= 211,
    INTEGRITY= 212,
    KEY= 213,
    ON= 214,
    UNIQUE= 215,
    BINARY= 216,
    AMP_ER= 217,
    APOS_ER= 218,
    QUOT_ER= 219,
    CONCAT= 220,
    LPAREN= 221,
    RPAREN= 222,
    DOLLAR= 223,
    LBRACKET= 224,
    RBRACKET= 225,
    LSQUARE= 226,
    RSQUARE= 227,
    EQUAL= 228,
    BIND= 229,
    NOTEQUAL= 230,
    ANN_PERCENT= 231,
    HASH= 232,
    AMP= 233,
    COMMA= 234,
    QUESTION= 235,
    STAR= 236,
    PLUS= 237,
    MINUS= 238,
    SMALLER= 239,
    GREATER= 240,
    SMALLEREQ= 241,
    GREATEREQ= 242,
    SMALLER_SMALLER= 243,
    GREATER_GREATER= 244,
    SLASH= 245,
    SLASH_SLASH= 246,
    DOT= 247,
    DOT_DOT= 248,
    COLON= 249,
    COLON_COLON= 250,
    EMPTY_CLOSE_TAG= 251,
    CLOSE_TAG= 252,
    SEMICOLON= 253,
    VBAR= 254,
    PRAGMA_START= 255,
    PRAGMA_END= 256,
    XML_COMMENT_START= 257,
    XML_COMMENT_END= 258,
    PI_START= 259,
    PI_END= 260,
    ATTR_SIGN= 261,
    CHARREF_DEC= 262,
    CHARREF_HEX= 263,
    APOS= 264,
    QUOT= 265,
    NCNameStartChar= 266,
    NCNameChar= 267,
    L_NCName= 268,
    Letter= 269,
    HexLetter= 270,
    Digit= 271,
    Digits= 272,
    S= 273,
    SU= 274,
    L_Pragma= 275,
    L_DirCommentConstructor= 276,
    L_DirPIConstructor= 277,
    L_IntegerLiteral= 278,
    L_DecimalLiteral= 279,
    L_DoubleLiteral= 280,
    L_Comment= 281,
    L_AnyChar= 282,
    L_QuotStringLiteralChar= 283,
    L_AposStringLiteralChar= 284,
    LibraryModule= 285,
    MainModule= 286,
    VersionDecl= 287,
    VersionDeclEncoding= 288,
    VersionDeclVersion= 289,
    ModuleDecl= 290,
    Prolog= 291,
    DefaultNamespaceDecls= 292,
    DefaultNamespaceDecl= 293,
    Setters= 294,
    Setter= 295,
    NamespaceDecls= 296,
    NamespaceDecl= 297,
    Imports= 298,
    FTOptionDecls= 299,
    SchemaImport= 300,
    SchemaPrefix= 301,
    NamespaceName= 302,
    DefaultElementNamespace= 303,
    AtHints= 304,
    ModuleImport= 305,
    BaseURIDecl= 306,
    OrderedDecls= 307,
    VarDecl= 308,
    VarType= 309,
    VarValue= 310,
    VarDefaultValue= 311,
    VarVariableDecl= 312,
    FunctionDecl= 313,
    ParamList= 314,
    ReturnType= 315,
    OptionDecl= 316,
    TypeDeclaration= 317,
    Param= 318,
    EnclosedExpr= 319,
    QueryBody= 320,
    UnaryExpr= 321,
    DirElemConstructor= 322,
    DirAttributeList= 323,
    DirAttributeValue= 324,
    DirElemContent= 325,
    CommonContent= 326,
    SequenceType= 327,
    EmptySequenceTest= 328,
    KindTest= 329,
    ItemTest= 330,
    FunctionTest= 331,
    AtomicType= 332,
    AtomicOrUnionType= 333,
    StringLiteral= 334,
    ElementContentChar= 335,
    AttributeValueChar= 336,
    QName= 337,
    BlockExpr= 338,
    BinaryTest= 339,
    EXPLICITLY= 340;

// public instance methods/vars
org.antlr.lang.extend(XQueryParser, org.antlr.runtime.Parser, {
        
    setTreeAdaptor: function(adaptor) {
        this.adaptor = adaptor;
    },
    getTreeAdaptor: function() {
        return this.adaptor;
    },

    getTokenNames: function() { return XQueryParser.tokenNames; },
    getGrammarFileName: function() { return "xquery/XQueryParser.g"; }
});
org.antlr.lang.augmentObject(XQueryParser.prototype, {

    // inline static return class
    p_Module_return: (function() {
        XQueryParser.p_Module_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Module_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:251:1: p_Module : (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF ;
    // $ANTLR start "p_Module"
    p_Module: function() {
        var retval = new XQueryParser.p_Module_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var EOF1 = null;
         var vd = null;
         var lm = null;
         var mm = null;

        var EOF1_tree=null;
        var stream_EOF=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EOF");
        var stream_p_VersionDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_VersionDecl");
        var stream_p_LibraryModule=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_LibraryModule");
        var stream_p_MainModule=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_MainModule");
        try {
            // xquery/XQueryParser.g:252:9: ( (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF )
            // xquery/XQueryParser.g:252:11: (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF
            // xquery/XQueryParser.g:252:13: (vd= p_VersionDecl )?
            var alt1=2;
            alt1 = this.dfa1.predict(this.input);
            switch (alt1) {
                case 1 :
                    // xquery/XQueryParser.g:252:13: vd= p_VersionDecl
                    this.pushFollow(XQueryParser.FOLLOW_p_VersionDecl_in_p_Module502);
                    vd=this.p_VersionDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_VersionDecl.add(vd.getTree());


                    break;

            }

            // xquery/XQueryParser.g:253:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)
            var alt2=2;
            alt2 = this.dfa2.predict(this.input);
            switch (alt2) {
                case 1 :
                    // xquery/XQueryParser.g:254:15: lm= p_LibraryModule[$vd.tree]
                    this.pushFollow(XQueryParser.FOLLOW_p_LibraryModule_in_p_Module535);
                    lm=this.p_LibraryModule((vd?vd.tree:null));

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_LibraryModule.add(lm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 254:44: ->
                    {
                        this.adaptor.addChild(root_0, (lm?lm.tree:null));

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // xquery/XQueryParser.g:255:15: mm= p_MainModule[$vd.tree]
                    this.pushFollow(XQueryParser.FOLLOW_p_MainModule_in_p_Module558);
                    mm=this.p_MainModule((vd?vd.tree:null));

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_MainModule.add(mm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 255:44: ->
                    {
                        this.adaptor.addChild(root_0, (mm?mm.tree:null));

                    }

                    retval.tree = root_0;}

                    break;

            }

            EOF1=this.match(this.input,EOF,XQueryParser.FOLLOW_EOF_in_p_Module582); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_EOF.add(EOF1);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_VersionDecl_return: (function() {
        XQueryParser.p_VersionDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_VersionDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:260:1: p_VersionDecl : k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) ;
    // $ANTLR start "p_VersionDecl"
    p_VersionDecl: function() {
        var retval = new XQueryParser.p_VersionDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON2 = null;
         var enc = null;
         var ver = null;

        var k_tree=null;
        var SEMICOLON2_tree=null;
        var stream_ENCODING=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ENCODING");
        var stream_VERSION=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token VERSION");
        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
        var stream_XQUERY=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token XQUERY");
        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
        try {
            // xquery/XQueryParser.g:261:9: (k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) )
            // xquery/XQueryParser.g:261:11: k= XQUERY ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON
            k=this.match(this.input,XQUERY,XQueryParser.FOLLOW_XQUERY_in_p_VersionDecl610); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_XQUERY.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:261:35: ( (k= ENCODING enc= p_StringLiteral ) | (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? ) )
            var alt4=2;
            var LA4_0 = this.input.LA(1);

            if ( (LA4_0==ENCODING) ) {
                alt4=1;
            }
            else if ( (LA4_0==VERSION) ) {
                alt4=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 4, 0, this.input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // xquery/XQueryParser.g:261:36: (k= ENCODING enc= p_StringLiteral )
                    // xquery/XQueryParser.g:261:36: (k= ENCODING enc= p_StringLiteral )
                    // xquery/XQueryParser.g:261:37: k= ENCODING enc= p_StringLiteral
                    k=this.match(this.input,ENCODING,XQueryParser.FOLLOW_ENCODING_in_p_VersionDecl618); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_ENCODING.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_VersionDecl624);
                    enc=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(enc.getTree());





                    break;
                case 2 :
                    // xquery/XQueryParser.g:262:13: (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? )
                    // xquery/XQueryParser.g:262:13: (k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )? )
                    // xquery/XQueryParser.g:262:14: k= VERSION ver= p_StringLiteral (k= ENCODING enc= p_StringLiteral )?
                    k=this.match(this.input,VERSION,XQueryParser.FOLLOW_VERSION_in_p_VersionDecl645); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_VERSION.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_VersionDecl651);
                    ver=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ver.getTree());
                    // xquery/XQueryParser.g:262:59: (k= ENCODING enc= p_StringLiteral )?
                    var alt3=2;
                    var LA3_0 = this.input.LA(1);

                    if ( (LA3_0==ENCODING) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // xquery/XQueryParser.g:262:60: k= ENCODING enc= p_StringLiteral
                            k=this.match(this.input,ENCODING,XQueryParser.FOLLOW_ENCODING_in_p_VersionDecl656); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_ENCODING.add(k);

                            if ( this.state.backtracking===0 ) {
                              this.ak(k);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_VersionDecl662);
                            enc=this.p_StringLiteral();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(enc.getTree());


                            break;

                    }






                    break;

            }

            SEMICOLON2=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_VersionDecl668); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON2);



            // AST REWRITE
            // elements: enc, ver
            // token labels: 
            // rule labels: retval, ver, enc
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_ver=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token ver",ver!=null?ver.tree:null);
            var stream_enc=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token enc",enc!=null?enc.tree:null);

            root_0 = this.adaptor.nil();
            // 263:17: -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
            {
                // xquery/XQueryParser.g:263:20: ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(VersionDecl, "VersionDecl"), root_1);

                // xquery/XQueryParser.g:263:34: ^( VersionDeclVersion ( $ver)? )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(VersionDeclVersion, "VersionDeclVersion"), root_2);

                // xquery/XQueryParser.g:263:55: ( $ver)?
                if ( stream_ver.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_ver.nextTree());

                }
                stream_ver.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:263:62: ^( VersionDeclEncoding ( $enc)? )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(VersionDeclEncoding, "VersionDeclEncoding"), root_2);

                // xquery/XQueryParser.g:263:84: ( $enc)?
                if ( stream_enc.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_enc.nextTree());

                }
                stream_enc.reset();

                this.adaptor.addChild(root_1, root_2);
                }

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_MainModule_return: (function() {
        XQueryParser.p_MainModule_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_MainModule_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:267:1: p_MainModule[vd] : pm_Prolog pm_QueryBody -> ^( MainModule pm_Prolog ) ;
    // $ANTLR start "p_MainModule"
    p_MainModule: function(vd) {
        var retval = new XQueryParser.p_MainModule_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var pm_Prolog3 = null;
         var pm_QueryBody4 = null;

        var stream_pm_QueryBody=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_QueryBody");
        var stream_pm_Prolog=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_Prolog");
        try {
            // xquery/XQueryParser.g:268:9: ( pm_Prolog pm_QueryBody -> ^( MainModule pm_Prolog ) )
            // xquery/XQueryParser.g:268:11: pm_Prolog pm_QueryBody
            this.pushFollow(XQueryParser.FOLLOW_pm_Prolog_in_p_MainModule734);
            pm_Prolog3=this.pm_Prolog();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_pm_Prolog.add(pm_Prolog3.getTree());
            this.pushFollow(XQueryParser.FOLLOW_pm_QueryBody_in_p_MainModule736);
            pm_QueryBody4=this.pm_QueryBody();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_pm_QueryBody.add(pm_QueryBody4.getTree());


            // AST REWRITE
            // elements: pm_Prolog
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 269:17: -> ^( MainModule pm_Prolog )
            {
                // xquery/XQueryParser.g:269:20: ^( MainModule pm_Prolog )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(MainModule, "MainModule"), root_1);

                this.adaptor.addChild(root_1, vd);
                this.adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_LibraryModule_return: (function() {
        XQueryParser.p_LibraryModule_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_LibraryModule_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:273:1: p_LibraryModule[vd] : p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) ;
    // $ANTLR start "p_LibraryModule"
    p_LibraryModule: function(vd) {
        var retval = new XQueryParser.p_LibraryModule_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ModuleDecl5 = null;
         var pm_Prolog6 = null;

        var stream_pm_Prolog=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_Prolog");
        var stream_p_ModuleDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_ModuleDecl");
        try {
            // xquery/XQueryParser.g:274:9: ( p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) )
            // xquery/XQueryParser.g:274:11: p_ModuleDecl pm_Prolog
            this.pushFollow(XQueryParser.FOLLOW_p_ModuleDecl_in_p_LibraryModule792);
            p_ModuleDecl5=this.p_ModuleDecl();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_ModuleDecl.add(p_ModuleDecl5.getTree());
            this.pushFollow(XQueryParser.FOLLOW_pm_Prolog_in_p_LibraryModule794);
            pm_Prolog6=this.pm_Prolog();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_pm_Prolog.add(pm_Prolog6.getTree());


            // AST REWRITE
            // elements: p_ModuleDecl, pm_Prolog
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 275:17: -> ^( LibraryModule p_ModuleDecl pm_Prolog )
            {
                // xquery/XQueryParser.g:275:20: ^( LibraryModule p_ModuleDecl pm_Prolog )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(LibraryModule, "LibraryModule"), root_1);

                this.adaptor.addChild(root_1, vd);
                this.adaptor.addChild(root_1, stream_p_ModuleDecl.nextTree());
                this.adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ModuleDecl_return: (function() {
        XQueryParser.p_ModuleDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ModuleDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:279:1: p_ModuleDecl : k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) ;
    // $ANTLR start "p_ModuleDecl"
    p_ModuleDecl: function() {
        var retval = new XQueryParser.p_ModuleDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var EQUAL8 = null;
        var SEMICOLON10 = null;
        var k = null;
        var list_k=null;
         var p_NCName7 = null;
         var p_StringLiteral9 = null;

        var EQUAL8_tree=null;
        var SEMICOLON10_tree=null;
        var k_tree=null;
        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
        var stream_MODULE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token MODULE");
        var stream_NAMESPACE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NAMESPACE");
        var stream_EQUAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUAL");
        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
        try {
            // xquery/XQueryParser.g:280:9: (k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) )
            // xquery/XQueryParser.g:280:11: k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON
            k=this.match(this.input,MODULE,XQueryParser.FOLLOW_MODULE_in_p_ModuleDecl850); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_MODULE.add(k);

            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_p_ModuleDecl854); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_ModuleDecl858);
            p_NCName7=this.p_NCName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_NCName.add(p_NCName7.getTree());
            EQUAL8=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_p_ModuleDecl860); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_EQUAL.add(EQUAL8);

            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_ModuleDecl862);
            p_StringLiteral9=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(p_StringLiteral9.getTree());
            SEMICOLON10=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_ModuleDecl864); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON10);



            // AST REWRITE
            // elements: p_StringLiteral, p_NCName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 281:17: -> ^( ModuleDecl p_NCName p_StringLiteral )
            {
                // xquery/XQueryParser.g:281:21: ^( ModuleDecl p_NCName p_StringLiteral )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(ModuleDecl, "ModuleDecl"), root_1);

                this.adaptor.addChild(root_1, stream_p_NCName.nextTree());
                this.adaptor.addChild(root_1, stream_p_StringLiteral.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_Prolog_return: (function() {
        XQueryParser.pm_Prolog_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_Prolog_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:287:1: pm_Prolog : ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )* -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) ;
    // $ANTLR start "pm_Prolog"
    pm_Prolog: function() {
        var retval = new XQueryParser.pm_Prolog_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var list_dnd=null;
        var list_s=null;
        var list_nd=null;
        var list_i=null;
        var list_fto=null;
        var list_od=null;
        var dnd = null;
        var s = null;
        var nd = null;
        var i = null;
        var fto = null;
        var od = null;
        var stream_pm_NamespaceDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_NamespaceDecl");
        var stream_p_Import=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_Import");
        var stream_p_Setter=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_Setter");
        var stream_pm_DefaultNamespaceDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_DefaultNamespaceDecl");
        var stream_pg_OrderedDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pg_OrderedDecl");
        var stream_pm_FTOptionDecl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_FTOptionDecl");
        try {
            // xquery/XQueryParser.g:288:9: ( ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )* -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) ) )
            // xquery/XQueryParser.g:288:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )* (od+= pg_OrderedDecl )*
            // xquery/XQueryParser.g:288:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )*
            loop6:
            do {
                var alt6=2;
                alt6 = this.dfa6.predict(this.input);
                switch (alt6) {
                case 1 :
                    // xquery/XQueryParser.g:288:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl )
                    // xquery/XQueryParser.g:288:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl )
                    var alt5=5;
                    var LA5_0 = this.input.LA(1);

                    if ( (LA5_0==DECLARE) ) {
                        var LA5_1 = this.input.LA(2);

                        if ( (LA5_1==REVALIDATION) && ((this.lc(XQU)))) {
                            alt5=2;
                        }
                        else if ( (LA5_1==FT_OPTION) ) {
                            alt5=5;
                        }
                        else if ( (LA5_1==DEFAULT) ) {
                            var LA5_5 = this.input.LA(3);

                            if ( (LA5_5==ELEMENT||LA5_5==FUNCTION) ) {
                                alt5=1;
                            }
                            else if ( (LA5_5==COLLATION||LA5_5==ORDER||LA5_5==DECIMAL_FORMAT) ) {
                                alt5=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae =
                                    new org.antlr.runtime.NoViableAltException("", 5, 5, this.input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA5_1>=BASE_URI && LA5_1<=BOUNDARY_SPACE)||(LA5_1>=CONSTRUCTION && LA5_1<=COPY_NAMESPACES)||LA5_1==ORDERING||LA5_1==DECIMAL_FORMAT) ) {
                            alt5=2;
                        }
                        else if ( (LA5_1==NAMESPACE) ) {
                            alt5=3;
                        }
                        else {
                            if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                            var nvae =
                                new org.antlr.runtime.NoViableAltException("", 5, 1, this.input);

                            throw nvae;
                        }
                    }
                    else if ( (LA5_0==IMPORT) ) {
                        alt5=4;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 5, 0, this.input);

                        throw nvae;
                    }
                    switch (alt5) {
                        case 1 :
                            // xquery/XQueryParser.g:288:13: dnd+= pm_DefaultNamespaceDecl
                            this.pushFollow(XQueryParser.FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog923);
                            dnd=this.pm_DefaultNamespaceDecl();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_pm_DefaultNamespaceDecl.add(dnd.getTree());
                            if (org.antlr.lang.isNull(list_dnd)) list_dnd = [];
                            list_dnd.push(dnd.getTree());



                            break;
                        case 2 :
                            // xquery/XQueryParser.g:288:44: s+= p_Setter
                            this.pushFollow(XQueryParser.FOLLOW_p_Setter_in_pm_Prolog929);
                            s=this.p_Setter();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_p_Setter.add(s.getTree());
                            if (org.antlr.lang.isNull(list_s)) list_s = [];
                            list_s.push(s.getTree());



                            break;
                        case 3 :
                            // xquery/XQueryParser.g:288:58: nd+= pm_NamespaceDecl
                            this.pushFollow(XQueryParser.FOLLOW_pm_NamespaceDecl_in_pm_Prolog935);
                            nd=this.pm_NamespaceDecl();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_pm_NamespaceDecl.add(nd.getTree());
                            if (org.antlr.lang.isNull(list_nd)) list_nd = [];
                            list_nd.push(nd.getTree());



                            break;
                        case 4 :
                            // xquery/XQueryParser.g:288:81: i+= p_Import
                            this.pushFollow(XQueryParser.FOLLOW_p_Import_in_pm_Prolog941);
                            i=this.p_Import();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_p_Import.add(i.getTree());
                            if (org.antlr.lang.isNull(list_i)) list_i = [];
                            list_i.push(i.getTree());



                            break;
                        case 5 :
                            // xquery/XQueryParser.g:288:95: fto+= pm_FTOptionDecl
                            this.pushFollow(XQueryParser.FOLLOW_pm_FTOptionDecl_in_pm_Prolog947);
                            fto=this.pm_FTOptionDecl();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_pm_FTOptionDecl.add(fto.getTree());
                            if (org.antlr.lang.isNull(list_fto)) list_fto = [];
                            list_fto.push(fto.getTree());



                            break;

                    }



                    break;

                default :
                    break loop6;
                }
            } while (true);

            // xquery/XQueryParser.g:288:121: (od+= pg_OrderedDecl )*
            loop7:
            do {
                var alt7=2;
                var LA7_0 = this.input.LA(1);

                if ( (LA7_0==DECLARE) ) {
                    var LA7_3 = this.input.LA(2);

                    if ( (LA7_3==FUNCTION||LA7_3==OPTION||LA7_3==VARIABLE||LA7_3==CONTEXT||LA7_3==UPDATING||LA7_3==COLLECTION||(LA7_3>=INDEX && LA7_3<=INTEGRITY)||LA7_3==ANN_PERCENT) ) {
                        alt7=1;
                    }


                }


                switch (alt7) {
                case 1 :
                    // xquery/XQueryParser.g:288:121: od+= pg_OrderedDecl
                    this.pushFollow(XQueryParser.FOLLOW_pg_OrderedDecl_in_pm_Prolog954);
                    od=this.pg_OrderedDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_pg_OrderedDecl.add(od.getTree());
                    if (org.antlr.lang.isNull(list_od)) list_od = [];
                    list_od.push(od.getTree());



                    break;

                default :
                    break loop7;
                }
            } while (true);



            // AST REWRITE
            // elements: nd, i, s, od, fto, dnd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: od, fto, s, nd, dnd, i
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_od=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token od",list_od);
            var stream_fto=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token fto",list_fto);
            var stream_s=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token s",list_s);
            var stream_nd=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nd",list_nd);
            var stream_dnd=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token dnd",list_dnd);
            var stream_i=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token i",list_i);
            root_0 = this.adaptor.nil();
            // 289:17: -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
            {
                // xquery/XQueryParser.g:289:21: ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( FTOptionDecls ( $fto)* ) ^( OrderedDecls ( $od)* ) )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(Prolog, "Prolog"), root_1);

                // xquery/XQueryParser.g:290:33: ^( DefaultNamespaceDecls ( $dnd)* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(DefaultNamespaceDecls, "DefaultNamespaceDecls"), root_2);

                // xquery/XQueryParser.g:290:57: ( $dnd)*
                while ( stream_dnd.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_dnd.nextTree());

                }
                stream_dnd.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:291:33: ^( Setters ( $s)* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(Setters, "Setters"), root_2);

                // xquery/XQueryParser.g:291:43: ( $s)*
                while ( stream_s.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_s.nextTree());

                }
                stream_s.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:292:33: ^( NamespaceDecls ( $nd)* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(NamespaceDecls, "NamespaceDecls"), root_2);

                // xquery/XQueryParser.g:292:50: ( $nd)*
                while ( stream_nd.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_nd.nextTree());

                }
                stream_nd.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:293:33: ^( Imports ( $i)* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(Imports, "Imports"), root_2);

                // xquery/XQueryParser.g:293:43: ( $i)*
                while ( stream_i.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_i.nextTree());

                }
                stream_i.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:294:33: ^( FTOptionDecls ( $fto)* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(FTOptionDecls, "FTOptionDecls"), root_2);

                // xquery/XQueryParser.g:294:49: ( $fto)*
                while ( stream_fto.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_fto.nextTree());

                }
                stream_fto.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:295:33: ^( OrderedDecls ( $od)* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(OrderedDecls, "OrderedDecls"), root_2);

                // xquery/XQueryParser.g:295:48: ( $od)*
                while ( stream_od.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_od.nextTree());

                }
                stream_od.reset();

                this.adaptor.addChild(root_1, root_2);
                }

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pg_OrderedDecl_return: (function() {
        XQueryParser.pg_OrderedDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pg_OrderedDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:303:1: pg_OrderedDecl : ( pm_ContextItemDecl | pm_AnnotatedDecl | pm_OptionDecl );
    // $ANTLR start "pg_OrderedDecl"
    pg_OrderedDecl: function() {
        var retval = new XQueryParser.pg_OrderedDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var pm_ContextItemDecl11 = null;
         var pm_AnnotatedDecl12 = null;
         var pm_OptionDecl13 = null;


        try {
            // xquery/XQueryParser.g:304:9: ( pm_ContextItemDecl | pm_AnnotatedDecl | pm_OptionDecl )
            var alt8=3;
            var LA8_0 = this.input.LA(1);

            if ( (LA8_0==DECLARE) ) {
                switch ( this.input.LA(2) ) {
                case CONTEXT:
                    alt8=1;
                    break;
                case FUNCTION:
                case VARIABLE:
                case UPDATING:
                case COLLECTION:
                case INDEX:
                case INTEGRITY:
                case ANN_PERCENT:
                    alt8=2;
                    break;
                case OPTION:
                    alt8=3;
                    break;
                default:
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 8, 1, this.input);

                    throw nvae;
                }

            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 8, 0, this.input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // xquery/XQueryParser.g:304:11: pm_ContextItemDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1269);
                    pm_ContextItemDecl11=this.pm_ContextItemDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_ContextItemDecl11.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:305:11: pm_AnnotatedDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_AnnotatedDecl_in_pg_OrderedDecl1281);
                    pm_AnnotatedDecl12=this.pm_AnnotatedDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_AnnotatedDecl12.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:306:11: pm_OptionDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1293);
                    pm_OptionDecl13=this.pm_OptionDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_OptionDecl13.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Setter_return: (function() {
        XQueryParser.p_Setter_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Setter_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:314:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl );
    // $ANTLR start "p_Setter"
    p_Setter: function() {
        var retval = new XQueryParser.p_Setter_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var pm_BoundarySpaceDecl14 = null;
         var pm_DefaultCollationDecl15 = null;
         var pm_BaseURIDecl16 = null;
         var pm_ConstructionDecl17 = null;
         var pm_OrderingModeDecl18 = null;
         var pm_EmptyOrderDecl19 = null;
         var pm_RevalidationDecl20 = null;
         var pm_CopyNamespacesDecl21 = null;
         var pm_DecimalFormatDecl22 = null;


        try {
            // xquery/XQueryParser.g:315:9: ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl )
            var alt9=9;
            alt9 = this.dfa9.predict(this.input);
            switch (alt9) {
                case 1 :
                    // xquery/XQueryParser.g:315:11: pm_BoundarySpaceDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1323);
                    pm_BoundarySpaceDecl14=this.pm_BoundarySpaceDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_BoundarySpaceDecl14.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:316:11: pm_DefaultCollationDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_DefaultCollationDecl_in_p_Setter1335);
                    pm_DefaultCollationDecl15=this.pm_DefaultCollationDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_DefaultCollationDecl15.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:317:11: pm_BaseURIDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_BaseURIDecl_in_p_Setter1347);
                    pm_BaseURIDecl16=this.pm_BaseURIDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_BaseURIDecl16.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:318:11: pm_ConstructionDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_ConstructionDecl_in_p_Setter1359);
                    pm_ConstructionDecl17=this.pm_ConstructionDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_ConstructionDecl17.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:319:11: pm_OrderingModeDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_OrderingModeDecl_in_p_Setter1371);
                    pm_OrderingModeDecl18=this.pm_OrderingModeDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_OrderingModeDecl18.getTree());


                    break;
                case 6 :
                    // xquery/XQueryParser.g:320:11: pm_EmptyOrderDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_EmptyOrderDecl_in_p_Setter1383);
                    pm_EmptyOrderDecl19=this.pm_EmptyOrderDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_EmptyOrderDecl19.getTree());


                    break;
                case 7 :
                    // xquery/XQueryParser.g:321:11: {...}? => pm_RevalidationDecl
                    root_0 = this.adaptor.nil();

                    if ( !((this.lc(XQU))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_Setter", "this.lc(XQU)");
                    }
                    this.pushFollow(XQueryParser.FOLLOW_pm_RevalidationDecl_in_p_Setter1398);
                    pm_RevalidationDecl20=this.pm_RevalidationDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_RevalidationDecl20.getTree());


                    break;
                case 8 :
                    // xquery/XQueryParser.g:322:11: pm_CopyNamespacesDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1410);
                    pm_CopyNamespacesDecl21=this.pm_CopyNamespacesDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CopyNamespacesDecl21.getTree());


                    break;
                case 9 :
                    // xquery/XQueryParser.g:323:11: pm_DecimalFormatDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_DecimalFormatDecl_in_p_Setter1422);
                    pm_DecimalFormatDecl22=this.pm_DecimalFormatDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_DecimalFormatDecl22.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_BoundarySpaceDecl_return: (function() {
        XQueryParser.pm_BoundarySpaceDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_BoundarySpaceDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:327:1: pm_BoundarySpaceDecl : k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON ;
    // $ANTLR start "pm_BoundarySpaceDecl"
    pm_BoundarySpaceDecl: function() {
        var retval = new XQueryParser.pm_BoundarySpaceDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON23 = null;

        var k_tree=null;
        var SEMICOLON23_tree=null;

        try {
            // xquery/XQueryParser.g:328:9: (k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON )
            // xquery/XQueryParser.g:328:11: k= DECLARE k= BOUNDARY_SPACE ( (k= PRESERVE ) | (k= STRIP ) ) SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1454); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,BOUNDARY_SPACE,XQueryParser.FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1460); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:328:68: ( (k= PRESERVE ) | (k= STRIP ) )
            var alt10=2;
            var LA10_0 = this.input.LA(1);

            if ( (LA10_0==PRESERVE) ) {
                alt10=1;
            }
            else if ( (LA10_0==STRIP) ) {
                alt10=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 10, 0, this.input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // xquery/XQueryParser.g:328:70: (k= PRESERVE )
                    // xquery/XQueryParser.g:328:70: (k= PRESERVE )
                    // xquery/XQueryParser.g:328:71: k= PRESERVE
                    k=this.match(this.input,PRESERVE,XQueryParser.FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1469); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }





                    break;
                case 2 :
                    // xquery/XQueryParser.g:328:100: (k= STRIP )
                    // xquery/XQueryParser.g:328:100: (k= STRIP )
                    // xquery/XQueryParser.g:328:101: k= STRIP
                    k=this.match(this.input,STRIP,XQueryParser.FOLLOW_STRIP_in_pm_BoundarySpaceDecl1479); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }





                    break;

            }

            SEMICOLON23=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1486); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON23_tree = this.adaptor.create(SEMICOLON23);
            this.adaptor.addChild(root_0, SEMICOLON23_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_DefaultCollationDecl_return: (function() {
        XQueryParser.pm_DefaultCollationDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_DefaultCollationDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:332:1: pm_DefaultCollationDecl : k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON ;
    // $ANTLR start "pm_DefaultCollationDecl"
    pm_DefaultCollationDecl: function() {
        var retval = new XQueryParser.pm_DefaultCollationDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON25 = null;
         var p_StringLiteral24 = null;

        var k_tree=null;
        var SEMICOLON25_tree=null;

        try {
            // xquery/XQueryParser.g:333:9: (k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON )
            // xquery/XQueryParser.g:333:11: k= DECLARE k= DEFAULT k= COLLATION p_StringLiteral SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_DefaultCollationDecl1514); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_pm_DefaultCollationDecl1520); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,COLLATION,XQueryParser.FOLLOW_COLLATION_in_pm_DefaultCollationDecl1526); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl1530);
            p_StringLiteral24=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral24.getTree());
            SEMICOLON25=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl1532); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON25_tree = this.adaptor.create(SEMICOLON25);
            this.adaptor.addChild(root_0, SEMICOLON25_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_BaseURIDecl_return: (function() {
        XQueryParser.pm_BaseURIDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_BaseURIDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:337:1: pm_BaseURIDecl : k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) ;
    // $ANTLR start "pm_BaseURIDecl"
    pm_BaseURIDecl: function() {
        var retval = new XQueryParser.pm_BaseURIDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON26 = null;
         var sl = null;

        var k_tree=null;
        var SEMICOLON26_tree=null;
        var stream_DECLARE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DECLARE");
        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
        var stream_BASE_URI=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token BASE_URI");
        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
        try {
            // xquery/XQueryParser.g:338:9: (k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) )
            // xquery/XQueryParser.g:338:11: k= DECLARE k= BASE_URI sl= p_StringLiteral SEMICOLON
            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_BaseURIDecl1568); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_DECLARE.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,BASE_URI,XQueryParser.FOLLOW_BASE_URI_in_pm_BaseURIDecl1574); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_BASE_URI.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_BaseURIDecl1580);
            sl=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(sl.getTree());
            SEMICOLON26=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_BaseURIDecl1582); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON26);



            // AST REWRITE
            // elements: sl
            // token labels: 
            // rule labels: sl, retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_sl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token sl",sl!=null?sl.tree:null);
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 339:17: -> ^( BaseURIDecl $sl)
            {
                // xquery/XQueryParser.g:339:20: ^( BaseURIDecl $sl)
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(BaseURIDecl, "BaseURIDecl"), root_1);

                this.adaptor.addChild(root_1, stream_sl.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_ConstructionDecl_return: (function() {
        XQueryParser.pm_ConstructionDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_ConstructionDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:343:1: pm_ConstructionDecl : k= DECLARE k= CONSTRUCTION ( (k= STRIP | k= PRESERVE ) ) SEMICOLON ;
    // $ANTLR start "pm_ConstructionDecl"
    pm_ConstructionDecl: function() {
        var retval = new XQueryParser.pm_ConstructionDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON27 = null;

        var k_tree=null;
        var SEMICOLON27_tree=null;

        try {
            // xquery/XQueryParser.g:344:9: (k= DECLARE k= CONSTRUCTION ( (k= STRIP | k= PRESERVE ) ) SEMICOLON )
            // xquery/XQueryParser.g:344:11: k= DECLARE k= CONSTRUCTION ( (k= STRIP | k= PRESERVE ) ) SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_ConstructionDecl1635); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,CONSTRUCTION,XQueryParser.FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl1641); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:344:66: ( (k= STRIP | k= PRESERVE ) )
            // xquery/XQueryParser.g:344:68: (k= STRIP | k= PRESERVE )
            // xquery/XQueryParser.g:344:68: (k= STRIP | k= PRESERVE )
            var alt11=2;
            var LA11_0 = this.input.LA(1);

            if ( (LA11_0==STRIP) ) {
                alt11=1;
            }
            else if ( (LA11_0==PRESERVE) ) {
                alt11=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 11, 0, this.input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // xquery/XQueryParser.g:344:69: k= STRIP
                    k=this.match(this.input,STRIP,XQueryParser.FOLLOW_STRIP_in_pm_ConstructionDecl1650); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:344:79: k= PRESERVE
                    k=this.match(this.input,PRESERVE,XQueryParser.FOLLOW_PRESERVE_in_pm_ConstructionDecl1656); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }



            SEMICOLON27=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_ConstructionDecl1663); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON27_tree = this.adaptor.create(SEMICOLON27);
            this.adaptor.addChild(root_0, SEMICOLON27_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_OrderingModeDecl_return: (function() {
        XQueryParser.pm_OrderingModeDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_OrderingModeDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:348:1: pm_OrderingModeDecl : k= DECLARE k= ORDERING ( (k= ORDERED | k= UNORDERED ) ) SEMICOLON ;
    // $ANTLR start "pm_OrderingModeDecl"
    pm_OrderingModeDecl: function() {
        var retval = new XQueryParser.pm_OrderingModeDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON28 = null;

        var k_tree=null;
        var SEMICOLON28_tree=null;

        try {
            // xquery/XQueryParser.g:349:9: (k= DECLARE k= ORDERING ( (k= ORDERED | k= UNORDERED ) ) SEMICOLON )
            // xquery/XQueryParser.g:349:11: k= DECLARE k= ORDERING ( (k= ORDERED | k= UNORDERED ) ) SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_OrderingModeDecl1691); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,ORDERING,XQueryParser.FOLLOW_ORDERING_in_pm_OrderingModeDecl1697); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:349:62: ( (k= ORDERED | k= UNORDERED ) )
            // xquery/XQueryParser.g:349:64: (k= ORDERED | k= UNORDERED )
            // xquery/XQueryParser.g:349:64: (k= ORDERED | k= UNORDERED )
            var alt12=2;
            var LA12_0 = this.input.LA(1);

            if ( (LA12_0==ORDERED) ) {
                alt12=1;
            }
            else if ( (LA12_0==UNORDERED) ) {
                alt12=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 12, 0, this.input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // xquery/XQueryParser.g:349:65: k= ORDERED
                    k=this.match(this.input,ORDERED,XQueryParser.FOLLOW_ORDERED_in_pm_OrderingModeDecl1706); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:349:77: k= UNORDERED
                    k=this.match(this.input,UNORDERED,XQueryParser.FOLLOW_UNORDERED_in_pm_OrderingModeDecl1712); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }



            SEMICOLON28=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1719); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON28_tree = this.adaptor.create(SEMICOLON28);
            this.adaptor.addChild(root_0, SEMICOLON28_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_EmptyOrderDecl_return: (function() {
        XQueryParser.pm_EmptyOrderDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_EmptyOrderDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:353:1: pm_EmptyOrderDecl : k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST | k= LEAST ) ) SEMICOLON ;
    // $ANTLR start "pm_EmptyOrderDecl"
    pm_EmptyOrderDecl: function() {
        var retval = new XQueryParser.pm_EmptyOrderDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON29 = null;

        var k_tree=null;
        var SEMICOLON29_tree=null;

        try {
            // xquery/XQueryParser.g:354:9: (k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST | k= LEAST ) ) SEMICOLON )
            // xquery/XQueryParser.g:354:11: k= DECLARE k= DEFAULT k= ORDER k= EMPTY ( (k= GREATEST | k= LEAST ) ) SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_EmptyOrderDecl1747); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1753); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,ORDER,XQueryParser.FOLLOW_ORDER_in_pm_EmptyOrderDecl1759); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,EMPTY,XQueryParser.FOLLOW_EMPTY_in_pm_EmptyOrderDecl1765); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:354:107: ( (k= GREATEST | k= LEAST ) )
            // xquery/XQueryParser.g:354:109: (k= GREATEST | k= LEAST )
            // xquery/XQueryParser.g:354:109: (k= GREATEST | k= LEAST )
            var alt13=2;
            var LA13_0 = this.input.LA(1);

            if ( (LA13_0==GREATEST) ) {
                alt13=1;
            }
            else if ( (LA13_0==LEAST) ) {
                alt13=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 13, 0, this.input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // xquery/XQueryParser.g:354:110: k= GREATEST
                    k=this.match(this.input,GREATEST,XQueryParser.FOLLOW_GREATEST_in_pm_EmptyOrderDecl1774); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:354:123: k= LEAST
                    k=this.match(this.input,LEAST,XQueryParser.FOLLOW_LEAST_in_pm_EmptyOrderDecl1780); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }



            SEMICOLON29=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1787); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON29_tree = this.adaptor.create(SEMICOLON29);
            this.adaptor.addChild(root_0, SEMICOLON29_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_CopyNamespacesDecl_return: (function() {
        XQueryParser.pm_CopyNamespacesDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_CopyNamespacesDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:358:1: pm_CopyNamespacesDecl : k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON ;
    // $ANTLR start "pm_CopyNamespacesDecl"
    pm_CopyNamespacesDecl: function() {
        var retval = new XQueryParser.pm_CopyNamespacesDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var COMMA31 = null;
        var SEMICOLON33 = null;
         var p_PreserveMode30 = null;
         var p_InheritMode32 = null;

        var k_tree=null;
        var COMMA31_tree=null;
        var SEMICOLON33_tree=null;

        try {
            // xquery/XQueryParser.g:359:9: (k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON )
            // xquery/XQueryParser.g:359:11: k= DECLARE k= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1815); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,COPY_NAMESPACES,XQueryParser.FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1821); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1825);
            p_PreserveMode30=this.p_PreserveMode();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PreserveMode30.getTree());
            COMMA31=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_pm_CopyNamespacesDecl1827); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            COMMA31_tree = this.adaptor.create(COMMA31);
            this.adaptor.addChild(root_0, COMMA31_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1829);
            p_InheritMode32=this.p_InheritMode();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InheritMode32.getTree());
            SEMICOLON33=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1831); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON33_tree = this.adaptor.create(SEMICOLON33);
            this.adaptor.addChild(root_0, SEMICOLON33_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_PreserveMode_return: (function() {
        XQueryParser.p_PreserveMode_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_PreserveMode_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:363:1: p_PreserveMode : (k+= PRESERVE | k+= NO_PRESERVE ) ;
    // $ANTLR start "p_PreserveMode"
    p_PreserveMode: function() {
        var retval = new XQueryParser.p_PreserveMode_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:364:9: ( (k+= PRESERVE | k+= NO_PRESERVE ) )
            // xquery/XQueryParser.g:364:11: (k+= PRESERVE | k+= NO_PRESERVE )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:364:11: (k+= PRESERVE | k+= NO_PRESERVE )
            var alt14=2;
            var LA14_0 = this.input.LA(1);

            if ( (LA14_0==PRESERVE) ) {
                alt14=1;
            }
            else if ( (LA14_0==NO_PRESERVE) ) {
                alt14=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 14, 0, this.input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // xquery/XQueryParser.g:364:12: k+= PRESERVE
                    k=this.match(this.input,PRESERVE,XQueryParser.FOLLOW_PRESERVE_in_p_PreserveMode1860); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:364:26: k+= NO_PRESERVE
                    k=this.match(this.input,NO_PRESERVE,XQueryParser.FOLLOW_NO_PRESERVE_in_p_PreserveMode1866); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_InheritMode_return: (function() {
        XQueryParser.p_InheritMode_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_InheritMode_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:368:1: p_InheritMode : (k+= INHERIT | k+= NO_INHERIT ) ;
    // $ANTLR start "p_InheritMode"
    p_InheritMode: function() {
        var retval = new XQueryParser.p_InheritMode_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:369:9: ( (k+= INHERIT | k+= NO_INHERIT ) )
            // xquery/XQueryParser.g:369:11: (k+= INHERIT | k+= NO_INHERIT )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:369:11: (k+= INHERIT | k+= NO_INHERIT )
            var alt15=2;
            var LA15_0 = this.input.LA(1);

            if ( (LA15_0==INHERIT) ) {
                alt15=1;
            }
            else if ( (LA15_0==NO_INHERIT) ) {
                alt15=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 15, 0, this.input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // xquery/XQueryParser.g:369:12: k+= INHERIT
                    k=this.match(this.input,INHERIT,XQueryParser.FOLLOW_INHERIT_in_p_InheritMode1898); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:369:25: k+= NO_INHERIT
                    k=this.match(this.input,NO_INHERIT,XQueryParser.FOLLOW_NO_INHERIT_in_p_InheritMode1904); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_DecimalFormatDecl_return: (function() {
        XQueryParser.pm_DecimalFormatDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_DecimalFormatDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:373:1: pm_DecimalFormatDecl : k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON ;
    // $ANTLR start "pm_DecimalFormatDecl"
    pm_DecimalFormatDecl: function() {
        var retval = new XQueryParser.pm_DecimalFormatDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var EQUAL36 = null;
        var SEMICOLON38 = null;
         var p_QName34 = null;
         var p_DFPropertyName35 = null;
         var p_StringLiteral37 = null;

        var k_tree=null;
        var EQUAL36_tree=null;
        var SEMICOLON38_tree=null;

        try {
            // xquery/XQueryParser.g:374:9: (k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON )
            // xquery/XQueryParser.g:374:11: k= DECLARE ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) ) ( p_DFPropertyName EQUAL p_StringLiteral )* SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_DecimalFormatDecl1943); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:374:36: ( (k= DECIMAL_FORMAT p_QName ) | (k= DEFAULT k= DECIMAL_FORMAT ) )
            var alt16=2;
            var LA16_0 = this.input.LA(1);

            if ( (LA16_0==DECIMAL_FORMAT) ) {
                alt16=1;
            }
            else if ( (LA16_0==DEFAULT) ) {
                alt16=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 16, 0, this.input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // xquery/XQueryParser.g:374:37: (k= DECIMAL_FORMAT p_QName )
                    // xquery/XQueryParser.g:374:37: (k= DECIMAL_FORMAT p_QName )
                    // xquery/XQueryParser.g:374:38: k= DECIMAL_FORMAT p_QName
                    k=this.match(this.input,DECIMAL_FORMAT,XQueryParser.FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1951); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_pm_DecimalFormatDecl1955);
                    p_QName34=this.p_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName34.getTree());





                    break;
                case 2 :
                    // xquery/XQueryParser.g:374:81: (k= DEFAULT k= DECIMAL_FORMAT )
                    // xquery/XQueryParser.g:374:81: (k= DEFAULT k= DECIMAL_FORMAT )
                    // xquery/XQueryParser.g:374:82: k= DEFAULT k= DECIMAL_FORMAT
                    k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_pm_DecimalFormatDecl1963); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    k=this.match(this.input,DECIMAL_FORMAT,XQueryParser.FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1969); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }





                    break;

            }

            // xquery/XQueryParser.g:374:141: ( p_DFPropertyName EQUAL p_StringLiteral )*
            loop17:
            do {
                var alt17=2;
                var LA17_0 = this.input.LA(1);

                if ( ((LA17_0>=DECIMAL_SEPARATOR && LA17_0<=DIGIT)||(LA17_0>=GROUPING_SEPARATOR && LA17_0<=MINUS_SIGN)||LA17_0==NAN||(LA17_0>=PATTERN_SEPARATOR && LA17_0<=PER_MILLE)||LA17_0==ZERO_DIGIT) ) {
                    alt17=1;
                }


                switch (alt17) {
                case 1 :
                    // xquery/XQueryParser.g:374:142: p_DFPropertyName EQUAL p_StringLiteral
                    this.pushFollow(XQueryParser.FOLLOW_p_DFPropertyName_in_pm_DecimalFormatDecl1976);
                    p_DFPropertyName35=this.p_DFPropertyName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DFPropertyName35.getTree());
                    EQUAL36=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_pm_DecimalFormatDecl1978); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    EQUAL36_tree = this.adaptor.create(EQUAL36);
                    this.adaptor.addChild(root_0, EQUAL36_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_DecimalFormatDecl1980);
                    p_StringLiteral37=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral37.getTree());


                    break;

                default :
                    break loop17;
                }
            } while (true);

            SEMICOLON38=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_DecimalFormatDecl1984); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON38_tree = this.adaptor.create(SEMICOLON38);
            this.adaptor.addChild(root_0, SEMICOLON38_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_DFPropertyName_return: (function() {
        XQueryParser.p_DFPropertyName_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_DFPropertyName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:378:1: p_DFPropertyName : (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR ) ;
    // $ANTLR start "p_DFPropertyName"
    p_DFPropertyName: function() {
        var retval = new XQueryParser.p_DFPropertyName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:379:9: ( (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR ) )
            // xquery/XQueryParser.g:379:11: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:379:11: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
            var alt18=10;
            switch ( this.input.LA(1) ) {
            case DECIMAL_SEPARATOR:
                alt18=1;
                break;
            case GROUPING_SEPARATOR:
                alt18=2;
                break;
            case INFINITY:
                alt18=3;
                break;
            case MINUS_SIGN:
                alt18=4;
                break;
            case NAN:
                alt18=5;
                break;
            case PERCENT:
                alt18=6;
                break;
            case PER_MILLE:
                alt18=7;
                break;
            case ZERO_DIGIT:
                alt18=8;
                break;
            case DIGIT:
                alt18=9;
                break;
            case PATTERN_SEPARATOR:
                alt18=10;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 18, 0, this.input);

                throw nvae;
            }

            switch (alt18) {
                case 1 :
                    // xquery/XQueryParser.g:379:12: k= DECIMAL_SEPARATOR
                    k=this.match(this.input,DECIMAL_SEPARATOR,XQueryParser.FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2013); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:379:34: k= GROUPING_SEPARATOR
                    k=this.match(this.input,GROUPING_SEPARATOR,XQueryParser.FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2019); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 3 :
                    // xquery/XQueryParser.g:379:57: k= INFINITY
                    k=this.match(this.input,INFINITY,XQueryParser.FOLLOW_INFINITY_in_p_DFPropertyName2025); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 4 :
                    // xquery/XQueryParser.g:379:70: k= MINUS_SIGN
                    k=this.match(this.input,MINUS_SIGN,XQueryParser.FOLLOW_MINUS_SIGN_in_p_DFPropertyName2031); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 5 :
                    // xquery/XQueryParser.g:379:85: k= NAN
                    k=this.match(this.input,NAN,XQueryParser.FOLLOW_NAN_in_p_DFPropertyName2037); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 6 :
                    // xquery/XQueryParser.g:379:93: k= PERCENT
                    k=this.match(this.input,PERCENT,XQueryParser.FOLLOW_PERCENT_in_p_DFPropertyName2043); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 7 :
                    // xquery/XQueryParser.g:379:105: k= PER_MILLE
                    k=this.match(this.input,PER_MILLE,XQueryParser.FOLLOW_PER_MILLE_in_p_DFPropertyName2049); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 8 :
                    // xquery/XQueryParser.g:379:119: k= ZERO_DIGIT
                    k=this.match(this.input,ZERO_DIGIT,XQueryParser.FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2055); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 9 :
                    // xquery/XQueryParser.g:379:134: k= DIGIT
                    k=this.match(this.input,DIGIT,XQueryParser.FOLLOW_DIGIT_in_p_DFPropertyName2061); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 10 :
                    // xquery/XQueryParser.g:379:144: k= PATTERN_SEPARATOR
                    k=this.match(this.input,PATTERN_SEPARATOR,XQueryParser.FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2067); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Import_return: (function() {
        XQueryParser.p_Import_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Import_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:383:1: p_Import : ( pm_SchemaImport | pm_ModuleImport );
    // $ANTLR start "p_Import"
    p_Import: function() {
        var retval = new XQueryParser.p_Import_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var pm_SchemaImport39 = null;
         var pm_ModuleImport40 = null;


        try {
            // xquery/XQueryParser.g:384:9: ( pm_SchemaImport | pm_ModuleImport )
            var alt19=2;
            var LA19_0 = this.input.LA(1);

            if ( (LA19_0==IMPORT) ) {
                var LA19_1 = this.input.LA(2);

                if ( (LA19_1==SCHEMA) ) {
                    alt19=1;
                }
                else if ( (LA19_1==MODULE) ) {
                    alt19=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 19, 1, this.input);

                    throw nvae;
                }
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 19, 0, this.input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // xquery/XQueryParser.g:384:11: pm_SchemaImport
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_SchemaImport_in_p_Import2096);
                    pm_SchemaImport39=this.pm_SchemaImport();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_SchemaImport39.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:384:29: pm_ModuleImport
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_ModuleImport_in_p_Import2100);
                    pm_ModuleImport40=this.pm_ModuleImport();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_ModuleImport40.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_SchemaImport_return: (function() {
        XQueryParser.pm_SchemaImport_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_SchemaImport_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:388:1: pm_SchemaImport : k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) ;
    // $ANTLR start "pm_SchemaImport"
    pm_SchemaImport: function() {
        var retval = new XQueryParser.pm_SchemaImport_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var COMMA41 = null;
        var SEMICOLON42 = null;
        var list_ah=null;
         var sp = null;
         var us = null;
        var ah = null;
        var k_tree=null;
        var COMMA41_tree=null;
        var SEMICOLON42_tree=null;
        var stream_AT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token AT");
        var stream_IMPORT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IMPORT");
        var stream_SCHEMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SCHEMA");
        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
        var stream_p_SchemaPrefix=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_SchemaPrefix");
        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
        try {
            // xquery/XQueryParser.g:389:9: (k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) )
            // xquery/XQueryParser.g:389:11: k= IMPORT k= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            k=this.match(this.input,IMPORT,XQueryParser.FOLLOW_IMPORT_in_pm_SchemaImport2136); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IMPORT.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,SCHEMA,XQueryParser.FOLLOW_SCHEMA_in_pm_SchemaImport2142); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_SCHEMA.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:389:61: (sp= p_SchemaPrefix )?
            var alt20=2;
            var LA20_0 = this.input.LA(1);

            if ( (LA20_0==DEFAULT||LA20_0==NAMESPACE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // xquery/XQueryParser.g:389:61: sp= p_SchemaPrefix
                    this.pushFollow(XQueryParser.FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2148);
                    sp=this.p_SchemaPrefix();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_SchemaPrefix.add(sp.getTree());


                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_SchemaImport2153);
            us=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(us.getTree());
            // xquery/XQueryParser.g:389:97: (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            var alt22=2;
            var LA22_0 = this.input.LA(1);

            if ( (LA22_0==AT) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // xquery/XQueryParser.g:389:98: k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_pm_SchemaImport2158); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_AT.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_SchemaImport2164);
                    ah=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (org.antlr.lang.isNull(list_ah)) list_ah = [];
                    list_ah.push(ah.getTree());

                    // xquery/XQueryParser.g:389:138: ( COMMA ah+= p_StringLiteral )*
                    loop21:
                    do {
                        var alt21=2;
                        var LA21_0 = this.input.LA(1);

                        if ( (LA21_0==COMMA) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                        case 1 :
                            // xquery/XQueryParser.g:389:139: COMMA ah+= p_StringLiteral
                            COMMA41=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_pm_SchemaImport2167); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_COMMA.add(COMMA41);

                            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_SchemaImport2171);
                            ah=this.p_StringLiteral();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ah.getTree());
                            if (org.antlr.lang.isNull(list_ah)) list_ah = [];
                            list_ah.push(ah.getTree());



                            break;

                        default :
                            break loop21;
                        }
                    } while (true);



                    break;

            }

            SEMICOLON42=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_SchemaImport2177); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON42);



            // AST REWRITE
            // elements: us, ah, sp
            // token labels: 
            // rule labels: retval, sp, us
            // token list labels: 
            // rule list labels: ah
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_sp=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token sp",sp!=null?sp.tree:null);
            var stream_us=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token us",us!=null?us.tree:null);
            var stream_ah=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token ah",list_ah);
            root_0 = this.adaptor.nil();
            // 390:17: -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
            {
                // xquery/XQueryParser.g:390:20: ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(SchemaImport, "SchemaImport"), root_1);

                // xquery/XQueryParser.g:390:35: ^( SchemaPrefix ( $sp)? )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(SchemaPrefix, "SchemaPrefix"), root_2);

                // xquery/XQueryParser.g:390:50: ( $sp)?
                if ( stream_sp.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_sp.nextTree());

                }
                stream_sp.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                this.adaptor.addChild(root_1, stream_us.nextTree());
                // xquery/XQueryParser.g:390:60: ^( AtHints ( $ah)* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(AtHints, "AtHints"), root_2);

                // xquery/XQueryParser.g:390:70: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                this.adaptor.addChild(root_1, root_2);
                }

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SchemaPrefix_return: (function() {
        XQueryParser.p_SchemaPrefix_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SchemaPrefix_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:394:1: p_SchemaPrefix : (k= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k= DEFAULT k= ELEMENT k= NAMESPACE -> DefaultElementNamespace );
    // $ANTLR start "p_SchemaPrefix"
    p_SchemaPrefix: function() {
        var retval = new XQueryParser.p_SchemaPrefix_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var EQUAL43 = null;
         var nn = null;

        var k_tree=null;
        var EQUAL43_tree=null;
        var stream_ELEMENT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ELEMENT");
        var stream_NAMESPACE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NAMESPACE");
        var stream_EQUAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUAL");
        var stream_DEFAULT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DEFAULT");
        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
        try {
            // xquery/XQueryParser.g:395:9: (k= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k= DEFAULT k= ELEMENT k= NAMESPACE -> DefaultElementNamespace )
            var alt23=2;
            var LA23_0 = this.input.LA(1);

            if ( (LA23_0==NAMESPACE) ) {
                alt23=1;
            }
            else if ( (LA23_0==DEFAULT) ) {
                alt23=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 23, 0, this.input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // xquery/XQueryParser.g:395:11: k= NAMESPACE nn= p_NCName EQUAL
                    k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_p_SchemaPrefix2247); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_SchemaPrefix2253);
                    nn=this.p_NCName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL43=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_p_SchemaPrefix2255); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_EQUAL.add(EQUAL43);



                    // AST REWRITE
                    // elements: nn
                    // token labels: 
                    // rule labels: retval, nn
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
                    var stream_nn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nn",nn!=null?nn.tree:null);

                    root_0 = this.adaptor.nil();
                    // 396:17: -> ^( NamespaceName $nn)
                    {
                        // xquery/XQueryParser.g:396:20: ^( NamespaceName $nn)
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(NamespaceName, "NamespaceName"), root_1);

                        this.adaptor.addChild(root_1, stream_nn.nextTree());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // xquery/XQueryParser.g:397:11: k= DEFAULT k= ELEMENT k= NAMESPACE
                    k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_SchemaPrefix2294); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_DEFAULT.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    k=this.match(this.input,ELEMENT,XQueryParser.FOLLOW_ELEMENT_in_p_SchemaPrefix2300); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_ELEMENT.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_p_SchemaPrefix2306); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 398:17: -> DefaultElementNamespace
                    {
                        this.adaptor.addChild(root_0, this.adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_ModuleImport_return: (function() {
        XQueryParser.pm_ModuleImport_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_ModuleImport_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:402:1: pm_ModuleImport : k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) ;
    // $ANTLR start "pm_ModuleImport"
    pm_ModuleImport: function() {
        var retval = new XQueryParser.pm_ModuleImport_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var EQUAL44 = null;
        var COMMA45 = null;
        var SEMICOLON46 = null;
        var list_ah=null;
         var nn = null;
         var us = null;
        var ah = null;
        var k_tree=null;
        var EQUAL44_tree=null;
        var COMMA45_tree=null;
        var SEMICOLON46_tree=null;
        var stream_AT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token AT");
        var stream_IMPORT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token IMPORT");
        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
        var stream_MODULE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token MODULE");
        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
        var stream_NAMESPACE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NAMESPACE");
        var stream_EQUAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUAL");
        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
        try {
            // xquery/XQueryParser.g:403:9: (k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) )
            // xquery/XQueryParser.g:403:11: k= IMPORT k= MODULE (k= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            k=this.match(this.input,IMPORT,XQueryParser.FOLLOW_IMPORT_in_pm_ModuleImport2356); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_IMPORT.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,MODULE,XQueryParser.FOLLOW_MODULE_in_pm_ModuleImport2362); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_MODULE.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:403:59: (k= NAMESPACE nn= p_NCName EQUAL )?
            var alt24=2;
            var LA24_0 = this.input.LA(1);

            if ( (LA24_0==NAMESPACE) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // xquery/XQueryParser.g:403:60: k= NAMESPACE nn= p_NCName EQUAL
                    k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_pm_ModuleImport2369); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pm_ModuleImport2375);
                    nn=this.p_NCName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL44=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_pm_ModuleImport2377); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_EQUAL.add(EQUAL44);



                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_ModuleImport2383);
            us=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(us.getTree());
            // xquery/XQueryParser.g:403:126: (k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            var alt26=2;
            var LA26_0 = this.input.LA(1);

            if ( (LA26_0==AT) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // xquery/XQueryParser.g:403:127: k= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_pm_ModuleImport2388); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_AT.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_ModuleImport2394);
                    ah=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (org.antlr.lang.isNull(list_ah)) list_ah = [];
                    list_ah.push(ah.getTree());

                    // xquery/XQueryParser.g:403:167: ( COMMA ah+= p_StringLiteral )*
                    loop25:
                    do {
                        var alt25=2;
                        var LA25_0 = this.input.LA(1);

                        if ( (LA25_0==COMMA) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                        case 1 :
                            // xquery/XQueryParser.g:403:168: COMMA ah+= p_StringLiteral
                            COMMA45=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_pm_ModuleImport2397); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_COMMA.add(COMMA45);

                            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_ModuleImport2401);
                            ah=this.p_StringLiteral();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(ah.getTree());
                            if (org.antlr.lang.isNull(list_ah)) list_ah = [];
                            list_ah.push(ah.getTree());



                            break;

                        default :
                            break loop25;
                        }
                    } while (true);



                    break;

            }

            SEMICOLON46=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_ModuleImport2407); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON46);



            // AST REWRITE
            // elements: us, nn, ah
            // token labels: 
            // rule labels: retval, nn, us
            // token list labels: 
            // rule list labels: ah
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_nn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nn",nn!=null?nn.tree:null);
            var stream_us=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token us",us!=null?us.tree:null);
            var stream_ah=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token ah",list_ah);
            root_0 = this.adaptor.nil();
            // 404:17: -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
            {
                // xquery/XQueryParser.g:404:20: ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(ModuleImport, "ModuleImport"), root_1);

                // xquery/XQueryParser.g:404:35: ^( NamespaceName ( $nn)? )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(NamespaceName, "NamespaceName"), root_2);

                // xquery/XQueryParser.g:404:51: ( $nn)?
                if ( stream_nn.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_nn.nextTree());

                }
                stream_nn.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                this.adaptor.addChild(root_1, stream_us.nextTree());
                // xquery/XQueryParser.g:404:61: ^( AtHints ( $ah)* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(AtHints, "AtHints"), root_2);

                // xquery/XQueryParser.g:404:71: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                this.adaptor.addChild(root_1, root_2);
                }

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_NamespaceDecl_return: (function() {
        XQueryParser.pm_NamespaceDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_NamespaceDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:408:1: pm_NamespaceDecl : k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) ;
    // $ANTLR start "pm_NamespaceDecl"
    pm_NamespaceDecl: function() {
        var retval = new XQueryParser.pm_NamespaceDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var EQUAL47 = null;
        var SEMICOLON48 = null;
         var nn = null;
         var us = null;

        var k_tree=null;
        var EQUAL47_tree=null;
        var SEMICOLON48_tree=null;
        var stream_DECLARE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DECLARE");
        var stream_SEMICOLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SEMICOLON");
        var stream_NAMESPACE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token NAMESPACE");
        var stream_EQUAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EQUAL");
        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
        var stream_p_StringLiteral=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StringLiteral");
        try {
            // xquery/XQueryParser.g:409:9: (k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) )
            // xquery/XQueryParser.g:409:11: k= DECLARE k= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON
            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_NamespaceDecl2476); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_DECLARE.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_pm_NamespaceDecl2482); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_NAMESPACE.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pm_NamespaceDecl2488);
            nn=this.p_NCName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_NCName.add(nn.getTree());
            EQUAL47=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_pm_NamespaceDecl2490); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_EQUAL.add(EQUAL47);

            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_NamespaceDecl2494);
            us=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_StringLiteral.add(us.getTree());
            SEMICOLON48=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_NamespaceDecl2496); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_SEMICOLON.add(SEMICOLON48);



            // AST REWRITE
            // elements: us, nn
            // token labels: 
            // rule labels: retval, nn, us
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_nn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nn",nn!=null?nn.tree:null);
            var stream_us=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token us",us!=null?us.tree:null);

            root_0 = this.adaptor.nil();
            // 410:17: -> ^( NamespaceDecl $nn $us)
            {
                // xquery/XQueryParser.g:410:20: ^( NamespaceDecl $nn $us)
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(NamespaceDecl, "NamespaceDecl"), root_1);

                this.adaptor.addChild(root_1, stream_nn.nextTree());
                this.adaptor.addChild(root_1, stream_us.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_DefaultNamespaceDecl_return: (function() {
        XQueryParser.pm_DefaultNamespaceDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_DefaultNamespaceDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:414:1: pm_DefaultNamespaceDecl : k= DECLARE k= DEFAULT (k= ELEMENT | k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON ;
    // $ANTLR start "pm_DefaultNamespaceDecl"
    pm_DefaultNamespaceDecl: function() {
        var retval = new XQueryParser.pm_DefaultNamespaceDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON50 = null;
         var p_StringLiteral49 = null;

        var k_tree=null;
        var SEMICOLON50_tree=null;

        try {
            // xquery/XQueryParser.g:415:9: (k= DECLARE k= DEFAULT (k= ELEMENT | k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON )
            // xquery/XQueryParser.g:415:11: k= DECLARE k= DEFAULT (k= ELEMENT | k= FUNCTION ) k= NAMESPACE p_StringLiteral SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl2553); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl2559); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:415:61: (k= ELEMENT | k= FUNCTION )
            var alt27=2;
            var LA27_0 = this.input.LA(1);

            if ( (LA27_0==ELEMENT) ) {
                alt27=1;
            }
            else if ( (LA27_0==FUNCTION) ) {
                alt27=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 27, 0, this.input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // xquery/XQueryParser.g:415:62: k= ELEMENT
                    k=this.match(this.input,ELEMENT,XQueryParser.FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl2566); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:415:74: k= FUNCTION
                    k=this.match(this.input,FUNCTION,XQueryParser.FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl2572); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl2579); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl2583);
            p_StringLiteral49=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral49.getTree());
            SEMICOLON50=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl2585); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON50_tree = this.adaptor.create(SEMICOLON50);
            this.adaptor.addChild(root_0, SEMICOLON50_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_AnnotatedDecl_return: (function() {
        XQueryParser.pm_AnnotatedDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_AnnotatedDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:419:1: pm_AnnotatedDecl : k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON ;
    // $ANTLR start "pm_AnnotatedDecl"
    pm_AnnotatedDecl: function() {
        var retval = new XQueryParser.pm_AnnotatedDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON53 = null;
         var p_Annotation51 = null;
         var pg_AnnotatedDecl52 = null;

        var k_tree=null;
        var SEMICOLON53_tree=null;

        try {
            // xquery/XQueryParser.g:420:9: (k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON )
            // xquery/XQueryParser.g:420:11: k= DECLARE ( p_Annotation )* pg_AnnotatedDecl SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_AnnotatedDecl2613); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:420:36: ( p_Annotation )*
            loop28:
            do {
                var alt28=2;
                var LA28_0 = this.input.LA(1);

                if ( (LA28_0==ANN_PERCENT) ) {
                    alt28=1;
                }


                switch (alt28) {
                case 1 :
                    // xquery/XQueryParser.g:420:36: p_Annotation
                    this.pushFollow(XQueryParser.FOLLOW_p_Annotation_in_pm_AnnotatedDecl2617);
                    p_Annotation51=this.p_Annotation();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Annotation51.getTree());


                    break;

                default :
                    break loop28;
                }
            } while (true);

            this.pushFollow(XQueryParser.FOLLOW_pg_AnnotatedDecl_in_pm_AnnotatedDecl2620);
            pg_AnnotatedDecl52=this.pg_AnnotatedDecl();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_AnnotatedDecl52.getTree());
            SEMICOLON53=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_AnnotatedDecl2622); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON53_tree = this.adaptor.create(SEMICOLON53);
            this.adaptor.addChild(root_0, SEMICOLON53_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pg_AnnotatedDecl_return: (function() {
        XQueryParser.pg_AnnotatedDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pg_AnnotatedDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:422:1: pg_AnnotatedDecl : ( p_VarDecl | pm_FunctionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl );
    // $ANTLR start "pg_AnnotatedDecl"
    pg_AnnotatedDecl: function() {
        var retval = new XQueryParser.pg_AnnotatedDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_VarDecl54 = null;
         var pm_FunctionDecl55 = null;
         var p_CollectionDecl56 = null;
         var p_IndexDecl57 = null;
         var p_ICDecl58 = null;


        try {
            // xquery/XQueryParser.g:423:9: ( p_VarDecl | pm_FunctionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )
            var alt29=5;
            var LA29_0 = this.input.LA(1);

            if ( (LA29_0==VARIABLE) ) {
                alt29=1;
            }
            else if ( (LA29_0==UPDATING) && ((this.lc(XQU)))) {
                alt29=2;
            }
            else if ( (LA29_0==FUNCTION) ) {
                alt29=2;
            }
            else if ( (LA29_0==COLLECTION) && ((this.lc(ZORBA)))) {
                alt29=3;
            }
            else if ( (LA29_0==INDEX) && ((this.lc(ZORBA)))) {
                alt29=4;
            }
            else if ( (LA29_0==INTEGRITY) && ((this.lc(ZORBA)))) {
                alt29=5;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 29, 0, this.input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // xquery/XQueryParser.g:423:11: p_VarDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_VarDecl_in_pg_AnnotatedDecl2646);
                    p_VarDecl54=this.p_VarDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarDecl54.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:424:11: pm_FunctionDecl
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_FunctionDecl_in_pg_AnnotatedDecl2658);
                    pm_FunctionDecl55=this.pm_FunctionDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_FunctionDecl55.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:425:11: {...}? => p_CollectionDecl
                    root_0 = this.adaptor.nil();

                    if ( !((this.lc(ZORBA))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pg_AnnotatedDecl", "this.lc(ZORBA)");
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_CollectionDecl_in_pg_AnnotatedDecl2673);
                    p_CollectionDecl56=this.p_CollectionDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CollectionDecl56.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:426:11: {...}? => p_IndexDecl
                    root_0 = this.adaptor.nil();

                    if ( !((this.lc(ZORBA))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pg_AnnotatedDecl", "this.lc(ZORBA)");
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_IndexDecl_in_pg_AnnotatedDecl2688);
                    p_IndexDecl57=this.p_IndexDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexDecl57.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:427:11: {...}? => p_ICDecl
                    root_0 = this.adaptor.nil();

                    if ( !((this.lc(ZORBA))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pg_AnnotatedDecl", "this.lc(ZORBA)");
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_ICDecl_in_pg_AnnotatedDecl2703);
                    p_ICDecl58=this.p_ICDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICDecl58.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Annotation_return: (function() {
        XQueryParser.p_Annotation_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Annotation_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:431:1: p_Annotation : ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )? ;
    // $ANTLR start "p_Annotation"
    p_Annotation: function() {
        var retval = new XQueryParser.p_Annotation_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ANN_PERCENT59 = null;
        var LPAREN61 = null;
        var COMMA63 = null;
        var RPAREN65 = null;
         var p_QName60 = null;
         var p_Literal62 = null;
         var p_Literal64 = null;

        var ANN_PERCENT59_tree=null;
        var LPAREN61_tree=null;
        var COMMA63_tree=null;
        var RPAREN65_tree=null;

        try {
            // xquery/XQueryParser.g:432:9: ( ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )? )
            // xquery/XQueryParser.g:432:11: ANN_PERCENT p_QName ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )?
            root_0 = this.adaptor.nil();

            ANN_PERCENT59=this.match(this.input,ANN_PERCENT,XQueryParser.FOLLOW_ANN_PERCENT_in_p_Annotation2729); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            ANN_PERCENT59_tree = this.adaptor.create(ANN_PERCENT59);
            this.adaptor.addChild(root_0, ANN_PERCENT59_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_Annotation2731);
            p_QName60=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName60.getTree());
            // xquery/XQueryParser.g:432:31: ( LPAREN p_Literal ( COMMA p_Literal )* RPAREN )?
            var alt31=2;
            var LA31_0 = this.input.LA(1);

            if ( (LA31_0==LPAREN) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // xquery/XQueryParser.g:432:32: LPAREN p_Literal ( COMMA p_Literal )* RPAREN
                    LPAREN61=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_Annotation2734); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    LPAREN61_tree = this.adaptor.create(LPAREN61);
                    this.adaptor.addChild(root_0, LPAREN61_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_Literal_in_p_Annotation2736);
                    p_Literal62=this.p_Literal();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Literal62.getTree());
                    // xquery/XQueryParser.g:432:49: ( COMMA p_Literal )*
                    loop30:
                    do {
                        var alt30=2;
                        var LA30_0 = this.input.LA(1);

                        if ( (LA30_0==COMMA) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                        case 1 :
                            // xquery/XQueryParser.g:432:50: COMMA p_Literal
                            COMMA63=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_Annotation2739); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            COMMA63_tree = this.adaptor.create(COMMA63);
                            this.adaptor.addChild(root_0, COMMA63_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_Literal_in_p_Annotation2741);
                            p_Literal64=this.p_Literal();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Literal64.getTree());


                            break;

                        default :
                            break loop30;
                        }
                    } while (true);

                    RPAREN65=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_Annotation2745); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    RPAREN65_tree = this.adaptor.create(RPAREN65);
                    this.adaptor.addChild(root_0, RPAREN65_tree);
                    }


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_VarDecl_return: (function() {
        XQueryParser.p_VarDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_VarDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:436:1: p_VarDecl : k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) ) -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) ) ;
    // $ANTLR start "p_VarDecl"
    p_VarDecl: function() {
        var retval = new XQueryParser.p_VarDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR66 = null;
        var BIND67 = null;
        var BIND68 = null;
         var qn = null;
         var td = null;
         var vv = null;
         var vdv = null;

        var k_tree=null;
        var DOLLAR66_tree=null;
        var BIND67_tree=null;
        var BIND68_tree=null;
        var stream_DOLLAR=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DOLLAR");
        var stream_EXTERNAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EXTERNAL");
        var stream_VARIABLE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token VARIABLE");
        var stream_BIND=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token BIND");
        var stream_p_TypeDeclaration=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_TypeDeclaration");
        var stream_p_QName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QName");
        var stream_p_VarDefaultValue=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_VarDefaultValue");
        var stream_p_VarValue=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_VarValue");
        try {
            // xquery/XQueryParser.g:437:9: (k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) ) -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) ) )
            // xquery/XQueryParser.g:437:11: k= VARIABLE DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) )
            k=this.match(this.input,VARIABLE,XQueryParser.FOLLOW_VARIABLE_in_p_VarDecl2775); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_VARIABLE.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR66=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_VarDecl2779); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_DOLLAR.add(DOLLAR66);

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_VarDecl2783);
            qn=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_QName.add(qn.getTree());
            // xquery/XQueryParser.g:437:57: (td= p_TypeDeclaration )?
            var alt32=2;
            var LA32_0 = this.input.LA(1);

            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // xquery/XQueryParser.g:437:57: td= p_TypeDeclaration
                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_VarDecl2787);
                    td=this.p_TypeDeclaration();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_TypeDeclaration.add(td.getTree());


                    break;

            }

            // xquery/XQueryParser.g:437:77: ( ( BIND vv= p_VarValue ) | (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? ) )
            var alt34=2;
            var LA34_0 = this.input.LA(1);

            if ( (LA34_0==BIND) ) {
                alt34=1;
            }
            else if ( (LA34_0==EXTERNAL) ) {
                alt34=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 34, 0, this.input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // xquery/XQueryParser.g:437:78: ( BIND vv= p_VarValue )
                    // xquery/XQueryParser.g:437:78: ( BIND vv= p_VarValue )
                    // xquery/XQueryParser.g:437:79: BIND vv= p_VarValue
                    BIND67=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_VarDecl2792); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_BIND.add(BIND67);

                    this.pushFollow(XQueryParser.FOLLOW_p_VarValue_in_p_VarDecl2796);
                    vv=this.p_VarValue();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_VarValue.add(vv.getTree());





                    break;
                case 2 :
                    // xquery/XQueryParser.g:437:101: (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? )
                    // xquery/XQueryParser.g:437:101: (k= EXTERNAL ( BIND vdv= p_VarDefaultValue )? )
                    // xquery/XQueryParser.g:437:102: k= EXTERNAL ( BIND vdv= p_VarDefaultValue )?
                    k=this.match(this.input,EXTERNAL,XQueryParser.FOLLOW_EXTERNAL_in_p_VarDecl2804); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_EXTERNAL.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    // xquery/XQueryParser.g:437:128: ( BIND vdv= p_VarDefaultValue )?
                    var alt33=2;
                    var LA33_0 = this.input.LA(1);

                    if ( (LA33_0==BIND) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // xquery/XQueryParser.g:437:129: BIND vdv= p_VarDefaultValue
                            BIND68=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_VarDecl2809); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_BIND.add(BIND68);

                            this.pushFollow(XQueryParser.FOLLOW_p_VarDefaultValue_in_p_VarDecl2813);
                            vdv=this.p_VarDefaultValue();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_p_VarDefaultValue.add(vdv.getTree());


                            break;

                    }






                    break;

            }



            // AST REWRITE
            // elements: vdv, td, qn, vv
            // token labels: 
            // rule labels: qn, vv, retval, vdv, td
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_qn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token qn",qn!=null?qn.tree:null);
            var stream_vv=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token vv",vv!=null?vv.tree:null);
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_vdv=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token vdv",vdv!=null?vdv.tree:null);
            var stream_td=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token td",td!=null?td.tree:null);

            root_0 = this.adaptor.nil();
            // 438:17: -> ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) )
            {
                // xquery/XQueryParser.g:438:20: ^( VarDecl $qn ^( VarType ( $td)? ) ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) ) )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(VarDecl, "VarDecl"), root_1);

                this.adaptor.addChild(root_1, stream_qn.nextTree());
                // xquery/XQueryParser.g:438:34: ^( VarType ( $td)? )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(VarType, "VarType"), root_2);

                // xquery/XQueryParser.g:438:44: ( $td)?
                if ( stream_td.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_td.nextTree());

                }
                stream_td.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:438:50: ^( VarValue ( $vv)? ^( VarDefaultValue ( $vdv)? ) )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(VarValue, "VarValue"), root_2);

                // xquery/XQueryParser.g:438:61: ( $vv)?
                if ( stream_vv.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_vv.nextTree());

                }
                stream_vv.reset();
                // xquery/XQueryParser.g:438:66: ^( VarDefaultValue ( $vdv)? )
                {
                var root_3 = this.adaptor.nil();
                root_3 = this.adaptor.becomeRoot(this.adaptor.create(VarDefaultValue, "VarDefaultValue"), root_3);

                // xquery/XQueryParser.g:438:84: ( $vdv)?
                if ( stream_vdv.hasNext() ) {
                    this.adaptor.addChild(root_3, stream_vdv.nextTree());

                }
                stream_vdv.reset();

                this.adaptor.addChild(root_2, root_3);
                }

                this.adaptor.addChild(root_1, root_2);
                }

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_VarValue_return: (function() {
        XQueryParser.p_VarValue_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_VarValue_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:442:1: p_VarValue : p_ExprSingle[true] ;
    // $ANTLR start "p_VarValue"
    p_VarValue: function() {
        var retval = new XQueryParser.p_VarValue_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ExprSingle69 = null;


        try {
            // xquery/XQueryParser.g:443:9: ( p_ExprSingle[true] )
            // xquery/XQueryParser.g:443:11: p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_VarValue2892);
            p_ExprSingle69=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle69.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_VarDefaultValue_return: (function() {
        XQueryParser.p_VarDefaultValue_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_VarDefaultValue_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:447:1: p_VarDefaultValue : p_ExprSingle[true] ;
    // $ANTLR start "p_VarDefaultValue"
    p_VarDefaultValue: function() {
        var retval = new XQueryParser.p_VarDefaultValue_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ExprSingle70 = null;


        try {
            // xquery/XQueryParser.g:448:9: ( p_ExprSingle[true] )
            // xquery/XQueryParser.g:448:11: p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_VarDefaultValue2919);
            p_ExprSingle70=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle70.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_ContextItemDecl_return: (function() {
        XQueryParser.pm_ContextItemDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_ContextItemDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:452:1: pm_ContextItemDecl : k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON ;
    // $ANTLR start "pm_ContextItemDecl"
    pm_ContextItemDecl: function() {
        var retval = new XQueryParser.pm_ContextItemDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var BIND72 = null;
        var BIND74 = null;
        var SEMICOLON76 = null;
         var p_ItemType71 = null;
         var p_VarValue73 = null;
         var p_VarDefaultValue75 = null;

        var k_tree=null;
        var BIND72_tree=null;
        var BIND74_tree=null;
        var SEMICOLON76_tree=null;

        try {
            // xquery/XQueryParser.g:453:9: (k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON )
            // xquery/XQueryParser.g:453:11: k= DECLARE k= CONTEXT k= ITEM (k= AS p_ItemType )? ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) ) SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_ContextItemDecl2948); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,CONTEXT,XQueryParser.FOLLOW_CONTEXT_in_pm_ContextItemDecl2954); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,ITEM,XQueryParser.FOLLOW_ITEM_in_pm_ContextItemDecl2960); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:453:83: (k= AS p_ItemType )?
            var alt35=2;
            var LA35_0 = this.input.LA(1);

            if ( (LA35_0==AS) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // xquery/XQueryParser.g:453:84: k= AS p_ItemType
                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_pm_ContextItemDecl2967); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_ItemType_in_pm_ContextItemDecl2971);
                    p_ItemType71=this.p_ItemType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ItemType71.getTree());


                    break;

            }

            // xquery/XQueryParser.g:453:117: ( ( BIND p_VarValue ) | (k= EXTERNAL ( BIND p_VarDefaultValue )? ) )
            var alt37=2;
            var LA37_0 = this.input.LA(1);

            if ( (LA37_0==BIND) ) {
                alt37=1;
            }
            else if ( (LA37_0==EXTERNAL) ) {
                alt37=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 37, 0, this.input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // xquery/XQueryParser.g:453:118: ( BIND p_VarValue )
                    // xquery/XQueryParser.g:453:118: ( BIND p_VarValue )
                    // xquery/XQueryParser.g:453:119: BIND p_VarValue
                    BIND72=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_pm_ContextItemDecl2977); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    BIND72_tree = this.adaptor.create(BIND72);
                    this.adaptor.addChild(root_0, BIND72_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_VarValue_in_pm_ContextItemDecl2979);
                    p_VarValue73=this.p_VarValue();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarValue73.getTree());





                    break;
                case 2 :
                    // xquery/XQueryParser.g:453:138: (k= EXTERNAL ( BIND p_VarDefaultValue )? )
                    // xquery/XQueryParser.g:453:138: (k= EXTERNAL ( BIND p_VarDefaultValue )? )
                    // xquery/XQueryParser.g:453:139: k= EXTERNAL ( BIND p_VarDefaultValue )?
                    k=this.match(this.input,EXTERNAL,XQueryParser.FOLLOW_EXTERNAL_in_pm_ContextItemDecl2987); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    // xquery/XQueryParser.g:453:165: ( BIND p_VarDefaultValue )?
                    var alt36=2;
                    var LA36_0 = this.input.LA(1);

                    if ( (LA36_0==BIND) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // xquery/XQueryParser.g:453:166: BIND p_VarDefaultValue
                            BIND74=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_pm_ContextItemDecl2992); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            BIND74_tree = this.adaptor.create(BIND74);
                            this.adaptor.addChild(root_0, BIND74_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_VarDefaultValue_in_pm_ContextItemDecl2994);
                            p_VarDefaultValue75=this.p_VarDefaultValue();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarDefaultValue75.getTree());


                            break;

                    }






                    break;

            }

            SEMICOLON76=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_ContextItemDecl3000); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON76_tree = this.adaptor.create(SEMICOLON76);
            this.adaptor.addChild(root_0, SEMICOLON76_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_FunctionDecl_return: (function() {
        XQueryParser.pm_FunctionDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_FunctionDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:458:1: pm_FunctionDecl : ({...}? =>k= UPDATING )? k= FUNCTION qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL ) -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? ) ;
    // $ANTLR start "pm_FunctionDecl"
    pm_FunctionDecl: function() {
        var retval = new XQueryParser.pm_FunctionDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LPAREN77 = null;
        var RPAREN78 = null;
        var LBRACKET79 = null;
        var RBRACKET80 = null;
         var qn = null;
         var pl = null;
         var st = null;
         var soe = null;

        var k_tree=null;
        var LPAREN77_tree=null;
        var RPAREN78_tree=null;
        var LBRACKET79_tree=null;
        var RBRACKET80_tree=null;
        var stream_FUNCTION=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token FUNCTION");
        var stream_LBRACKET=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LBRACKET");
        var stream_AS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token AS");
        var stream_RPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RPAREN");
        var stream_EXTERNAL=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EXTERNAL");
        var stream_RBRACKET=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RBRACKET");
        var stream_LPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LPAREN");
        var stream_UPDATING=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token UPDATING");
        var stream_p_StatementsAndOptionalExpr=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_StatementsAndOptionalExpr");
        var stream_p_ParamList=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_ParamList");
        var stream_pg_FQName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pg_FQName");
        var stream_p_SequenceType=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_SequenceType");
        try {
            // xquery/XQueryParser.g:459:9: ( ({...}? =>k= UPDATING )? k= FUNCTION qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL ) -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? ) )
            // xquery/XQueryParser.g:459:11: ({...}? =>k= UPDATING )? k= FUNCTION qn= pg_FQName LPAREN (pl= p_ParamList )? RPAREN (k= AS st= p_SequenceType )? ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL )
            // xquery/XQueryParser.g:459:11: ({...}? =>k= UPDATING )?
            var alt38=2;
            var LA38_0 = this.input.LA(1);

            if ( (LA38_0==UPDATING) && ((this.lc(XQU)))) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // xquery/XQueryParser.g:459:12: {...}? =>k= UPDATING
                    if ( !((this.lc(XQU))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pm_FunctionDecl", "this.lc(XQU)");
                    }
                    k=this.match(this.input,UPDATING,XQueryParser.FOLLOW_UPDATING_in_pm_FunctionDecl3033); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_UPDATING.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }


                    break;

            }

            k=this.match(this.input,FUNCTION,XQueryParser.FOLLOW_FUNCTION_in_pm_FunctionDecl3041); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_FUNCTION.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_pg_FQName_in_pm_FunctionDecl3047);
            qn=this.pg_FQName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_pg_FQName.add(qn.getTree());
            LPAREN77=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_pm_FunctionDecl3049); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_LPAREN.add(LPAREN77);

            // xquery/XQueryParser.g:459:106: (pl= p_ParamList )?
            var alt39=2;
            var LA39_0 = this.input.LA(1);

            if ( (LA39_0==DOLLAR) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // xquery/XQueryParser.g:459:106: pl= p_ParamList
                    this.pushFollow(XQueryParser.FOLLOW_p_ParamList_in_pm_FunctionDecl3053);
                    pl=this.p_ParamList();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_ParamList.add(pl.getTree());


                    break;

            }

            RPAREN78=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_pm_FunctionDecl3056); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_RPAREN.add(RPAREN78);

            // xquery/XQueryParser.g:459:127: (k= AS st= p_SequenceType )?
            var alt40=2;
            var LA40_0 = this.input.LA(1);

            if ( (LA40_0==AS) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // xquery/XQueryParser.g:459:128: k= AS st= p_SequenceType
                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_pm_FunctionDecl3061); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_AS.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_pm_FunctionDecl3067);
                    st=this.p_SequenceType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_SequenceType.add(st.getTree());


                    break;

            }

            // xquery/XQueryParser.g:459:168: ( LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET | k= EXTERNAL )
            var alt41=2;
            var LA41_0 = this.input.LA(1);

            if ( (LA41_0==LBRACKET) ) {
                alt41=1;
            }
            else if ( (LA41_0==EXTERNAL) ) {
                alt41=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 41, 0, this.input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // xquery/XQueryParser.g:459:169: LBRACKET soe= p_StatementsAndOptionalExpr RBRACKET
                    LBRACKET79=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_FunctionDecl3072); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_LBRACKET.add(LBRACKET79);

                    this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_FunctionDecl3076);
                    soe=this.p_StatementsAndOptionalExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_StatementsAndOptionalExpr.add(soe.getTree());
                    RBRACKET80=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_FunctionDecl3078); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_RBRACKET.add(RBRACKET80);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:459:221: k= EXTERNAL
                    k=this.match(this.input,EXTERNAL,XQueryParser.FOLLOW_EXTERNAL_in_pm_FunctionDecl3084); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_EXTERNAL.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }


                    break;

            }



            // AST REWRITE
            // elements: st, pl, qn, soe
            // token labels: 
            // rule labels: soe, qn, retval, pl, st
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_soe=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token soe",soe!=null?soe.tree:null);
            var stream_qn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token qn",qn!=null?qn.tree:null);
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_pl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token pl",pl!=null?pl.tree:null);
            var stream_st=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token st",st!=null?st.tree:null);

            root_0 = this.adaptor.nil();
            // 460:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? )
            {
                // xquery/XQueryParser.g:460:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $st)? ) ( $soe)? )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                this.adaptor.addChild(root_1, stream_qn.nextTree());
                // xquery/XQueryParser.g:460:39: ^( ParamList ( $pl)? )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(ParamList, "ParamList"), root_2);

                // xquery/XQueryParser.g:460:51: ( $pl)?
                if ( stream_pl.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_pl.nextTree());

                }
                stream_pl.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:460:57: ^( ReturnType ( $st)? )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(ReturnType, "ReturnType"), root_2);

                // xquery/XQueryParser.g:460:70: ( $st)?
                if ( stream_st.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_st.nextTree());

                }
                stream_st.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:460:76: ( $soe)?
                if ( stream_soe.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_soe.nextTree());

                }
                stream_soe.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ParamList_return: (function() {
        XQueryParser.p_ParamList_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ParamList_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:464:1: p_ParamList : p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ ;
    // $ANTLR start "p_ParamList"
    p_ParamList: function() {
        var retval = new XQueryParser.p_ParamList_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var COMMA81 = null;
        var list_p=null;
        var p = null;
        var COMMA81_tree=null;
        var stream_COMMA=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COMMA");
        var stream_p_Param=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_Param");
        try {
            // xquery/XQueryParser.g:465:9: (p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ )
            // xquery/XQueryParser.g:465:11: p+= p_Param ( COMMA p+= p_Param )*
            this.pushFollow(XQueryParser.FOLLOW_p_Param_in_p_ParamList3161);
            p=this.p_Param();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_Param.add(p.getTree());
            if (org.antlr.lang.isNull(list_p)) list_p = [];
            list_p.push(p.getTree());

            // xquery/XQueryParser.g:465:22: ( COMMA p+= p_Param )*
            loop42:
            do {
                var alt42=2;
                var LA42_0 = this.input.LA(1);

                if ( (LA42_0==COMMA) ) {
                    alt42=1;
                }


                switch (alt42) {
                case 1 :
                    // xquery/XQueryParser.g:465:23: COMMA p+= p_Param
                    COMMA81=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_ParamList3164); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_COMMA.add(COMMA81);

                    this.pushFollow(XQueryParser.FOLLOW_p_Param_in_p_ParamList3168);
                    p=this.p_Param();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_Param.add(p.getTree());
                    if (org.antlr.lang.isNull(list_p)) list_p = [];
                    list_p.push(p.getTree());



                    break;

                default :
                    break loop42;
                }
            } while (true);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: p
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_p=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token p",list_p);
            root_0 = this.adaptor.nil();
            // 466:17: -> ( $p)+
            {
                if ( !(stream_p.hasNext()) ) {
                    throw new org.antlr.runtime.tree.RewriteEarlyExitException();
                }
                while ( stream_p.hasNext() ) {
                    this.adaptor.addChild(root_0, stream_p.nextTree());

                }
                stream_p.reset();

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Param_return: (function() {
        XQueryParser.p_Param_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Param_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:470:1: p_Param : DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) ;
    // $ANTLR start "p_Param"
    p_Param: function() {
        var retval = new XQueryParser.p_Param_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var DOLLAR82 = null;
         var qn = null;
         var td = null;

        var DOLLAR82_tree=null;
        var stream_DOLLAR=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token DOLLAR");
        var stream_p_TypeDeclaration=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_TypeDeclaration");
        var stream_p_QName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QName");
        try {
            // xquery/XQueryParser.g:471:9: ( DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) )
            // xquery/XQueryParser.g:471:11: DOLLAR qn= p_QName (td= p_TypeDeclaration )?
            DOLLAR82=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_Param3226); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_DOLLAR.add(DOLLAR82);

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_Param3230);
            qn=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_QName.add(qn.getTree());
            // xquery/XQueryParser.g:471:31: (td= p_TypeDeclaration )?
            var alt43=2;
            var LA43_0 = this.input.LA(1);

            if ( (LA43_0==AS) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // xquery/XQueryParser.g:471:31: td= p_TypeDeclaration
                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_Param3234);
                    td=this.p_TypeDeclaration();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_TypeDeclaration.add(td.getTree());


                    break;

            }



            // AST REWRITE
            // elements: qn, td
            // token labels: 
            // rule labels: qn, retval, td
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_qn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token qn",qn!=null?qn.tree:null);
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_td=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token td",td!=null?td.tree:null);

            root_0 = this.adaptor.nil();
            // 472:17: -> ^( Param $qn ( $td)? )
            {
                // xquery/XQueryParser.g:472:20: ^( Param $qn ( $td)? )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(Param, "Param"), root_1);

                this.adaptor.addChild(root_1, stream_qn.nextTree());
                // xquery/XQueryParser.g:472:32: ( $td)?
                if ( stream_td.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_FunctionBody_return: (function() {
        XQueryParser.pm_FunctionBody_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_FunctionBody_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:476:1: pm_FunctionBody : p_EnclosedExpr ;
    // $ANTLR start "pm_FunctionBody"
    pm_FunctionBody: function() {
        var retval = new XQueryParser.pm_FunctionBody_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_EnclosedExpr83 = null;


        try {
            // xquery/XQueryParser.g:477:9: ( p_EnclosedExpr )
            // xquery/XQueryParser.g:477:11: p_EnclosedExpr
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_EnclosedExpr_in_pm_FunctionBody3290);
            p_EnclosedExpr83=this.p_EnclosedExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_EnclosedExpr83.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_EnclosedExpr_return: (function() {
        XQueryParser.p_EnclosedExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_EnclosedExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:482:1: p_EnclosedExpr : LBRACKET p_Expr[true,true] RBRACKET -> ^( EnclosedExpr p_Expr ) ;
    // $ANTLR start "p_EnclosedExpr"
    p_EnclosedExpr: function() {
        var retval = new XQueryParser.p_EnclosedExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LBRACKET84 = null;
        var RBRACKET86 = null;
         var p_Expr85 = null;

        var LBRACKET84_tree=null;
        var RBRACKET86_tree=null;
        var stream_LBRACKET=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LBRACKET");
        var stream_RBRACKET=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RBRACKET");
        var stream_p_Expr=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_Expr");
        try {
            // xquery/XQueryParser.g:483:9: ( LBRACKET p_Expr[true,true] RBRACKET -> ^( EnclosedExpr p_Expr ) )
            // xquery/XQueryParser.g:483:11: LBRACKET p_Expr[true,true] RBRACKET
            LBRACKET84=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_EnclosedExpr3317); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_LBRACKET.add(LBRACKET84);

            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_EnclosedExpr3319);
            p_Expr85=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_Expr.add(p_Expr85.getTree());
            RBRACKET86=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_EnclosedExpr3322); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_RBRACKET.add(RBRACKET86);



            // AST REWRITE
            // elements: p_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 484:17: -> ^( EnclosedExpr p_Expr )
            {
                // xquery/XQueryParser.g:484:20: ^( EnclosedExpr p_Expr )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(EnclosedExpr, "EnclosedExpr"), root_1);

                this.adaptor.addChild(root_1, stream_p_Expr.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_OptionDecl_return: (function() {
        XQueryParser.pm_OptionDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_OptionDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:488:1: pm_OptionDecl : k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON ;
    // $ANTLR start "pm_OptionDecl"
    pm_OptionDecl: function() {
        var retval = new XQueryParser.pm_OptionDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON89 = null;
         var p_QName87 = null;
         var p_StringLiteral88 = null;

        var k_tree=null;
        var SEMICOLON89_tree=null;

        try {
            // xquery/XQueryParser.g:489:9: (k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON )
            // xquery/XQueryParser.g:489:11: k= DECLARE k= OPTION p_QName p_StringLiteral SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_OptionDecl3374); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,OPTION,XQueryParser.FOLLOW_OPTION_in_pm_OptionDecl3380); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_pm_OptionDecl3384);
            p_QName87=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName87.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_pm_OptionDecl3386);
            p_StringLiteral88=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral88.getTree());
            SEMICOLON89=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_OptionDecl3388); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON89_tree = this.adaptor.create(SEMICOLON89);
            this.adaptor.addChild(root_0, SEMICOLON89_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_QueryBody_return: (function() {
        XQueryParser.pm_QueryBody_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_QueryBody_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:493:1: pm_QueryBody : ({...}? => p_Program | p_Expr[true,true] );
    // $ANTLR start "pm_QueryBody"
    pm_QueryBody: function() {
        var retval = new XQueryParser.pm_QueryBody_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Program90 = null;
         var p_Expr91 = null;


        try {
            // xquery/XQueryParser.g:494:9: ({...}? => p_Program | p_Expr[true,true] )
            var alt44=2;
            alt44 = this.dfa44.predict(this.input);
            switch (alt44) {
                case 1 :
                    // xquery/XQueryParser.g:494:11: {...}? => p_Program
                    root_0 = this.adaptor.nil();

                    if ( !((this.lc(XQS))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "pm_QueryBody", "this.lc(XQS)");
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_Program_in_pm_QueryBody3417);
                    p_Program90=this.p_Program();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Program90.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:495:11: p_Expr[true,true]
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_pm_QueryBody3429);
                    p_Expr91=this.p_Expr(true, true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr91.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Expr_return: (function() {
        XQueryParser.p_Expr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Expr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:505:1: p_Expr[strict, allowConcat] : es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )* ;
    // $ANTLR start "p_Expr"
    p_Expr: function(strict, allowConcat) {
        var retval = new XQueryParser.p_Expr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var COMMA92 = null;
         var es = null;
         var p_ExprSingle93 = null;

        var COMMA92_tree=null;

        try {
            // xquery/XQueryParser.g:506:9: (es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )* )
            // xquery/XQueryParser.g:506:11: es= p_ExprSingle[$strict] ( COMMA p_ExprSingle[$strict] )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_Expr3465);
            es=this.p_ExprSingle(strict);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, es.getTree());
            if ( this.state.backtracking===0 ) {
               if (!allowConcat) throw new Exception(); 
            }
            // xquery/XQueryParser.g:507:11: ( COMMA p_ExprSingle[$strict] )*
            loop45:
            do {
                var alt45=2;
                var LA45_0 = this.input.LA(1);

                if ( (LA45_0==COMMA) ) {
                    alt45=1;
                }


                switch (alt45) {
                case 1 :
                    // xquery/XQueryParser.g:507:12: COMMA p_ExprSingle[$strict]
                    COMMA92=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_Expr3481); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COMMA92_tree = this.adaptor.create(COMMA92);
                    this.adaptor.addChild(root_0, COMMA92_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_Expr3483);
                    p_ExprSingle93=this.p_ExprSingle(strict);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle93.getTree());


                    break;

                default :
                    break loop45;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (e) {

              if(e instanceof org.antlr.runtime.RecognitionException) {
                //console.log("catch1");
                reportError(e);
                recover(this.input, e);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), e);
              } else if(e instanceof Exception) {
                //console.log("catch2");
                root_0 = this.adaptor.nil();
                this.adaptor.addChild(root_0, es.getTree());
                retval.stop = this.input.LT(-1);
                retval.tree = this.adaptor.rulePostProcessing(root_0);
                this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
              } else {
                throw e;
              }

        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ExprSingle_return: (function() {
        XQueryParser.p_ExprSingle_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ExprSingle_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:529:1: p_ExprSingle[strict] : ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple );
    // $ANTLR start "p_ExprSingle"
    p_ExprSingle: function(strict) {
        var retval = new XQueryParser.p_ExprSingle_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_FLWORHybrid94 = null;
         var p_IfHybrid95 = null;
         var p_SwitchHybrid96 = null;
         var p_TypeswitchHybrid97 = null;
         var p_TryCatchHybrid98 = null;
         var p_ExprSimple99 = null;


        try {
            // xquery/XQueryParser.g:530:9: ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple )
            var alt46=6;
            alt46 = this.dfa46.predict(this.input);
            switch (alt46) {
                case 1 :
                    // xquery/XQueryParser.g:530:11: ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict]
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FLWORHybrid_in_p_ExprSingle3550);
                    p_FLWORHybrid94=this.p_FLWORHybrid(strict);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FLWORHybrid94.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:531:11: ( IF LPAREN )=> p_IfHybrid[$strict]
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_IfHybrid_in_p_ExprSingle3580);
                    p_IfHybrid95=this.p_IfHybrid(strict);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IfHybrid95.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:532:11: ( SWITCH LPAREN )=> p_SwitchHybrid[$strict]
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchHybrid_in_p_ExprSingle3606);
                    p_SwitchHybrid96=this.p_SwitchHybrid(strict);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchHybrid96.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:533:11: ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict]
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_TypeswitchHybrid_in_p_ExprSingle3628);
                    p_TypeswitchHybrid97=this.p_TypeswitchHybrid(strict);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeswitchHybrid97.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:534:11: ( TRY LBRACKET )=> p_TryCatchHybrid[$strict]
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_TryCatchHybrid_in_p_ExprSingle3655);
                    p_TryCatchHybrid98=this.p_TryCatchHybrid(strict);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TryCatchHybrid98.getTree());


                    break;
                case 6 :
                    // xquery/XQueryParser.g:535:11: p_ExprSimple
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSimple_in_p_ExprSingle3668);
                    p_ExprSimple99=this.p_ExprSimple();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSimple99.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FLWORHybrid_return: (function() {
        XQueryParser.p_FLWORHybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FLWORHybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:539:1: p_FLWORHybrid[strict] : p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict] ;
    // $ANTLR start "p_FLWORHybrid"
    p_FLWORHybrid: function(strict) {
        var retval = new XQueryParser.p_FLWORHybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_InitialClause100 = null;
         var p_IntermediateClause101 = null;
         var p_ReturnHybrid102 = null;


        try {
            // xquery/XQueryParser.g:540:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict] )
            // xquery/XQueryParser.g:540:11: p_InitialClause ( p_IntermediateClause )* p_ReturnHybrid[$strict]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_InitialClause_in_p_FLWORHybrid3695);
            p_InitialClause100=this.p_InitialClause();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InitialClause100.getTree());
            // xquery/XQueryParser.g:540:27: ( p_IntermediateClause )*
            loop47:
            do {
                var alt47=2;
                var LA47_0 = this.input.LA(1);

                if ( (LA47_0==FOR||LA47_0==LET||LA47_0==ORDER||LA47_0==STABLE||LA47_0==WHERE||LA47_0==COUNT||LA47_0==GROUP) ) {
                    alt47=1;
                }


                switch (alt47) {
                case 1 :
                    // xquery/XQueryParser.g:540:27: p_IntermediateClause
                    this.pushFollow(XQueryParser.FOLLOW_p_IntermediateClause_in_p_FLWORHybrid3697);
                    p_IntermediateClause101=this.p_IntermediateClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IntermediateClause101.getTree());


                    break;

                default :
                    break loop47;
                }
            } while (true);

            this.pushFollow(XQueryParser.FOLLOW_p_ReturnHybrid_in_p_FLWORHybrid3700);
            p_ReturnHybrid102=this.p_ReturnHybrid(strict);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReturnHybrid102.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_InitialClause_return: (function() {
        XQueryParser.p_InitialClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_InitialClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:544:1: p_InitialClause : ( p_ForClause | p_LetClause | p_WindowClause );
    // $ANTLR start "p_InitialClause"
    p_InitialClause: function() {
        var retval = new XQueryParser.p_InitialClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ForClause103 = null;
         var p_LetClause104 = null;
         var p_WindowClause105 = null;


        try {
            // xquery/XQueryParser.g:545:9: ( p_ForClause | p_LetClause | p_WindowClause )
            var alt48=3;
            var LA48_0 = this.input.LA(1);

            if ( (LA48_0==FOR) ) {
                var LA48_1 = this.input.LA(2);

                if ( (LA48_1==DOLLAR) ) {
                    alt48=1;
                }
                else if ( (LA48_1==SLIDING||LA48_1==TUMBLING) ) {
                    alt48=3;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 48, 1, this.input);

                    throw nvae;
                }
            }
            else if ( (LA48_0==LET) ) {
                alt48=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 48, 0, this.input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // xquery/XQueryParser.g:545:11: p_ForClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ForClause_in_p_InitialClause3727);
                    p_ForClause103=this.p_ForClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForClause103.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:545:25: p_LetClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_LetClause_in_p_InitialClause3731);
                    p_LetClause104=this.p_LetClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_LetClause104.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:545:39: p_WindowClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_WindowClause_in_p_InitialClause3735);
                    p_WindowClause105=this.p_WindowClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowClause105.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IntermediateClause_return: (function() {
        XQueryParser.p_IntermediateClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IntermediateClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:549:1: p_IntermediateClause : ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause );
    // $ANTLR start "p_IntermediateClause"
    p_IntermediateClause: function() {
        var retval = new XQueryParser.p_IntermediateClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_InitialClause106 = null;
         var p_WhereClause107 = null;
         var p_GroupByClause108 = null;
         var p_OrderByClause109 = null;
         var p_CountClause110 = null;


        try {
            // xquery/XQueryParser.g:550:9: ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause )
            var alt49=5;
            switch ( this.input.LA(1) ) {
            case FOR:
            case LET:
                alt49=1;
                break;
            case WHERE:
                alt49=2;
                break;
            case GROUP:
                alt49=3;
                break;
            case ORDER:
            case STABLE:
                alt49=4;
                break;
            case COUNT:
                alt49=5;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 49, 0, this.input);

                throw nvae;
            }

            switch (alt49) {
                case 1 :
                    // xquery/XQueryParser.g:550:11: p_InitialClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_InitialClause_in_p_IntermediateClause3761);
                    p_InitialClause106=this.p_InitialClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InitialClause106.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:550:29: p_WhereClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_WhereClause_in_p_IntermediateClause3765);
                    p_WhereClause107=this.p_WhereClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WhereClause107.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:550:45: p_GroupByClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_GroupByClause_in_p_IntermediateClause3769);
                    p_GroupByClause108=this.p_GroupByClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GroupByClause108.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:550:63: p_OrderByClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_OrderByClause_in_p_IntermediateClause3773);
                    p_OrderByClause109=this.p_OrderByClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderByClause109.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:550:81: p_CountClause
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_CountClause_in_p_IntermediateClause3777);
                    p_CountClause110=this.p_CountClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CountClause110.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_StringConcatExpr_return: (function() {
        XQueryParser.p_StringConcatExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_StringConcatExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:554:1: p_StringConcatExpr : p_RangeExpr ( CONCAT p_RangeExpr )* ;
    // $ANTLR start "p_StringConcatExpr"
    p_StringConcatExpr: function() {
        var retval = new XQueryParser.p_StringConcatExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var CONCAT112 = null;
         var p_RangeExpr111 = null;
         var p_RangeExpr113 = null;

        var CONCAT112_tree=null;

        try {
            // xquery/XQueryParser.g:555:4: ( p_RangeExpr ( CONCAT p_RangeExpr )* )
            // xquery/XQueryParser.g:555:6: p_RangeExpr ( CONCAT p_RangeExpr )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_RangeExpr_in_p_StringConcatExpr3798);
            p_RangeExpr111=this.p_RangeExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RangeExpr111.getTree());
            // xquery/XQueryParser.g:555:18: ( CONCAT p_RangeExpr )*
            loop50:
            do {
                var alt50=2;
                var LA50_0 = this.input.LA(1);

                if ( (LA50_0==CONCAT) ) {
                    alt50=1;
                }


                switch (alt50) {
                case 1 :
                    // xquery/XQueryParser.g:555:20: CONCAT p_RangeExpr
                    CONCAT112=this.match(this.input,CONCAT,XQueryParser.FOLLOW_CONCAT_in_p_StringConcatExpr3802); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    CONCAT112_tree = this.adaptor.create(CONCAT112);
                    this.adaptor.addChild(root_0, CONCAT112_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_RangeExpr_in_p_StringConcatExpr3804);
                    p_RangeExpr113=this.p_RangeExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RangeExpr113.getTree());


                    break;

                default :
                    break loop50;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ForClause_return: (function() {
        XQueryParser.p_ForClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ForClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:560:1: p_ForClause : k= FOR p_ForBinding ( COMMA p_ForBinding )* ;
    // $ANTLR start "p_ForClause"
    p_ForClause: function() {
        var retval = new XQueryParser.p_ForClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var COMMA115 = null;
         var p_ForBinding114 = null;
         var p_ForBinding116 = null;

        var k_tree=null;
        var COMMA115_tree=null;

        try {
            // xquery/XQueryParser.g:561:9: (k= FOR p_ForBinding ( COMMA p_ForBinding )* )
            // xquery/XQueryParser.g:561:11: k= FOR p_ForBinding ( COMMA p_ForBinding )*
            root_0 = this.adaptor.nil();

            k=this.match(this.input,FOR,XQueryParser.FOLLOW_FOR_in_p_ForClause3831); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ForBinding_in_p_ForClause3835);
            p_ForBinding114=this.p_ForBinding();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForBinding114.getTree());
            // xquery/XQueryParser.g:561:45: ( COMMA p_ForBinding )*
            loop51:
            do {
                var alt51=2;
                var LA51_0 = this.input.LA(1);

                if ( (LA51_0==COMMA) ) {
                    alt51=1;
                }


                switch (alt51) {
                case 1 :
                    // xquery/XQueryParser.g:561:46: COMMA p_ForBinding
                    COMMA115=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_ForClause3838); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COMMA115_tree = this.adaptor.create(COMMA115);
                    this.adaptor.addChild(root_0, COMMA115_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_ForBinding_in_p_ForClause3840);
                    p_ForBinding116=this.p_ForBinding();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForBinding116.getTree());


                    break;

                default :
                    break loop51;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ForBinding_return: (function() {
        XQueryParser.p_ForBinding_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ForBinding_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:565:1: p_ForBinding : DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true] ;
    // $ANTLR start "p_ForBinding"
    p_ForBinding: function() {
        var retval = new XQueryParser.p_ForBinding_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR117 = null;
         var p_VarName118 = null;
         var p_TypeDeclaration119 = null;
         var p_AllowingEmpty120 = null;
         var p_PositionalVar121 = null;
         var p_FTScoreVar122 = null;
         var p_ExprSingle123 = null;

        var k_tree=null;
        var DOLLAR117_tree=null;

        try {
            // xquery/XQueryParser.g:566:9: ( DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true] )
            // xquery/XQueryParser.g:566:11: DOLLAR p_VarName ( p_TypeDeclaration )? ( p_AllowingEmpty )? ( p_PositionalVar )? ( p_FTScoreVar )? k= IN p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            DOLLAR117=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ForBinding3868); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR117_tree = this.adaptor.create(DOLLAR117);
            this.adaptor.addChild(root_0, DOLLAR117_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_ForBinding3870);
            p_VarName118=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName118.getTree());
            // xquery/XQueryParser.g:566:28: ( p_TypeDeclaration )?
            var alt52=2;
            var LA52_0 = this.input.LA(1);

            if ( (LA52_0==AS) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // xquery/XQueryParser.g:566:28: p_TypeDeclaration
                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_ForBinding3872);
                    p_TypeDeclaration119=this.p_TypeDeclaration();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration119.getTree());


                    break;

            }

            // xquery/XQueryParser.g:566:47: ( p_AllowingEmpty )?
            var alt53=2;
            var LA53_0 = this.input.LA(1);

            if ( (LA53_0==ALLOWING) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // xquery/XQueryParser.g:566:47: p_AllowingEmpty
                    this.pushFollow(XQueryParser.FOLLOW_p_AllowingEmpty_in_p_ForBinding3875);
                    p_AllowingEmpty120=this.p_AllowingEmpty();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AllowingEmpty120.getTree());


                    break;

            }

            // xquery/XQueryParser.g:566:64: ( p_PositionalVar )?
            var alt54=2;
            var LA54_0 = this.input.LA(1);

            if ( (LA54_0==AT) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // xquery/XQueryParser.g:566:64: p_PositionalVar
                    this.pushFollow(XQueryParser.FOLLOW_p_PositionalVar_in_p_ForBinding3878);
                    p_PositionalVar121=this.p_PositionalVar();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PositionalVar121.getTree());


                    break;

            }

            // xquery/XQueryParser.g:566:81: ( p_FTScoreVar )?
            var alt55=2;
            var LA55_0 = this.input.LA(1);

            if ( (LA55_0==SCORE) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // xquery/XQueryParser.g:566:81: p_FTScoreVar
                    this.pushFollow(XQueryParser.FOLLOW_p_FTScoreVar_in_p_ForBinding3881);
                    p_FTScoreVar122=this.p_FTScoreVar();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTScoreVar122.getTree());


                    break;

            }

            k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_ForBinding3886); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ForBinding3890);
            p_ExprSingle123=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle123.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AllowingEmpty_return: (function() {
        XQueryParser.p_AllowingEmpty_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AllowingEmpty_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:570:1: p_AllowingEmpty : k= ALLOWING k= EMPTY ;
    // $ANTLR start "p_AllowingEmpty"
    p_AllowingEmpty: function() {
        var retval = new XQueryParser.p_AllowingEmpty_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:571:9: (k= ALLOWING k= EMPTY )
            // xquery/XQueryParser.g:571:11: k= ALLOWING k= EMPTY
            root_0 = this.adaptor.nil();

            k=this.match(this.input,ALLOWING,XQueryParser.FOLLOW_ALLOWING_in_p_AllowingEmpty3919); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,EMPTY,XQueryParser.FOLLOW_EMPTY_in_p_AllowingEmpty3925); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_PositionalVar_return: (function() {
        XQueryParser.p_PositionalVar_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_PositionalVar_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:575:1: p_PositionalVar : k= AT DOLLAR p_VarName ;
    // $ANTLR start "p_PositionalVar"
    p_PositionalVar: function() {
        var retval = new XQueryParser.p_PositionalVar_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR124 = null;
         var p_VarName125 = null;

        var k_tree=null;
        var DOLLAR124_tree=null;

        try {
            // xquery/XQueryParser.g:576:9: (k= AT DOLLAR p_VarName )
            // xquery/XQueryParser.g:576:11: k= AT DOLLAR p_VarName
            root_0 = this.adaptor.nil();

            k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_PositionalVar3955); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR124=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_PositionalVar3959); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR124_tree = this.adaptor.create(DOLLAR124);
            this.adaptor.addChild(root_0, DOLLAR124_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_PositionalVar3961);
            p_VarName125=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName125.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_LetClause_return: (function() {
        XQueryParser.p_LetClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_LetClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:580:1: p_LetClause : k= LET p_LetBinding ( COMMA p_LetBinding )* ;
    // $ANTLR start "p_LetClause"
    p_LetClause: function() {
        var retval = new XQueryParser.p_LetClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var COMMA127 = null;
         var p_LetBinding126 = null;
         var p_LetBinding128 = null;

        var k_tree=null;
        var COMMA127_tree=null;

        try {
            // xquery/XQueryParser.g:581:9: (k= LET p_LetBinding ( COMMA p_LetBinding )* )
            // xquery/XQueryParser.g:581:11: k= LET p_LetBinding ( COMMA p_LetBinding )*
            root_0 = this.adaptor.nil();

            k=this.match(this.input,LET,XQueryParser.FOLLOW_LET_in_p_LetClause3989); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_LetBinding_in_p_LetClause3993);
            p_LetBinding126=this.p_LetBinding();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_LetBinding126.getTree());
            // xquery/XQueryParser.g:581:45: ( COMMA p_LetBinding )*
            loop56:
            do {
                var alt56=2;
                var LA56_0 = this.input.LA(1);

                if ( (LA56_0==COMMA) ) {
                    alt56=1;
                }


                switch (alt56) {
                case 1 :
                    // xquery/XQueryParser.g:581:46: COMMA p_LetBinding
                    COMMA127=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_LetClause3996); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COMMA127_tree = this.adaptor.create(COMMA127);
                    this.adaptor.addChild(root_0, COMMA127_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_LetBinding_in_p_LetClause3998);
                    p_LetBinding128=this.p_LetBinding();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_LetBinding128.getTree());


                    break;

                default :
                    break loop56;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_LetBinding_return: (function() {
        XQueryParser.p_LetBinding_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_LetBinding_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:586:1: p_LetBinding : ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true] ;
    // $ANTLR start "p_LetBinding"
    p_LetBinding: function() {
        var retval = new XQueryParser.p_LetBinding_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var DOLLAR129 = null;
        var BIND133 = null;
         var p_VarName130 = null;
         var p_TypeDeclaration131 = null;
         var p_FTScoreVar132 = null;
         var p_ExprSingle134 = null;

        var DOLLAR129_tree=null;
        var BIND133_tree=null;

        try {
            // xquery/XQueryParser.g:587:9: ( ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true] )
            // xquery/XQueryParser.g:587:11: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar ) BIND p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:587:11: ( ( DOLLAR p_VarName ( p_TypeDeclaration )? ) | p_FTScoreVar )
            var alt58=2;
            var LA58_0 = this.input.LA(1);

            if ( (LA58_0==DOLLAR) ) {
                alt58=1;
            }
            else if ( (LA58_0==SCORE) ) {
                alt58=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 58, 0, this.input);

                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    // xquery/XQueryParser.g:587:13: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
                    // xquery/XQueryParser.g:587:13: ( DOLLAR p_VarName ( p_TypeDeclaration )? )
                    // xquery/XQueryParser.g:587:14: DOLLAR p_VarName ( p_TypeDeclaration )?
                    DOLLAR129=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_LetBinding4030); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR129_tree = this.adaptor.create(DOLLAR129);
                    this.adaptor.addChild(root_0, DOLLAR129_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_LetBinding4032);
                    p_VarName130=this.p_VarName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName130.getTree());
                    // xquery/XQueryParser.g:587:31: ( p_TypeDeclaration )?
                    var alt57=2;
                    var LA57_0 = this.input.LA(1);

                    if ( (LA57_0==AS) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // xquery/XQueryParser.g:587:31: p_TypeDeclaration
                            this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_LetBinding4034);
                            p_TypeDeclaration131=this.p_TypeDeclaration();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration131.getTree());


                            break;

                    }






                    break;
                case 2 :
                    // xquery/XQueryParser.g:587:53: p_FTScoreVar
                    this.pushFollow(XQueryParser.FOLLOW_p_FTScoreVar_in_p_LetBinding4040);
                    p_FTScoreVar132=this.p_FTScoreVar();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTScoreVar132.getTree());


                    break;

            }

            BIND133=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_LetBinding4044); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            BIND133_tree = this.adaptor.create(BIND133);
            this.adaptor.addChild(root_0, BIND133_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_LetBinding4046);
            p_ExprSingle134=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle134.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_WindowClause_return: (function() {
        XQueryParser.p_WindowClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_WindowClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:591:1: p_WindowClause : k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) ;
    // $ANTLR start "p_WindowClause"
    p_WindowClause: function() {
        var retval = new XQueryParser.p_WindowClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_TumblingWindowClause135 = null;
         var p_SlidingWindowClause136 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:592:9: (k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) )
            // xquery/XQueryParser.g:592:11: k= FOR ( p_TumblingWindowClause | p_SlidingWindowClause )
            root_0 = this.adaptor.nil();

            k=this.match(this.input,FOR,XQueryParser.FOLLOW_FOR_in_p_WindowClause4075); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:592:32: ( p_TumblingWindowClause | p_SlidingWindowClause )
            var alt59=2;
            var LA59_0 = this.input.LA(1);

            if ( (LA59_0==TUMBLING) ) {
                alt59=1;
            }
            else if ( (LA59_0==SLIDING) ) {
                alt59=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 59, 0, this.input);

                throw nvae;
            }
            switch (alt59) {
                case 1 :
                    // xquery/XQueryParser.g:592:33: p_TumblingWindowClause
                    this.pushFollow(XQueryParser.FOLLOW_p_TumblingWindowClause_in_p_WindowClause4080);
                    p_TumblingWindowClause135=this.p_TumblingWindowClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TumblingWindowClause135.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:592:58: p_SlidingWindowClause
                    this.pushFollow(XQueryParser.FOLLOW_p_SlidingWindowClause_in_p_WindowClause4084);
                    p_SlidingWindowClause136=this.p_SlidingWindowClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SlidingWindowClause136.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TumblingWindowClause_return: (function() {
        XQueryParser.p_TumblingWindowClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TumblingWindowClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:596:1: p_TumblingWindowClause : k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? ;
    // $ANTLR start "p_TumblingWindowClause"
    p_TumblingWindowClause: function() {
        var retval = new XQueryParser.p_TumblingWindowClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR137 = null;
         var p_VarName138 = null;
         var p_TypeDeclaration139 = null;
         var p_ExprSingle140 = null;
         var p_WindowStartCondition141 = null;
         var p_WindowEndCondition142 = null;

        var k_tree=null;
        var DOLLAR137_tree=null;

        try {
            // xquery/XQueryParser.g:597:9: (k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? )
            // xquery/XQueryParser.g:597:11: k= TUMBLING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )?
            root_0 = this.adaptor.nil();

            k=this.match(this.input,TUMBLING,XQueryParser.FOLLOW_TUMBLING_in_p_TumblingWindowClause4121); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,WINDOW,XQueryParser.FOLLOW_WINDOW_in_p_TumblingWindowClause4127); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR137=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TumblingWindowClause4131); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR137_tree = this.adaptor.create(DOLLAR137);
            this.adaptor.addChild(root_0, DOLLAR137_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TumblingWindowClause4133);
            p_VarName138=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName138.getTree());
            // xquery/XQueryParser.g:597:78: ( p_TypeDeclaration )?
            var alt60=2;
            var LA60_0 = this.input.LA(1);

            if ( (LA60_0==AS) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // xquery/XQueryParser.g:597:78: p_TypeDeclaration
                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4135);
                    p_TypeDeclaration139=this.p_TypeDeclaration();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration139.getTree());


                    break;

            }

            k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_TumblingWindowClause4140); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4144);
            p_ExprSingle140=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle140.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4147);
            p_WindowStartCondition141=this.p_WindowStartCondition();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowStartCondition141.getTree());
            // xquery/XQueryParser.g:597:159: ( p_WindowEndCondition )?
            var alt61=2;
            var LA61_0 = this.input.LA(1);

            if ( (LA61_0==END||LA61_0==ONLY) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // xquery/XQueryParser.g:597:159: p_WindowEndCondition
                    this.pushFollow(XQueryParser.FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4149);
                    p_WindowEndCondition142=this.p_WindowEndCondition();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowEndCondition142.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SlidingWindowClause_return: (function() {
        XQueryParser.p_SlidingWindowClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SlidingWindowClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:601:1: p_SlidingWindowClause : k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? ;
    // $ANTLR start "p_SlidingWindowClause"
    p_SlidingWindowClause: function() {
        var retval = new XQueryParser.p_SlidingWindowClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR143 = null;
         var p_VarName144 = null;
         var p_TypeDeclaration145 = null;
         var p_ExprSingle146 = null;
         var p_WindowStartCondition147 = null;
         var p_WindowEndCondition148 = null;

        var k_tree=null;
        var DOLLAR143_tree=null;

        try {
            // xquery/XQueryParser.g:602:9: (k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )? )
            // xquery/XQueryParser.g:602:11: k= SLIDING k= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] p_WindowStartCondition ( p_WindowEndCondition )?
            root_0 = this.adaptor.nil();

            k=this.match(this.input,SLIDING,XQueryParser.FOLLOW_SLIDING_in_p_SlidingWindowClause4178); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,WINDOW,XQueryParser.FOLLOW_WINDOW_in_p_SlidingWindowClause4184); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR143=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_SlidingWindowClause4188); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR143_tree = this.adaptor.create(DOLLAR143);
            this.adaptor.addChild(root_0, DOLLAR143_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_SlidingWindowClause4190);
            p_VarName144=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName144.getTree());
            // xquery/XQueryParser.g:602:77: ( p_TypeDeclaration )?
            var alt62=2;
            var LA62_0 = this.input.LA(1);

            if ( (LA62_0==AS) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // xquery/XQueryParser.g:602:77: p_TypeDeclaration
                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4192);
                    p_TypeDeclaration145=this.p_TypeDeclaration();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration145.getTree());


                    break;

            }

            k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_SlidingWindowClause4197); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4201);
            p_ExprSingle146=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle146.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4204);
            p_WindowStartCondition147=this.p_WindowStartCondition();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowStartCondition147.getTree());
            // xquery/XQueryParser.g:602:158: ( p_WindowEndCondition )?
            var alt63=2;
            var LA63_0 = this.input.LA(1);

            if ( (LA63_0==END||LA63_0==ONLY) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // xquery/XQueryParser.g:602:158: p_WindowEndCondition
                    this.pushFollow(XQueryParser.FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4206);
                    p_WindowEndCondition148=this.p_WindowEndCondition();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowEndCondition148.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_WindowStartCondition_return: (function() {
        XQueryParser.p_WindowStartCondition_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_WindowStartCondition_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:606:1: p_WindowStartCondition : k= START p_WindowVars k= WHEN p_ExprSingle[true] ;
    // $ANTLR start "p_WindowStartCondition"
    p_WindowStartCondition: function() {
        var retval = new XQueryParser.p_WindowStartCondition_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_WindowVars149 = null;
         var p_ExprSingle150 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:607:9: (k= START p_WindowVars k= WHEN p_ExprSingle[true] )
            // xquery/XQueryParser.g:607:11: k= START p_WindowVars k= WHEN p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,START,XQueryParser.FOLLOW_START_in_p_WindowStartCondition4235); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_WindowVars_in_p_WindowStartCondition4239);
            p_WindowVars149=this.p_WindowVars();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowVars149.getTree());
            k=this.match(this.input,WHEN,XQueryParser.FOLLOW_WHEN_in_p_WindowStartCondition4243); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_WindowStartCondition4247);
            p_ExprSingle150=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle150.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_WindowEndCondition_return: (function() {
        XQueryParser.p_WindowEndCondition_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_WindowEndCondition_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:611:1: p_WindowEndCondition : (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true] ;
    // $ANTLR start "p_WindowEndCondition"
    p_WindowEndCondition: function() {
        var retval = new XQueryParser.p_WindowEndCondition_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_WindowVars151 = null;
         var p_ExprSingle152 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:612:9: ( (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true] )
            // xquery/XQueryParser.g:612:11: (k= ONLY )? k= END p_WindowVars k= WHEN p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:612:11: (k= ONLY )?
            var alt64=2;
            var LA64_0 = this.input.LA(1);

            if ( (LA64_0==ONLY) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // xquery/XQueryParser.g:612:12: k= ONLY
                    k=this.match(this.input,ONLY,XQueryParser.FOLLOW_ONLY_in_p_WindowEndCondition4277); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }


                    break;

            }

            k=this.match(this.input,END,XQueryParser.FOLLOW_END_in_p_WindowEndCondition4285); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_WindowVars_in_p_WindowEndCondition4289);
            p_WindowVars151=this.p_WindowVars();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WindowVars151.getTree());
            k=this.match(this.input,WHEN,XQueryParser.FOLLOW_WHEN_in_p_WindowEndCondition4293); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_WindowEndCondition4297);
            p_ExprSingle152=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle152.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_WindowVars_return: (function() {
        XQueryParser.p_WindowVars_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_WindowVars_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:616:1: p_WindowVars : ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )? ;
    // $ANTLR start "p_WindowVars"
    p_WindowVars: function() {
        var retval = new XQueryParser.p_WindowVars_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR153 = null;
        var DOLLAR156 = null;
        var DOLLAR158 = null;
         var p_CurrentItem154 = null;
         var p_PositionalVar155 = null;
         var p_PreviousItem157 = null;
         var p_NextItem159 = null;

        var k_tree=null;
        var DOLLAR153_tree=null;
        var DOLLAR156_tree=null;
        var DOLLAR158_tree=null;

        try {
            // xquery/XQueryParser.g:617:9: ( ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )? )
            // xquery/XQueryParser.g:617:11: ( DOLLAR p_CurrentItem )? ( p_PositionalVar )? (k= PREVIOUS DOLLAR p_PreviousItem )? (k= NEXT DOLLAR p_NextItem )?
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:617:11: ( DOLLAR p_CurrentItem )?
            var alt65=2;
            var LA65_0 = this.input.LA(1);

            if ( (LA65_0==DOLLAR) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // xquery/XQueryParser.g:617:12: DOLLAR p_CurrentItem
                    DOLLAR153=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_WindowVars4325); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR153_tree = this.adaptor.create(DOLLAR153);
                    this.adaptor.addChild(root_0, DOLLAR153_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_CurrentItem_in_p_WindowVars4327);
                    p_CurrentItem154=this.p_CurrentItem();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CurrentItem154.getTree());


                    break;

            }

            // xquery/XQueryParser.g:617:35: ( p_PositionalVar )?
            var alt66=2;
            var LA66_0 = this.input.LA(1);

            if ( (LA66_0==AT) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // xquery/XQueryParser.g:617:35: p_PositionalVar
                    this.pushFollow(XQueryParser.FOLLOW_p_PositionalVar_in_p_WindowVars4331);
                    p_PositionalVar155=this.p_PositionalVar();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PositionalVar155.getTree());


                    break;

            }

            // xquery/XQueryParser.g:617:52: (k= PREVIOUS DOLLAR p_PreviousItem )?
            var alt67=2;
            var LA67_0 = this.input.LA(1);

            if ( (LA67_0==PREVIOUS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // xquery/XQueryParser.g:617:53: k= PREVIOUS DOLLAR p_PreviousItem
                    k=this.match(this.input,PREVIOUS,XQueryParser.FOLLOW_PREVIOUS_in_p_WindowVars4337); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    DOLLAR156=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_WindowVars4341); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR156_tree = this.adaptor.create(DOLLAR156);
                    this.adaptor.addChild(root_0, DOLLAR156_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_PreviousItem_in_p_WindowVars4343);
                    p_PreviousItem157=this.p_PreviousItem();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PreviousItem157.getTree());


                    break;

            }

            // xquery/XQueryParser.g:617:103: (k= NEXT DOLLAR p_NextItem )?
            var alt68=2;
            var LA68_0 = this.input.LA(1);

            if ( (LA68_0==NEXT) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // xquery/XQueryParser.g:617:104: k= NEXT DOLLAR p_NextItem
                    k=this.match(this.input,NEXT,XQueryParser.FOLLOW_NEXT_in_p_WindowVars4350); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    DOLLAR158=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_WindowVars4354); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR158_tree = this.adaptor.create(DOLLAR158);
                    this.adaptor.addChild(root_0, DOLLAR158_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_NextItem_in_p_WindowVars4356);
                    p_NextItem159=this.p_NextItem();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NextItem159.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CurrentItem_return: (function() {
        XQueryParser.p_CurrentItem_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CurrentItem_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:621:1: p_CurrentItem : p_QName ;
    // $ANTLR start "p_CurrentItem"
    p_CurrentItem: function() {
        var retval = new XQueryParser.p_CurrentItem_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName160 = null;


        try {
            // xquery/XQueryParser.g:622:9: ( p_QName )
            // xquery/XQueryParser.g:622:11: p_QName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_CurrentItem4384);
            p_QName160=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName160.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_PreviousItem_return: (function() {
        XQueryParser.p_PreviousItem_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_PreviousItem_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:626:1: p_PreviousItem : p_QName ;
    // $ANTLR start "p_PreviousItem"
    p_PreviousItem: function() {
        var retval = new XQueryParser.p_PreviousItem_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName161 = null;


        try {
            // xquery/XQueryParser.g:627:9: ( p_QName )
            // xquery/XQueryParser.g:627:11: p_QName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_PreviousItem4410);
            p_QName161=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName161.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_NextItem_return: (function() {
        XQueryParser.p_NextItem_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_NextItem_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:631:1: p_NextItem : p_QName ;
    // $ANTLR start "p_NextItem"
    p_NextItem: function() {
        var retval = new XQueryParser.p_NextItem_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName162 = null;


        try {
            // xquery/XQueryParser.g:632:9: ( p_QName )
            // xquery/XQueryParser.g:632:11: p_QName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_NextItem4436);
            p_QName162=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName162.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CountClause_return: (function() {
        XQueryParser.p_CountClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CountClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:636:1: p_CountClause : k= COUNT DOLLAR p_VarName ;
    // $ANTLR start "p_CountClause"
    p_CountClause: function() {
        var retval = new XQueryParser.p_CountClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR163 = null;
         var p_VarName164 = null;

        var k_tree=null;
        var DOLLAR163_tree=null;

        try {
            // xquery/XQueryParser.g:637:9: (k= COUNT DOLLAR p_VarName )
            // xquery/XQueryParser.g:637:11: k= COUNT DOLLAR p_VarName
            root_0 = this.adaptor.nil();

            k=this.match(this.input,COUNT,XQueryParser.FOLLOW_COUNT_in_p_CountClause4464); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR163=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_CountClause4468); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR163_tree = this.adaptor.create(DOLLAR163);
            this.adaptor.addChild(root_0, DOLLAR163_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_CountClause4470);
            p_VarName164=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName164.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_WhereClause_return: (function() {
        XQueryParser.p_WhereClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_WhereClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:641:1: p_WhereClause : k= WHERE p_ExprSingle[true] ;
    // $ANTLR start "p_WhereClause"
    p_WhereClause: function() {
        var retval = new XQueryParser.p_WhereClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_ExprSingle165 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:642:9: (k= WHERE p_ExprSingle[true] )
            // xquery/XQueryParser.g:642:11: k= WHERE p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,WHERE,XQueryParser.FOLLOW_WHERE_in_p_WhereClause4506); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_WhereClause4510);
            p_ExprSingle165=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle165.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_GroupByClause_return: (function() {
        XQueryParser.p_GroupByClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_GroupByClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:646:1: p_GroupByClause : k= GROUP k= BY p_GroupingSpecList ;
    // $ANTLR start "p_GroupByClause"
    p_GroupByClause: function() {
        var retval = new XQueryParser.p_GroupByClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_GroupingSpecList166 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:647:9: (k= GROUP k= BY p_GroupingSpecList )
            // xquery/XQueryParser.g:647:11: k= GROUP k= BY p_GroupingSpecList
            root_0 = this.adaptor.nil();

            k=this.match(this.input,GROUP,XQueryParser.FOLLOW_GROUP_in_p_GroupByClause4539); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,BY,XQueryParser.FOLLOW_BY_in_p_GroupByClause4545); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_GroupingSpecList_in_p_GroupByClause4549);
            p_GroupingSpecList166=this.p_GroupingSpecList();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GroupingSpecList166.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_GroupingSpecList_return: (function() {
        XQueryParser.p_GroupingSpecList_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_GroupingSpecList_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:651:1: p_GroupingSpecList : p_GroupingSpec ( COMMA p_GroupingSpec )* ;
    // $ANTLR start "p_GroupingSpecList"
    p_GroupingSpecList: function() {
        var retval = new XQueryParser.p_GroupingSpecList_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var COMMA168 = null;
         var p_GroupingSpec167 = null;
         var p_GroupingSpec169 = null;

        var COMMA168_tree=null;

        try {
            // xquery/XQueryParser.g:652:9: ( p_GroupingSpec ( COMMA p_GroupingSpec )* )
            // xquery/XQueryParser.g:652:11: p_GroupingSpec ( COMMA p_GroupingSpec )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4575);
            p_GroupingSpec167=this.p_GroupingSpec();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GroupingSpec167.getTree());
            // xquery/XQueryParser.g:652:26: ( COMMA p_GroupingSpec )*
            loop69:
            do {
                var alt69=2;
                var LA69_0 = this.input.LA(1);

                if ( (LA69_0==COMMA) ) {
                    alt69=1;
                }


                switch (alt69) {
                case 1 :
                    // xquery/XQueryParser.g:652:27: COMMA p_GroupingSpec
                    COMMA168=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_GroupingSpecList4578); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COMMA168_tree = this.adaptor.create(COMMA168);
                    this.adaptor.addChild(root_0, COMMA168_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4580);
                    p_GroupingSpec169=this.p_GroupingSpec();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GroupingSpec169.getTree());


                    break;

                default :
                    break loop69;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_GroupingSpec_return: (function() {
        XQueryParser.p_GroupingSpec_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_GroupingSpec_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:656:1: p_GroupingSpec : DOLLAR p_VarName (k= COLLATION p_StringLiteral )? ;
    // $ANTLR start "p_GroupingSpec"
    p_GroupingSpec: function() {
        var retval = new XQueryParser.p_GroupingSpec_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR170 = null;
         var p_VarName171 = null;
         var p_StringLiteral172 = null;

        var k_tree=null;
        var DOLLAR170_tree=null;

        try {
            // xquery/XQueryParser.g:657:9: ( DOLLAR p_VarName (k= COLLATION p_StringLiteral )? )
            // xquery/XQueryParser.g:657:11: DOLLAR p_VarName (k= COLLATION p_StringLiteral )?
            root_0 = this.adaptor.nil();

            DOLLAR170=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_GroupingSpec4608); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR170_tree = this.adaptor.create(DOLLAR170);
            this.adaptor.addChild(root_0, DOLLAR170_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_GroupingSpec4610);
            p_VarName171=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName171.getTree());
            // xquery/XQueryParser.g:657:28: (k= COLLATION p_StringLiteral )?
            var alt70=2;
            var LA70_0 = this.input.LA(1);

            if ( (LA70_0==COLLATION) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // xquery/XQueryParser.g:657:29: k= COLLATION p_StringLiteral
                    k=this.match(this.input,COLLATION,XQueryParser.FOLLOW_COLLATION_in_p_GroupingSpec4615); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_GroupingSpec4619);
                    p_StringLiteral172=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral172.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_OrderByClause_return: (function() {
        XQueryParser.p_OrderByClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_OrderByClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:661:1: p_OrderByClause : ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList ;
    // $ANTLR start "p_OrderByClause"
    p_OrderByClause: function() {
        var retval = new XQueryParser.p_OrderByClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_OrderSpecList173 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:662:9: ( ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList )
            // xquery/XQueryParser.g:662:11: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:662:11: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) )
            var alt71=2;
            var LA71_0 = this.input.LA(1);

            if ( (LA71_0==ORDER) ) {
                alt71=1;
            }
            else if ( (LA71_0==STABLE) ) {
                alt71=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 71, 0, this.input);

                throw nvae;
            }
            switch (alt71) {
                case 1 :
                    // xquery/XQueryParser.g:662:12: (k+= ORDER k+= BY )
                    // xquery/XQueryParser.g:662:12: (k+= ORDER k+= BY )
                    // xquery/XQueryParser.g:662:13: k+= ORDER k+= BY
                    k=this.match(this.input,ORDER,XQueryParser.FOLLOW_ORDER_in_p_OrderByClause4651); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,BY,XQueryParser.FOLLOW_BY_in_p_OrderByClause4655); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;
                case 2 :
                    // xquery/XQueryParser.g:662:31: (k+= STABLE k+= ORDER k+= BY )
                    // xquery/XQueryParser.g:662:31: (k+= STABLE k+= ORDER k+= BY )
                    // xquery/XQueryParser.g:662:32: k+= STABLE k+= ORDER k+= BY
                    k=this.match(this.input,STABLE,XQueryParser.FOLLOW_STABLE_in_p_OrderByClause4663); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,ORDER,XQueryParser.FOLLOW_ORDER_in_p_OrderByClause4667); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,BY,XQueryParser.FOLLOW_BY_in_p_OrderByClause4671); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_OrderSpecList_in_p_OrderByClause4677);
            p_OrderSpecList173=this.p_OrderSpecList();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderSpecList173.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_OrderSpecList_return: (function() {
        XQueryParser.p_OrderSpecList_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_OrderSpecList_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:666:1: p_OrderSpecList : p_OrderSpec ( COMMA p_OrderSpec )* ;
    // $ANTLR start "p_OrderSpecList"
    p_OrderSpecList: function() {
        var retval = new XQueryParser.p_OrderSpecList_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var COMMA175 = null;
         var p_OrderSpec174 = null;
         var p_OrderSpec176 = null;

        var COMMA175_tree=null;

        try {
            // xquery/XQueryParser.g:667:9: ( p_OrderSpec ( COMMA p_OrderSpec )* )
            // xquery/XQueryParser.g:667:11: p_OrderSpec ( COMMA p_OrderSpec )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_OrderSpec_in_p_OrderSpecList4703);
            p_OrderSpec174=this.p_OrderSpec();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderSpec174.getTree());
            // xquery/XQueryParser.g:667:23: ( COMMA p_OrderSpec )*
            loop72:
            do {
                var alt72=2;
                var LA72_0 = this.input.LA(1);

                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }


                switch (alt72) {
                case 1 :
                    // xquery/XQueryParser.g:667:24: COMMA p_OrderSpec
                    COMMA175=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_OrderSpecList4706); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COMMA175_tree = this.adaptor.create(COMMA175);
                    this.adaptor.addChild(root_0, COMMA175_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_OrderSpec_in_p_OrderSpecList4708);
                    p_OrderSpec176=this.p_OrderSpec();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderSpec176.getTree());


                    break;

                default :
                    break loop72;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_OrderSpec_return: (function() {
        XQueryParser.p_OrderSpec_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_OrderSpec_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:671:1: p_OrderSpec : p_ExprSingle[true] p_OrderModifier ;
    // $ANTLR start "p_OrderSpec"
    p_OrderSpec: function() {
        var retval = new XQueryParser.p_OrderSpec_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ExprSingle177 = null;
         var p_OrderModifier178 = null;


        try {
            // xquery/XQueryParser.g:672:9: ( p_ExprSingle[true] p_OrderModifier )
            // xquery/XQueryParser.g:672:11: p_ExprSingle[true] p_OrderModifier
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_OrderSpec4736);
            p_ExprSingle177=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle177.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_OrderModifier_in_p_OrderSpec4739);
            p_OrderModifier178=this.p_OrderModifier();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderModifier178.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_OrderModifier_return: (function() {
        XQueryParser.p_OrderModifier_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_OrderModifier_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:676:1: p_OrderModifier : (k+= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? ;
    // $ANTLR start "p_OrderModifier"
    p_OrderModifier: function() {
        var retval = new XQueryParser.p_OrderModifier_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_StringLiteral179 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:677:9: ( (k+= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? )
            // xquery/XQueryParser.g:677:11: (k+= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )?
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:677:11: (k+= ASCENDING | k+= DESCENDING )?
            var alt73=3;
            var LA73_0 = this.input.LA(1);

            if ( (LA73_0==ASCENDING) ) {
                alt73=1;
            }
            else if ( (LA73_0==DESCENDING) ) {
                alt73=2;
            }
            switch (alt73) {
                case 1 :
                    // xquery/XQueryParser.g:677:12: k+= ASCENDING
                    k=this.match(this.input,ASCENDING,XQueryParser.FOLLOW_ASCENDING_in_p_OrderModifier4768); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:677:27: k+= DESCENDING
                    k=this.match(this.input,DESCENDING,XQueryParser.FOLLOW_DESCENDING_in_p_OrderModifier4774); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            // xquery/XQueryParser.g:677:43: (k+= EMPTY (k+= GREATEST | k+= LEAST ) )?
            var alt75=2;
            var LA75_0 = this.input.LA(1);

            if ( (LA75_0==EMPTY) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // xquery/XQueryParser.g:677:44: k+= EMPTY (k+= GREATEST | k+= LEAST )
                    k=this.match(this.input,EMPTY,XQueryParser.FOLLOW_EMPTY_in_p_OrderModifier4781); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    // xquery/XQueryParser.g:677:53: (k+= GREATEST | k+= LEAST )
                    var alt74=2;
                    var LA74_0 = this.input.LA(1);

                    if ( (LA74_0==GREATEST) ) {
                        alt74=1;
                    }
                    else if ( (LA74_0==LEAST) ) {
                        alt74=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 74, 0, this.input);

                        throw nvae;
                    }
                    switch (alt74) {
                        case 1 :
                            // xquery/XQueryParser.g:677:54: k+= GREATEST
                            k=this.match(this.input,GREATEST,XQueryParser.FOLLOW_GREATEST_in_p_OrderModifier4786); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            k_tree = this.adaptor.create(k);
                            this.adaptor.addChild(root_0, k_tree);
                            }
                            if (org.antlr.lang.isNull(list_k)) list_k = [];
                            list_k.push(k);



                            break;
                        case 2 :
                            // xquery/XQueryParser.g:677:68: k+= LEAST
                            k=this.match(this.input,LEAST,XQueryParser.FOLLOW_LEAST_in_p_OrderModifier4792); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            k_tree = this.adaptor.create(k);
                            this.adaptor.addChild(root_0, k_tree);
                            }
                            if (org.antlr.lang.isNull(list_k)) list_k = [];
                            list_k.push(k);



                            break;

                    }



                    break;

            }

            // xquery/XQueryParser.g:677:80: (k+= COLLATION p_StringLiteral )?
            var alt76=2;
            var LA76_0 = this.input.LA(1);

            if ( (LA76_0==COLLATION) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // xquery/XQueryParser.g:677:81: k+= COLLATION p_StringLiteral
                    k=this.match(this.input,COLLATION,XQueryParser.FOLLOW_COLLATION_in_p_OrderModifier4800); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_OrderModifier4802);
                    p_StringLiteral179=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral179.getTree());


                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ReturnHybrid_return: (function() {
        XQueryParser.p_ReturnHybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ReturnHybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:681:1: p_ReturnHybrid[strict] : k= RETURN p_Hybrid[$strict,false] ;
    // $ANTLR start "p_ReturnHybrid"
    p_ReturnHybrid: function(strict) {
        var retval = new XQueryParser.p_ReturnHybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_Hybrid180 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:682:9: (k= RETURN p_Hybrid[$strict,false] )
            // xquery/XQueryParser.g:682:11: k= RETURN p_Hybrid[$strict,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_ReturnHybrid4835); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_ReturnHybrid4839);
            p_Hybrid180=this.p_Hybrid(strict, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid180.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_QuantifiedExpr_return: (function() {
        XQueryParser.p_QuantifiedExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_QuantifiedExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:686:1: p_QuantifiedExpr : (k= SOME | k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true] ;
    // $ANTLR start "p_QuantifiedExpr"
    p_QuantifiedExpr: function() {
        var retval = new XQueryParser.p_QuantifiedExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR181 = null;
        var COMMA185 = null;
        var DOLLAR186 = null;
         var p_VarName182 = null;
         var p_TypeDeclaration183 = null;
         var p_ExprSingle184 = null;
         var p_QName187 = null;
         var p_TypeDeclaration188 = null;
         var p_ExprSingle189 = null;
         var p_ExprSingle190 = null;

        var k_tree=null;
        var DOLLAR181_tree=null;
        var COMMA185_tree=null;
        var DOLLAR186_tree=null;

        try {
            // xquery/XQueryParser.g:687:9: ( (k= SOME | k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true] )
            // xquery/XQueryParser.g:687:11: (k= SOME | k= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )* k= SATISFIES p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:687:11: (k= SOME | k= EVERY )
            var alt77=2;
            var LA77_0 = this.input.LA(1);

            if ( (LA77_0==SOME) ) {
                alt77=1;
            }
            else if ( (LA77_0==EVERY) ) {
                alt77=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 77, 0, this.input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // xquery/XQueryParser.g:687:12: k= SOME
                    k=this.match(this.input,SOME,XQueryParser.FOLLOW_SOME_in_p_QuantifiedExpr4869); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:687:21: k= EVERY
                    k=this.match(this.input,EVERY,XQueryParser.FOLLOW_EVERY_in_p_QuantifiedExpr4875); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR181=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_QuantifiedExpr4880); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR181_tree = this.adaptor.create(DOLLAR181);
            this.adaptor.addChild(root_0, DOLLAR181_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_QuantifiedExpr4882);
            p_VarName182=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName182.getTree());
            // xquery/XQueryParser.g:687:62: ( p_TypeDeclaration )?
            var alt78=2;
            var LA78_0 = this.input.LA(1);

            if ( (LA78_0==AS) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // xquery/XQueryParser.g:687:62: p_TypeDeclaration
                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4884);
                    p_TypeDeclaration183=this.p_TypeDeclaration();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration183.getTree());


                    break;

            }

            k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_QuantifiedExpr4889); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4893);
            p_ExprSingle184=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle184.getTree());
            // xquery/XQueryParser.g:687:120: ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true] )*
            loop80:
            do {
                var alt80=2;
                var LA80_0 = this.input.LA(1);

                if ( (LA80_0==COMMA) ) {
                    alt80=1;
                }


                switch (alt80) {
                case 1 :
                    // xquery/XQueryParser.g:687:121: COMMA DOLLAR p_QName ( p_TypeDeclaration )? k= IN p_ExprSingle[true]
                    COMMA185=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_QuantifiedExpr4897); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COMMA185_tree = this.adaptor.create(COMMA185);
                    this.adaptor.addChild(root_0, COMMA185_tree);
                    }
                    DOLLAR186=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_QuantifiedExpr4899); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR186_tree = this.adaptor.create(DOLLAR186);
                    this.adaptor.addChild(root_0, DOLLAR186_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_QuantifiedExpr4901);
                    p_QName187=this.p_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName187.getTree());
                    // xquery/XQueryParser.g:687:142: ( p_TypeDeclaration )?
                    var alt79=2;
                    var LA79_0 = this.input.LA(1);

                    if ( (LA79_0==AS) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // xquery/XQueryParser.g:687:142: p_TypeDeclaration
                            this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4903);
                            p_TypeDeclaration188=this.p_TypeDeclaration();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration188.getTree());


                            break;

                    }

                    k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_QuantifiedExpr4908); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4912);
                    p_ExprSingle189=this.p_ExprSingle(true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle189.getTree());


                    break;

                default :
                    break loop80;
                }
            } while (true);

            k=this.match(this.input,SATISFIES,XQueryParser.FOLLOW_SATISFIES_in_p_QuantifiedExpr4919); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4923);
            p_ExprSingle190=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle190.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SwitchHybrid_return: (function() {
        XQueryParser.p_SwitchHybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SwitchHybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:691:1: p_SwitchHybrid[strict] : k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false] ;
    // $ANTLR start "p_SwitchHybrid"
    p_SwitchHybrid: function(strict) {
        var retval = new XQueryParser.p_SwitchHybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LPAREN191 = null;
        var RPAREN193 = null;
         var p_Expr192 = null;
         var p_SwitchCaseHybrid194 = null;
         var p_Hybrid195 = null;

        var k_tree=null;
        var LPAREN191_tree=null;
        var RPAREN193_tree=null;

        try {
            // xquery/XQueryParser.g:692:9: (k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false] )
            // xquery/XQueryParser.g:692:11: k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseHybrid[$strict] )+ k= DEFAULT k= RETURN p_Hybrid[$strict,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,SWITCH,XQueryParser.FOLLOW_SWITCH_in_p_SwitchHybrid4953); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LPAREN191=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SwitchHybrid4957); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN191_tree = this.adaptor.create(LPAREN191);
            this.adaptor.addChild(root_0, LPAREN191_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_SwitchHybrid4959);
            p_Expr192=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr192.getTree());
            RPAREN193=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SwitchHybrid4962); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN193_tree = this.adaptor.create(RPAREN193);
            this.adaptor.addChild(root_0, RPAREN193_tree);
            }
            // xquery/XQueryParser.g:692:67: ( p_SwitchCaseHybrid[$strict] )+
            var cnt81=0;
            loop81:
            do {
                var alt81=2;
                var LA81_0 = this.input.LA(1);

                if ( (LA81_0==CASE) ) {
                    alt81=1;
                }


                switch (alt81) {
                case 1 :
                    // xquery/XQueryParser.g:692:67: p_SwitchCaseHybrid[$strict]
                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchCaseHybrid_in_p_SwitchHybrid4964);
                    p_SwitchCaseHybrid194=this.p_SwitchCaseHybrid(strict);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchCaseHybrid194.getTree());


                    break;

                default :
                    if ( cnt81 >= 1 ) {
                        break loop81;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(81, this.input);
                        throw eee;
                }
                cnt81++;
            } while (true);

            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_SwitchHybrid4970); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_SwitchHybrid4976); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_SwitchHybrid4980);
            p_Hybrid195=this.p_Hybrid(strict, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid195.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SwitchCaseHybrid_return: (function() {
        XQueryParser.p_SwitchCaseHybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SwitchCaseHybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:696:1: p_SwitchCaseHybrid[strict] : (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false] ;
    // $ANTLR start "p_SwitchCaseHybrid"
    p_SwitchCaseHybrid: function(strict) {
        var retval = new XQueryParser.p_SwitchCaseHybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_SwitchCaseOperand196 = null;
         var p_Hybrid197 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:697:9: ( (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false] )
            // xquery/XQueryParser.g:697:11: (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[$strict,false]
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:697:11: (k= CASE p_SwitchCaseOperand )+
            var cnt82=0;
            loop82:
            do {
                var alt82=2;
                var LA82_0 = this.input.LA(1);

                if ( (LA82_0==CASE) ) {
                    alt82=1;
                }


                switch (alt82) {
                case 1 :
                    // xquery/XQueryParser.g:697:12: k= CASE p_SwitchCaseOperand
                    k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_SwitchCaseHybrid5011); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseHybrid5015);
                    p_SwitchCaseOperand196=this.p_SwitchCaseOperand();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchCaseOperand196.getTree());


                    break;

                default :
                    if ( cnt82 >= 1 ) {
                        break loop82;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(82, this.input);
                        throw eee;
                }
                cnt82++;
            } while (true);

            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_SwitchCaseHybrid5021); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_SwitchCaseHybrid5025);
            p_Hybrid197=this.p_Hybrid(strict, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid197.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SwitchCaseOperand_return: (function() {
        XQueryParser.p_SwitchCaseOperand_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SwitchCaseOperand_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:701:1: p_SwitchCaseOperand : p_ExprSingle[true] ;
    // $ANTLR start "p_SwitchCaseOperand"
    p_SwitchCaseOperand: function() {
        var retval = new XQueryParser.p_SwitchCaseOperand_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ExprSingle198 = null;


        try {
            // xquery/XQueryParser.g:702:9: ( p_ExprSingle[true] )
            // xquery/XQueryParser.g:702:11: p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand5052);
            p_ExprSingle198=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle198.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TypeswitchHybrid_return: (function() {
        XQueryParser.p_TypeswitchHybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TypeswitchHybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:706:1: p_TypeswitchHybrid[strict] : k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false] ;
    // $ANTLR start "p_TypeswitchHybrid"
    p_TypeswitchHybrid: function(strict) {
        var retval = new XQueryParser.p_TypeswitchHybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LPAREN199 = null;
        var RPAREN201 = null;
        var DOLLAR203 = null;
         var p_Expr200 = null;
         var p_CaseHybrid202 = null;
         var p_VarName204 = null;
         var p_Hybrid205 = null;

        var k_tree=null;
        var LPAREN199_tree=null;
        var RPAREN201_tree=null;
        var DOLLAR203_tree=null;

        try {
            // xquery/XQueryParser.g:707:9: (k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false] )
            // xquery/XQueryParser.g:707:11: k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseHybrid[$strict] )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[$strict,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,TYPESWITCH,XQueryParser.FOLLOW_TYPESWITCH_in_p_TypeswitchHybrid5082); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LPAREN199=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_TypeswitchHybrid5086); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN199_tree = this.adaptor.create(LPAREN199);
            this.adaptor.addChild(root_0, LPAREN199_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_TypeswitchHybrid5088);
            p_Expr200=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr200.getTree());
            RPAREN201=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_TypeswitchHybrid5091); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN201_tree = this.adaptor.create(RPAREN201);
            this.adaptor.addChild(root_0, RPAREN201_tree);
            }
            // xquery/XQueryParser.g:707:71: ( p_CaseHybrid[$strict] )+
            var cnt83=0;
            loop83:
            do {
                var alt83=2;
                var LA83_0 = this.input.LA(1);

                if ( (LA83_0==CASE) ) {
                    alt83=1;
                }


                switch (alt83) {
                case 1 :
                    // xquery/XQueryParser.g:707:71: p_CaseHybrid[$strict]
                    this.pushFollow(XQueryParser.FOLLOW_p_CaseHybrid_in_p_TypeswitchHybrid5093);
                    p_CaseHybrid202=this.p_CaseHybrid(strict);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CaseHybrid202.getTree());


                    break;

                default :
                    if ( cnt83 >= 1 ) {
                        break loop83;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(83, this.input);
                        throw eee;
                }
                cnt83++;
            } while (true);

            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_TypeswitchHybrid5099); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:707:119: ( DOLLAR p_VarName )?
            var alt84=2;
            var LA84_0 = this.input.LA(1);

            if ( (LA84_0==DOLLAR) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // xquery/XQueryParser.g:707:120: DOLLAR p_VarName
                    DOLLAR203=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TypeswitchHybrid5104); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR203_tree = this.adaptor.create(DOLLAR203);
                    this.adaptor.addChild(root_0, DOLLAR203_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TypeswitchHybrid5106);
                    p_VarName204=this.p_VarName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName204.getTree());


                    break;

            }

            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_TypeswitchHybrid5112); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_TypeswitchHybrid5116);
            p_Hybrid205=this.p_Hybrid(strict, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid205.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CaseHybrid_return: (function() {
        XQueryParser.p_CaseHybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CaseHybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:711:1: p_CaseHybrid[strict] : k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false] ;
    // $ANTLR start "p_CaseHybrid"
    p_CaseHybrid: function(strict) {
        var retval = new XQueryParser.p_CaseHybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR206 = null;
         var p_VarName207 = null;
         var p_SequenceTypeUnion208 = null;
         var p_ExprSingle209 = null;

        var k_tree=null;
        var DOLLAR206_tree=null;

        try {
            // xquery/XQueryParser.g:712:9: (k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false] )
            // xquery/XQueryParser.g:712:11: k= CASE ( DOLLAR p_VarName k= AS )? p_SequenceTypeUnion k= RETURN p_ExprSingle[false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_CaseHybrid5146); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:712:33: ( DOLLAR p_VarName k= AS )?
            var alt85=2;
            var LA85_0 = this.input.LA(1);

            if ( (LA85_0==DOLLAR) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // xquery/XQueryParser.g:712:34: DOLLAR p_VarName k= AS
                    DOLLAR206=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_CaseHybrid5151); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR206_tree = this.adaptor.create(DOLLAR206);
                    this.adaptor.addChild(root_0, DOLLAR206_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_CaseHybrid5153);
                    p_VarName207=this.p_VarName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName207.getTree());
                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CaseHybrid5157); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }


                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_SequenceTypeUnion_in_p_CaseHybrid5163);
            p_SequenceTypeUnion208=this.p_SequenceTypeUnion();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceTypeUnion208.getTree());
            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_CaseHybrid5167); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_CaseHybrid5171);
            p_ExprSingle209=this.p_ExprSingle(false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle209.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SequenceTypeUnion_return: (function() {
        XQueryParser.p_SequenceTypeUnion_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SequenceTypeUnion_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:716:1: p_SequenceTypeUnion : p_SequenceType ( VBAR p_SequenceType )* ;
    // $ANTLR start "p_SequenceTypeUnion"
    p_SequenceTypeUnion: function() {
        var retval = new XQueryParser.p_SequenceTypeUnion_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var VBAR211 = null;
         var p_SequenceType210 = null;
         var p_SequenceType212 = null;

        var VBAR211_tree=null;

        try {
            // xquery/XQueryParser.g:717:9: ( p_SequenceType ( VBAR p_SequenceType )* )
            // xquery/XQueryParser.g:717:11: p_SequenceType ( VBAR p_SequenceType )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5198);
            p_SequenceType210=this.p_SequenceType();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType210.getTree());
            // xquery/XQueryParser.g:717:26: ( VBAR p_SequenceType )*
            loop86:
            do {
                var alt86=2;
                var LA86_0 = this.input.LA(1);

                if ( (LA86_0==VBAR) ) {
                    alt86=1;
                }


                switch (alt86) {
                case 1 :
                    // xquery/XQueryParser.g:717:27: VBAR p_SequenceType
                    VBAR211=this.match(this.input,VBAR,XQueryParser.FOLLOW_VBAR_in_p_SequenceTypeUnion5201); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    VBAR211_tree = this.adaptor.create(VBAR211);
                    this.adaptor.addChild(root_0, VBAR211_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5203);
                    p_SequenceType212=this.p_SequenceType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType212.getTree());


                    break;

                default :
                    break loop86;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IfHybrid_return: (function() {
        XQueryParser.p_IfHybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IfHybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:721:1: p_IfHybrid[strict] : k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false] ;
    // $ANTLR start "p_IfHybrid"
    p_IfHybrid: function(strict) {
        var retval = new XQueryParser.p_IfHybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LPAREN213 = null;
        var RPAREN215 = null;
         var p_Expr214 = null;
         var p_Hybrid216 = null;
         var p_Hybrid217 = null;

        var k_tree=null;
        var LPAREN213_tree=null;
        var RPAREN215_tree=null;

        try {
            // xquery/XQueryParser.g:722:9: (k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false] )
            // xquery/XQueryParser.g:722:11: k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[$strict,false] k= ELSE p_Hybrid[$strict,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,IF,XQueryParser.FOLLOW_IF_in_p_IfHybrid5234); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LPAREN213=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_IfHybrid5238); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN213_tree = this.adaptor.create(LPAREN213);
            this.adaptor.addChild(root_0, LPAREN213_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_IfHybrid5240);
            p_Expr214=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr214.getTree());
            RPAREN215=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_IfHybrid5243); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN215_tree = this.adaptor.create(RPAREN215);
            this.adaptor.addChild(root_0, RPAREN215_tree);
            }
            k=this.match(this.input,THEN,XQueryParser.FOLLOW_THEN_in_p_IfHybrid5247); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_IfHybrid5251);
            p_Hybrid216=this.p_Hybrid(strict, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid216.getTree());
            k=this.match(this.input,ELSE,XQueryParser.FOLLOW_ELSE_in_p_IfHybrid5256); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_IfHybrid5260);
            p_Hybrid217=this.p_Hybrid(strict, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid217.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TryCatchExpr_return: (function() {
        XQueryParser.p_TryCatchExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TryCatchExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:726:1: p_TryCatchExpr : p_TryClause ( p_CatchClause )+ ;
    // $ANTLR start "p_TryCatchExpr"
    p_TryCatchExpr: function() {
        var retval = new XQueryParser.p_TryCatchExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_TryClause218 = null;
         var p_CatchClause219 = null;


        try {
            // xquery/XQueryParser.g:727:9: ( p_TryClause ( p_CatchClause )+ )
            // xquery/XQueryParser.g:727:11: p_TryClause ( p_CatchClause )+
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_TryClause_in_p_TryCatchExpr5287);
            p_TryClause218=this.p_TryClause();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TryClause218.getTree());
            // xquery/XQueryParser.g:727:23: ( p_CatchClause )+
            var cnt87=0;
            loop87:
            do {
                var alt87=2;
                var LA87_0 = this.input.LA(1);

                if ( (LA87_0==CATCH) ) {
                    alt87=1;
                }


                switch (alt87) {
                case 1 :
                    // xquery/XQueryParser.g:727:23: p_CatchClause
                    this.pushFollow(XQueryParser.FOLLOW_p_CatchClause_in_p_TryCatchExpr5289);
                    p_CatchClause219=this.p_CatchClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CatchClause219.getTree());


                    break;

                default :
                    if ( cnt87 >= 1 ) {
                        break loop87;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(87, this.input);
                        throw eee;
                }
                cnt87++;
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TryClause_return: (function() {
        XQueryParser.p_TryClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TryClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:731:1: p_TryClause : k= TRY LBRACKET p_TryTargetExpr RBRACKET ;
    // $ANTLR start "p_TryClause"
    p_TryClause: function() {
        var retval = new XQueryParser.p_TryClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET220 = null;
        var RBRACKET222 = null;
         var p_TryTargetExpr221 = null;

        var k_tree=null;
        var LBRACKET220_tree=null;
        var RBRACKET222_tree=null;

        try {
            // xquery/XQueryParser.g:732:9: (k= TRY LBRACKET p_TryTargetExpr RBRACKET )
            // xquery/XQueryParser.g:732:11: k= TRY LBRACKET p_TryTargetExpr RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,TRY,XQueryParser.FOLLOW_TRY_in_p_TryClause5318); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LBRACKET220=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_TryClause5322); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET220_tree = this.adaptor.create(LBRACKET220);
            this.adaptor.addChild(root_0, LBRACKET220_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_TryTargetExpr_in_p_TryClause5324);
            p_TryTargetExpr221=this.p_TryTargetExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TryTargetExpr221.getTree());
            RBRACKET222=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_TryClause5326); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET222_tree = this.adaptor.create(RBRACKET222);
            this.adaptor.addChild(root_0, RBRACKET222_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TryTargetExpr_return: (function() {
        XQueryParser.p_TryTargetExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TryTargetExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:736:1: p_TryTargetExpr : p_Expr[false,false] ;
    // $ANTLR start "p_TryTargetExpr"
    p_TryTargetExpr: function() {
        var retval = new XQueryParser.p_TryTargetExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Expr223 = null;


        try {
            // xquery/XQueryParser.g:737:9: ( p_Expr[false,false] )
            // xquery/XQueryParser.g:737:11: p_Expr[false,false]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_TryTargetExpr5352);
            p_Expr223=this.p_Expr(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr223.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CatchClause_return: (function() {
        XQueryParser.p_CatchClause_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CatchClause_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:741:1: p_CatchClause : k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET ;
    // $ANTLR start "p_CatchClause"
    p_CatchClause: function() {
        var retval = new XQueryParser.p_CatchClause_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET225 = null;
        var RBRACKET227 = null;
         var p_CatchErrorList224 = null;
         var p_Expr226 = null;

        var k_tree=null;
        var LBRACKET225_tree=null;
        var RBRACKET227_tree=null;

        try {
            // xquery/XQueryParser.g:742:9: (k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET )
            // xquery/XQueryParser.g:742:11: k= CATCH p_CatchErrorList LBRACKET p_Expr[false,false] RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,CATCH,XQueryParser.FOLLOW_CATCH_in_p_CatchClause5381); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_CatchErrorList_in_p_CatchClause5385);
            p_CatchErrorList224=this.p_CatchErrorList();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CatchErrorList224.getTree());
            LBRACKET225=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CatchClause5387); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET225_tree = this.adaptor.create(LBRACKET225);
            this.adaptor.addChild(root_0, LBRACKET225_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_CatchClause5389);
            p_Expr226=this.p_Expr(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr226.getTree());
            RBRACKET227=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CatchClause5392); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET227_tree = this.adaptor.create(RBRACKET227);
            this.adaptor.addChild(root_0, RBRACKET227_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CatchErrorList_return: (function() {
        XQueryParser.p_CatchErrorList_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CatchErrorList_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:746:1: p_CatchErrorList : ( p_NameTest ( VBAR p_NameTest )* | {...}? => () );
    // $ANTLR start "p_CatchErrorList"
    p_CatchErrorList: function() {
        var retval = new XQueryParser.p_CatchErrorList_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var VBAR229 = null;
         var p_NameTest228 = null;
         var p_NameTest230 = null;

        var VBAR229_tree=null;

        try {
            // xquery/XQueryParser.g:747:9: ( p_NameTest ( VBAR p_NameTest )* | {...}? => () )
            var alt89=2;
            var LA89_0 = this.input.LA(1);

            if ( ((LA89_0>=ANCESTOR && LA89_0<=SKIP)||(LA89_0>=VALUE && LA89_0<=QUOT_ER)||LA89_0==STAR||(LA89_0>=APOS && LA89_0<=QUOT)||LA89_0==L_NCName||LA89_0==EXPLICITLY) ) {
                alt89=1;
            }
            else if ( (LA89_0==LBRACKET) && ((this.lc(MLS)))) {
                alt89=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 89, 0, this.input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // xquery/XQueryParser.g:747:11: p_NameTest ( VBAR p_NameTest )*
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_NameTest_in_p_CatchErrorList5418);
                    p_NameTest228=this.p_NameTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NameTest228.getTree());
                    // xquery/XQueryParser.g:747:22: ( VBAR p_NameTest )*
                    loop88:
                    do {
                        var alt88=2;
                        var LA88_0 = this.input.LA(1);

                        if ( (LA88_0==VBAR) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                        case 1 :
                            // xquery/XQueryParser.g:747:23: VBAR p_NameTest
                            VBAR229=this.match(this.input,VBAR,XQueryParser.FOLLOW_VBAR_in_p_CatchErrorList5421); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            VBAR229_tree = this.adaptor.create(VBAR229);
                            this.adaptor.addChild(root_0, VBAR229_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_NameTest_in_p_CatchErrorList5423);
                            p_NameTest230=this.p_NameTest();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NameTest230.getTree());


                            break;

                        default :
                            break loop88;
                        }
                    } while (true);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:748:11: {...}? => ()
                    root_0 = this.adaptor.nil();

                    if ( !((this.lc(MLS))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_CatchErrorList", "this.lc(MLS)");
                    }
                    // xquery/XQueryParser.g:748:29: ()
                    // xquery/XQueryParser.g:748:43: 




                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_OrExpr_return: (function() {
        XQueryParser.p_OrExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_OrExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:752:1: p_OrExpr : p_AndExpr (k= OR p_AndExpr )* ;
    // $ANTLR start "p_OrExpr"
    p_OrExpr: function() {
        var retval = new XQueryParser.p_OrExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_AndExpr231 = null;
         var p_AndExpr232 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:753:9: ( p_AndExpr (k= OR p_AndExpr )* )
            // xquery/XQueryParser.g:753:11: p_AndExpr (k= OR p_AndExpr )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_AndExpr_in_p_OrExpr5468);
            p_AndExpr231=this.p_AndExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AndExpr231.getTree());
            // xquery/XQueryParser.g:753:21: (k= OR p_AndExpr )*
            loop90:
            do {
                var alt90=2;
                var LA90_0 = this.input.LA(1);

                if ( (LA90_0==OR) ) {
                    alt90=1;
                }


                switch (alt90) {
                case 1 :
                    // xquery/XQueryParser.g:753:23: k= OR p_AndExpr
                    k=this.match(this.input,OR,XQueryParser.FOLLOW_OR_in_p_OrExpr5474); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_AndExpr_in_p_OrExpr5478);
                    p_AndExpr232=this.p_AndExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AndExpr232.getTree());


                    break;

                default :
                    break loop90;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AndExpr_return: (function() {
        XQueryParser.p_AndExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AndExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:757:1: p_AndExpr : p_ComparisonExpr (k= AND p_ComparisonExpr )* ;
    // $ANTLR start "p_AndExpr"
    p_AndExpr: function() {
        var retval = new XQueryParser.p_AndExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_ComparisonExpr233 = null;
         var p_ComparisonExpr234 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:758:9: ( p_ComparisonExpr (k= AND p_ComparisonExpr )* )
            // xquery/XQueryParser.g:758:11: p_ComparisonExpr (k= AND p_ComparisonExpr )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ComparisonExpr_in_p_AndExpr5507);
            p_ComparisonExpr233=this.p_ComparisonExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ComparisonExpr233.getTree());
            // xquery/XQueryParser.g:758:28: (k= AND p_ComparisonExpr )*
            loop91:
            do {
                var alt91=2;
                var LA91_0 = this.input.LA(1);

                if ( (LA91_0==AND) ) {
                    alt91=1;
                }


                switch (alt91) {
                case 1 :
                    // xquery/XQueryParser.g:758:30: k= AND p_ComparisonExpr
                    k=this.match(this.input,AND,XQueryParser.FOLLOW_AND_in_p_AndExpr5513); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_ComparisonExpr_in_p_AndExpr5517);
                    p_ComparisonExpr234=this.p_ComparisonExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ComparisonExpr234.getTree());


                    break;

                default :
                    break loop91;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ComparisonExpr_return: (function() {
        XQueryParser.p_ComparisonExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ComparisonExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:763:1: p_ComparisonExpr : p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? ;
    // $ANTLR start "p_ComparisonExpr"
    p_ComparisonExpr: function() {
        var retval = new XQueryParser.p_ComparisonExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_FTContainsExpr235 = null;
         var p_ValueComp236 = null;
         var p_GeneralComp237 = null;
         var p_NodeComp238 = null;
         var p_FTContainsExpr239 = null;


        try {
            // xquery/XQueryParser.g:764:9: ( p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )? )
            // xquery/XQueryParser.g:764:11: p_FTContainsExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5547);
            p_FTContainsExpr235=this.p_FTContainsExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTContainsExpr235.getTree());
            // xquery/XQueryParser.g:764:28: ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr )?
            var alt93=2;
            var LA93_0 = this.input.LA(1);

            if ( (LA93_0==EQ||LA93_0==GE||LA93_0==GT||LA93_0==IS||LA93_0==LE||LA93_0==LT||LA93_0==NE||LA93_0==EQUAL||LA93_0==NOTEQUAL||(LA93_0>=SMALLER && LA93_0<=GREATER_GREATER)) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // xquery/XQueryParser.g:764:30: ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_FTContainsExpr
                    // xquery/XQueryParser.g:764:30: ( p_ValueComp | p_GeneralComp | p_NodeComp )
                    var alt92=3;
                    switch ( this.input.LA(1) ) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE:
                        alt92=1;
                        break;
                    case EQUAL:
                    case NOTEQUAL:
                    case SMALLER:
                    case GREATER:
                    case SMALLEREQ:
                    case GREATEREQ:
                        alt92=2;
                        break;
                    case IS:
                    case SMALLER_SMALLER:
                    case GREATER_GREATER:
                        alt92=3;
                        break;
                    default:
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 92, 0, this.input);

                        throw nvae;
                    }

                    switch (alt92) {
                        case 1 :
                            // xquery/XQueryParser.g:764:31: p_ValueComp
                            this.pushFollow(XQueryParser.FOLLOW_p_ValueComp_in_p_ComparisonExpr5552);
                            p_ValueComp236=this.p_ValueComp();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ValueComp236.getTree());


                            break;
                        case 2 :
                            // xquery/XQueryParser.g:764:45: p_GeneralComp
                            this.pushFollow(XQueryParser.FOLLOW_p_GeneralComp_in_p_ComparisonExpr5556);
                            p_GeneralComp237=this.p_GeneralComp();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_GeneralComp237.getTree());


                            break;
                        case 3 :
                            // xquery/XQueryParser.g:764:61: p_NodeComp
                            this.pushFollow(XQueryParser.FOLLOW_p_NodeComp_in_p_ComparisonExpr5560);
                            p_NodeComp238=this.p_NodeComp();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NodeComp238.getTree());


                            break;

                    }

                    this.pushFollow(XQueryParser.FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5563);
                    p_FTContainsExpr239=this.p_FTContainsExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTContainsExpr239.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_RangeExpr_return: (function() {
        XQueryParser.p_RangeExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_RangeExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:768:1: p_RangeExpr : p_AdditiveExpr (k= TO p_AdditiveExpr )? ;
    // $ANTLR start "p_RangeExpr"
    p_RangeExpr: function() {
        var retval = new XQueryParser.p_RangeExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_AdditiveExpr240 = null;
         var p_AdditiveExpr241 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:769:9: ( p_AdditiveExpr (k= TO p_AdditiveExpr )? )
            // xquery/XQueryParser.g:769:11: p_AdditiveExpr (k= TO p_AdditiveExpr )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_RangeExpr5592);
            p_AdditiveExpr240=this.p_AdditiveExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr240.getTree());
            // xquery/XQueryParser.g:769:26: (k= TO p_AdditiveExpr )?
            var alt94=2;
            var LA94_0 = this.input.LA(1);

            if ( (LA94_0==TO) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // xquery/XQueryParser.g:769:28: k= TO p_AdditiveExpr
                    k=this.match(this.input,TO,XQueryParser.FOLLOW_TO_in_p_RangeExpr5598); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_RangeExpr5602);
                    p_AdditiveExpr241=this.p_AdditiveExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr241.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AdditiveExpr_return: (function() {
        XQueryParser.p_AdditiveExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AdditiveExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:773:1: p_AdditiveExpr : p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* ;
    // $ANTLR start "p_AdditiveExpr"
    p_AdditiveExpr: function() {
        var retval = new XQueryParser.p_AdditiveExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set243 = null;
         var p_MultiplicativeExpr242 = null;
         var p_MultiplicativeExpr244 = null;

        var set243_tree=null;

        try {
            // xquery/XQueryParser.g:774:9: ( p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* )
            // xquery/XQueryParser.g:774:11: p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5631);
            p_MultiplicativeExpr242=this.p_MultiplicativeExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_MultiplicativeExpr242.getTree());
            // xquery/XQueryParser.g:774:32: ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            loop95:
            do {
                var alt95=2;
                var LA95_0 = this.input.LA(1);

                if ( ((LA95_0>=PLUS && LA95_0<=MINUS)) ) {
                    alt95=1;
                }


                switch (alt95) {
                case 1 :
                    // xquery/XQueryParser.g:774:34: ( PLUS | MINUS ) p_MultiplicativeExpr
                    set243=this.input.LT(1);
                    if ( (this.input.LA(1)>=PLUS && this.input.LA(1)<=MINUS) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set243));
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }

                    this.pushFollow(XQueryParser.FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5643);
                    p_MultiplicativeExpr244=this.p_MultiplicativeExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_MultiplicativeExpr244.getTree());


                    break;

                default :
                    break loop95;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_MultiplicativeExpr_return: (function() {
        XQueryParser.p_MultiplicativeExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_MultiplicativeExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:778:1: p_MultiplicativeExpr : p_UnionExpr ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )* ;
    // $ANTLR start "p_MultiplicativeExpr"
    p_MultiplicativeExpr: function() {
        var retval = new XQueryParser.p_MultiplicativeExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var STAR246 = null;
         var p_UnionExpr245 = null;
         var p_UnionExpr247 = null;

        var k_tree=null;
        var STAR246_tree=null;

        try {
            // xquery/XQueryParser.g:779:9: ( p_UnionExpr ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )* )
            // xquery/XQueryParser.g:779:11: p_UnionExpr ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5672);
            p_UnionExpr245=this.p_UnionExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnionExpr245.getTree());
            // xquery/XQueryParser.g:779:23: ( ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr )*
            loop98:
            do {
                var alt98=2;
                var LA98_0 = this.input.LA(1);

                if ( (LA98_0==DIV||LA98_0==IDIV||LA98_0==MOD||LA98_0==STAR) ) {
                    alt98=1;
                }


                switch (alt98) {
                case 1 :
                    // xquery/XQueryParser.g:779:25: ( STAR | (k= DIV | k= IDIV | k= MOD ) ) p_UnionExpr
                    // xquery/XQueryParser.g:779:25: ( STAR | (k= DIV | k= IDIV | k= MOD ) )
                    var alt97=2;
                    var LA97_0 = this.input.LA(1);

                    if ( (LA97_0==STAR) ) {
                        alt97=1;
                    }
                    else if ( (LA97_0==DIV||LA97_0==IDIV||LA97_0==MOD) ) {
                        alt97=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 97, 0, this.input);

                        throw nvae;
                    }
                    switch (alt97) {
                        case 1 :
                            // xquery/XQueryParser.g:779:26: STAR
                            STAR246=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_MultiplicativeExpr5677); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            STAR246_tree = this.adaptor.create(STAR246);
                            this.adaptor.addChild(root_0, STAR246_tree);
                            }


                            break;
                        case 2 :
                            // xquery/XQueryParser.g:779:33: (k= DIV | k= IDIV | k= MOD )
                            // xquery/XQueryParser.g:779:33: (k= DIV | k= IDIV | k= MOD )
                            var alt96=3;
                            switch ( this.input.LA(1) ) {
                            case DIV:
                                alt96=1;
                                break;
                            case IDIV:
                                alt96=2;
                                break;
                            case MOD:
                                alt96=3;
                                break;
                            default:
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae =
                                    new org.antlr.runtime.NoViableAltException("", 96, 0, this.input);

                                throw nvae;
                            }

                            switch (alt96) {
                                case 1 :
                                    // xquery/XQueryParser.g:779:34: k= DIV
                                    k=this.match(this.input,DIV,XQueryParser.FOLLOW_DIV_in_p_MultiplicativeExpr5684); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    k_tree = this.adaptor.create(k);
                                    this.adaptor.addChild(root_0, k_tree);
                                    }


                                    break;
                                case 2 :
                                    // xquery/XQueryParser.g:779:42: k= IDIV
                                    k=this.match(this.input,IDIV,XQueryParser.FOLLOW_IDIV_in_p_MultiplicativeExpr5690); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    k_tree = this.adaptor.create(k);
                                    this.adaptor.addChild(root_0, k_tree);
                                    }


                                    break;
                                case 3 :
                                    // xquery/XQueryParser.g:779:51: k= MOD
                                    k=this.match(this.input,MOD,XQueryParser.FOLLOW_MOD_in_p_MultiplicativeExpr5696); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    k_tree = this.adaptor.create(k);
                                    this.adaptor.addChild(root_0, k_tree);
                                    }


                                    break;

                            }

                            if ( this.state.backtracking===0 ) {
                              this.ak(k);
                            }


                            break;

                    }

                    this.pushFollow(XQueryParser.FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5702);
                    p_UnionExpr247=this.p_UnionExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnionExpr247.getTree());


                    break;

                default :
                    break loop98;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_UnionExpr_return: (function() {
        XQueryParser.p_UnionExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_UnionExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:783:1: p_UnionExpr : p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )* ;
    // $ANTLR start "p_UnionExpr"
    p_UnionExpr: function() {
        var retval = new XQueryParser.p_UnionExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var VBAR249 = null;
         var p_IntersectExceptExpr248 = null;
         var p_IntersectExceptExpr250 = null;

        var k_tree=null;
        var VBAR249_tree=null;

        try {
            // xquery/XQueryParser.g:784:9: ( p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )* )
            // xquery/XQueryParser.g:784:11: p_IntersectExceptExpr ( (k= UNION | VBAR ) p_IntersectExceptExpr )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5731);
            p_IntersectExceptExpr248=this.p_IntersectExceptExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IntersectExceptExpr248.getTree());
            // xquery/XQueryParser.g:784:33: ( (k= UNION | VBAR ) p_IntersectExceptExpr )*
            loop100:
            do {
                var alt100=2;
                var LA100_0 = this.input.LA(1);

                if ( (LA100_0==UNION||LA100_0==VBAR) ) {
                    alt100=1;
                }


                switch (alt100) {
                case 1 :
                    // xquery/XQueryParser.g:784:35: (k= UNION | VBAR ) p_IntersectExceptExpr
                    // xquery/XQueryParser.g:784:35: (k= UNION | VBAR )
                    var alt99=2;
                    var LA99_0 = this.input.LA(1);

                    if ( (LA99_0==UNION) ) {
                        alt99=1;
                    }
                    else if ( (LA99_0==VBAR) ) {
                        alt99=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 99, 0, this.input);

                        throw nvae;
                    }
                    switch (alt99) {
                        case 1 :
                            // xquery/XQueryParser.g:784:36: k= UNION
                            k=this.match(this.input,UNION,XQueryParser.FOLLOW_UNION_in_p_UnionExpr5738); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            k_tree = this.adaptor.create(k);
                            this.adaptor.addChild(root_0, k_tree);
                            }
                            if ( this.state.backtracking===0 ) {
                              this.ak(k);
                            }


                            break;
                        case 2 :
                            // xquery/XQueryParser.g:784:61: VBAR
                            VBAR249=this.match(this.input,VBAR,XQueryParser.FOLLOW_VBAR_in_p_UnionExpr5744); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            VBAR249_tree = this.adaptor.create(VBAR249);
                            this.adaptor.addChild(root_0, VBAR249_tree);
                            }


                            break;

                    }

                    this.pushFollow(XQueryParser.FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5747);
                    p_IntersectExceptExpr250=this.p_IntersectExceptExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IntersectExceptExpr250.getTree());


                    break;

                default :
                    break loop100;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IntersectExceptExpr_return: (function() {
        XQueryParser.p_IntersectExceptExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IntersectExceptExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:788:1: p_IntersectExceptExpr : p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* ;
    // $ANTLR start "p_IntersectExceptExpr"
    p_IntersectExceptExpr: function() {
        var retval = new XQueryParser.p_IntersectExceptExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_InstanceofExpr251 = null;
         var p_InstanceofExpr252 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:789:9: ( p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* )
            // xquery/XQueryParser.g:789:11: p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5776);
            p_InstanceofExpr251=this.p_InstanceofExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InstanceofExpr251.getTree());
            // xquery/XQueryParser.g:789:28: ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            loop102:
            do {
                var alt102=2;
                var LA102_0 = this.input.LA(1);

                if ( (LA102_0==EXCEPT||LA102_0==INTERSECT) ) {
                    alt102=1;
                }


                switch (alt102) {
                case 1 :
                    // xquery/XQueryParser.g:789:30: (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr
                    // xquery/XQueryParser.g:789:30: (k= INTERSECT | k= EXCEPT )
                    var alt101=2;
                    var LA101_0 = this.input.LA(1);

                    if ( (LA101_0==INTERSECT) ) {
                        alt101=1;
                    }
                    else if ( (LA101_0==EXCEPT) ) {
                        alt101=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 101, 0, this.input);

                        throw nvae;
                    }
                    switch (alt101) {
                        case 1 :
                            // xquery/XQueryParser.g:789:31: k= INTERSECT
                            k=this.match(this.input,INTERSECT,XQueryParser.FOLLOW_INTERSECT_in_p_IntersectExceptExpr5783); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            k_tree = this.adaptor.create(k);
                            this.adaptor.addChild(root_0, k_tree);
                            }


                            break;
                        case 2 :
                            // xquery/XQueryParser.g:789:45: k= EXCEPT
                            k=this.match(this.input,EXCEPT,XQueryParser.FOLLOW_EXCEPT_in_p_IntersectExceptExpr5789); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            k_tree = this.adaptor.create(k);
                            this.adaptor.addChild(root_0, k_tree);
                            }


                            break;

                    }

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5794);
                    p_InstanceofExpr252=this.p_InstanceofExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InstanceofExpr252.getTree());


                    break;

                default :
                    break loop102;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_InstanceofExpr_return: (function() {
        XQueryParser.p_InstanceofExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_InstanceofExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:793:1: p_InstanceofExpr : p_TreatExpr (k= INSTANCE k= OF p_SequenceType )? ;
    // $ANTLR start "p_InstanceofExpr"
    p_InstanceofExpr: function() {
        var retval = new XQueryParser.p_InstanceofExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_TreatExpr253 = null;
         var p_SequenceType254 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:794:9: ( p_TreatExpr (k= INSTANCE k= OF p_SequenceType )? )
            // xquery/XQueryParser.g:794:11: p_TreatExpr (k= INSTANCE k= OF p_SequenceType )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_TreatExpr_in_p_InstanceofExpr5823);
            p_TreatExpr253=this.p_TreatExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TreatExpr253.getTree());
            // xquery/XQueryParser.g:794:23: (k= INSTANCE k= OF p_SequenceType )?
            var alt103=2;
            var LA103_0 = this.input.LA(1);

            if ( (LA103_0==INSTANCE) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // xquery/XQueryParser.g:794:25: k= INSTANCE k= OF p_SequenceType
                    k=this.match(this.input,INSTANCE,XQueryParser.FOLLOW_INSTANCE_in_p_InstanceofExpr5829); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    k=this.match(this.input,OF,XQueryParser.FOLLOW_OF_in_p_InstanceofExpr5835); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_InstanceofExpr5839);
                    p_SequenceType254=this.p_SequenceType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType254.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TreatExpr_return: (function() {
        XQueryParser.p_TreatExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TreatExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:798:1: p_TreatExpr : p_CastableExpr (k= TREAT k= AS p_SequenceType )? ;
    // $ANTLR start "p_TreatExpr"
    p_TreatExpr: function() {
        var retval = new XQueryParser.p_TreatExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_CastableExpr255 = null;
         var p_SequenceType256 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:799:9: ( p_CastableExpr (k= TREAT k= AS p_SequenceType )? )
            // xquery/XQueryParser.g:799:11: p_CastableExpr (k= TREAT k= AS p_SequenceType )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_CastableExpr_in_p_TreatExpr5867);
            p_CastableExpr255=this.p_CastableExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CastableExpr255.getTree());
            // xquery/XQueryParser.g:799:26: (k= TREAT k= AS p_SequenceType )?
            var alt104=2;
            var LA104_0 = this.input.LA(1);

            if ( (LA104_0==TREAT) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // xquery/XQueryParser.g:799:28: k= TREAT k= AS p_SequenceType
                    k=this.match(this.input,TREAT,XQueryParser.FOLLOW_TREAT_in_p_TreatExpr5873); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_TreatExpr5879); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TreatExpr5883);
                    p_SequenceType256=this.p_SequenceType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType256.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CastableExpr_return: (function() {
        XQueryParser.p_CastableExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CastableExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:803:1: p_CastableExpr : p_CastExpr (k= CASTABLE k= AS p_SingleType )? ;
    // $ANTLR start "p_CastableExpr"
    p_CastableExpr: function() {
        var retval = new XQueryParser.p_CastableExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_CastExpr257 = null;
         var p_SingleType258 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:804:9: ( p_CastExpr (k= CASTABLE k= AS p_SingleType )? )
            // xquery/XQueryParser.g:804:11: p_CastExpr (k= CASTABLE k= AS p_SingleType )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_CastExpr_in_p_CastableExpr5920);
            p_CastExpr257=this.p_CastExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CastExpr257.getTree());
            // xquery/XQueryParser.g:804:22: (k= CASTABLE k= AS p_SingleType )?
            var alt105=2;
            var LA105_0 = this.input.LA(1);

            if ( (LA105_0==CASTABLE) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // xquery/XQueryParser.g:804:24: k= CASTABLE k= AS p_SingleType
                    k=this.match(this.input,CASTABLE,XQueryParser.FOLLOW_CASTABLE_in_p_CastableExpr5926); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CastableExpr5932); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_SingleType_in_p_CastableExpr5936);
                    p_SingleType258=this.p_SingleType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SingleType258.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CastExpr_return: (function() {
        XQueryParser.p_CastExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CastExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:808:1: p_CastExpr : p_UnaryExpr (k= CAST k= AS p_SingleType )? ;
    // $ANTLR start "p_CastExpr"
    p_CastExpr: function() {
        var retval = new XQueryParser.p_CastExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_UnaryExpr259 = null;
         var p_SingleType260 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:809:9: ( p_UnaryExpr (k= CAST k= AS p_SingleType )? )
            // xquery/XQueryParser.g:809:11: p_UnaryExpr (k= CAST k= AS p_SingleType )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_UnaryExpr_in_p_CastExpr5973);
            p_UnaryExpr259=this.p_UnaryExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnaryExpr259.getTree());
            // xquery/XQueryParser.g:809:23: (k= CAST k= AS p_SingleType )?
            var alt106=2;
            var LA106_0 = this.input.LA(1);

            if ( (LA106_0==CAST) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // xquery/XQueryParser.g:809:25: k= CAST k= AS p_SingleType
                    k=this.match(this.input,CAST,XQueryParser.FOLLOW_CAST_in_p_CastExpr5979); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CastExpr5985); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_SingleType_in_p_CastExpr5989);
                    p_SingleType260=this.p_SingleType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SingleType260.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_UnaryExpr_return: (function() {
        XQueryParser.p_UnaryExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_UnaryExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:813:1: p_UnaryExpr : ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) ;
    // $ANTLR start "p_UnaryExpr"
    p_UnaryExpr: function() {
        var retval = new XQueryParser.p_UnaryExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var PLUS261 = null;
        var MINUS262 = null;
         var p_ValueExpr263 = null;

        var PLUS261_tree=null;
        var MINUS262_tree=null;
        var stream_PLUS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token PLUS");
        var stream_MINUS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token MINUS");
        var stream_p_ValueExpr=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_ValueExpr");
        try {
            // xquery/XQueryParser.g:814:9: ( ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) )
            // xquery/XQueryParser.g:814:11: ( PLUS | MINUS )* p_ValueExpr
            // xquery/XQueryParser.g:814:11: ( PLUS | MINUS )*
            loop107:
            do {
                var alt107=3;
                var LA107_0 = this.input.LA(1);

                if ( (LA107_0==PLUS) ) {
                    alt107=1;
                }
                else if ( (LA107_0==MINUS) ) {
                    alt107=2;
                }


                switch (alt107) {
                case 1 :
                    // xquery/XQueryParser.g:814:12: PLUS
                    PLUS261=this.match(this.input,PLUS,XQueryParser.FOLLOW_PLUS_in_p_UnaryExpr6019); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_PLUS.add(PLUS261);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:814:19: MINUS
                    MINUS262=this.match(this.input,MINUS,XQueryParser.FOLLOW_MINUS_in_p_UnaryExpr6023); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_MINUS.add(MINUS262);



                    break;

                default :
                    break loop107;
                }
            } while (true);

            this.pushFollow(XQueryParser.FOLLOW_p_ValueExpr_in_p_UnaryExpr6027);
            p_ValueExpr263=this.p_ValueExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_ValueExpr.add(p_ValueExpr263.getTree());


            // AST REWRITE
            // elements: p_ValueExpr, PLUS
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 815:17: -> ^( UnaryExpr ( PLUS )* p_ValueExpr )
            {
                // xquery/XQueryParser.g:815:20: ^( UnaryExpr ( PLUS )* p_ValueExpr )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(UnaryExpr, "UnaryExpr"), root_1);

                // xquery/XQueryParser.g:815:32: ( PLUS )*
                while ( stream_PLUS.hasNext() ) {
                    this.adaptor.addChild(root_1, stream_PLUS.nextNode());

                }
                stream_PLUS.reset();
                this.adaptor.addChild(root_1, stream_p_ValueExpr.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ValueExpr_return: (function() {
        XQueryParser.p_ValueExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ValueExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:819:1: p_ValueExpr : ( ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr );
    // $ANTLR start "p_ValueExpr"
    p_ValueExpr: function() {
        var retval = new XQueryParser.p_ValueExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ValidateExpr264 = null;
         var p_PathExpr265 = null;
         var p_ExtensionExpr266 = null;


        try {
            // xquery/XQueryParser.g:820:9: ( ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr | p_PathExpr | p_ExtensionExpr )
            var alt108=3;
            switch ( this.input.LA(1) ) {
            case VALIDATE:
                var LA108_1 = this.input.LA(2);

                if ( (LA108_1==LAX) && (this.synpred6_XQueryParser())) {
                    alt108=1;
                }
                else if ( (LA108_1==STRICT) && (this.synpred6_XQueryParser())) {
                    alt108=1;
                }
                else if ( (LA108_1==TYPE) && (this.synpred6_XQueryParser())) {
                    alt108=1;
                }
                else if ( (LA108_1==LBRACKET) && (this.synpred6_XQueryParser())) {
                    alt108=1;
                }
                else if ( (LA108_1==EOF||(LA108_1>=AND && LA108_1<=ASCENDING)||(LA108_1>=CASE && LA108_1<=CASTABLE)||LA108_1==COLLATION||LA108_1==DEFAULT||(LA108_1>=DESCENDING && LA108_1<=DIV)||LA108_1==EMPTY||LA108_1==EQ||LA108_1==EXCEPT||LA108_1==FOR||LA108_1==GE||(LA108_1>=GT && LA108_1<=IDIV)||(LA108_1>=INSTANCE && LA108_1<=IS)||LA108_1==LE||(LA108_1>=LET && LA108_1<=MOD)||LA108_1==NE||(LA108_1>=OR && LA108_1<=ORDER)||(LA108_1>=RETURN && LA108_1<=SATISFIES)||LA108_1==STABLE||(LA108_1>=TO && LA108_1<=TREAT)||LA108_1==UNION||LA108_1==WHERE||LA108_1==COUNT||(LA108_1>=END && LA108_1<=GROUP)||LA108_1==ONLY||LA108_1==START||(LA108_1>=AFTER && LA108_1<=BEFORE)||LA108_1==INTO||LA108_1==MODIFY||LA108_1==WITH||LA108_1==CONTAINS||LA108_1==PARAGRAPHS||LA108_1==SENTENCES||LA108_1==TIMES||LA108_1==WORDS||(LA108_1>=CONCAT && LA108_1<=RPAREN)||(LA108_1>=RBRACKET && LA108_1<=EQUAL)||LA108_1==NOTEQUAL||LA108_1==COMMA||(LA108_1>=STAR && LA108_1<=SLASH_SLASH)||LA108_1==COLON||(LA108_1>=SEMICOLON && LA108_1<=VBAR)) ) {
                    alt108=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 108, 1, this.input);

                    throw nvae;
                }
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case ALLOWING:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case SWITCH:
            case TRY:
            case TUMBLING:
            case TYPE:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case UPDATING:
            case VALUE:
            case WITH:
            case ALL:
            case ANY:
            case CONTAINS:
            case CONTENT:
            case DIACRITICS:
            case DIFFERENT:
            case DISTANCE:
            case ENTIRE:
            case EXACTLY:
            case FROM:
            case FT_OPTION:
            case FTAND:
            case FTNOT:
            case FTOR:
            case INSENSITIVE:
            case LANGUAGE:
            case LEVELS:
            case LOWERCASE:
            case MOST:
            case NO:
            case NOT:
            case OCCURS:
            case PARAGRAPH:
            case PARAGRAPHS:
            case PHRASE:
            case RELATIONSHIP:
            case SAME:
            case SCORE:
            case SENSITIVE:
            case SENTENCE:
            case SENTENCES:
            case STEMMING:
            case STOP:
            case THESAURUS:
            case TIMES:
            case UPPERCASE:
            case USING:
            case WEIGHT:
            case WILDCARDS:
            case WITHOUT:
            case WORD:
            case WORDS:
            case BREAK:
            case CONTINUE:
            case EXIT:
            case LOOP:
            case RETURNING:
            case WHILE:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case FOREACH:
            case FOREIGN:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case ON:
            case UNIQUE:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case LPAREN:
            case DOLLAR:
            case LBRACKET:
            case STAR:
            case SMALLER:
            case SLASH:
            case SLASH_SLASH:
            case DOT:
            case DOT_DOT:
            case ATTR_SIGN:
            case APOS:
            case QUOT:
            case L_NCName:
            case L_DirCommentConstructor:
            case L_DirPIConstructor:
            case L_IntegerLiteral:
            case L_DecimalLiteral:
            case L_DoubleLiteral:
            case EXPLICITLY:
                alt108=2;
                break;
            case L_Pragma:
                alt108=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 108, 0, this.input);

                throw nvae;
            }

            switch (alt108) {
                case 1 :
                    // xquery/XQueryParser.g:820:11: ( VALIDATE ( p_ValidationMode | TYPE )? )=> p_ValidateExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ValidateExpr_in_p_ValueExpr6097);
                    p_ValidateExpr264=this.p_ValidateExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ValidateExpr264.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:821:11: p_PathExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_ValueExpr6109);
                    p_PathExpr265=this.p_PathExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr265.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:822:11: p_ExtensionExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ExtensionExpr_in_p_ValueExpr6121);
                    p_ExtensionExpr266=this.p_ExtensionExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExtensionExpr266.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_GeneralComp_return: (function() {
        XQueryParser.p_GeneralComp_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_GeneralComp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:826:1: p_GeneralComp : ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ );
    // $ANTLR start "p_GeneralComp"
    p_GeneralComp: function() {
        var retval = new XQueryParser.p_GeneralComp_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set267 = null;

        var set267_tree=null;

        try {
            // xquery/XQueryParser.g:827:9: ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ )
            // xquery/XQueryParser.g:
            root_0 = this.adaptor.nil();

            set267=this.input.LT(1);
            if ( this.input.LA(1)==EQUAL||this.input.LA(1)==NOTEQUAL||(this.input.LA(1)>=SMALLER && this.input.LA(1)<=GREATEREQ) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set267));
                this.state.errorRecovery=false;this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                throw mse;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ValueComp_return: (function() {
        XQueryParser.p_ValueComp_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ValueComp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:831:1: p_ValueComp : (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) ;
    // $ANTLR start "p_ValueComp"
    p_ValueComp: function() {
        var retval = new XQueryParser.p_ValueComp_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:832:9: ( (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) )
            // xquery/XQueryParser.g:832:11: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:832:11: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            var alt109=6;
            switch ( this.input.LA(1) ) {
            case EQ:
                alt109=1;
                break;
            case NE:
                alt109=2;
                break;
            case LT:
                alt109=3;
                break;
            case LE:
                alt109=4;
                break;
            case GT:
                alt109=5;
                break;
            case GE:
                alt109=6;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 109, 0, this.input);

                throw nvae;
            }

            switch (alt109) {
                case 1 :
                    // xquery/XQueryParser.g:832:12: k= EQ
                    k=this.match(this.input,EQ,XQueryParser.FOLLOW_EQ_in_p_ValueComp6196); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:832:19: k= NE
                    k=this.match(this.input,NE,XQueryParser.FOLLOW_NE_in_p_ValueComp6202); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 3 :
                    // xquery/XQueryParser.g:832:26: k= LT
                    k=this.match(this.input,LT,XQueryParser.FOLLOW_LT_in_p_ValueComp6208); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 4 :
                    // xquery/XQueryParser.g:832:33: k= LE
                    k=this.match(this.input,LE,XQueryParser.FOLLOW_LE_in_p_ValueComp6214); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 5 :
                    // xquery/XQueryParser.g:832:40: k= GT
                    k=this.match(this.input,GT,XQueryParser.FOLLOW_GT_in_p_ValueComp6220); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 6 :
                    // xquery/XQueryParser.g:832:47: k= GE
                    k=this.match(this.input,GE,XQueryParser.FOLLOW_GE_in_p_ValueComp6226); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_NodeComp_return: (function() {
        XQueryParser.p_NodeComp_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_NodeComp_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:836:1: p_NodeComp : (k= IS | SMALLER_SMALLER | GREATER_GREATER );
    // $ANTLR start "p_NodeComp"
    p_NodeComp: function() {
        var retval = new XQueryParser.p_NodeComp_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SMALLER_SMALLER268 = null;
        var GREATER_GREATER269 = null;

        var k_tree=null;
        var SMALLER_SMALLER268_tree=null;
        var GREATER_GREATER269_tree=null;

        try {
            // xquery/XQueryParser.g:837:9: (k= IS | SMALLER_SMALLER | GREATER_GREATER )
            var alt110=3;
            switch ( this.input.LA(1) ) {
            case IS:
                alt110=1;
                break;
            case SMALLER_SMALLER:
                alt110=2;
                break;
            case GREATER_GREATER:
                alt110=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 110, 0, this.input);

                throw nvae;
            }

            switch (alt110) {
                case 1 :
                    // xquery/XQueryParser.g:837:11: k= IS
                    root_0 = this.adaptor.nil();

                    k=this.match(this.input,IS,XQueryParser.FOLLOW_IS_in_p_NodeComp6257); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:837:33: SMALLER_SMALLER
                    root_0 = this.adaptor.nil();

                    SMALLER_SMALLER268=this.match(this.input,SMALLER_SMALLER,XQueryParser.FOLLOW_SMALLER_SMALLER_in_p_NodeComp6263); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    SMALLER_SMALLER268_tree = this.adaptor.create(SMALLER_SMALLER268);
                    this.adaptor.addChild(root_0, SMALLER_SMALLER268_tree);
                    }


                    break;
                case 3 :
                    // xquery/XQueryParser.g:837:51: GREATER_GREATER
                    root_0 = this.adaptor.nil();

                    GREATER_GREATER269=this.match(this.input,GREATER_GREATER,XQueryParser.FOLLOW_GREATER_GREATER_in_p_NodeComp6267); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    GREATER_GREATER269_tree = this.adaptor.create(GREATER_GREATER269);
                    this.adaptor.addChild(root_0, GREATER_GREATER269_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ValidateExpr_return: (function() {
        XQueryParser.p_ValidateExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ValidateExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:841:1: p_ValidateExpr : k= VALIDATE ( p_ValidationMode | k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET ;
    // $ANTLR start "p_ValidateExpr"
    p_ValidateExpr: function() {
        var retval = new XQueryParser.p_ValidateExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET272 = null;
        var RBRACKET274 = null;
         var p_ValidationMode270 = null;
         var p_TypeName271 = null;
         var p_Expr273 = null;

        var k_tree=null;
        var LBRACKET272_tree=null;
        var RBRACKET274_tree=null;

        try {
            // xquery/XQueryParser.g:842:9: (k= VALIDATE ( p_ValidationMode | k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET )
            // xquery/XQueryParser.g:842:11: k= VALIDATE ( p_ValidationMode | k= TYPE p_TypeName )? LBRACKET p_Expr[true,true] RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,VALIDATE,XQueryParser.FOLLOW_VALIDATE_in_p_ValidateExpr6295); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:842:37: ( p_ValidationMode | k= TYPE p_TypeName )?
            var alt111=3;
            var LA111_0 = this.input.LA(1);

            if ( (LA111_0==LAX||LA111_0==STRICT) ) {
                alt111=1;
            }
            else if ( (LA111_0==TYPE) ) {
                alt111=2;
            }
            switch (alt111) {
                case 1 :
                    // xquery/XQueryParser.g:842:39: p_ValidationMode
                    this.pushFollow(XQueryParser.FOLLOW_p_ValidationMode_in_p_ValidateExpr6301);
                    p_ValidationMode270=this.p_ValidationMode();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ValidationMode270.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:842:58: k= TYPE p_TypeName
                    k=this.match(this.input,TYPE,XQueryParser.FOLLOW_TYPE_in_p_ValidateExpr6307); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_TypeName_in_p_ValidateExpr6311);
                    p_TypeName271=this.p_TypeName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeName271.getTree());


                    break;

            }

            LBRACKET272=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_ValidateExpr6316); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET272_tree = this.adaptor.create(LBRACKET272);
            this.adaptor.addChild(root_0, LBRACKET272_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_ValidateExpr6318);
            p_Expr273=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr273.getTree());
            RBRACKET274=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_ValidateExpr6321); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET274_tree = this.adaptor.create(RBRACKET274);
            this.adaptor.addChild(root_0, RBRACKET274_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ValidationMode_return: (function() {
        XQueryParser.p_ValidationMode_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ValidationMode_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:846:1: p_ValidationMode : (k= LAX | k= STRICT ) ;
    // $ANTLR start "p_ValidationMode"
    p_ValidationMode: function() {
        var retval = new XQueryParser.p_ValidationMode_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:847:9: ( (k= LAX | k= STRICT ) )
            // xquery/XQueryParser.g:847:11: (k= LAX | k= STRICT )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:847:11: (k= LAX | k= STRICT )
            var alt112=2;
            var LA112_0 = this.input.LA(1);

            if ( (LA112_0==LAX) ) {
                alt112=1;
            }
            else if ( (LA112_0==STRICT) ) {
                alt112=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 112, 0, this.input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // xquery/XQueryParser.g:847:12: k= LAX
                    k=this.match(this.input,LAX,XQueryParser.FOLLOW_LAX_in_p_ValidationMode6350); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:847:20: k= STRICT
                    k=this.match(this.input,STRICT,XQueryParser.FOLLOW_STRICT_in_p_ValidationMode6356); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }


                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ExtensionExpr_return: (function() {
        XQueryParser.p_ExtensionExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ExtensionExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:851:1: p_ExtensionExpr : ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET ;
    // $ANTLR start "p_ExtensionExpr"
    p_ExtensionExpr: function() {
        var retval = new XQueryParser.p_ExtensionExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var L_Pragma275 = null;
        var LBRACKET276 = null;
        var RBRACKET278 = null;
         var p_Expr277 = null;

        var L_Pragma275_tree=null;
        var LBRACKET276_tree=null;
        var RBRACKET278_tree=null;

        try {
            // xquery/XQueryParser.g:852:9: ( ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET )
            // xquery/XQueryParser.g:852:11: ( L_Pragma )+ LBRACKET ( p_Expr[true,true] )? RBRACKET
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:852:11: ( L_Pragma )+
            var cnt113=0;
            loop113:
            do {
                var alt113=2;
                var LA113_0 = this.input.LA(1);

                if ( (LA113_0==L_Pragma) ) {
                    alt113=1;
                }


                switch (alt113) {
                case 1 :
                    // xquery/XQueryParser.g:852:11: L_Pragma
                    L_Pragma275=this.match(this.input,L_Pragma,XQueryParser.FOLLOW_L_Pragma_in_p_ExtensionExpr6385); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    L_Pragma275_tree = this.adaptor.create(L_Pragma275);
                    this.adaptor.addChild(root_0, L_Pragma275_tree);
                    }


                    break;

                default :
                    if ( cnt113 >= 1 ) {
                        break loop113;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(113, this.input);
                        throw eee;
                }
                cnt113++;
            } while (true);

            LBRACKET276=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_ExtensionExpr6388); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET276_tree = this.adaptor.create(LBRACKET276);
            this.adaptor.addChild(root_0, LBRACKET276_tree);
            }
            // xquery/XQueryParser.g:852:30: ( p_Expr[true,true] )?
            var alt114=2;
            var LA114_0 = this.input.LA(1);

            if ( ((LA114_0>=ANCESTOR && LA114_0<=QUOT_ER)||LA114_0==LPAREN||(LA114_0>=DOLLAR && LA114_0<=LBRACKET)||(LA114_0>=STAR && LA114_0<=SMALLER)||(LA114_0>=SLASH && LA114_0<=DOT_DOT)||LA114_0==ATTR_SIGN||(LA114_0>=APOS && LA114_0<=QUOT)||LA114_0==L_NCName||(LA114_0>=L_Pragma && LA114_0<=L_DoubleLiteral)||LA114_0==EXPLICITLY) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // xquery/XQueryParser.g:852:30: p_Expr[true,true]
                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_ExtensionExpr6390);
                    p_Expr277=this.p_Expr(true, true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr277.getTree());


                    break;

            }

            RBRACKET278=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_ExtensionExpr6394); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET278_tree = this.adaptor.create(RBRACKET278);
            this.adaptor.addChild(root_0, RBRACKET278_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_PathExpr_return: (function() {
        XQueryParser.p_PathExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_PathExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:864:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );
    // $ANTLR start "p_PathExpr"
    p_PathExpr: function() {
        var retval = new XQueryParser.p_PathExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var SLASH279 = null;
        var SLASH281 = null;
        var SLASH_SLASH282 = null;
         var p_RelativePathExpr280 = null;
         var p_RelativePathExpr283 = null;
         var p_RelativePathExpr284 = null;

        var SLASH279_tree=null;
        var SLASH281_tree=null;
        var SLASH_SLASH282_tree=null;

        try {
            // xquery/XQueryParser.g:865:9: ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr )
            var alt115=4;
            alt115 = this.dfa115.predict(this.input);
            switch (alt115) {
                case 1 :
                    // xquery/XQueryParser.g:865:11: ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr )
                    root_0 = this.adaptor.nil();

                    // xquery/XQueryParser.g:865:41: ( SLASH p_RelativePathExpr )
                    // xquery/XQueryParser.g:865:42: SLASH p_RelativePathExpr
                    SLASH279=this.match(this.input,SLASH,XQueryParser.FOLLOW_SLASH_in_p_PathExpr6437); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    SLASH279_tree = this.adaptor.create(SLASH279);
                    this.adaptor.addChild(root_0, SLASH279_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_RelativePathExpr_in_p_PathExpr6439);
                    p_RelativePathExpr280=this.p_RelativePathExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RelativePathExpr280.getTree());





                    break;
                case 2 :
                    // xquery/XQueryParser.g:866:11: SLASH
                    root_0 = this.adaptor.nil();

                    SLASH281=this.match(this.input,SLASH,XQueryParser.FOLLOW_SLASH_in_p_PathExpr6452); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    SLASH281_tree = this.adaptor.create(SLASH281);
                    this.adaptor.addChild(root_0, SLASH281_tree);
                    }


                    break;
                case 3 :
                    // xquery/XQueryParser.g:867:11: SLASH_SLASH p_RelativePathExpr
                    root_0 = this.adaptor.nil();

                    SLASH_SLASH282=this.match(this.input,SLASH_SLASH,XQueryParser.FOLLOW_SLASH_SLASH_in_p_PathExpr6464); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    SLASH_SLASH282_tree = this.adaptor.create(SLASH_SLASH282);
                    this.adaptor.addChild(root_0, SLASH_SLASH282_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_RelativePathExpr_in_p_PathExpr6466);
                    p_RelativePathExpr283=this.p_RelativePathExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RelativePathExpr283.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:868:11: p_RelativePathExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_RelativePathExpr_in_p_PathExpr6478);
                    p_RelativePathExpr284=this.p_RelativePathExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RelativePathExpr284.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_RelativePathExpr_return: (function() {
        XQueryParser.p_RelativePathExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_RelativePathExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:872:1: p_RelativePathExpr : p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* ;
    // $ANTLR start "p_RelativePathExpr"
    p_RelativePathExpr: function() {
        var retval = new XQueryParser.p_RelativePathExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set286 = null;
         var p_StepExpr285 = null;
         var p_StepExpr287 = null;

        var set286_tree=null;

        try {
            // xquery/XQueryParser.g:873:9: ( p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* )
            // xquery/XQueryParser.g:873:11: p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_StepExpr_in_p_RelativePathExpr6506);
            p_StepExpr285=this.p_StepExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StepExpr285.getTree());
            // xquery/XQueryParser.g:873:22: ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            loop116:
            do {
                var alt116=2;
                var LA116_0 = this.input.LA(1);

                if ( ((LA116_0>=SLASH && LA116_0<=SLASH_SLASH)) ) {
                    alt116=1;
                }


                switch (alt116) {
                case 1 :
                    // xquery/XQueryParser.g:873:23: ( SLASH | SLASH_SLASH ) p_StepExpr
                    set286=this.input.LT(1);
                    if ( (this.input.LA(1)>=SLASH && this.input.LA(1)<=SLASH_SLASH) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set286));
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }

                    this.pushFollow(XQueryParser.FOLLOW_p_StepExpr_in_p_RelativePathExpr6517);
                    p_StepExpr287=this.p_StepExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StepExpr287.getTree());


                    break;

                default :
                    break loop116;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_StepExpr_return: (function() {
        XQueryParser.p_StepExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_StepExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:877:1: p_StepExpr : ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep );
    // $ANTLR start "p_StepExpr"
    p_StepExpr: function() {
        var retval = new XQueryParser.p_StepExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_PostfixExpr288 = null;
         var p_PostfixExpr289 = null;
         var p_AxisStep290 = null;
         var p_PostfixExpr291 = null;
         var p_PostfixExpr292 = null;
         var p_AxisStep293 = null;


        try {
            // xquery/XQueryParser.g:878:9: ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep )
            var alt117=6;
            alt117 = this.dfa117.predict(this.input);
            switch (alt117) {
                case 1 :
                    // xquery/XQueryParser.g:878:11: ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_PostfixExpr_in_p_StepExpr6571);
                    p_PostfixExpr288=this.p_PostfixExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PostfixExpr288.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:879:11: ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_PostfixExpr_in_p_StepExpr6685);
                    p_PostfixExpr289=this.p_PostfixExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PostfixExpr289.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:884:11: ( p_KindTest )=> p_AxisStep
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AxisStep_in_p_StepExpr6703);
                    p_AxisStep290=this.p_AxisStep();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AxisStep290.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:885:11: ( p_QName LPAREN )=> p_PostfixExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_PostfixExpr_in_p_StepExpr6724);
                    p_PostfixExpr291=this.p_PostfixExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PostfixExpr291.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:886:11: ( p_PrimaryExpr )=> p_PostfixExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_PostfixExpr_in_p_StepExpr6742);
                    p_PostfixExpr292=this.p_PostfixExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PostfixExpr292.getTree());


                    break;
                case 6 :
                    // xquery/XQueryParser.g:887:11: p_AxisStep
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AxisStep_in_p_StepExpr6754);
                    p_AxisStep293=this.p_AxisStep();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AxisStep293.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AxisStep_return: (function() {
        XQueryParser.p_AxisStep_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AxisStep_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:891:1: p_AxisStep : ( p_ReverseStep | p_ForwardStep ) p_PredicateList ;
    // $ANTLR start "p_AxisStep"
    p_AxisStep: function() {
        var retval = new XQueryParser.p_AxisStep_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ReverseStep294 = null;
         var p_ForwardStep295 = null;
         var p_PredicateList296 = null;


        try {
            // xquery/XQueryParser.g:892:9: ( ( p_ReverseStep | p_ForwardStep ) p_PredicateList )
            // xquery/XQueryParser.g:892:11: ( p_ReverseStep | p_ForwardStep ) p_PredicateList
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:892:11: ( p_ReverseStep | p_ForwardStep )
            var alt118=2;
            switch ( this.input.LA(1) ) {
            case PARENT:
                var LA118_1 = this.input.LA(2);

                if ( (LA118_1==COLON_COLON) ) {
                    alt118=1;
                }
                else if ( (LA118_1==EOF||(LA118_1>=AND && LA118_1<=ASCENDING)||(LA118_1>=BY && LA118_1<=CASTABLE)||LA118_1==COLLATION||LA118_1==DEFAULT||(LA118_1>=DESCENDING && LA118_1<=DIV)||LA118_1==EMPTY||LA118_1==EQ||LA118_1==EXCEPT||LA118_1==FOR||LA118_1==GE||(LA118_1>=GT && LA118_1<=IDIV)||(LA118_1>=INSTANCE && LA118_1<=IS)||LA118_1==LE||(LA118_1>=LET && LA118_1<=MOD)||LA118_1==NE||(LA118_1>=OR && LA118_1<=ORDER)||(LA118_1>=RETURN && LA118_1<=SATISFIES)||LA118_1==STABLE||(LA118_1>=TO && LA118_1<=TREAT)||LA118_1==UNION||LA118_1==WHERE||LA118_1==COUNT||(LA118_1>=END && LA118_1<=GROUP)||LA118_1==ONLY||LA118_1==START||(LA118_1>=AFTER && LA118_1<=BEFORE)||LA118_1==INTO||LA118_1==MODIFY||LA118_1==WITH||LA118_1==CONTAINS||LA118_1==PARAGRAPHS||LA118_1==SENTENCES||LA118_1==TIMES||LA118_1==WORDS||LA118_1==CONCAT||LA118_1==RPAREN||(LA118_1>=RBRACKET && LA118_1<=EQUAL)||LA118_1==NOTEQUAL||LA118_1==COMMA||(LA118_1>=STAR && LA118_1<=SLASH_SLASH)||LA118_1==COLON||(LA118_1>=SEMICOLON && LA118_1<=VBAR)) ) {
                    alt118=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 118, 1, this.input);

                    throw nvae;
                }
                break;
            case ANCESTOR:
                var LA118_2 = this.input.LA(2);

                if ( (LA118_2==COLON_COLON) ) {
                    alt118=1;
                }
                else if ( (LA118_2==EOF||(LA118_2>=AND && LA118_2<=ASCENDING)||(LA118_2>=BY && LA118_2<=CASTABLE)||LA118_2==COLLATION||LA118_2==DEFAULT||(LA118_2>=DESCENDING && LA118_2<=DIV)||LA118_2==EMPTY||LA118_2==EQ||LA118_2==EXCEPT||LA118_2==FOR||LA118_2==GE||(LA118_2>=GT && LA118_2<=IDIV)||(LA118_2>=INSTANCE && LA118_2<=IS)||LA118_2==LE||(LA118_2>=LET && LA118_2<=MOD)||LA118_2==NE||(LA118_2>=OR && LA118_2<=ORDER)||(LA118_2>=RETURN && LA118_2<=SATISFIES)||LA118_2==STABLE||(LA118_2>=TO && LA118_2<=TREAT)||LA118_2==UNION||LA118_2==WHERE||LA118_2==COUNT||(LA118_2>=END && LA118_2<=GROUP)||LA118_2==ONLY||LA118_2==START||(LA118_2>=AFTER && LA118_2<=BEFORE)||LA118_2==INTO||LA118_2==MODIFY||LA118_2==WITH||LA118_2==CONTAINS||LA118_2==PARAGRAPHS||LA118_2==SENTENCES||LA118_2==TIMES||LA118_2==WORDS||LA118_2==CONCAT||LA118_2==RPAREN||(LA118_2>=RBRACKET && LA118_2<=EQUAL)||LA118_2==NOTEQUAL||LA118_2==COMMA||(LA118_2>=STAR && LA118_2<=SLASH_SLASH)||LA118_2==COLON||(LA118_2>=SEMICOLON && LA118_2<=VBAR)) ) {
                    alt118=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 118, 2, this.input);

                    throw nvae;
                }
                break;
            case PRECEDING_SIBLING:
                var LA118_3 = this.input.LA(2);

                if ( (LA118_3==COLON_COLON) ) {
                    alt118=1;
                }
                else if ( (LA118_3==EOF||(LA118_3>=AND && LA118_3<=ASCENDING)||(LA118_3>=BY && LA118_3<=CASTABLE)||LA118_3==COLLATION||LA118_3==DEFAULT||(LA118_3>=DESCENDING && LA118_3<=DIV)||LA118_3==EMPTY||LA118_3==EQ||LA118_3==EXCEPT||LA118_3==FOR||LA118_3==GE||(LA118_3>=GT && LA118_3<=IDIV)||(LA118_3>=INSTANCE && LA118_3<=IS)||LA118_3==LE||(LA118_3>=LET && LA118_3<=MOD)||LA118_3==NE||(LA118_3>=OR && LA118_3<=ORDER)||(LA118_3>=RETURN && LA118_3<=SATISFIES)||LA118_3==STABLE||(LA118_3>=TO && LA118_3<=TREAT)||LA118_3==UNION||LA118_3==WHERE||LA118_3==COUNT||(LA118_3>=END && LA118_3<=GROUP)||LA118_3==ONLY||LA118_3==START||(LA118_3>=AFTER && LA118_3<=BEFORE)||LA118_3==INTO||LA118_3==MODIFY||LA118_3==WITH||LA118_3==CONTAINS||LA118_3==PARAGRAPHS||LA118_3==SENTENCES||LA118_3==TIMES||LA118_3==WORDS||LA118_3==CONCAT||LA118_3==RPAREN||(LA118_3>=RBRACKET && LA118_3<=EQUAL)||LA118_3==NOTEQUAL||LA118_3==COMMA||(LA118_3>=STAR && LA118_3<=SLASH_SLASH)||LA118_3==COLON||(LA118_3>=SEMICOLON && LA118_3<=VBAR)) ) {
                    alt118=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 118, 3, this.input);

                    throw nvae;
                }
                break;
            case PRECEDING:
                var LA118_4 = this.input.LA(2);

                if ( (LA118_4==COLON_COLON) ) {
                    alt118=1;
                }
                else if ( (LA118_4==EOF||(LA118_4>=AND && LA118_4<=ASCENDING)||(LA118_4>=BY && LA118_4<=CASTABLE)||LA118_4==COLLATION||LA118_4==DEFAULT||(LA118_4>=DESCENDING && LA118_4<=DIV)||LA118_4==EMPTY||LA118_4==EQ||LA118_4==EXCEPT||LA118_4==FOR||LA118_4==GE||(LA118_4>=GT && LA118_4<=IDIV)||(LA118_4>=INSTANCE && LA118_4<=IS)||LA118_4==LE||(LA118_4>=LET && LA118_4<=MOD)||LA118_4==NE||(LA118_4>=OR && LA118_4<=ORDER)||(LA118_4>=RETURN && LA118_4<=SATISFIES)||LA118_4==STABLE||(LA118_4>=TO && LA118_4<=TREAT)||LA118_4==UNION||LA118_4==WHERE||LA118_4==COUNT||(LA118_4>=END && LA118_4<=GROUP)||LA118_4==ONLY||LA118_4==START||(LA118_4>=AFTER && LA118_4<=BEFORE)||LA118_4==INTO||LA118_4==MODIFY||LA118_4==WITH||LA118_4==CONTAINS||LA118_4==PARAGRAPHS||LA118_4==SENTENCES||LA118_4==TIMES||LA118_4==WORDS||LA118_4==CONCAT||LA118_4==RPAREN||(LA118_4>=RBRACKET && LA118_4<=EQUAL)||LA118_4==NOTEQUAL||LA118_4==COMMA||(LA118_4>=STAR && LA118_4<=SLASH_SLASH)||LA118_4==COLON||(LA118_4>=SEMICOLON && LA118_4<=VBAR)) ) {
                    alt118=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 118, 4, this.input);

                    throw nvae;
                }
                break;
            case ANCESTOR_OR_SELF:
                var LA118_5 = this.input.LA(2);

                if ( (LA118_5==COLON_COLON) ) {
                    alt118=1;
                }
                else if ( (LA118_5==EOF||(LA118_5>=AND && LA118_5<=ASCENDING)||(LA118_5>=BY && LA118_5<=CASTABLE)||LA118_5==COLLATION||LA118_5==DEFAULT||(LA118_5>=DESCENDING && LA118_5<=DIV)||LA118_5==EMPTY||LA118_5==EQ||LA118_5==EXCEPT||LA118_5==FOR||LA118_5==GE||(LA118_5>=GT && LA118_5<=IDIV)||(LA118_5>=INSTANCE && LA118_5<=IS)||LA118_5==LE||(LA118_5>=LET && LA118_5<=MOD)||LA118_5==NE||(LA118_5>=OR && LA118_5<=ORDER)||(LA118_5>=RETURN && LA118_5<=SATISFIES)||LA118_5==STABLE||(LA118_5>=TO && LA118_5<=TREAT)||LA118_5==UNION||LA118_5==WHERE||LA118_5==COUNT||(LA118_5>=END && LA118_5<=GROUP)||LA118_5==ONLY||LA118_5==START||(LA118_5>=AFTER && LA118_5<=BEFORE)||LA118_5==INTO||LA118_5==MODIFY||LA118_5==WITH||LA118_5==CONTAINS||LA118_5==PARAGRAPHS||LA118_5==SENTENCES||LA118_5==TIMES||LA118_5==WORDS||LA118_5==CONCAT||LA118_5==RPAREN||(LA118_5>=RBRACKET && LA118_5<=EQUAL)||LA118_5==NOTEQUAL||LA118_5==COMMA||(LA118_5>=STAR && LA118_5<=SLASH_SLASH)||LA118_5==COLON||(LA118_5>=SEMICOLON && LA118_5<=VBAR)) ) {
                    alt118=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 118, 5, this.input);

                    throw nvae;
                }
                break;
            case DOT_DOT:
                alt118=1;
                break;
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case ALLOWING:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case SWITCH:
            case TRY:
            case TUMBLING:
            case TYPE:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case VALUE:
            case WITH:
            case ALL:
            case ANY:
            case CONTAINS:
            case CONTENT:
            case DIACRITICS:
            case DIFFERENT:
            case DISTANCE:
            case ENTIRE:
            case EXACTLY:
            case FROM:
            case FT_OPTION:
            case FTAND:
            case FTNOT:
            case FTOR:
            case INSENSITIVE:
            case LANGUAGE:
            case LEVELS:
            case LOWERCASE:
            case MOST:
            case NO:
            case NOT:
            case OCCURS:
            case PARAGRAPH:
            case PARAGRAPHS:
            case PHRASE:
            case RELATIONSHIP:
            case SAME:
            case SCORE:
            case SENSITIVE:
            case SENTENCE:
            case SENTENCES:
            case STEMMING:
            case STOP:
            case THESAURUS:
            case TIMES:
            case UPPERCASE:
            case USING:
            case WEIGHT:
            case WILDCARDS:
            case WITHOUT:
            case WORD:
            case WORDS:
            case BREAK:
            case CONTINUE:
            case EXIT:
            case LOOP:
            case RETURNING:
            case WHILE:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case FOREACH:
            case FOREIGN:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case ON:
            case UNIQUE:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case STAR:
            case ATTR_SIGN:
            case APOS:
            case QUOT:
            case L_NCName:
            case EXPLICITLY:
                alt118=2;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 118, 0, this.input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // xquery/XQueryParser.g:892:12: p_ReverseStep
                    this.pushFollow(XQueryParser.FOLLOW_p_ReverseStep_in_p_AxisStep6781);
                    p_ReverseStep294=this.p_ReverseStep();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReverseStep294.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:892:28: p_ForwardStep
                    this.pushFollow(XQueryParser.FOLLOW_p_ForwardStep_in_p_AxisStep6785);
                    p_ForwardStep295=this.p_ForwardStep();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForwardStep295.getTree());


                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_PredicateList_in_p_AxisStep6788);
            p_PredicateList296=this.p_PredicateList();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PredicateList296.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ForwardStep_return: (function() {
        XQueryParser.p_ForwardStep_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ForwardStep_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:896:1: p_ForwardStep : ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep );
    // $ANTLR start "p_ForwardStep"
    p_ForwardStep: function() {
        var retval = new XQueryParser.p_ForwardStep_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ForwardAxis297 = null;
         var p_NodeTest298 = null;
         var p_AbbrevForwardStep299 = null;


        try {
            // xquery/XQueryParser.g:897:9: ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep )
            var alt119=2;
            alt119 = this.dfa119.predict(this.input);
            switch (alt119) {
                case 1 :
                    // xquery/XQueryParser.g:897:11: p_ForwardAxis p_NodeTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ForwardAxis_in_p_ForwardStep6814);
                    p_ForwardAxis297=this.p_ForwardAxis();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ForwardAxis297.getTree());
                    this.pushFollow(XQueryParser.FOLLOW_p_NodeTest_in_p_ForwardStep6816);
                    p_NodeTest298=this.p_NodeTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NodeTest298.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:898:11: p_AbbrevForwardStep
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6828);
                    p_AbbrevForwardStep299=this.p_AbbrevForwardStep();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AbbrevForwardStep299.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ForwardAxis_return: (function() {
        XQueryParser.p_ForwardAxis_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ForwardAxis_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:902:1: p_ForwardAxis : ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON );
    // $ANTLR start "p_ForwardAxis"
    p_ForwardAxis: function() {
        var retval = new XQueryParser.p_ForwardAxis_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var CHILD300 = null;
        var COLON_COLON301 = null;
        var DESCENDANT302 = null;
        var COLON_COLON303 = null;
        var ATTRIBUTE304 = null;
        var COLON_COLON305 = null;
        var SELF306 = null;
        var COLON_COLON307 = null;
        var DESCENDANT_OR_SELF308 = null;
        var COLON_COLON309 = null;
        var FOLLOWING_SIBLING310 = null;
        var COLON_COLON311 = null;
        var FOLLOWING312 = null;
        var COLON_COLON313 = null;

        var CHILD300_tree=null;
        var COLON_COLON301_tree=null;
        var DESCENDANT302_tree=null;
        var COLON_COLON303_tree=null;
        var ATTRIBUTE304_tree=null;
        var COLON_COLON305_tree=null;
        var SELF306_tree=null;
        var COLON_COLON307_tree=null;
        var DESCENDANT_OR_SELF308_tree=null;
        var COLON_COLON309_tree=null;
        var FOLLOWING_SIBLING310_tree=null;
        var COLON_COLON311_tree=null;
        var FOLLOWING312_tree=null;
        var COLON_COLON313_tree=null;

        try {
            // xquery/XQueryParser.g:903:9: ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON )
            var alt120=7;
            switch ( this.input.LA(1) ) {
            case CHILD:
                alt120=1;
                break;
            case DESCENDANT:
                alt120=2;
                break;
            case ATTRIBUTE:
                alt120=3;
                break;
            case SELF:
                alt120=4;
                break;
            case DESCENDANT_OR_SELF:
                alt120=5;
                break;
            case FOLLOWING_SIBLING:
                alt120=6;
                break;
            case FOLLOWING:
                alt120=7;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 120, 0, this.input);

                throw nvae;
            }

            switch (alt120) {
                case 1 :
                    // xquery/XQueryParser.g:903:11: CHILD COLON_COLON
                    root_0 = this.adaptor.nil();

                    CHILD300=this.match(this.input,CHILD,XQueryParser.FOLLOW_CHILD_in_p_ForwardAxis6854); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    CHILD300_tree = this.adaptor.create(CHILD300);
                    this.adaptor.addChild(root_0, CHILD300_tree);
                    }
                    COLON_COLON301=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6856); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON301_tree = this.adaptor.create(COLON_COLON301);
                    this.adaptor.addChild(root_0, COLON_COLON301_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:904:11: DESCENDANT COLON_COLON
                    root_0 = this.adaptor.nil();

                    DESCENDANT302=this.match(this.input,DESCENDANT,XQueryParser.FOLLOW_DESCENDANT_in_p_ForwardAxis6868); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DESCENDANT302_tree = this.adaptor.create(DESCENDANT302);
                    this.adaptor.addChild(root_0, DESCENDANT302_tree);
                    }
                    COLON_COLON303=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6870); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON303_tree = this.adaptor.create(COLON_COLON303);
                    this.adaptor.addChild(root_0, COLON_COLON303_tree);
                    }


                    break;
                case 3 :
                    // xquery/XQueryParser.g:905:11: ATTRIBUTE COLON_COLON
                    root_0 = this.adaptor.nil();

                    ATTRIBUTE304=this.match(this.input,ATTRIBUTE,XQueryParser.FOLLOW_ATTRIBUTE_in_p_ForwardAxis6882); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ATTRIBUTE304_tree = this.adaptor.create(ATTRIBUTE304);
                    this.adaptor.addChild(root_0, ATTRIBUTE304_tree);
                    }
                    COLON_COLON305=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6884); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON305_tree = this.adaptor.create(COLON_COLON305);
                    this.adaptor.addChild(root_0, COLON_COLON305_tree);
                    }


                    break;
                case 4 :
                    // xquery/XQueryParser.g:906:11: SELF COLON_COLON
                    root_0 = this.adaptor.nil();

                    SELF306=this.match(this.input,SELF,XQueryParser.FOLLOW_SELF_in_p_ForwardAxis6896); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    SELF306_tree = this.adaptor.create(SELF306);
                    this.adaptor.addChild(root_0, SELF306_tree);
                    }
                    COLON_COLON307=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6898); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON307_tree = this.adaptor.create(COLON_COLON307);
                    this.adaptor.addChild(root_0, COLON_COLON307_tree);
                    }


                    break;
                case 5 :
                    // xquery/XQueryParser.g:907:11: DESCENDANT_OR_SELF COLON_COLON
                    root_0 = this.adaptor.nil();

                    DESCENDANT_OR_SELF308=this.match(this.input,DESCENDANT_OR_SELF,XQueryParser.FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6910); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DESCENDANT_OR_SELF308_tree = this.adaptor.create(DESCENDANT_OR_SELF308);
                    this.adaptor.addChild(root_0, DESCENDANT_OR_SELF308_tree);
                    }
                    COLON_COLON309=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6912); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON309_tree = this.adaptor.create(COLON_COLON309);
                    this.adaptor.addChild(root_0, COLON_COLON309_tree);
                    }


                    break;
                case 6 :
                    // xquery/XQueryParser.g:908:11: FOLLOWING_SIBLING COLON_COLON
                    root_0 = this.adaptor.nil();

                    FOLLOWING_SIBLING310=this.match(this.input,FOLLOWING_SIBLING,XQueryParser.FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6924); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    FOLLOWING_SIBLING310_tree = this.adaptor.create(FOLLOWING_SIBLING310);
                    this.adaptor.addChild(root_0, FOLLOWING_SIBLING310_tree);
                    }
                    COLON_COLON311=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6926); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON311_tree = this.adaptor.create(COLON_COLON311);
                    this.adaptor.addChild(root_0, COLON_COLON311_tree);
                    }


                    break;
                case 7 :
                    // xquery/XQueryParser.g:909:11: FOLLOWING COLON_COLON
                    root_0 = this.adaptor.nil();

                    FOLLOWING312=this.match(this.input,FOLLOWING,XQueryParser.FOLLOW_FOLLOWING_in_p_ForwardAxis6938); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    FOLLOWING312_tree = this.adaptor.create(FOLLOWING312);
                    this.adaptor.addChild(root_0, FOLLOWING312_tree);
                    }
                    COLON_COLON313=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ForwardAxis6940); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON313_tree = this.adaptor.create(COLON_COLON313);
                    this.adaptor.addChild(root_0, COLON_COLON313_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AbbrevForwardStep_return: (function() {
        XQueryParser.p_AbbrevForwardStep_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AbbrevForwardStep_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:913:1: p_AbbrevForwardStep : ( ATTR_SIGN )? p_NodeTest ;
    // $ANTLR start "p_AbbrevForwardStep"
    p_AbbrevForwardStep: function() {
        var retval = new XQueryParser.p_AbbrevForwardStep_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ATTR_SIGN314 = null;
         var p_NodeTest315 = null;

        var ATTR_SIGN314_tree=null;

        try {
            // xquery/XQueryParser.g:914:9: ( ( ATTR_SIGN )? p_NodeTest )
            // xquery/XQueryParser.g:914:11: ( ATTR_SIGN )? p_NodeTest
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:914:11: ( ATTR_SIGN )?
            var alt121=2;
            var LA121_0 = this.input.LA(1);

            if ( (LA121_0==ATTR_SIGN) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // xquery/XQueryParser.g:914:11: ATTR_SIGN
                    ATTR_SIGN314=this.match(this.input,ATTR_SIGN,XQueryParser.FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6966); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ATTR_SIGN314_tree = this.adaptor.create(ATTR_SIGN314);
                    this.adaptor.addChild(root_0, ATTR_SIGN314_tree);
                    }


                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6969);
            p_NodeTest315=this.p_NodeTest();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NodeTest315.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ReverseStep_return: (function() {
        XQueryParser.p_ReverseStep_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ReverseStep_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:918:1: p_ReverseStep : ( p_ReverseAxis p_NodeTest | p_AbbrevReverseStep );
    // $ANTLR start "p_ReverseStep"
    p_ReverseStep: function() {
        var retval = new XQueryParser.p_ReverseStep_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ReverseAxis316 = null;
         var p_NodeTest317 = null;
         var p_AbbrevReverseStep318 = null;


        try {
            // xquery/XQueryParser.g:919:9: ( p_ReverseAxis p_NodeTest | p_AbbrevReverseStep )
            var alt122=2;
            var LA122_0 = this.input.LA(1);

            if ( ((LA122_0>=ANCESTOR && LA122_0<=ANCESTOR_OR_SELF)||(LA122_0>=PARENT && LA122_0<=PRECEDING_SIBLING)) ) {
                alt122=1;
            }
            else if ( (LA122_0==DOT_DOT) ) {
                alt122=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 122, 0, this.input);

                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    // xquery/XQueryParser.g:919:11: p_ReverseAxis p_NodeTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ReverseAxis_in_p_ReverseStep6995);
                    p_ReverseAxis316=this.p_ReverseAxis();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReverseAxis316.getTree());
                    this.pushFollow(XQueryParser.FOLLOW_p_NodeTest_in_p_ReverseStep6997);
                    p_NodeTest317=this.p_NodeTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NodeTest317.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:920:11: p_AbbrevReverseStep
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep7009);
                    p_AbbrevReverseStep318=this.p_AbbrevReverseStep();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AbbrevReverseStep318.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ReverseAxis_return: (function() {
        XQueryParser.p_ReverseAxis_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ReverseAxis_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:924:1: p_ReverseAxis : ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON );
    // $ANTLR start "p_ReverseAxis"
    p_ReverseAxis: function() {
        var retval = new XQueryParser.p_ReverseAxis_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var PARENT319 = null;
        var COLON_COLON320 = null;
        var ANCESTOR321 = null;
        var COLON_COLON322 = null;
        var PRECEDING_SIBLING323 = null;
        var COLON_COLON324 = null;
        var PRECEDING325 = null;
        var COLON_COLON326 = null;
        var ANCESTOR_OR_SELF327 = null;
        var COLON_COLON328 = null;

        var PARENT319_tree=null;
        var COLON_COLON320_tree=null;
        var ANCESTOR321_tree=null;
        var COLON_COLON322_tree=null;
        var PRECEDING_SIBLING323_tree=null;
        var COLON_COLON324_tree=null;
        var PRECEDING325_tree=null;
        var COLON_COLON326_tree=null;
        var ANCESTOR_OR_SELF327_tree=null;
        var COLON_COLON328_tree=null;

        try {
            // xquery/XQueryParser.g:925:9: ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON )
            var alt123=5;
            switch ( this.input.LA(1) ) {
            case PARENT:
                alt123=1;
                break;
            case ANCESTOR:
                alt123=2;
                break;
            case PRECEDING_SIBLING:
                alt123=3;
                break;
            case PRECEDING:
                alt123=4;
                break;
            case ANCESTOR_OR_SELF:
                alt123=5;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 123, 0, this.input);

                throw nvae;
            }

            switch (alt123) {
                case 1 :
                    // xquery/XQueryParser.g:925:11: PARENT COLON_COLON
                    root_0 = this.adaptor.nil();

                    PARENT319=this.match(this.input,PARENT,XQueryParser.FOLLOW_PARENT_in_p_ReverseAxis7035); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    PARENT319_tree = this.adaptor.create(PARENT319);
                    this.adaptor.addChild(root_0, PARENT319_tree);
                    }
                    COLON_COLON320=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7037); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON320_tree = this.adaptor.create(COLON_COLON320);
                    this.adaptor.addChild(root_0, COLON_COLON320_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:926:11: ANCESTOR COLON_COLON
                    root_0 = this.adaptor.nil();

                    ANCESTOR321=this.match(this.input,ANCESTOR,XQueryParser.FOLLOW_ANCESTOR_in_p_ReverseAxis7049); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ANCESTOR321_tree = this.adaptor.create(ANCESTOR321);
                    this.adaptor.addChild(root_0, ANCESTOR321_tree);
                    }
                    COLON_COLON322=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7051); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON322_tree = this.adaptor.create(COLON_COLON322);
                    this.adaptor.addChild(root_0, COLON_COLON322_tree);
                    }


                    break;
                case 3 :
                    // xquery/XQueryParser.g:927:11: PRECEDING_SIBLING COLON_COLON
                    root_0 = this.adaptor.nil();

                    PRECEDING_SIBLING323=this.match(this.input,PRECEDING_SIBLING,XQueryParser.FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis7063); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    PRECEDING_SIBLING323_tree = this.adaptor.create(PRECEDING_SIBLING323);
                    this.adaptor.addChild(root_0, PRECEDING_SIBLING323_tree);
                    }
                    COLON_COLON324=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7065); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON324_tree = this.adaptor.create(COLON_COLON324);
                    this.adaptor.addChild(root_0, COLON_COLON324_tree);
                    }


                    break;
                case 4 :
                    // xquery/XQueryParser.g:928:11: PRECEDING COLON_COLON
                    root_0 = this.adaptor.nil();

                    PRECEDING325=this.match(this.input,PRECEDING,XQueryParser.FOLLOW_PRECEDING_in_p_ReverseAxis7077); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    PRECEDING325_tree = this.adaptor.create(PRECEDING325);
                    this.adaptor.addChild(root_0, PRECEDING325_tree);
                    }
                    COLON_COLON326=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7079); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON326_tree = this.adaptor.create(COLON_COLON326);
                    this.adaptor.addChild(root_0, COLON_COLON326_tree);
                    }


                    break;
                case 5 :
                    // xquery/XQueryParser.g:929:11: ANCESTOR_OR_SELF COLON_COLON
                    root_0 = this.adaptor.nil();

                    ANCESTOR_OR_SELF327=this.match(this.input,ANCESTOR_OR_SELF,XQueryParser.FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis7091); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ANCESTOR_OR_SELF327_tree = this.adaptor.create(ANCESTOR_OR_SELF327);
                    this.adaptor.addChild(root_0, ANCESTOR_OR_SELF327_tree);
                    }
                    COLON_COLON328=this.match(this.input,COLON_COLON,XQueryParser.FOLLOW_COLON_COLON_in_p_ReverseAxis7093); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON_COLON328_tree = this.adaptor.create(COLON_COLON328);
                    this.adaptor.addChild(root_0, COLON_COLON328_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AbbrevReverseStep_return: (function() {
        XQueryParser.p_AbbrevReverseStep_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AbbrevReverseStep_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:933:1: p_AbbrevReverseStep : DOT_DOT ;
    // $ANTLR start "p_AbbrevReverseStep"
    p_AbbrevReverseStep: function() {
        var retval = new XQueryParser.p_AbbrevReverseStep_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var DOT_DOT329 = null;

        var DOT_DOT329_tree=null;

        try {
            // xquery/XQueryParser.g:934:9: ( DOT_DOT )
            // xquery/XQueryParser.g:934:11: DOT_DOT
            root_0 = this.adaptor.nil();

            DOT_DOT329=this.match(this.input,DOT_DOT,XQueryParser.FOLLOW_DOT_DOT_in_p_AbbrevReverseStep7119); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOT_DOT329_tree = this.adaptor.create(DOT_DOT329);
            this.adaptor.addChild(root_0, DOT_DOT329_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_NodeTest_return: (function() {
        XQueryParser.p_NodeTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_NodeTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:938:1: p_NodeTest : ( p_KindTest | p_NameTest );
    // $ANTLR start "p_NodeTest"
    p_NodeTest: function() {
        var retval = new XQueryParser.p_NodeTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_KindTest330 = null;
         var p_NameTest331 = null;


        try {
            // xquery/XQueryParser.g:939:9: ( p_KindTest | p_NameTest )
            var alt124=2;
            alt124 = this.dfa124.predict(this.input);
            switch (alt124) {
                case 1 :
                    // xquery/XQueryParser.g:939:11: p_KindTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_KindTest_in_p_NodeTest7145);
                    p_KindTest330=this.p_KindTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_KindTest330.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:939:24: p_NameTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_NameTest_in_p_NodeTest7149);
                    p_NameTest331=this.p_NameTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NameTest331.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_NameTest_return: (function() {
        XQueryParser.p_NameTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_NameTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:943:1: p_NameTest : ( ( p_Wildcard )=> p_Wildcard | ( p_NCName COLON )=> p_QName | ( p_NCName )=> p_QName );
    // $ANTLR start "p_NameTest"
    p_NameTest: function() {
        var retval = new XQueryParser.p_NameTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Wildcard332 = null;
         var p_QName333 = null;
         var p_QName334 = null;


        try {
            // xquery/XQueryParser.g:944:9: ( ( p_Wildcard )=> p_Wildcard | ( p_NCName COLON )=> p_QName | ( p_NCName )=> p_QName )
            var alt125=3;
            var LA125_0 = this.input.LA(1);

            if ( (LA125_0==STAR) && (this.synpred13_XQueryParser())) {
                alt125=1;
            }
            else if ( ((LA125_0>=ANCESTOR && LA125_0<=SKIP)||(LA125_0>=VALUE && LA125_0<=QUOT_ER)||LA125_0==L_NCName||LA125_0==EXPLICITLY) ) {
                var LA125_2 = this.input.LA(2);

                if ( (LA125_2==COLON) && (this.synpred13_XQueryParser())) {
                    alt125=1;
                }
                else if ( (this.synpred14_XQueryParser()) ) {
                    alt125=2;
                }
                else if ( (this.synpred15_XQueryParser()) ) {
                    alt125=3;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 125, 2, this.input);

                    throw nvae;
                }
            }
            else if ( (LA125_0==QUOT) && (this.synpred13_XQueryParser())) {
                alt125=1;
            }
            else if ( (LA125_0==APOS) && (this.synpred13_XQueryParser())) {
                alt125=1;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 125, 0, this.input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    // xquery/XQueryParser.g:944:11: ( p_Wildcard )=> p_Wildcard
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_Wildcard_in_p_NameTest7181);
                    p_Wildcard332=this.p_Wildcard();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Wildcard332.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:945:11: ( p_NCName COLON )=> p_QName
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_NameTest7202);
                    p_QName333=this.p_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName333.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:946:11: ( p_NCName )=> p_QName
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_NameTest7220);
                    p_QName334=this.p_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName334.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Wildcard_return: (function() {
        XQueryParser.p_Wildcard_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Wildcard_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:950:1: p_Wildcard : ( STAR ( COLON p_NCName )? | p_NCName COLON STAR | p_StringLiteral COLON STAR );
    // $ANTLR start "p_Wildcard"
    p_Wildcard: function() {
        var retval = new XQueryParser.p_Wildcard_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var STAR335 = null;
        var COLON336 = null;
        var COLON339 = null;
        var STAR340 = null;
        var COLON342 = null;
        var STAR343 = null;
         var p_NCName337 = null;
         var p_NCName338 = null;
         var p_StringLiteral341 = null;

        var STAR335_tree=null;
        var COLON336_tree=null;
        var COLON339_tree=null;
        var STAR340_tree=null;
        var COLON342_tree=null;
        var STAR343_tree=null;

        this.setWsExplicit(true);
        try {
            // xquery/XQueryParser.g:951:9: ( STAR ( COLON p_NCName )? | p_NCName COLON STAR | p_StringLiteral COLON STAR )
            var alt127=3;
            switch ( this.input.LA(1) ) {
            case STAR:
                alt127=1;
                break;
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case ALLOWING:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case SWITCH:
            case TRY:
            case TUMBLING:
            case TYPE:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case VALUE:
            case WITH:
            case ALL:
            case ANY:
            case CONTAINS:
            case CONTENT:
            case DIACRITICS:
            case DIFFERENT:
            case DISTANCE:
            case ENTIRE:
            case EXACTLY:
            case FROM:
            case FT_OPTION:
            case FTAND:
            case FTNOT:
            case FTOR:
            case INSENSITIVE:
            case LANGUAGE:
            case LEVELS:
            case LOWERCASE:
            case MOST:
            case NO:
            case NOT:
            case OCCURS:
            case PARAGRAPH:
            case PARAGRAPHS:
            case PHRASE:
            case RELATIONSHIP:
            case SAME:
            case SCORE:
            case SENSITIVE:
            case SENTENCE:
            case SENTENCES:
            case STEMMING:
            case STOP:
            case THESAURUS:
            case TIMES:
            case UPPERCASE:
            case USING:
            case WEIGHT:
            case WILDCARDS:
            case WITHOUT:
            case WORD:
            case WORDS:
            case BREAK:
            case CONTINUE:
            case EXIT:
            case LOOP:
            case RETURNING:
            case WHILE:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case FOREACH:
            case FOREIGN:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case ON:
            case UNIQUE:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case L_NCName:
            case EXPLICITLY:
                alt127=2;
                break;
            case APOS:
            case QUOT:
                alt127=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 127, 0, this.input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // xquery/XQueryParser.g:951:11: STAR ( COLON p_NCName )?
                    root_0 = this.adaptor.nil();

                    STAR335=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_Wildcard7250); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    STAR335_tree = this.adaptor.create(STAR335);
                    this.adaptor.addChild(root_0, STAR335_tree);
                    }
                    // xquery/XQueryParser.g:951:16: ( COLON p_NCName )?
                    var alt126=2;
                    var LA126_0 = this.input.LA(1);

                    if ( (LA126_0==COLON) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // xquery/XQueryParser.g:951:17: COLON p_NCName
                            COLON336=this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_p_Wildcard7253); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            COLON336_tree = this.adaptor.create(COLON336);
                            this.adaptor.addChild(root_0, COLON336_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_Wildcard7255);
                            p_NCName337=this.p_NCName();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName337.getTree());


                            break;

                    }



                    break;
                case 2 :
                    // xquery/XQueryParser.g:952:11: p_NCName COLON STAR
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_Wildcard7269);
                    p_NCName338=this.p_NCName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName338.getTree());
                    COLON339=this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_p_Wildcard7271); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON339_tree = this.adaptor.create(COLON339);
                    this.adaptor.addChild(root_0, COLON339_tree);
                    }
                    STAR340=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_Wildcard7273); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    STAR340_tree = this.adaptor.create(STAR340);
                    this.adaptor.addChild(root_0, STAR340_tree);
                    }


                    break;
                case 3 :
                    // xquery/XQueryParser.g:953:11: p_StringLiteral COLON STAR
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_Wildcard7285);
                    p_StringLiteral341=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral341.getTree());
                    COLON342=this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_p_Wildcard7287); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COLON342_tree = this.adaptor.create(COLON342);
                    this.adaptor.addChild(root_0, COLON342_tree);
                    }
                    STAR343=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_Wildcard7289); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    STAR343_tree = this.adaptor.create(STAR343);
                    this.adaptor.addChild(root_0, STAR343_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.setWsExplicit(false);
        }
        return retval;
    },

    // inline static return class
    p_PostfixExpr_return: (function() {
        XQueryParser.p_PostfixExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_PostfixExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:958:1: p_PostfixExpr : p_PrimaryExpr ( p_Predicate )* ;
    // $ANTLR start "p_PostfixExpr"
    p_PostfixExpr: function() {
        var retval = new XQueryParser.p_PostfixExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_PrimaryExpr344 = null;
         var p_Predicate345 = null;


        try {
            // xquery/XQueryParser.g:959:9: ( p_PrimaryExpr ( p_Predicate )* )
            // xquery/XQueryParser.g:959:11: p_PrimaryExpr ( p_Predicate )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_PrimaryExpr_in_p_PostfixExpr7327);
            p_PrimaryExpr344=this.p_PrimaryExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PrimaryExpr344.getTree());
            // xquery/XQueryParser.g:959:25: ( p_Predicate )*
            loop128:
            do {
                var alt128=2;
                var LA128_0 = this.input.LA(1);

                if ( (LA128_0==LSQUARE) ) {
                    alt128=1;
                }


                switch (alt128) {
                case 1 :
                    // xquery/XQueryParser.g:959:26: p_Predicate
                    this.pushFollow(XQueryParser.FOLLOW_p_Predicate_in_p_PostfixExpr7330);
                    p_Predicate345=this.p_Predicate();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Predicate345.getTree());


                    break;

                default :
                    break loop128;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ArgumentList_return: (function() {
        XQueryParser.p_ArgumentList_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ArgumentList_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:966:1: p_ArgumentList : LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN ;
    // $ANTLR start "p_ArgumentList"
    p_ArgumentList: function() {
        var retval = new XQueryParser.p_ArgumentList_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LPAREN346 = null;
        var COMMA348 = null;
        var RPAREN350 = null;
         var p_Argument347 = null;
         var p_Argument349 = null;

        var LPAREN346_tree=null;
        var COMMA348_tree=null;
        var RPAREN350_tree=null;

        try {
            // xquery/XQueryParser.g:967:9: ( LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN )
            // xquery/XQueryParser.g:967:11: LPAREN ( p_Argument ( COMMA p_Argument )* )? RPAREN
            root_0 = this.adaptor.nil();

            LPAREN346=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ArgumentList7371); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN346_tree = this.adaptor.create(LPAREN346);
            this.adaptor.addChild(root_0, LPAREN346_tree);
            }
            // xquery/XQueryParser.g:967:18: ( p_Argument ( COMMA p_Argument )* )?
            var alt130=2;
            var LA130_0 = this.input.LA(1);

            if ( ((LA130_0>=ANCESTOR && LA130_0<=QUOT_ER)||LA130_0==LPAREN||(LA130_0>=DOLLAR && LA130_0<=LBRACKET)||(LA130_0>=QUESTION && LA130_0<=SMALLER)||(LA130_0>=SLASH && LA130_0<=DOT_DOT)||LA130_0==ATTR_SIGN||(LA130_0>=APOS && LA130_0<=QUOT)||LA130_0==L_NCName||(LA130_0>=L_Pragma && LA130_0<=L_DoubleLiteral)||LA130_0==EXPLICITLY) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // xquery/XQueryParser.g:967:19: p_Argument ( COMMA p_Argument )*
                    this.pushFollow(XQueryParser.FOLLOW_p_Argument_in_p_ArgumentList7374);
                    p_Argument347=this.p_Argument();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Argument347.getTree());
                    // xquery/XQueryParser.g:967:30: ( COMMA p_Argument )*
                    loop129:
                    do {
                        var alt129=2;
                        var LA129_0 = this.input.LA(1);

                        if ( (LA129_0==COMMA) ) {
                            alt129=1;
                        }


                        switch (alt129) {
                        case 1 :
                            // xquery/XQueryParser.g:967:31: COMMA p_Argument
                            COMMA348=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_ArgumentList7377); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            COMMA348_tree = this.adaptor.create(COMMA348);
                            this.adaptor.addChild(root_0, COMMA348_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_Argument_in_p_ArgumentList7379);
                            p_Argument349=this.p_Argument();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Argument349.getTree());


                            break;

                        default :
                            break loop129;
                        }
                    } while (true);



                    break;

            }

            RPAREN350=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ArgumentList7385); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN350_tree = this.adaptor.create(RPAREN350);
            this.adaptor.addChild(root_0, RPAREN350_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_PredicateList_return: (function() {
        XQueryParser.p_PredicateList_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_PredicateList_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:971:1: p_PredicateList : ( p_Predicate )* ;
    // $ANTLR start "p_PredicateList"
    p_PredicateList: function() {
        var retval = new XQueryParser.p_PredicateList_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Predicate351 = null;


        try {
            // xquery/XQueryParser.g:972:9: ( ( p_Predicate )* )
            // xquery/XQueryParser.g:972:11: ( p_Predicate )*
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:972:11: ( p_Predicate )*
            loop131:
            do {
                var alt131=2;
                var LA131_0 = this.input.LA(1);

                if ( (LA131_0==LSQUARE) ) {
                    alt131=1;
                }


                switch (alt131) {
                case 1 :
                    // xquery/XQueryParser.g:972:11: p_Predicate
                    this.pushFollow(XQueryParser.FOLLOW_p_Predicate_in_p_PredicateList7411);
                    p_Predicate351=this.p_Predicate();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Predicate351.getTree());


                    break;

                default :
                    break loop131;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Predicate_return: (function() {
        XQueryParser.p_Predicate_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Predicate_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:976:1: p_Predicate : LSQUARE p_Expr[true,true] RSQUARE ;
    // $ANTLR start "p_Predicate"
    p_Predicate: function() {
        var retval = new XQueryParser.p_Predicate_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LSQUARE352 = null;
        var RSQUARE354 = null;
         var p_Expr353 = null;

        var LSQUARE352_tree=null;
        var RSQUARE354_tree=null;

        try {
            // xquery/XQueryParser.g:977:9: ( LSQUARE p_Expr[true,true] RSQUARE )
            // xquery/XQueryParser.g:977:11: LSQUARE p_Expr[true,true] RSQUARE
            root_0 = this.adaptor.nil();

            LSQUARE352=this.match(this.input,LSQUARE,XQueryParser.FOLLOW_LSQUARE_in_p_Predicate7438); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LSQUARE352_tree = this.adaptor.create(LSQUARE352);
            this.adaptor.addChild(root_0, LSQUARE352_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_Predicate7440);
            p_Expr353=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr353.getTree());
            RSQUARE354=this.match(this.input,RSQUARE,XQueryParser.FOLLOW_RSQUARE_in_p_Predicate7443); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RSQUARE354_tree = this.adaptor.create(RSQUARE354);
            this.adaptor.addChild(root_0, RSQUARE354_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_PrimaryExpr_return: (function() {
        XQueryParser.p_PrimaryExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_PrimaryExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:982:1: p_PrimaryExpr : ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr );
    // $ANTLR start "p_PrimaryExpr"
    p_PrimaryExpr: function() {
        var retval = new XQueryParser.p_PrimaryExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ParenthesizedExpr355 = null;
         var p_Literal356 = null;
         var p_VarRef357 = null;
         var p_ContextItemExpr358 = null;
         var p_FunctionCall359 = null;
         var p_OrderedExpr360 = null;
         var p_UnorderedExpr361 = null;
         var p_Constructor362 = null;
         var p_BlockExpr363 = null;


        try {
            // xquery/XQueryParser.g:983:9: ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr )
            var alt132=9;
            alt132 = this.dfa132.predict(this.input);
            switch (alt132) {
                case 1 :
                    // xquery/XQueryParser.g:983:11: ( LPAREN )=> p_ParenthesizedExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7476);
                    p_ParenthesizedExpr355=this.p_ParenthesizedExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ParenthesizedExpr355.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:984:11: p_Literal
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_Literal_in_p_PrimaryExpr7488);
                    p_Literal356=this.p_Literal();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Literal356.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:985:11: p_VarRef
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_VarRef_in_p_PrimaryExpr7500);
                    p_VarRef357=this.p_VarRef();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarRef357.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:986:11: p_ContextItemExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7512);
                    p_ContextItemExpr358=this.p_ContextItemExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ContextItemExpr358.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:987:11: p_FunctionCall
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FunctionCall_in_p_PrimaryExpr7524);
                    p_FunctionCall359=this.p_FunctionCall();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FunctionCall359.getTree());


                    break;
                case 6 :
                    // xquery/XQueryParser.g:988:11: p_OrderedExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7536);
                    p_OrderedExpr360=this.p_OrderedExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrderedExpr360.getTree());


                    break;
                case 7 :
                    // xquery/XQueryParser.g:989:11: p_UnorderedExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7548);
                    p_UnorderedExpr361=this.p_UnorderedExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnorderedExpr361.getTree());


                    break;
                case 8 :
                    // xquery/XQueryParser.g:990:11: p_Constructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_Constructor_in_p_PrimaryExpr7560);
                    p_Constructor362=this.p_Constructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Constructor362.getTree());


                    break;
                case 9 :
                    // xquery/XQueryParser.g:993:11: p_BlockExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_BlockExpr_in_p_PrimaryExpr7574);
                    p_BlockExpr363=this.p_BlockExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockExpr363.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Literal_return: (function() {
        XQueryParser.p_Literal_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Literal_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:997:1: p_Literal : ( p_NumericLiteral | p_StringLiteral );
    // $ANTLR start "p_Literal"
    p_Literal: function() {
        var retval = new XQueryParser.p_Literal_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_NumericLiteral364 = null;
         var p_StringLiteral365 = null;


        try {
            // xquery/XQueryParser.g:998:9: ( p_NumericLiteral | p_StringLiteral )
            var alt133=2;
            var LA133_0 = this.input.LA(1);

            if ( ((LA133_0>=L_IntegerLiteral && LA133_0<=L_DoubleLiteral)) ) {
                alt133=1;
            }
            else if ( ((LA133_0>=APOS && LA133_0<=QUOT)) ) {
                alt133=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 133, 0, this.input);

                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    // xquery/XQueryParser.g:998:11: p_NumericLiteral
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_NumericLiteral_in_p_Literal7600);
                    p_NumericLiteral364=this.p_NumericLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NumericLiteral364.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:998:30: p_StringLiteral
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_Literal7604);
                    p_StringLiteral365=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral365.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_NumericLiteral_return: (function() {
        XQueryParser.p_NumericLiteral_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_NumericLiteral_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1002:1: p_NumericLiteral : ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral );
    // $ANTLR start "p_NumericLiteral"
    p_NumericLiteral: function() {
        var retval = new XQueryParser.p_NumericLiteral_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set366 = null;

        var set366_tree=null;

        try {
            // xquery/XQueryParser.g:1003:9: ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral )
            // xquery/XQueryParser.g:
            root_0 = this.adaptor.nil();

            set366=this.input.LT(1);
            if ( (this.input.LA(1)>=L_IntegerLiteral && this.input.LA(1)<=L_DoubleLiteral) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set366));
                this.state.errorRecovery=false;this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                throw mse;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_VarRef_return: (function() {
        XQueryParser.p_VarRef_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_VarRef_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1007:1: p_VarRef : DOLLAR p_VarName ;
    // $ANTLR start "p_VarRef"
    p_VarRef: function() {
        var retval = new XQueryParser.p_VarRef_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var DOLLAR367 = null;
         var p_VarName368 = null;

        var DOLLAR367_tree=null;

        try {
            // xquery/XQueryParser.g:1008:9: ( DOLLAR p_VarName )
            // xquery/XQueryParser.g:1008:11: DOLLAR p_VarName
            root_0 = this.adaptor.nil();

            DOLLAR367=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_VarRef7672); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR367_tree = this.adaptor.create(DOLLAR367);
            this.adaptor.addChild(root_0, DOLLAR367_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_VarRef7674);
            p_VarName368=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName368.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_VarName_return: (function() {
        XQueryParser.p_VarName_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_VarName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1012:1: p_VarName : p_QName ;
    // $ANTLR start "p_VarName"
    p_VarName: function() {
        var retval = new XQueryParser.p_VarName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName369 = null;


        try {
            // xquery/XQueryParser.g:1013:9: ( p_QName )
            // xquery/XQueryParser.g:1013:11: p_QName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_VarName7700);
            p_QName369=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName369.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ParenthesizedExpr_return: (function() {
        XQueryParser.p_ParenthesizedExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ParenthesizedExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1017:1: p_ParenthesizedExpr : LPAREN ( p_Expr[true,true] )? RPAREN ;
    // $ANTLR start "p_ParenthesizedExpr"
    p_ParenthesizedExpr: function() {
        var retval = new XQueryParser.p_ParenthesizedExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LPAREN370 = null;
        var RPAREN372 = null;
         var p_Expr371 = null;

        var LPAREN370_tree=null;
        var RPAREN372_tree=null;

        try {
            // xquery/XQueryParser.g:1018:9: ( LPAREN ( p_Expr[true,true] )? RPAREN )
            // xquery/XQueryParser.g:1018:11: LPAREN ( p_Expr[true,true] )? RPAREN
            root_0 = this.adaptor.nil();

            LPAREN370=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ParenthesizedExpr7726); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN370_tree = this.adaptor.create(LPAREN370);
            this.adaptor.addChild(root_0, LPAREN370_tree);
            }
            // xquery/XQueryParser.g:1018:18: ( p_Expr[true,true] )?
            var alt134=2;
            var LA134_0 = this.input.LA(1);

            if ( ((LA134_0>=ANCESTOR && LA134_0<=QUOT_ER)||LA134_0==LPAREN||(LA134_0>=DOLLAR && LA134_0<=LBRACKET)||(LA134_0>=STAR && LA134_0<=SMALLER)||(LA134_0>=SLASH && LA134_0<=DOT_DOT)||LA134_0==ATTR_SIGN||(LA134_0>=APOS && LA134_0<=QUOT)||LA134_0==L_NCName||(LA134_0>=L_Pragma && LA134_0<=L_DoubleLiteral)||LA134_0==EXPLICITLY) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // xquery/XQueryParser.g:1018:18: p_Expr[true,true]
                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_ParenthesizedExpr7728);
                    p_Expr371=this.p_Expr(true, true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr371.getTree());


                    break;

            }

            RPAREN372=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ParenthesizedExpr7732); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN372_tree = this.adaptor.create(RPAREN372);
            this.adaptor.addChild(root_0, RPAREN372_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ContextItemExpr_return: (function() {
        XQueryParser.p_ContextItemExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ContextItemExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1022:1: p_ContextItemExpr : DOT ;
    // $ANTLR start "p_ContextItemExpr"
    p_ContextItemExpr: function() {
        var retval = new XQueryParser.p_ContextItemExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var DOT373 = null;

        var DOT373_tree=null;

        try {
            // xquery/XQueryParser.g:1023:9: ( DOT )
            // xquery/XQueryParser.g:1023:11: DOT
            root_0 = this.adaptor.nil();

            DOT373=this.match(this.input,DOT,XQueryParser.FOLLOW_DOT_in_p_ContextItemExpr7758); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOT373_tree = this.adaptor.create(DOT373);
            this.adaptor.addChild(root_0, DOT373_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_OrderedExpr_return: (function() {
        XQueryParser.p_OrderedExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_OrderedExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1027:1: p_OrderedExpr : k= ORDERED LBRACKET p_Expr[true,true] RBRACKET ;
    // $ANTLR start "p_OrderedExpr"
    p_OrderedExpr: function() {
        var retval = new XQueryParser.p_OrderedExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET374 = null;
        var RBRACKET376 = null;
         var p_Expr375 = null;

        var k_tree=null;
        var LBRACKET374_tree=null;
        var RBRACKET376_tree=null;

        try {
            // xquery/XQueryParser.g:1028:9: (k= ORDERED LBRACKET p_Expr[true,true] RBRACKET )
            // xquery/XQueryParser.g:1028:11: k= ORDERED LBRACKET p_Expr[true,true] RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,ORDERED,XQueryParser.FOLLOW_ORDERED_in_p_OrderedExpr7786); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LBRACKET374=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_OrderedExpr7790); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET374_tree = this.adaptor.create(LBRACKET374);
            this.adaptor.addChild(root_0, LBRACKET374_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_OrderedExpr7792);
            p_Expr375=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr375.getTree());
            RBRACKET376=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_OrderedExpr7795); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET376_tree = this.adaptor.create(RBRACKET376);
            this.adaptor.addChild(root_0, RBRACKET376_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_UnorderedExpr_return: (function() {
        XQueryParser.p_UnorderedExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_UnorderedExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1032:1: p_UnorderedExpr : k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET ;
    // $ANTLR start "p_UnorderedExpr"
    p_UnorderedExpr: function() {
        var retval = new XQueryParser.p_UnorderedExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET377 = null;
        var RBRACKET379 = null;
         var p_Expr378 = null;

        var k_tree=null;
        var LBRACKET377_tree=null;
        var RBRACKET379_tree=null;

        try {
            // xquery/XQueryParser.g:1033:9: (k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET )
            // xquery/XQueryParser.g:1033:11: k= UNORDERED LBRACKET p_Expr[true,true] RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,UNORDERED,XQueryParser.FOLLOW_UNORDERED_in_p_UnorderedExpr7823); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LBRACKET377=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_UnorderedExpr7827); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET377_tree = this.adaptor.create(LBRACKET377);
            this.adaptor.addChild(root_0, LBRACKET377_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_UnorderedExpr7829);
            p_Expr378=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr378.getTree());
            RBRACKET379=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_UnorderedExpr7832); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET379_tree = this.adaptor.create(RBRACKET379);
            this.adaptor.addChild(root_0, RBRACKET379_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FunctionCall_return: (function() {
        XQueryParser.p_FunctionCall_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FunctionCall_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1038:1: p_FunctionCall : pg_FQName p_ArgumentList ;
    // $ANTLR start "p_FunctionCall"
    p_FunctionCall: function() {
        var retval = new XQueryParser.p_FunctionCall_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var pg_FQName380 = null;
         var p_ArgumentList381 = null;


        try {
            // xquery/XQueryParser.g:1039:9: ( pg_FQName p_ArgumentList )
            // xquery/XQueryParser.g:1039:11: pg_FQName p_ArgumentList
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_pg_FQName_in_p_FunctionCall7859);
            pg_FQName380=this.pg_FQName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_FQName380.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_ArgumentList_in_p_FunctionCall7861);
            p_ArgumentList381=this.p_ArgumentList();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ArgumentList381.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Argument_return: (function() {
        XQueryParser.p_Argument_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Argument_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1043:1: p_Argument : ( p_ExprSingle[true] | p_ArgumentPlaceholder );
    // $ANTLR start "p_Argument"
    p_Argument: function() {
        var retval = new XQueryParser.p_Argument_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ExprSingle382 = null;
         var p_ArgumentPlaceholder383 = null;


        try {
            // xquery/XQueryParser.g:1044:9: ( p_ExprSingle[true] | p_ArgumentPlaceholder )
            var alt135=2;
            var LA135_0 = this.input.LA(1);

            if ( ((LA135_0>=ANCESTOR && LA135_0<=QUOT_ER)||LA135_0==LPAREN||(LA135_0>=DOLLAR && LA135_0<=LBRACKET)||(LA135_0>=STAR && LA135_0<=SMALLER)||(LA135_0>=SLASH && LA135_0<=DOT_DOT)||LA135_0==ATTR_SIGN||(LA135_0>=APOS && LA135_0<=QUOT)||LA135_0==L_NCName||(LA135_0>=L_Pragma && LA135_0<=L_DoubleLiteral)||LA135_0==EXPLICITLY) ) {
                alt135=1;
            }
            else if ( (LA135_0==QUESTION) ) {
                alt135=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 135, 0, this.input);

                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    // xquery/XQueryParser.g:1044:11: p_ExprSingle[true]
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_Argument7887);
                    p_ExprSingle382=this.p_ExprSingle(true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle382.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1044:32: p_ArgumentPlaceholder
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ArgumentPlaceholder_in_p_Argument7892);
                    p_ArgumentPlaceholder383=this.p_ArgumentPlaceholder();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ArgumentPlaceholder383.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ArgumentPlaceholder_return: (function() {
        XQueryParser.p_ArgumentPlaceholder_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ArgumentPlaceholder_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1048:1: p_ArgumentPlaceholder : QUESTION ;
    // $ANTLR start "p_ArgumentPlaceholder"
    p_ArgumentPlaceholder: function() {
        var retval = new XQueryParser.p_ArgumentPlaceholder_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var QUESTION384 = null;

        var QUESTION384_tree=null;

        try {
            // xquery/XQueryParser.g:1049:9: ( QUESTION )
            // xquery/XQueryParser.g:1049:11: QUESTION
            root_0 = this.adaptor.nil();

            QUESTION384=this.match(this.input,QUESTION,XQueryParser.FOLLOW_QUESTION_in_p_ArgumentPlaceholder7918); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            QUESTION384_tree = this.adaptor.create(QUESTION384);
            this.adaptor.addChild(root_0, QUESTION384_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Constructor_return: (function() {
        XQueryParser.p_Constructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Constructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1053:1: p_Constructor : ( p_DirectConstructor | p_ComputedConstructor );
    // $ANTLR start "p_Constructor"
    p_Constructor: function() {
        var retval = new XQueryParser.p_Constructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_DirectConstructor385 = null;
         var p_ComputedConstructor386 = null;


        try {
            // xquery/XQueryParser.g:1054:9: ( p_DirectConstructor | p_ComputedConstructor )
            var alt136=2;
            var LA136_0 = this.input.LA(1);

            if ( (LA136_0==SMALLER||(LA136_0>=L_DirCommentConstructor && LA136_0<=L_DirPIConstructor)) ) {
                alt136=1;
            }
            else if ( (LA136_0==ATTRIBUTE||LA136_0==COMMENT||LA136_0==DOCUMENT||LA136_0==ELEMENT||LA136_0==NAMESPACE||LA136_0==PROCESSING_INSTRUCTION||LA136_0==TEXT) ) {
                alt136=2;
            }
            else if ( (LA136_0==BINARY) && ((this.lc(MLS)))) {
                alt136=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 136, 0, this.input);

                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    // xquery/XQueryParser.g:1054:11: p_DirectConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_DirectConstructor_in_p_Constructor7944);
                    p_DirectConstructor385=this.p_DirectConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirectConstructor385.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1055:11: p_ComputedConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ComputedConstructor_in_p_Constructor7956);
                    p_ComputedConstructor386=this.p_ComputedConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ComputedConstructor386.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_DirectConstructor_return: (function() {
        XQueryParser.p_DirectConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_DirectConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1059:1: p_DirectConstructor : ( p_DirElemConstructor | p_DirCommentConstructor | p_DirPIConstructor );
    // $ANTLR start "p_DirectConstructor"
    p_DirectConstructor: function() {
        var retval = new XQueryParser.p_DirectConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_DirElemConstructor387 = null;
         var p_DirCommentConstructor388 = null;
         var p_DirPIConstructor389 = null;


        try {
            // xquery/XQueryParser.g:1060:9: ( p_DirElemConstructor | p_DirCommentConstructor | p_DirPIConstructor )
            var alt137=3;
            switch ( this.input.LA(1) ) {
            case SMALLER:
                alt137=1;
                break;
            case L_DirCommentConstructor:
                alt137=2;
                break;
            case L_DirPIConstructor:
                alt137=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 137, 0, this.input);

                throw nvae;
            }

            switch (alt137) {
                case 1 :
                    // xquery/XQueryParser.g:1060:11: p_DirElemConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7982);
                    p_DirElemConstructor387=this.p_DirElemConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirElemConstructor387.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1061:11: p_DirCommentConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_DirCommentConstructor_in_p_DirectConstructor7994);
                    p_DirCommentConstructor388=this.p_DirCommentConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirCommentConstructor388.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1062:11: p_DirPIConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_DirPIConstructor_in_p_DirectConstructor8006);
                    p_DirPIConstructor389=this.p_DirPIConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirPIConstructor389.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_DirElemConstructor_return: (function() {
        XQueryParser.p_DirElemConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_DirElemConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1066:1: p_DirElemConstructor : SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) ;
    // $ANTLR start "p_DirElemConstructor"
    p_DirElemConstructor: function() {
        var retval = new XQueryParser.p_DirElemConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var SMALLER390 = null;
        var EMPTY_CLOSE_TAG393 = null;
        var GREATER394 = null;
        var CLOSE_TAG396 = null;
        var S398 = null;
        var GREATER399 = null;
         var p_QName391 = null;
         var p_DirAttributeList392 = null;
         var pm_DirElemContent395 = null;
         var p_QName397 = null;

        var SMALLER390_tree=null;
        var EMPTY_CLOSE_TAG393_tree=null;
        var GREATER394_tree=null;
        var CLOSE_TAG396_tree=null;
        var S398_tree=null;
        var GREATER399_tree=null;
        var stream_CLOSE_TAG=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token CLOSE_TAG");
        var stream_GREATER=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token GREATER");
        var stream_S=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token S");
        var stream_EMPTY_CLOSE_TAG=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EMPTY_CLOSE_TAG");
        var stream_SMALLER=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token SMALLER");
        var stream_p_DirAttributeList=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_DirAttributeList");
        var stream_pm_DirElemContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pm_DirElemContent");
        var stream_p_QName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QName");
        try {
            // xquery/XQueryParser.g:1067:9: ( SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) )
            // xquery/XQueryParser.g:1067:11: SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            SMALLER390=this.match(this.input,SMALLER,XQueryParser.FOLLOW_SMALLER_in_p_DirElemConstructor8033); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_SMALLER.add(SMALLER390);

            if ( this.state.backtracking===0 ) {
              this.pushXMLLexer();
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_DirElemConstructor8047);
            p_QName391=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_QName.add(p_QName391.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_DirAttributeList_in_p_DirElemConstructor8049);
            p_DirAttributeList392=this.p_DirAttributeList();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_DirAttributeList.add(p_DirAttributeList392.getTree());
            // xquery/XQueryParser.g:1069:11: ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            var alt140=2;
            var LA140_0 = this.input.LA(1);

            if ( (LA140_0==EMPTY_CLOSE_TAG) ) {
                alt140=1;
            }
            else if ( (LA140_0==GREATER) ) {
                alt140=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 140, 0, this.input);

                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    // xquery/XQueryParser.g:1069:12: EMPTY_CLOSE_TAG
                    EMPTY_CLOSE_TAG393=this.match(this.input,EMPTY_CLOSE_TAG,XQueryParser.FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor8063); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_EMPTY_CLOSE_TAG.add(EMPTY_CLOSE_TAG393);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1069:30: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    // xquery/XQueryParser.g:1069:30: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    // xquery/XQueryParser.g:1069:31: GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER
                    GREATER394=this.match(this.input,GREATER,XQueryParser.FOLLOW_GREATER_in_p_DirElemConstructor8068); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_GREATER.add(GREATER394);

                    // xquery/XQueryParser.g:1069:39: ( pm_DirElemContent )*
                    loop138:
                    do {
                        var alt138=2;
                        var LA138_0 = this.input.LA(1);

                        if ( ((LA138_0>=L_ElementContentChar && LA138_0<=ESCAPE_RBRACKET)||LA138_0==LBRACKET||LA138_0==SMALLER||(LA138_0>=L_DirCommentConstructor && LA138_0<=L_DirPIConstructor)) ) {
                            alt138=1;
                        }


                        switch (alt138) {
                        case 1 :
                            // xquery/XQueryParser.g:1069:39: pm_DirElemContent
                            this.pushFollow(XQueryParser.FOLLOW_pm_DirElemContent_in_p_DirElemConstructor8070);
                            pm_DirElemContent395=this.pm_DirElemContent();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_pm_DirElemContent.add(pm_DirElemContent395.getTree());


                            break;

                        default :
                            break loop138;
                        }
                    } while (true);

                    CLOSE_TAG396=this.match(this.input,CLOSE_TAG,XQueryParser.FOLLOW_CLOSE_TAG_in_p_DirElemConstructor8073); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_CLOSE_TAG.add(CLOSE_TAG396);

                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_DirElemConstructor8075);
                    p_QName397=this.p_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_QName.add(p_QName397.getTree());
                    // xquery/XQueryParser.g:1069:76: ( S )?
                    var alt139=2;
                    var LA139_0 = this.input.LA(1);

                    if ( (LA139_0==S) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // xquery/XQueryParser.g:1069:76: S
                            S398=this.match(this.input,S,XQueryParser.FOLLOW_S_in_p_DirElemConstructor8077); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_S.add(S398);



                            break;

                    }

                    GREATER399=this.match(this.input,GREATER,XQueryParser.FOLLOW_GREATER_in_p_DirElemConstructor8080); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_GREATER.add(GREATER399);






                    break;

            }



            // AST REWRITE
            // elements: p_DirAttributeList, pm_DirElemContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 1070:17: -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
            {
                // xquery/XQueryParser.g:1070:20: ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(DirElemConstructor, "DirElemConstructor"), root_1);

                // xquery/XQueryParser.g:1070:41: ^( DirAttributeList ( p_DirAttributeList )* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(DirAttributeList, "DirAttributeList"), root_2);

                // xquery/XQueryParser.g:1070:60: ( p_DirAttributeList )*
                while ( stream_p_DirAttributeList.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_p_DirAttributeList.nextTree());

                }
                stream_p_DirAttributeList.reset();

                this.adaptor.addChild(root_1, root_2);
                }
                // xquery/XQueryParser.g:1070:81: ^( DirElemContent ( pm_DirElemContent )* )
                {
                var root_2 = this.adaptor.nil();
                root_2 = this.adaptor.becomeRoot(this.adaptor.create(DirElemContent, "DirElemContent"), root_2);

                // xquery/XQueryParser.g:1070:98: ( pm_DirElemContent )*
                while ( stream_pm_DirElemContent.hasNext() ) {
                    this.adaptor.addChild(root_2, stream_pm_DirElemContent.nextTree());

                }
                stream_pm_DirElemContent.reset();

                this.adaptor.addChild(root_1, root_2);
                }

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.popLexer();
        }
        return retval;
    },

    // inline static return class
    p_DirAttributeList_return: (function() {
        XQueryParser.p_DirAttributeList_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_DirAttributeList_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1075:1: p_DirAttributeList : ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* ;
    // $ANTLR start "p_DirAttributeList"
    p_DirAttributeList: function() {
        var retval = new XQueryParser.p_DirAttributeList_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var S400 = null;
        var S402 = null;
        var EQUAL403 = null;
        var S404 = null;
         var p_QName401 = null;
         var p_DirAttributeValue405 = null;

        var S400_tree=null;
        var S402_tree=null;
        var EQUAL403_tree=null;
        var S404_tree=null;

        try {
            // xquery/XQueryParser.g:1076:9: ( ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* )
            // xquery/XQueryParser.g:1076:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1076:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            loop144:
            do {
                var alt144=2;
                var LA144_0 = this.input.LA(1);

                if ( (LA144_0==S) ) {
                    alt144=1;
                }


                switch (alt144) {
                case 1 :
                    // xquery/XQueryParser.g:1076:12: S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
                    S400=this.match(this.input,S,XQueryParser.FOLLOW_S_in_p_DirAttributeList8157); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    S400_tree = this.adaptor.create(S400);
                    this.adaptor.addChild(root_0, S400_tree);
                    }
                    // xquery/XQueryParser.g:1076:14: ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
                    var alt143=2;
                    var LA143_0 = this.input.LA(1);

                    if ( ((LA143_0>=ANCESTOR && LA143_0<=SKIP)||(LA143_0>=VALUE && LA143_0<=QUOT_ER)||LA143_0==L_NCName||LA143_0==EXPLICITLY) ) {
                        alt143=1;
                    }
                    switch (alt143) {
                        case 1 :
                            // xquery/XQueryParser.g:1076:15: p_QName ( S )? EQUAL ( S )? p_DirAttributeValue
                            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_DirAttributeList8160);
                            p_QName401=this.p_QName();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName401.getTree());
                            // xquery/XQueryParser.g:1076:23: ( S )?
                            var alt141=2;
                            var LA141_0 = this.input.LA(1);

                            if ( (LA141_0==S) ) {
                                alt141=1;
                            }
                            switch (alt141) {
                                case 1 :
                                    // xquery/XQueryParser.g:1076:23: S
                                    S402=this.match(this.input,S,XQueryParser.FOLLOW_S_in_p_DirAttributeList8162); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    S402_tree = this.adaptor.create(S402);
                                    this.adaptor.addChild(root_0, S402_tree);
                                    }


                                    break;

                            }

                            EQUAL403=this.match(this.input,EQUAL,XQueryParser.FOLLOW_EQUAL_in_p_DirAttributeList8165); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            EQUAL403_tree = this.adaptor.create(EQUAL403);
                            this.adaptor.addChild(root_0, EQUAL403_tree);
                            }
                            // xquery/XQueryParser.g:1076:32: ( S )?
                            var alt142=2;
                            var LA142_0 = this.input.LA(1);

                            if ( (LA142_0==S) ) {
                                alt142=1;
                            }
                            switch (alt142) {
                                case 1 :
                                    // xquery/XQueryParser.g:1076:32: S
                                    S404=this.match(this.input,S,XQueryParser.FOLLOW_S_in_p_DirAttributeList8167); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    S404_tree = this.adaptor.create(S404);
                                    this.adaptor.addChild(root_0, S404_tree);
                                    }


                                    break;

                            }

                            this.pushFollow(XQueryParser.FOLLOW_p_DirAttributeValue_in_p_DirAttributeList8170);
                            p_DirAttributeValue405=this.p_DirAttributeValue();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirAttributeValue405.getTree());


                            break;

                    }



                    break;

                default :
                    break loop144;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_DirAttributeValue_return: (function() {
        XQueryParser.p_DirAttributeValue_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_DirAttributeValue_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1080:1: p_DirAttributeValue : ( ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( p_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( p_AposAttrValueContent )* ) );
    // $ANTLR start "p_DirAttributeValue"
    p_DirAttributeValue: function() {
        var retval = new XQueryParser.p_DirAttributeValue_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var QUOT406 = null;
        var ESCAPE_QUOT407 = null;
        var APOS408 = null;
        var QUOT410 = null;
        var APOS411 = null;
        var ESCAPE_APOS412 = null;
        var QUOT413 = null;
        var APOS415 = null;
         var p_QuotAttrValueContent409 = null;
         var p_AposAttrValueContent414 = null;

        var QUOT406_tree=null;
        var ESCAPE_QUOT407_tree=null;
        var APOS408_tree=null;
        var QUOT410_tree=null;
        var APOS411_tree=null;
        var ESCAPE_APOS412_tree=null;
        var QUOT413_tree=null;
        var APOS415_tree=null;
        var stream_ESCAPE_QUOT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ESCAPE_QUOT");
        var stream_APOS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token APOS");
        var stream_ESCAPE_APOS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ESCAPE_APOS");
        var stream_QUOT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token QUOT");
        var stream_p_QuotAttrValueContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QuotAttrValueContent");
        var stream_p_AposAttrValueContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_AposAttrValueContent");
        try {
            // xquery/XQueryParser.g:1081:9: ( ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( p_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( p_AposAttrValueContent )* ) )
            var alt147=2;
            var LA147_0 = this.input.LA(1);

            if ( (LA147_0==QUOT) ) {
                alt147=1;
            }
            else if ( (LA147_0==APOS) ) {
                alt147=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 147, 0, this.input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // xquery/XQueryParser.g:1081:11: ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT )
                    // xquery/XQueryParser.g:1081:11: ( QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT )
                    // xquery/XQueryParser.g:1081:12: QUOT ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )* QUOT
                    QUOT406=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_DirAttributeValue8201); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT406);

                    // xquery/XQueryParser.g:1081:17: ( ESCAPE_QUOT | APOS | p_QuotAttrValueContent )*
                    loop145:
                    do {
                        var alt145=4;
                        switch ( this.input.LA(1) ) {
                        case ESCAPE_QUOT:
                            alt145=1;
                            break;
                        case APOS:
                            alt145=2;
                            break;
                        case L_QuotAttrContentChar:
                        case L_PredefinedEntityRef:
                        case L_CharRef:
                        case ESCAPE_LBRACKET:
                        case ESCAPE_RBRACKET:
                        case LBRACKET:
                            alt145=3;
                            break;

                        }

                        switch (alt145) {
                        case 1 :
                            // xquery/XQueryParser.g:1081:18: ESCAPE_QUOT
                            ESCAPE_QUOT407=this.match(this.input,ESCAPE_QUOT,XQueryParser.FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue8204); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_ESCAPE_QUOT.add(ESCAPE_QUOT407);



                            break;
                        case 2 :
                            // xquery/XQueryParser.g:1081:32: APOS
                            APOS408=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_DirAttributeValue8208); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_APOS.add(APOS408);



                            break;
                        case 3 :
                            // xquery/XQueryParser.g:1081:39: p_QuotAttrValueContent
                            this.pushFollow(XQueryParser.FOLLOW_p_QuotAttrValueContent_in_p_DirAttributeValue8212);
                            p_QuotAttrValueContent409=this.p_QuotAttrValueContent();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_p_QuotAttrValueContent.add(p_QuotAttrValueContent409.getTree());


                            break;

                        default :
                            break loop145;
                        }
                    } while (true);

                    QUOT410=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_DirAttributeValue8216); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT410);






                    // AST REWRITE
                    // elements: p_QuotAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1082:17: -> ^( DirAttributeValue ( p_QuotAttrValueContent )* )
                    {
                        // xquery/XQueryParser.g:1082:20: ^( DirAttributeValue ( p_QuotAttrValueContent )* )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // xquery/XQueryParser.g:1082:40: ( p_QuotAttrValueContent )*
                        while ( stream_p_QuotAttrValueContent.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_p_QuotAttrValueContent.nextTree());

                        }
                        stream_p_QuotAttrValueContent.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // xquery/XQueryParser.g:1083:11: ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS )
                    // xquery/XQueryParser.g:1083:11: ( APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS )
                    // xquery/XQueryParser.g:1083:12: APOS ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )* APOS
                    APOS411=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_DirAttributeValue8255); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_APOS.add(APOS411);

                    // xquery/XQueryParser.g:1083:17: ( ESCAPE_APOS | QUOT | p_AposAttrValueContent )*
                    loop146:
                    do {
                        var alt146=4;
                        switch ( this.input.LA(1) ) {
                        case ESCAPE_APOS:
                            alt146=1;
                            break;
                        case QUOT:
                            alt146=2;
                            break;
                        case L_AposAttrContentChar:
                        case L_PredefinedEntityRef:
                        case L_CharRef:
                        case ESCAPE_LBRACKET:
                        case ESCAPE_RBRACKET:
                        case LBRACKET:
                            alt146=3;
                            break;

                        }

                        switch (alt146) {
                        case 1 :
                            // xquery/XQueryParser.g:1083:18: ESCAPE_APOS
                            ESCAPE_APOS412=this.match(this.input,ESCAPE_APOS,XQueryParser.FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue8258); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_ESCAPE_APOS.add(ESCAPE_APOS412);



                            break;
                        case 2 :
                            // xquery/XQueryParser.g:1083:32: QUOT
                            QUOT413=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_DirAttributeValue8262); if (this.state.failed) return retval; 
                            if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT413);



                            break;
                        case 3 :
                            // xquery/XQueryParser.g:1083:39: p_AposAttrValueContent
                            this.pushFollow(XQueryParser.FOLLOW_p_AposAttrValueContent_in_p_DirAttributeValue8266);
                            p_AposAttrValueContent414=this.p_AposAttrValueContent();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_p_AposAttrValueContent.add(p_AposAttrValueContent414.getTree());


                            break;

                        default :
                            break loop146;
                        }
                    } while (true);

                    APOS415=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_DirAttributeValue8270); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_APOS.add(APOS415);






                    // AST REWRITE
                    // elements: p_AposAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1084:17: -> ^( DirAttributeValue ( p_AposAttrValueContent )* )
                    {
                        // xquery/XQueryParser.g:1084:20: ^( DirAttributeValue ( p_AposAttrValueContent )* )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // xquery/XQueryParser.g:1084:40: ( p_AposAttrValueContent )*
                        while ( stream_p_AposAttrValueContent.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_p_AposAttrValueContent.nextTree());

                        }
                        stream_p_AposAttrValueContent.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_QuotAttrValueContent_return: (function() {
        XQueryParser.p_QuotAttrValueContent_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_QuotAttrValueContent_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1088:1: p_QuotAttrValueContent : ( p_QuotAttrContentChar | pm_CommonContent );
    // $ANTLR start "p_QuotAttrValueContent"
    p_QuotAttrValueContent: function() {
        var retval = new XQueryParser.p_QuotAttrValueContent_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QuotAttrContentChar416 = null;
         var pm_CommonContent417 = null;


        try {
            // xquery/XQueryParser.g:1089:9: ( p_QuotAttrContentChar | pm_CommonContent )
            var alt148=2;
            var LA148_0 = this.input.LA(1);

            if ( (LA148_0==L_QuotAttrContentChar) ) {
                alt148=1;
            }
            else if ( ((LA148_0>=L_PredefinedEntityRef && LA148_0<=ESCAPE_RBRACKET)||LA148_0==LBRACKET) ) {
                alt148=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 148, 0, this.input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // xquery/XQueryParser.g:1089:11: p_QuotAttrContentChar
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_QuotAttrContentChar_in_p_QuotAttrValueContent8322);
                    p_QuotAttrContentChar416=this.p_QuotAttrContentChar();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QuotAttrContentChar416.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1089:35: pm_CommonContent
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_CommonContent_in_p_QuotAttrValueContent8326);
                    pm_CommonContent417=this.pm_CommonContent();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CommonContent417.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AposAttrValueContent_return: (function() {
        XQueryParser.p_AposAttrValueContent_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AposAttrValueContent_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1093:1: p_AposAttrValueContent : ( p_AposAttrContentChar | pm_CommonContent );
    // $ANTLR start "p_AposAttrValueContent"
    p_AposAttrValueContent: function() {
        var retval = new XQueryParser.p_AposAttrValueContent_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_AposAttrContentChar418 = null;
         var pm_CommonContent419 = null;


        try {
            // xquery/XQueryParser.g:1094:9: ( p_AposAttrContentChar | pm_CommonContent )
            var alt149=2;
            var LA149_0 = this.input.LA(1);

            if ( (LA149_0==L_AposAttrContentChar) ) {
                alt149=1;
            }
            else if ( ((LA149_0>=L_PredefinedEntityRef && LA149_0<=ESCAPE_RBRACKET)||LA149_0==LBRACKET) ) {
                alt149=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 149, 0, this.input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // xquery/XQueryParser.g:1094:11: p_AposAttrContentChar
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AposAttrContentChar_in_p_AposAttrValueContent8352);
                    p_AposAttrContentChar418=this.p_AposAttrContentChar();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AposAttrContentChar418.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1094:35: pm_CommonContent
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_CommonContent_in_p_AposAttrValueContent8356);
                    pm_CommonContent419=this.pm_CommonContent();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CommonContent419.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_DirElemContent_return: (function() {
        XQueryParser.pm_DirElemContent_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_DirElemContent_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1098:1: pm_DirElemContent : ( p_DirectConstructor | p_CDataSection | pm_CommonContent | p_ElementContentChar );
    // $ANTLR start "pm_DirElemContent"
    pm_DirElemContent: function() {
        var retval = new XQueryParser.pm_DirElemContent_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_DirectConstructor420 = null;
         var p_CDataSection421 = null;
         var pm_CommonContent422 = null;
         var p_ElementContentChar423 = null;


        try {
            // xquery/XQueryParser.g:1099:9: ( p_DirectConstructor | p_CDataSection | pm_CommonContent | p_ElementContentChar )
            var alt150=4;
            switch ( this.input.LA(1) ) {
            case SMALLER:
            case L_DirCommentConstructor:
            case L_DirPIConstructor:
                alt150=1;
                break;
            case L_CDataSection:
                alt150=2;
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
            case LBRACKET:
                alt150=3;
                break;
            case L_ElementContentChar:
                alt150=4;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 150, 0, this.input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // xquery/XQueryParser.g:1099:11: p_DirectConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_DirectConstructor_in_pm_DirElemContent8382);
                    p_DirectConstructor420=this.p_DirectConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DirectConstructor420.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1100:11: p_CDataSection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_CDataSection_in_pm_DirElemContent8394);
                    p_CDataSection421=this.p_CDataSection();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CDataSection421.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1101:11: pm_CommonContent
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_CommonContent_in_pm_DirElemContent8406);
                    pm_CommonContent422=this.pm_CommonContent();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CommonContent422.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:1102:11: p_ElementContentChar
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ElementContentChar_in_pm_DirElemContent8418);
                    p_ElementContentChar423=this.p_ElementContentChar();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementContentChar423.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_CommonContent_return: (function() {
        XQueryParser.pm_CommonContent_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_CommonContent_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1108:1: pm_CommonContent : ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET | pg_EnclosedExprXml );
    // $ANTLR start "pm_CommonContent"
    pm_CommonContent: function() {
        var retval = new XQueryParser.pm_CommonContent_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var L_PredefinedEntityRef424 = null;
        var L_CharRef425 = null;
        var ESCAPE_LBRACKET426 = null;
        var ESCAPE_RBRACKET427 = null;
         var pg_EnclosedExprXml428 = null;

        var L_PredefinedEntityRef424_tree=null;
        var L_CharRef425_tree=null;
        var ESCAPE_LBRACKET426_tree=null;
        var ESCAPE_RBRACKET427_tree=null;

        try {
            // xquery/XQueryParser.g:1109:9: ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET | pg_EnclosedExprXml )
            var alt151=5;
            switch ( this.input.LA(1) ) {
            case L_PredefinedEntityRef:
                alt151=1;
                break;
            case L_CharRef:
                alt151=2;
                break;
            case ESCAPE_LBRACKET:
                alt151=3;
                break;
            case ESCAPE_RBRACKET:
                alt151=4;
                break;
            case LBRACKET:
                alt151=5;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 151, 0, this.input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // xquery/XQueryParser.g:1109:11: L_PredefinedEntityRef
                    root_0 = this.adaptor.nil();

                    L_PredefinedEntityRef424=this.match(this.input,L_PredefinedEntityRef,XQueryParser.FOLLOW_L_PredefinedEntityRef_in_pm_CommonContent8446); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    L_PredefinedEntityRef424_tree = this.adaptor.create(L_PredefinedEntityRef424);
                    this.adaptor.addChild(root_0, L_PredefinedEntityRef424_tree);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1110:11: L_CharRef
                    root_0 = this.adaptor.nil();

                    L_CharRef425=this.match(this.input,L_CharRef,XQueryParser.FOLLOW_L_CharRef_in_pm_CommonContent8458); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    L_CharRef425_tree = this.adaptor.create(L_CharRef425);
                    this.adaptor.addChild(root_0, L_CharRef425_tree);
                    }


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1111:11: ESCAPE_LBRACKET
                    root_0 = this.adaptor.nil();

                    ESCAPE_LBRACKET426=this.match(this.input,ESCAPE_LBRACKET,XQueryParser.FOLLOW_ESCAPE_LBRACKET_in_pm_CommonContent8470); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ESCAPE_LBRACKET426_tree = this.adaptor.create(ESCAPE_LBRACKET426);
                    this.adaptor.addChild(root_0, ESCAPE_LBRACKET426_tree);
                    }


                    break;
                case 4 :
                    // xquery/XQueryParser.g:1112:11: ESCAPE_RBRACKET
                    root_0 = this.adaptor.nil();

                    ESCAPE_RBRACKET427=this.match(this.input,ESCAPE_RBRACKET,XQueryParser.FOLLOW_ESCAPE_RBRACKET_in_pm_CommonContent8482); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ESCAPE_RBRACKET427_tree = this.adaptor.create(ESCAPE_RBRACKET427);
                    this.adaptor.addChild(root_0, ESCAPE_RBRACKET427_tree);
                    }


                    break;
                case 5 :
                    // xquery/XQueryParser.g:1113:11: pg_EnclosedExprXml
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pg_EnclosedExprXml_in_pm_CommonContent8494);
                    pg_EnclosedExprXml428=this.pg_EnclosedExprXml();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_EnclosedExprXml428.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pg_EnclosedExprXml_return: (function() {
        XQueryParser.pg_EnclosedExprXml_return = function(){};
        org.antlr.lang.extend(XQueryParser.pg_EnclosedExprXml_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1121:1: pg_EnclosedExprXml : LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    // $ANTLR start "pg_EnclosedExprXml"
    pg_EnclosedExprXml: function() {
        var retval = new XQueryParser.pg_EnclosedExprXml_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LBRACKET429 = null;
        var RBRACKET431 = null;
         var p_StatementsAndOptionalExpr430 = null;

        var LBRACKET429_tree=null;
        var RBRACKET431_tree=null;

        try {
            // xquery/XQueryParser.g:1122:9: ( LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // xquery/XQueryParser.g:1122:13: LBRACKET p_StatementsAndOptionalExpr RBRACKET
            root_0 = this.adaptor.nil();

            LBRACKET429=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pg_EnclosedExprXml8526); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET429_tree = this.adaptor.create(LBRACKET429);
            this.adaptor.addChild(root_0, LBRACKET429_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.pushXQueryLexer();
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pg_EnclosedExprXml8542);
            p_StatementsAndOptionalExpr430=this.p_StatementsAndOptionalExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr430.getTree());
            RBRACKET431=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pg_EnclosedExprXml8556); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET431_tree = this.adaptor.create(RBRACKET431);
            this.adaptor.addChild(root_0, RBRACKET431_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.popLexer();
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_DirCommentConstructor_return: (function() {
        XQueryParser.p_DirCommentConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_DirCommentConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1129:1: p_DirCommentConstructor : c= L_DirCommentConstructor ;
    // $ANTLR start "p_DirCommentConstructor"
    p_DirCommentConstructor: function() {
        var retval = new XQueryParser.p_DirCommentConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var c = null;

        var c_tree=null;

        try {
            // xquery/XQueryParser.g:1130:9: (c= L_DirCommentConstructor )
            // xquery/XQueryParser.g:1130:11: c= L_DirCommentConstructor
            root_0 = this.adaptor.nil();

            c=this.match(this.input,L_DirCommentConstructor,XQueryParser.FOLLOW_L_DirCommentConstructor_in_p_DirCommentConstructor8587); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            c_tree = this.adaptor.create(c);
            this.adaptor.addChild(root_0, c_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ac(c);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_DirPIConstructor_return: (function() {
        XQueryParser.p_DirPIConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_DirPIConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1137:1: p_DirPIConstructor : L_DirPIConstructor ;
    // $ANTLR start "p_DirPIConstructor"
    p_DirPIConstructor: function() {
        var retval = new XQueryParser.p_DirPIConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var L_DirPIConstructor432 = null;

        var L_DirPIConstructor432_tree=null;

        try {
            // xquery/XQueryParser.g:1138:9: ( L_DirPIConstructor )
            // xquery/XQueryParser.g:1138:11: L_DirPIConstructor
            root_0 = this.adaptor.nil();

            L_DirPIConstructor432=this.match(this.input,L_DirPIConstructor,XQueryParser.FOLLOW_L_DirPIConstructor_in_p_DirPIConstructor8621); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            L_DirPIConstructor432_tree = this.adaptor.create(L_DirPIConstructor432);
            this.adaptor.addChild(root_0, L_DirPIConstructor432_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CDataSection_return: (function() {
        XQueryParser.p_CDataSection_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CDataSection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1145:1: p_CDataSection : L_CDataSection ;
    // $ANTLR start "p_CDataSection"
    p_CDataSection: function() {
        var retval = new XQueryParser.p_CDataSection_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var L_CDataSection433 = null;

        var L_CDataSection433_tree=null;

        try {
            // xquery/XQueryParser.g:1146:9: ( L_CDataSection )
            // xquery/XQueryParser.g:1146:11: L_CDataSection
            root_0 = this.adaptor.nil();

            L_CDataSection433=this.match(this.input,L_CDataSection,XQueryParser.FOLLOW_L_CDataSection_in_p_CDataSection8654); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            L_CDataSection433_tree = this.adaptor.create(L_CDataSection433);
            this.adaptor.addChild(root_0, L_CDataSection433_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ComputedConstructor_return: (function() {
        XQueryParser.p_ComputedConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ComputedConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1153:1: p_ComputedConstructor : ( pm_CompDocConstructor | pm_CompElemConstructor | pm_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | pm_CompCommentConstructor | pm_CompPIConstructor | {...}? => p_CompBinaryConstructor );
    // $ANTLR start "p_ComputedConstructor"
    p_ComputedConstructor: function() {
        var retval = new XQueryParser.p_ComputedConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var pm_CompDocConstructor434 = null;
         var pm_CompElemConstructor435 = null;
         var pm_CompAttrConstructor436 = null;
         var p_CompNamespaceConstructor437 = null;
         var p_CompTextConstructor438 = null;
         var pm_CompCommentConstructor439 = null;
         var pm_CompPIConstructor440 = null;
         var p_CompBinaryConstructor441 = null;


        try {
            // xquery/XQueryParser.g:1154:9: ( pm_CompDocConstructor | pm_CompElemConstructor | pm_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | pm_CompCommentConstructor | pm_CompPIConstructor | {...}? => p_CompBinaryConstructor )
            var alt152=8;
            var LA152_0 = this.input.LA(1);

            if ( (LA152_0==DOCUMENT) ) {
                alt152=1;
            }
            else if ( (LA152_0==ELEMENT) ) {
                alt152=2;
            }
            else if ( (LA152_0==ATTRIBUTE) ) {
                alt152=3;
            }
            else if ( (LA152_0==NAMESPACE) ) {
                alt152=4;
            }
            else if ( (LA152_0==TEXT) ) {
                alt152=5;
            }
            else if ( (LA152_0==COMMENT) ) {
                alt152=6;
            }
            else if ( (LA152_0==PROCESSING_INSTRUCTION) ) {
                alt152=7;
            }
            else if ( (LA152_0==BINARY) && ((this.lc(MLS)))) {
                alt152=8;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 152, 0, this.input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // xquery/XQueryParser.g:1154:11: pm_CompDocConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_CompDocConstructor_in_p_ComputedConstructor8686);
                    pm_CompDocConstructor434=this.pm_CompDocConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompDocConstructor434.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1155:11: pm_CompElemConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_CompElemConstructor_in_p_ComputedConstructor8698);
                    pm_CompElemConstructor435=this.pm_CompElemConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompElemConstructor435.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1156:11: pm_CompAttrConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_CompAttrConstructor_in_p_ComputedConstructor8710);
                    pm_CompAttrConstructor436=this.pm_CompAttrConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompAttrConstructor436.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:1157:11: p_CompNamespaceConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8722);
                    p_CompNamespaceConstructor437=this.p_CompNamespaceConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CompNamespaceConstructor437.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:1158:11: p_CompTextConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8734);
                    p_CompTextConstructor438=this.p_CompTextConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CompTextConstructor438.getTree());


                    break;
                case 6 :
                    // xquery/XQueryParser.g:1159:11: pm_CompCommentConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_CompCommentConstructor_in_p_ComputedConstructor8746);
                    pm_CompCommentConstructor439=this.pm_CompCommentConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompCommentConstructor439.getTree());


                    break;
                case 7 :
                    // xquery/XQueryParser.g:1160:11: pm_CompPIConstructor
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pm_CompPIConstructor_in_p_ComputedConstructor8758);
                    pm_CompPIConstructor440=this.pm_CompPIConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_CompPIConstructor440.getTree());


                    break;
                case 8 :
                    // xquery/XQueryParser.g:1161:11: {...}? => p_CompBinaryConstructor
                    root_0 = this.adaptor.nil();

                    if ( !((this.lc(MLS))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_ComputedConstructor", "this.lc(MLS)");
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8773);
                    p_CompBinaryConstructor441=this.p_CompBinaryConstructor();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CompBinaryConstructor441.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_CompDocConstructor_return: (function() {
        XQueryParser.pm_CompDocConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_CompDocConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1166:1: pm_CompDocConstructor : k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    // $ANTLR start "pm_CompDocConstructor"
    pm_CompDocConstructor: function() {
        var retval = new XQueryParser.pm_CompDocConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET442 = null;
        var RBRACKET444 = null;
         var p_StatementsAndOptionalExpr443 = null;

        var k_tree=null;
        var LBRACKET442_tree=null;
        var RBRACKET444_tree=null;

        try {
            // xquery/XQueryParser.g:1167:9: (k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // xquery/XQueryParser.g:1167:11: k= DOCUMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DOCUMENT,XQueryParser.FOLLOW_DOCUMENT_in_pm_CompDocConstructor8802); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LBRACKET442=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompDocConstructor8806); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET442_tree = this.adaptor.create(LBRACKET442);
            this.adaptor.addChild(root_0, LBRACKET442_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompDocConstructor8808);
            p_StatementsAndOptionalExpr443=this.p_StatementsAndOptionalExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr443.getTree());
            RBRACKET444=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompDocConstructor8810); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET444_tree = this.adaptor.create(RBRACKET444);
            this.adaptor.addChild(root_0, RBRACKET444_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_CompElemConstructor_return: (function() {
        XQueryParser.pm_CompElemConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_CompElemConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1171:1: pm_CompElemConstructor : k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET ;
    // $ANTLR start "pm_CompElemConstructor"
    pm_CompElemConstructor: function() {
        var retval = new XQueryParser.pm_CompElemConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET446 = null;
        var RBRACKET448 = null;
        var LBRACKET449 = null;
        var RBRACKET451 = null;
         var p_QName445 = null;
         var p_Expr447 = null;
         var pm_ContentExpr450 = null;

        var k_tree=null;
        var LBRACKET446_tree=null;
        var RBRACKET448_tree=null;
        var LBRACKET449_tree=null;
        var RBRACKET451_tree=null;

        try {
            // xquery/XQueryParser.g:1172:9: (k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET )
            // xquery/XQueryParser.g:1172:11: k= ELEMENT ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET pm_ContentExpr RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,ELEMENT,XQueryParser.FOLLOW_ELEMENT_in_pm_CompElemConstructor8846); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:1172:36: ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
            var alt153=2;
            var LA153_0 = this.input.LA(1);

            if ( ((LA153_0>=ANCESTOR && LA153_0<=SKIP)||(LA153_0>=VALUE && LA153_0<=QUOT_ER)||LA153_0==L_NCName||LA153_0==EXPLICITLY) ) {
                alt153=1;
            }
            else if ( (LA153_0==LBRACKET) ) {
                alt153=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 153, 0, this.input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // xquery/XQueryParser.g:1172:37: p_QName
                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_pm_CompElemConstructor8851);
                    p_QName445=this.p_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName445.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1172:47: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // xquery/XQueryParser.g:1172:47: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // xquery/XQueryParser.g:1172:48: LBRACKET p_Expr[true,true] RBRACKET
                    LBRACKET446=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompElemConstructor8856); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    LBRACKET446_tree = this.adaptor.create(LBRACKET446);
                    this.adaptor.addChild(root_0, LBRACKET446_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_pm_CompElemConstructor8858);
                    p_Expr447=this.p_Expr(true, true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr447.getTree());
                    RBRACKET448=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompElemConstructor8861); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    RBRACKET448_tree = this.adaptor.create(RBRACKET448);
                    this.adaptor.addChild(root_0, RBRACKET448_tree);
                    }





                    break;

            }

            LBRACKET449=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompElemConstructor8865); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET449_tree = this.adaptor.create(LBRACKET449);
            this.adaptor.addChild(root_0, LBRACKET449_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_pm_ContentExpr_in_pm_CompElemConstructor8867);
            pm_ContentExpr450=this.pm_ContentExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pm_ContentExpr450.getTree());
            RBRACKET451=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompElemConstructor8869); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET451_tree = this.adaptor.create(RBRACKET451);
            this.adaptor.addChild(root_0, RBRACKET451_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_ContentExpr_return: (function() {
        XQueryParser.pm_ContentExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_ContentExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1177:1: pm_ContentExpr : p_StatementsAndOptionalExpr ;
    // $ANTLR start "pm_ContentExpr"
    pm_ContentExpr: function() {
        var retval = new XQueryParser.pm_ContentExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_StatementsAndOptionalExpr452 = null;


        try {
            // xquery/XQueryParser.g:1178:9: ( p_StatementsAndOptionalExpr )
            // xquery/XQueryParser.g:1178:11: p_StatementsAndOptionalExpr
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_ContentExpr8896);
            p_StatementsAndOptionalExpr452=this.p_StatementsAndOptionalExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr452.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_CompAttrConstructor_return: (function() {
        XQueryParser.pm_CompAttrConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_CompAttrConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1183:1: pm_CompAttrConstructor : k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    // $ANTLR start "pm_CompAttrConstructor"
    pm_CompAttrConstructor: function() {
        var retval = new XQueryParser.pm_CompAttrConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET454 = null;
        var RBRACKET456 = null;
        var LBRACKET457 = null;
        var RBRACKET459 = null;
         var p_QName453 = null;
         var p_Expr455 = null;
         var p_StatementsAndOptionalExpr458 = null;

        var k_tree=null;
        var LBRACKET454_tree=null;
        var RBRACKET456_tree=null;
        var LBRACKET457_tree=null;
        var RBRACKET459_tree=null;

        try {
            // xquery/XQueryParser.g:1184:9: (k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // xquery/XQueryParser.g:1184:11: k= ATTRIBUTE ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,ATTRIBUTE,XQueryParser.FOLLOW_ATTRIBUTE_in_pm_CompAttrConstructor8925); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:1184:38: ( p_QName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
            var alt154=2;
            var LA154_0 = this.input.LA(1);

            if ( ((LA154_0>=ANCESTOR && LA154_0<=SKIP)||(LA154_0>=VALUE && LA154_0<=QUOT_ER)||LA154_0==L_NCName||LA154_0==EXPLICITLY) ) {
                alt154=1;
            }
            else if ( (LA154_0==LBRACKET) ) {
                alt154=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 154, 0, this.input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // xquery/XQueryParser.g:1184:39: p_QName
                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_pm_CompAttrConstructor8930);
                    p_QName453=this.p_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName453.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1184:49: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // xquery/XQueryParser.g:1184:49: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // xquery/XQueryParser.g:1184:50: LBRACKET p_Expr[true,true] RBRACKET
                    LBRACKET454=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompAttrConstructor8935); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    LBRACKET454_tree = this.adaptor.create(LBRACKET454);
                    this.adaptor.addChild(root_0, LBRACKET454_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_pm_CompAttrConstructor8937);
                    p_Expr455=this.p_Expr(true, true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr455.getTree());
                    RBRACKET456=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompAttrConstructor8940); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    RBRACKET456_tree = this.adaptor.create(RBRACKET456);
                    this.adaptor.addChild(root_0, RBRACKET456_tree);
                    }





                    break;

            }

            LBRACKET457=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompAttrConstructor8944); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET457_tree = this.adaptor.create(LBRACKET457);
            this.adaptor.addChild(root_0, LBRACKET457_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompAttrConstructor8946);
            p_StatementsAndOptionalExpr458=this.p_StatementsAndOptionalExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr458.getTree());
            RBRACKET459=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompAttrConstructor8948); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET459_tree = this.adaptor.create(RBRACKET459);
            this.adaptor.addChild(root_0, RBRACKET459_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CompNamespaceConstructor_return: (function() {
        XQueryParser.p_CompNamespaceConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CompNamespaceConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1188:1: p_CompNamespaceConstructor : k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET ;
    // $ANTLR start "p_CompNamespaceConstructor"
    p_CompNamespaceConstructor: function() {
        var retval = new XQueryParser.p_CompNamespaceConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET461 = null;
        var RBRACKET463 = null;
        var LBRACKET464 = null;
        var RBRACKET466 = null;
         var p_Prefix460 = null;
         var p_PrefixExpr462 = null;
         var p_URIExpr465 = null;

        var k_tree=null;
        var LBRACKET461_tree=null;
        var RBRACKET463_tree=null;
        var LBRACKET464_tree=null;
        var RBRACKET466_tree=null;

        try {
            // xquery/XQueryParser.g:1189:9: (k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET )
            // xquery/XQueryParser.g:1189:11: k= NAMESPACE ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) ) LBRACKET ( p_URIExpr )? RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,NAMESPACE,XQueryParser.FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8976); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:1189:38: ( p_Prefix | ( LBRACKET p_PrefixExpr RBRACKET ) )
            var alt155=2;
            var LA155_0 = this.input.LA(1);

            if ( ((LA155_0>=ANCESTOR && LA155_0<=SKIP)||(LA155_0>=VALUE && LA155_0<=QUOT_ER)||LA155_0==L_NCName||LA155_0==EXPLICITLY) ) {
                alt155=1;
            }
            else if ( (LA155_0==LBRACKET) ) {
                alt155=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 155, 0, this.input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // xquery/XQueryParser.g:1189:39: p_Prefix
                    this.pushFollow(XQueryParser.FOLLOW_p_Prefix_in_p_CompNamespaceConstructor8981);
                    p_Prefix460=this.p_Prefix();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Prefix460.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1189:50: ( LBRACKET p_PrefixExpr RBRACKET )
                    // xquery/XQueryParser.g:1189:50: ( LBRACKET p_PrefixExpr RBRACKET )
                    // xquery/XQueryParser.g:1189:51: LBRACKET p_PrefixExpr RBRACKET
                    LBRACKET461=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8986); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    LBRACKET461_tree = this.adaptor.create(LBRACKET461);
                    this.adaptor.addChild(root_0, LBRACKET461_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_PrefixExpr_in_p_CompNamespaceConstructor8988);
                    p_PrefixExpr462=this.p_PrefixExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PrefixExpr462.getTree());
                    RBRACKET463=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8990); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    RBRACKET463_tree = this.adaptor.create(RBRACKET463);
                    this.adaptor.addChild(root_0, RBRACKET463_tree);
                    }





                    break;

            }

            LBRACKET464=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8994); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET464_tree = this.adaptor.create(LBRACKET464);
            this.adaptor.addChild(root_0, LBRACKET464_tree);
            }
            // xquery/XQueryParser.g:1189:93: ( p_URIExpr )?
            var alt156=2;
            var LA156_0 = this.input.LA(1);

            if ( ((LA156_0>=ANCESTOR && LA156_0<=QUOT_ER)||LA156_0==LPAREN||(LA156_0>=DOLLAR && LA156_0<=LBRACKET)||(LA156_0>=STAR && LA156_0<=SMALLER)||(LA156_0>=SLASH && LA156_0<=DOT_DOT)||LA156_0==ATTR_SIGN||(LA156_0>=APOS && LA156_0<=QUOT)||LA156_0==L_NCName||(LA156_0>=L_Pragma && LA156_0<=L_DoubleLiteral)||LA156_0==EXPLICITLY) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // xquery/XQueryParser.g:1189:93: p_URIExpr
                    this.pushFollow(XQueryParser.FOLLOW_p_URIExpr_in_p_CompNamespaceConstructor8996);
                    p_URIExpr465=this.p_URIExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_URIExpr465.getTree());


                    break;

            }

            RBRACKET466=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8999); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET466_tree = this.adaptor.create(RBRACKET466);
            this.adaptor.addChild(root_0, RBRACKET466_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Prefix_return: (function() {
        XQueryParser.p_Prefix_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Prefix_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1193:1: p_Prefix : p_NCName ;
    // $ANTLR start "p_Prefix"
    p_Prefix: function() {
        var retval = new XQueryParser.p_Prefix_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_NCName467 = null;


        try {
            // xquery/XQueryParser.g:1194:9: ( p_NCName )
            // xquery/XQueryParser.g:1194:11: p_NCName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_Prefix9025);
            p_NCName467=this.p_NCName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName467.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_PrefixExpr_return: (function() {
        XQueryParser.p_PrefixExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_PrefixExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1198:1: p_PrefixExpr : p_Expr[true,true] ;
    // $ANTLR start "p_PrefixExpr"
    p_PrefixExpr: function() {
        var retval = new XQueryParser.p_PrefixExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Expr468 = null;


        try {
            // xquery/XQueryParser.g:1199:9: ( p_Expr[true,true] )
            // xquery/XQueryParser.g:1199:11: p_Expr[true,true]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_PrefixExpr9051);
            p_Expr468=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr468.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_URIExpr_return: (function() {
        XQueryParser.p_URIExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_URIExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1203:1: p_URIExpr : p_Expr[true,true] ;
    // $ANTLR start "p_URIExpr"
    p_URIExpr: function() {
        var retval = new XQueryParser.p_URIExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Expr469 = null;


        try {
            // xquery/XQueryParser.g:1204:9: ( p_Expr[true,true] )
            // xquery/XQueryParser.g:1204:11: p_Expr[true,true]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_URIExpr9078);
            p_Expr469=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr469.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CompTextConstructor_return: (function() {
        XQueryParser.p_CompTextConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CompTextConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1208:1: p_CompTextConstructor : k= TEXT LBRACKET p_Expr[true,true] RBRACKET ;
    // $ANTLR start "p_CompTextConstructor"
    p_CompTextConstructor: function() {
        var retval = new XQueryParser.p_CompTextConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET470 = null;
        var RBRACKET472 = null;
         var p_Expr471 = null;

        var k_tree=null;
        var LBRACKET470_tree=null;
        var RBRACKET472_tree=null;

        try {
            // xquery/XQueryParser.g:1209:9: (k= TEXT LBRACKET p_Expr[true,true] RBRACKET )
            // xquery/XQueryParser.g:1209:11: k= TEXT LBRACKET p_Expr[true,true] RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,TEXT,XQueryParser.FOLLOW_TEXT_in_p_CompTextConstructor9107); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LBRACKET470=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CompTextConstructor9111); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET470_tree = this.adaptor.create(LBRACKET470);
            this.adaptor.addChild(root_0, LBRACKET470_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_CompTextConstructor9113);
            p_Expr471=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr471.getTree());
            RBRACKET472=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CompTextConstructor9116); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET472_tree = this.adaptor.create(RBRACKET472);
            this.adaptor.addChild(root_0, RBRACKET472_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CompBinaryConstructor_return: (function() {
        XQueryParser.p_CompBinaryConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CompBinaryConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1213:1: p_CompBinaryConstructor : k= BINARY LBRACKET p_Expr[true,true] RBRACKET ;
    // $ANTLR start "p_CompBinaryConstructor"
    p_CompBinaryConstructor: function() {
        var retval = new XQueryParser.p_CompBinaryConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET473 = null;
        var RBRACKET475 = null;
         var p_Expr474 = null;

        var k_tree=null;
        var LBRACKET473_tree=null;
        var RBRACKET475_tree=null;

        try {
            // xquery/XQueryParser.g:1214:9: (k= BINARY LBRACKET p_Expr[true,true] RBRACKET )
            // xquery/XQueryParser.g:1214:11: k= BINARY LBRACKET p_Expr[true,true] RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,BINARY,XQueryParser.FOLLOW_BINARY_in_p_CompBinaryConstructor9144); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LBRACKET473=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_CompBinaryConstructor9148); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET473_tree = this.adaptor.create(LBRACKET473);
            this.adaptor.addChild(root_0, LBRACKET473_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_CompBinaryConstructor9150);
            p_Expr474=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr474.getTree());
            RBRACKET475=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_CompBinaryConstructor9153); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET475_tree = this.adaptor.create(RBRACKET475);
            this.adaptor.addChild(root_0, RBRACKET475_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_CompCommentConstructor_return: (function() {
        XQueryParser.pm_CompCommentConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_CompCommentConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1219:1: pm_CompCommentConstructor : k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    // $ANTLR start "pm_CompCommentConstructor"
    pm_CompCommentConstructor: function() {
        var retval = new XQueryParser.pm_CompCommentConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET476 = null;
        var RBRACKET478 = null;
         var p_StatementsAndOptionalExpr477 = null;

        var k_tree=null;
        var LBRACKET476_tree=null;
        var RBRACKET478_tree=null;

        try {
            // xquery/XQueryParser.g:1220:9: (k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // xquery/XQueryParser.g:1220:11: k= COMMENT LBRACKET p_StatementsAndOptionalExpr RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,COMMENT,XQueryParser.FOLLOW_COMMENT_in_pm_CompCommentConstructor9182); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LBRACKET476=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompCommentConstructor9186); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET476_tree = this.adaptor.create(LBRACKET476);
            this.adaptor.addChild(root_0, LBRACKET476_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompCommentConstructor9188);
            p_StatementsAndOptionalExpr477=this.p_StatementsAndOptionalExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr477.getTree());
            RBRACKET478=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompCommentConstructor9190); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET478_tree = this.adaptor.create(RBRACKET478);
            this.adaptor.addChild(root_0, RBRACKET478_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_CompPIConstructor_return: (function() {
        XQueryParser.pm_CompPIConstructor_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_CompPIConstructor_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1225:1: pm_CompPIConstructor : k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET ;
    // $ANTLR start "pm_CompPIConstructor"
    pm_CompPIConstructor: function() {
        var retval = new XQueryParser.pm_CompPIConstructor_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LBRACKET480 = null;
        var RBRACKET482 = null;
        var LBRACKET483 = null;
        var RBRACKET485 = null;
         var p_NCName479 = null;
         var p_Expr481 = null;
         var p_StatementsAndOptionalExpr484 = null;

        var k_tree=null;
        var LBRACKET480_tree=null;
        var RBRACKET482_tree=null;
        var LBRACKET483_tree=null;
        var RBRACKET485_tree=null;

        try {
            // xquery/XQueryParser.g:1226:9: (k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET )
            // xquery/XQueryParser.g:1226:11: k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) ) LBRACKET p_StatementsAndOptionalExpr RBRACKET
            root_0 = this.adaptor.nil();

            k=this.match(this.input,PROCESSING_INSTRUCTION,XQueryParser.FOLLOW_PROCESSING_INSTRUCTION_in_pm_CompPIConstructor9219); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:1226:51: ( p_NCName | ( LBRACKET p_Expr[true,true] RBRACKET ) )
            var alt157=2;
            var LA157_0 = this.input.LA(1);

            if ( ((LA157_0>=ANCESTOR && LA157_0<=SKIP)||(LA157_0>=VALUE && LA157_0<=QUOT_ER)||LA157_0==L_NCName||LA157_0==EXPLICITLY) ) {
                alt157=1;
            }
            else if ( (LA157_0==LBRACKET) ) {
                alt157=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 157, 0, this.input);

                throw nvae;
            }
            switch (alt157) {
                case 1 :
                    // xquery/XQueryParser.g:1226:52: p_NCName
                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pm_CompPIConstructor9224);
                    p_NCName479=this.p_NCName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName479.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1226:63: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // xquery/XQueryParser.g:1226:63: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // xquery/XQueryParser.g:1226:64: LBRACKET p_Expr[true,true] RBRACKET
                    LBRACKET480=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompPIConstructor9229); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    LBRACKET480_tree = this.adaptor.create(LBRACKET480);
                    this.adaptor.addChild(root_0, LBRACKET480_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_pm_CompPIConstructor9231);
                    p_Expr481=this.p_Expr(true, true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr481.getTree());
                    RBRACKET482=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompPIConstructor9234); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    RBRACKET482_tree = this.adaptor.create(RBRACKET482);
                    this.adaptor.addChild(root_0, RBRACKET482_tree);
                    }





                    break;

            }

            LBRACKET483=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_pm_CompPIConstructor9238); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET483_tree = this.adaptor.create(LBRACKET483);
            this.adaptor.addChild(root_0, LBRACKET483_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompPIConstructor9240);
            p_StatementsAndOptionalExpr484=this.p_StatementsAndOptionalExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr484.getTree());
            RBRACKET485=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_pm_CompPIConstructor9242); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET485_tree = this.adaptor.create(RBRACKET485);
            this.adaptor.addChild(root_0, RBRACKET485_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SingleType_return: (function() {
        XQueryParser.p_SingleType_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SingleType_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1248:1: p_SingleType : p_AtomicOrUnionType ( QUESTION )? ;
    // $ANTLR start "p_SingleType"
    p_SingleType: function() {
        var retval = new XQueryParser.p_SingleType_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var QUESTION487 = null;
         var p_AtomicOrUnionType486 = null;

        var QUESTION487_tree=null;

        try {
            // xquery/XQueryParser.g:1249:9: ( p_AtomicOrUnionType ( QUESTION )? )
            // xquery/XQueryParser.g:1249:11: p_AtomicOrUnionType ( QUESTION )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_AtomicOrUnionType_in_p_SingleType9286);
            p_AtomicOrUnionType486=this.p_AtomicOrUnionType();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AtomicOrUnionType486.getTree());
            // xquery/XQueryParser.g:1249:31: ( QUESTION )?
            var alt158=2;
            var LA158_0 = this.input.LA(1);

            if ( (LA158_0==QUESTION) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // xquery/XQueryParser.g:1249:31: QUESTION
                    QUESTION487=this.match(this.input,QUESTION,XQueryParser.FOLLOW_QUESTION_in_p_SingleType9288); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    QUESTION487_tree = this.adaptor.create(QUESTION487);
                    this.adaptor.addChild(root_0, QUESTION487_tree);
                    }


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TypeDeclaration_return: (function() {
        XQueryParser.p_TypeDeclaration_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TypeDeclaration_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1253:1: p_TypeDeclaration : k= AS st= p_SequenceType -> ^( TypeDeclaration $st) ;
    // $ANTLR start "p_TypeDeclaration"
    p_TypeDeclaration: function() {
        var retval = new XQueryParser.p_TypeDeclaration_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var st = null;

        var k_tree=null;
        var stream_AS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token AS");
        var stream_p_SequenceType=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_SequenceType");
        try {
            // xquery/XQueryParser.g:1254:9: (k= AS st= p_SequenceType -> ^( TypeDeclaration $st) )
            // xquery/XQueryParser.g:1254:11: k= AS st= p_SequenceType
            k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_TypeDeclaration9317); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_AS.add(k);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TypeDeclaration9323);
            st=this.p_SequenceType();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_SequenceType.add(st.getTree());


            // AST REWRITE
            // elements: st
            // token labels: 
            // rule labels: retval, st
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_st=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token st",st!=null?st.tree:null);

            root_0 = this.adaptor.nil();
            // 1255:17: -> ^( TypeDeclaration $st)
            {
                // xquery/XQueryParser.g:1255:20: ^( TypeDeclaration $st)
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(TypeDeclaration, "TypeDeclaration"), root_1);

                this.adaptor.addChild(root_1, stream_st.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SequenceType_return: (function() {
        XQueryParser.p_SequenceType_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SequenceType_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1259:1: p_SequenceType : (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) );
    // $ANTLR start "p_SequenceType"
    p_SequenceType: function() {
        var retval = new XQueryParser.p_SequenceType_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var l = null;
        var r = null;
         var it = null;
         var oi = null;

        var k_tree=null;
        var l_tree=null;
        var r_tree=null;
        var stream_EMPTY_SEQUENCE=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token EMPTY_SEQUENCE");
        var stream_RPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RPAREN");
        var stream_LPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LPAREN");
        var stream_p_ItemType=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_ItemType");
        var stream_p_OccurrenceIndicator=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_OccurrenceIndicator");
        try {
            // xquery/XQueryParser.g:1260:9: (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) )
            var alt160=2;
            var LA160_0 = this.input.LA(1);

            if ( (LA160_0==EMPTY_SEQUENCE) ) {
                var LA160_1 = this.input.LA(2);

                if ( (LA160_1==LPAREN) ) {
                    alt160=1;
                }
                else if ( (LA160_1==EOF||(LA160_1>=AND && LA160_1<=AT)||LA160_1==CASE||LA160_1==COLLATION||LA160_1==DEFAULT||(LA160_1>=DESCENDING && LA160_1<=DIV)||LA160_1==EMPTY||LA160_1==EQ||(LA160_1>=EXCEPT && LA160_1<=EXTERNAL)||LA160_1==FOR||LA160_1==GE||(LA160_1>=GT && LA160_1<=IDIV)||LA160_1==IN||(LA160_1>=INSTANCE && LA160_1<=IS)||LA160_1==LE||(LA160_1>=LET && LA160_1<=MOD)||LA160_1==NE||(LA160_1>=OR && LA160_1<=ORDER)||(LA160_1>=RETURN && LA160_1<=SATISFIES)||LA160_1==STABLE||LA160_1==TO||LA160_1==UNION||LA160_1==WHERE||LA160_1==ALLOWING||LA160_1==COUNT||(LA160_1>=END && LA160_1<=GROUP)||LA160_1==ONLY||LA160_1==START||(LA160_1>=AFTER && LA160_1<=BEFORE)||LA160_1==INTO||LA160_1==MODIFY||LA160_1==WITH||LA160_1==CONTAINS||LA160_1==PARAGRAPHS||LA160_1==SCORE||LA160_1==SENTENCES||LA160_1==TIMES||LA160_1==WORDS||LA160_1==CONCAT||LA160_1==RPAREN||(LA160_1>=LBRACKET && LA160_1<=RBRACKET)||(LA160_1>=RSQUARE && LA160_1<=NOTEQUAL)||(LA160_1>=COMMA && LA160_1<=GREATER_GREATER)||LA160_1==COLON||(LA160_1>=SEMICOLON && LA160_1<=VBAR)) ) {
                    alt160=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 160, 1, this.input);

                    throw nvae;
                }
            }
            else if ( ((LA160_0>=ANCESTOR && LA160_0<=EMPTY)||(LA160_0>=ENCODING && LA160_0<=SKIP)||(LA160_0>=VALUE && LA160_0<=QUOT_ER)||LA160_0==LPAREN||LA160_0==L_NCName||LA160_0==EXPLICITLY) ) {
                alt160=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 160, 0, this.input);

                throw nvae;
            }
            switch (alt160) {
                case 1 :
                    // xquery/XQueryParser.g:1260:11: k= EMPTY_SEQUENCE l= LPAREN r= RPAREN
                    k=this.match(this.input,EMPTY_SEQUENCE,XQueryParser.FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType9376); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_EMPTY_SEQUENCE.add(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    l=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SequenceType9382); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_LPAREN.add(l);

                    r=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SequenceType9386); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_RPAREN.add(r);



                    // AST REWRITE
                    // elements: l, k, r
                    // token labels: r, l, k
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_r=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token r",r);
                    var stream_l=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token l",l);
                    var stream_k=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token k",k);
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1261:17: -> ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                    {
                        // xquery/XQueryParser.g:1261:20: ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(SequenceType, "SequenceType"), root_1);

                        // xquery/XQueryParser.g:1261:35: ^( EmptySequenceTest $k $l $r)
                        {
                        var root_2 = this.adaptor.nil();
                        root_2 = this.adaptor.becomeRoot(this.adaptor.create(EmptySequenceTest, "EmptySequenceTest"), root_2);

                        this.adaptor.addChild(root_2, stream_k.nextNode());
                        this.adaptor.addChild(root_2, stream_l.nextNode());
                        this.adaptor.addChild(root_2, stream_r.nextNode());

                        this.adaptor.addChild(root_1, root_2);
                        }

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // xquery/XQueryParser.g:1262:11: it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    this.pushFollow(XQueryParser.FOLLOW_p_ItemType_in_p_SequenceType9435);
                    it=this.p_ItemType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_ItemType.add(it.getTree());
                    // xquery/XQueryParser.g:1262:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    var alt159=2;
                    alt159 = this.dfa159.predict(this.input);
                    switch (alt159) {
                        case 1 :
                            // xquery/XQueryParser.g:1262:26: ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator
                            this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9446);
                            oi=this.p_OccurrenceIndicator();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) stream_p_OccurrenceIndicator.add(oi.getTree());


                            break;

                    }



                    // AST REWRITE
                    // elements: oi, it
                    // token labels: 
                    // rule labels: retval, it, oi
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
                    var stream_it=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token it",it!=null?it.tree:null);
                    var stream_oi=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token oi",oi!=null?oi.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1263:17: -> ^( SequenceType $it ( $oi)? )
                    {
                        // xquery/XQueryParser.g:1263:20: ^( SequenceType $it ( $oi)? )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(SequenceType, "SequenceType"), root_1);

                        this.adaptor.addChild(root_1, stream_it.nextTree());
                        // xquery/XQueryParser.g:1263:39: ( $oi)?
                        if ( stream_oi.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_oi.nextTree());

                        }
                        stream_oi.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_OccurrenceIndicator_return: (function() {
        XQueryParser.p_OccurrenceIndicator_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_OccurrenceIndicator_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1267:1: p_OccurrenceIndicator : ( QUESTION | STAR | PLUS );
    // $ANTLR start "p_OccurrenceIndicator"
    p_OccurrenceIndicator: function() {
        var retval = new XQueryParser.p_OccurrenceIndicator_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set488 = null;

        var set488_tree=null;

        try {
            // xquery/XQueryParser.g:1268:9: ( QUESTION | STAR | PLUS )
            // xquery/XQueryParser.g:
            root_0 = this.adaptor.nil();

            set488=this.input.LT(1);
            if ( (this.input.LA(1)>=QUESTION && this.input.LA(1)<=PLUS) ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set488));
                this.state.errorRecovery=false;this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                throw mse;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ItemType_return: (function() {
        XQueryParser.p_ItemType_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ItemType_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1272:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType );
    // $ANTLR start "p_ItemType"
    p_ItemType: function() {
        var retval = new XQueryParser.p_ItemType_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var BINARY490 = null;
        var LPAREN491 = null;
        var RPAREN492 = null;
        var ITEM493 = null;
        var LPAREN494 = null;
        var RPAREN495 = null;
         var p_KindTest489 = null;
         var p_AtomicOrUnionType496 = null;
         var p_ParenthesizedItemType497 = null;

        var BINARY490_tree=null;
        var LPAREN491_tree=null;
        var RPAREN492_tree=null;
        var ITEM493_tree=null;
        var LPAREN494_tree=null;
        var RPAREN495_tree=null;
        var stream_RPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token RPAREN");
        var stream_ITEM=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token ITEM");
        var stream_BINARY=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token BINARY");
        var stream_LPAREN=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token LPAREN");
        var stream_p_KindTest=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_KindTest");
        try {
            // xquery/XQueryParser.g:1273:9: ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType )
            var alt161=5;
            alt161 = this.dfa161.predict(this.input);
            switch (alt161) {
                case 1 :
                    // xquery/XQueryParser.g:1273:11: p_KindTest
                    this.pushFollow(XQueryParser.FOLLOW_p_KindTest_in_p_ItemType9548);
                    p_KindTest489=this.p_KindTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_KindTest.add(p_KindTest489.getTree());


                    // AST REWRITE
                    // elements: p_KindTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1274:17: -> ^( KindTest p_KindTest )
                    {
                        // xquery/XQueryParser.g:1274:20: ^( KindTest p_KindTest )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(KindTest, "KindTest"), root_1);

                        this.adaptor.addChild(root_1, stream_p_KindTest.nextTree());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // xquery/XQueryParser.g:1275:11: {...}? => ( BINARY LPAREN RPAREN )
                    if ( !((this.lc(MLS))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_ItemType", "this.lc(MLS)");
                    }
                    // xquery/XQueryParser.g:1275:29: ( BINARY LPAREN RPAREN )
                    // xquery/XQueryParser.g:1275:30: BINARY LPAREN RPAREN
                    BINARY490=this.match(this.input,BINARY,XQueryParser.FOLLOW_BINARY_in_p_ItemType9588); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_BINARY.add(BINARY490);

                    LPAREN491=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ItemType9590); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_LPAREN.add(LPAREN491);

                    RPAREN492=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ItemType9592); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_RPAREN.add(RPAREN492);






                    // AST REWRITE
                    // elements: LPAREN, RPAREN, BINARY
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1276:17: -> ^( BinaryTest BINARY LPAREN RPAREN )
                    {
                        // xquery/XQueryParser.g:1276:20: ^( BinaryTest BINARY LPAREN RPAREN )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(BinaryTest, "BinaryTest"), root_1);

                        this.adaptor.addChild(root_1, stream_BINARY.nextNode());
                        this.adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        this.adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 3 :
                    // xquery/XQueryParser.g:1277:11: ( ITEM LPAREN RPAREN )
                    // xquery/XQueryParser.g:1277:11: ( ITEM LPAREN RPAREN )
                    // xquery/XQueryParser.g:1277:12: ITEM LPAREN RPAREN
                    ITEM493=this.match(this.input,ITEM,XQueryParser.FOLLOW_ITEM_in_p_ItemType9634); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_ITEM.add(ITEM493);

                    LPAREN494=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ItemType9636); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_LPAREN.add(LPAREN494);

                    RPAREN495=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ItemType9638); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_RPAREN.add(RPAREN495);






                    // AST REWRITE
                    // elements: ITEM, RPAREN, LPAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1278:17: -> ^( ItemTest ITEM LPAREN RPAREN )
                    {
                        // xquery/XQueryParser.g:1278:20: ^( ItemTest ITEM LPAREN RPAREN )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(ItemTest, "ItemTest"), root_1);

                        this.adaptor.addChild(root_1, stream_ITEM.nextNode());
                        this.adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        this.adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 4 :
                    // xquery/XQueryParser.g:1282:11: p_AtomicOrUnionType
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AtomicOrUnionType_in_p_ItemType9682);
                    p_AtomicOrUnionType496=this.p_AtomicOrUnionType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AtomicOrUnionType496.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:1283:11: p_ParenthesizedItemType
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ParenthesizedItemType_in_p_ItemType9694);
                    p_ParenthesizedItemType497=this.p_ParenthesizedItemType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ParenthesizedItemType497.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AtomicOrUnionType_return: (function() {
        XQueryParser.p_AtomicOrUnionType_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AtomicOrUnionType_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1287:1: p_AtomicOrUnionType : p_QName -> ^( AtomicOrUnionType p_QName ) ;
    // $ANTLR start "p_AtomicOrUnionType"
    p_AtomicOrUnionType: function() {
        var retval = new XQueryParser.p_AtomicOrUnionType_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName498 = null;

        var stream_p_QName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_QName");
        try {
            // xquery/XQueryParser.g:1288:9: ( p_QName -> ^( AtomicOrUnionType p_QName ) )
            // xquery/XQueryParser.g:1288:11: p_QName
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_AtomicOrUnionType9720);
            p_QName498=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_QName.add(p_QName498.getTree());


            // AST REWRITE
            // elements: p_QName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 1289:17: -> ^( AtomicOrUnionType p_QName )
            {
                // xquery/XQueryParser.g:1289:20: ^( AtomicOrUnionType p_QName )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(AtomicOrUnionType, "AtomicOrUnionType"), root_1);

                this.adaptor.addChild(root_1, stream_p_QName.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_KindTest_return: (function() {
        XQueryParser.p_KindTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_KindTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1293:1: p_KindTest : ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_PITest | p_CommentTest | p_TextTest | p_NamespaceNodeTest | p_AnyKindTest );
    // $ANTLR start "p_KindTest"
    p_KindTest: function() {
        var retval = new XQueryParser.p_KindTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_DocumentTest499 = null;
         var p_ElementTest500 = null;
         var p_AttributeTest501 = null;
         var p_SchemaElementTest502 = null;
         var p_SchemaAttributeTest503 = null;
         var p_PITest504 = null;
         var p_CommentTest505 = null;
         var p_TextTest506 = null;
         var p_NamespaceNodeTest507 = null;
         var p_AnyKindTest508 = null;


        try {
            // xquery/XQueryParser.g:1294:9: ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_PITest | p_CommentTest | p_TextTest | p_NamespaceNodeTest | p_AnyKindTest )
            var alt162=10;
            switch ( this.input.LA(1) ) {
            case DOCUMENT_NODE:
                alt162=1;
                break;
            case ELEMENT:
                alt162=2;
                break;
            case ATTRIBUTE:
                alt162=3;
                break;
            case SCHEMA_ELEMENT:
                alt162=4;
                break;
            case SCHEMA_ATTRIBUTE:
                alt162=5;
                break;
            case PROCESSING_INSTRUCTION:
                alt162=6;
                break;
            case COMMENT:
                alt162=7;
                break;
            case TEXT:
                alt162=8;
                break;
            case NAMESPACE_NODE:
                alt162=9;
                break;
            case NODE:
                alt162=10;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 162, 0, this.input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // xquery/XQueryParser.g:1294:11: p_DocumentTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_DocumentTest_in_p_KindTest9770);
                    p_DocumentTest499=this.p_DocumentTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DocumentTest499.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1295:11: p_ElementTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ElementTest_in_p_KindTest9782);
                    p_ElementTest500=this.p_ElementTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementTest500.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1296:11: p_AttributeTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AttributeTest_in_p_KindTest9794);
                    p_AttributeTest501=this.p_AttributeTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttributeTest501.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:1297:11: p_SchemaElementTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_SchemaElementTest_in_p_KindTest9806);
                    p_SchemaElementTest502=this.p_SchemaElementTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SchemaElementTest502.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:1298:11: p_SchemaAttributeTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_SchemaAttributeTest_in_p_KindTest9818);
                    p_SchemaAttributeTest503=this.p_SchemaAttributeTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SchemaAttributeTest503.getTree());


                    break;
                case 6 :
                    // xquery/XQueryParser.g:1299:11: p_PITest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_PITest_in_p_KindTest9830);
                    p_PITest504=this.p_PITest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PITest504.getTree());


                    break;
                case 7 :
                    // xquery/XQueryParser.g:1300:11: p_CommentTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_CommentTest_in_p_KindTest9842);
                    p_CommentTest505=this.p_CommentTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CommentTest505.getTree());


                    break;
                case 8 :
                    // xquery/XQueryParser.g:1301:11: p_TextTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_TextTest_in_p_KindTest9854);
                    p_TextTest506=this.p_TextTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TextTest506.getTree());


                    break;
                case 9 :
                    // xquery/XQueryParser.g:1302:11: p_NamespaceNodeTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_NamespaceNodeTest_in_p_KindTest9866);
                    p_NamespaceNodeTest507=this.p_NamespaceNodeTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NamespaceNodeTest507.getTree());


                    break;
                case 10 :
                    // xquery/XQueryParser.g:1303:11: p_AnyKindTest
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AnyKindTest_in_p_KindTest9878);
                    p_AnyKindTest508=this.p_AnyKindTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AnyKindTest508.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AnyKindTest_return: (function() {
        XQueryParser.p_AnyKindTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AnyKindTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1307:1: p_AnyKindTest : NODE LPAREN RPAREN ;
    // $ANTLR start "p_AnyKindTest"
    p_AnyKindTest: function() {
        var retval = new XQueryParser.p_AnyKindTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var NODE509 = null;
        var LPAREN510 = null;
        var RPAREN511 = null;

        var NODE509_tree=null;
        var LPAREN510_tree=null;
        var RPAREN511_tree=null;

        try {
            // xquery/XQueryParser.g:1308:9: ( NODE LPAREN RPAREN )
            // xquery/XQueryParser.g:1308:11: NODE LPAREN RPAREN
            root_0 = this.adaptor.nil();

            NODE509=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_AnyKindTest9904); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            NODE509_tree = this.adaptor.create(NODE509);
            this.adaptor.addChild(root_0, NODE509_tree);
            }
            LPAREN510=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_AnyKindTest9906); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN510_tree = this.adaptor.create(LPAREN510);
            this.adaptor.addChild(root_0, LPAREN510_tree);
            }
            RPAREN511=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_AnyKindTest9908); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN511_tree = this.adaptor.create(RPAREN511);
            this.adaptor.addChild(root_0, RPAREN511_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_DocumentTest_return: (function() {
        XQueryParser.p_DocumentTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_DocumentTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1312:1: p_DocumentTest : DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN ;
    // $ANTLR start "p_DocumentTest"
    p_DocumentTest: function() {
        var retval = new XQueryParser.p_DocumentTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var DOCUMENT_NODE512 = null;
        var LPAREN513 = null;
        var RPAREN516 = null;
         var p_ElementTest514 = null;
         var p_SchemaElementTest515 = null;

        var DOCUMENT_NODE512_tree=null;
        var LPAREN513_tree=null;
        var RPAREN516_tree=null;

        try {
            // xquery/XQueryParser.g:1313:9: ( DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN )
            // xquery/XQueryParser.g:1313:11: DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN
            root_0 = this.adaptor.nil();

            DOCUMENT_NODE512=this.match(this.input,DOCUMENT_NODE,XQueryParser.FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9934); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOCUMENT_NODE512_tree = this.adaptor.create(DOCUMENT_NODE512);
            this.adaptor.addChild(root_0, DOCUMENT_NODE512_tree);
            }
            LPAREN513=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_DocumentTest9936); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN513_tree = this.adaptor.create(LPAREN513);
            this.adaptor.addChild(root_0, LPAREN513_tree);
            }
            // xquery/XQueryParser.g:1313:32: ( p_ElementTest | p_SchemaElementTest )?
            var alt163=3;
            var LA163_0 = this.input.LA(1);

            if ( (LA163_0==ELEMENT) ) {
                alt163=1;
            }
            else if ( (LA163_0==SCHEMA_ELEMENT) ) {
                alt163=2;
            }
            switch (alt163) {
                case 1 :
                    // xquery/XQueryParser.g:1313:33: p_ElementTest
                    this.pushFollow(XQueryParser.FOLLOW_p_ElementTest_in_p_DocumentTest9939);
                    p_ElementTest514=this.p_ElementTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementTest514.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1313:49: p_SchemaElementTest
                    this.pushFollow(XQueryParser.FOLLOW_p_SchemaElementTest_in_p_DocumentTest9943);
                    p_SchemaElementTest515=this.p_SchemaElementTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SchemaElementTest515.getTree());


                    break;

            }

            RPAREN516=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_DocumentTest9947); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN516_tree = this.adaptor.create(RPAREN516);
            this.adaptor.addChild(root_0, RPAREN516_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TextTest_return: (function() {
        XQueryParser.p_TextTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TextTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1317:1: p_TextTest : TEXT LPAREN RPAREN ;
    // $ANTLR start "p_TextTest"
    p_TextTest: function() {
        var retval = new XQueryParser.p_TextTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var TEXT517 = null;
        var LPAREN518 = null;
        var RPAREN519 = null;

        var TEXT517_tree=null;
        var LPAREN518_tree=null;
        var RPAREN519_tree=null;

        try {
            // xquery/XQueryParser.g:1318:9: ( TEXT LPAREN RPAREN )
            // xquery/XQueryParser.g:1318:11: TEXT LPAREN RPAREN
            root_0 = this.adaptor.nil();

            TEXT517=this.match(this.input,TEXT,XQueryParser.FOLLOW_TEXT_in_p_TextTest9973); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            TEXT517_tree = this.adaptor.create(TEXT517);
            this.adaptor.addChild(root_0, TEXT517_tree);
            }
            LPAREN518=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_TextTest9975); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN518_tree = this.adaptor.create(LPAREN518);
            this.adaptor.addChild(root_0, LPAREN518_tree);
            }
            RPAREN519=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_TextTest9977); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN519_tree = this.adaptor.create(RPAREN519);
            this.adaptor.addChild(root_0, RPAREN519_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CommentTest_return: (function() {
        XQueryParser.p_CommentTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CommentTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1322:1: p_CommentTest : COMMENT LPAREN RPAREN ;
    // $ANTLR start "p_CommentTest"
    p_CommentTest: function() {
        var retval = new XQueryParser.p_CommentTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var COMMENT520 = null;
        var LPAREN521 = null;
        var RPAREN522 = null;

        var COMMENT520_tree=null;
        var LPAREN521_tree=null;
        var RPAREN522_tree=null;

        try {
            // xquery/XQueryParser.g:1323:9: ( COMMENT LPAREN RPAREN )
            // xquery/XQueryParser.g:1323:11: COMMENT LPAREN RPAREN
            root_0 = this.adaptor.nil();

            COMMENT520=this.match(this.input,COMMENT,XQueryParser.FOLLOW_COMMENT_in_p_CommentTest10003); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            COMMENT520_tree = this.adaptor.create(COMMENT520);
            this.adaptor.addChild(root_0, COMMENT520_tree);
            }
            LPAREN521=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_CommentTest10005); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN521_tree = this.adaptor.create(LPAREN521);
            this.adaptor.addChild(root_0, LPAREN521_tree);
            }
            RPAREN522=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_CommentTest10007); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN522_tree = this.adaptor.create(RPAREN522);
            this.adaptor.addChild(root_0, RPAREN522_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_NamespaceNodeTest_return: (function() {
        XQueryParser.p_NamespaceNodeTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_NamespaceNodeTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1327:1: p_NamespaceNodeTest : NAMESPACE_NODE LPAREN RPAREN ;
    // $ANTLR start "p_NamespaceNodeTest"
    p_NamespaceNodeTest: function() {
        var retval = new XQueryParser.p_NamespaceNodeTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var NAMESPACE_NODE523 = null;
        var LPAREN524 = null;
        var RPAREN525 = null;

        var NAMESPACE_NODE523_tree=null;
        var LPAREN524_tree=null;
        var RPAREN525_tree=null;

        try {
            // xquery/XQueryParser.g:1328:9: ( NAMESPACE_NODE LPAREN RPAREN )
            // xquery/XQueryParser.g:1328:11: NAMESPACE_NODE LPAREN RPAREN
            root_0 = this.adaptor.nil();

            NAMESPACE_NODE523=this.match(this.input,NAMESPACE_NODE,XQueryParser.FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest10033); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            NAMESPACE_NODE523_tree = this.adaptor.create(NAMESPACE_NODE523);
            this.adaptor.addChild(root_0, NAMESPACE_NODE523_tree);
            }
            LPAREN524=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_NamespaceNodeTest10035); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN524_tree = this.adaptor.create(LPAREN524);
            this.adaptor.addChild(root_0, LPAREN524_tree);
            }
            RPAREN525=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_NamespaceNodeTest10037); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN525_tree = this.adaptor.create(RPAREN525);
            this.adaptor.addChild(root_0, RPAREN525_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_PITest_return: (function() {
        XQueryParser.p_PITest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_PITest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1332:1: p_PITest : PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN ;
    // $ANTLR start "p_PITest"
    p_PITest: function() {
        var retval = new XQueryParser.p_PITest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var PROCESSING_INSTRUCTION526 = null;
        var LPAREN527 = null;
        var RPAREN530 = null;
         var p_NCName528 = null;
         var p_StringLiteral529 = null;

        var PROCESSING_INSTRUCTION526_tree=null;
        var LPAREN527_tree=null;
        var RPAREN530_tree=null;

        try {
            // xquery/XQueryParser.g:1333:9: ( PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN )
            // xquery/XQueryParser.g:1333:11: PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN
            root_0 = this.adaptor.nil();

            PROCESSING_INSTRUCTION526=this.match(this.input,PROCESSING_INSTRUCTION,XQueryParser.FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest10063); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            PROCESSING_INSTRUCTION526_tree = this.adaptor.create(PROCESSING_INSTRUCTION526);
            this.adaptor.addChild(root_0, PROCESSING_INSTRUCTION526_tree);
            }
            LPAREN527=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_PITest10065); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN527_tree = this.adaptor.create(LPAREN527);
            this.adaptor.addChild(root_0, LPAREN527_tree);
            }
            // xquery/XQueryParser.g:1333:41: ( p_NCName | p_StringLiteral )?
            var alt164=3;
            var LA164_0 = this.input.LA(1);

            if ( ((LA164_0>=ANCESTOR && LA164_0<=SKIP)||(LA164_0>=VALUE && LA164_0<=QUOT_ER)||LA164_0==L_NCName||LA164_0==EXPLICITLY) ) {
                alt164=1;
            }
            else if ( ((LA164_0>=APOS && LA164_0<=QUOT)) ) {
                alt164=2;
            }
            switch (alt164) {
                case 1 :
                    // xquery/XQueryParser.g:1333:42: p_NCName
                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_PITest10068);
                    p_NCName528=this.p_NCName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NCName528.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1333:53: p_StringLiteral
                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_PITest10072);
                    p_StringLiteral529=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral529.getTree());


                    break;

            }

            RPAREN530=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_PITest10076); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN530_tree = this.adaptor.create(RPAREN530);
            this.adaptor.addChild(root_0, RPAREN530_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AttributeTest_return: (function() {
        XQueryParser.p_AttributeTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AttributeTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1337:1: p_AttributeTest : ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN ;
    // $ANTLR start "p_AttributeTest"
    p_AttributeTest: function() {
        var retval = new XQueryParser.p_AttributeTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ATTRIBUTE531 = null;
        var LPAREN532 = null;
        var COMMA534 = null;
        var RPAREN536 = null;
         var p_AttribNameOrWildcard533 = null;
         var p_TypeName535 = null;

        var ATTRIBUTE531_tree=null;
        var LPAREN532_tree=null;
        var COMMA534_tree=null;
        var RPAREN536_tree=null;

        try {
            // xquery/XQueryParser.g:1338:9: ( ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN )
            // xquery/XQueryParser.g:1338:11: ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN
            root_0 = this.adaptor.nil();

            ATTRIBUTE531=this.match(this.input,ATTRIBUTE,XQueryParser.FOLLOW_ATTRIBUTE_in_p_AttributeTest10102); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            ATTRIBUTE531_tree = this.adaptor.create(ATTRIBUTE531);
            this.adaptor.addChild(root_0, ATTRIBUTE531_tree);
            }
            LPAREN532=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_AttributeTest10104); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN532_tree = this.adaptor.create(LPAREN532);
            this.adaptor.addChild(root_0, LPAREN532_tree);
            }
            // xquery/XQueryParser.g:1338:28: ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )?
            var alt166=2;
            var LA166_0 = this.input.LA(1);

            if ( ((LA166_0>=ANCESTOR && LA166_0<=SKIP)||(LA166_0>=VALUE && LA166_0<=QUOT_ER)||LA166_0==STAR||LA166_0==L_NCName||LA166_0==EXPLICITLY) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // xquery/XQueryParser.g:1338:29: p_AttribNameOrWildcard ( COMMA p_TypeName )?
                    this.pushFollow(XQueryParser.FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest10107);
                    p_AttribNameOrWildcard533=this.p_AttribNameOrWildcard();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttribNameOrWildcard533.getTree());
                    // xquery/XQueryParser.g:1338:52: ( COMMA p_TypeName )?
                    var alt165=2;
                    var LA165_0 = this.input.LA(1);

                    if ( (LA165_0==COMMA) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // xquery/XQueryParser.g:1338:53: COMMA p_TypeName
                            COMMA534=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_AttributeTest10110); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            COMMA534_tree = this.adaptor.create(COMMA534);
                            this.adaptor.addChild(root_0, COMMA534_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_TypeName_in_p_AttributeTest10112);
                            p_TypeName535=this.p_TypeName();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeName535.getTree());


                            break;

                    }



                    break;

            }

            RPAREN536=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_AttributeTest10118); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN536_tree = this.adaptor.create(RPAREN536);
            this.adaptor.addChild(root_0, RPAREN536_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AttribNameOrWildcard_return: (function() {
        XQueryParser.p_AttribNameOrWildcard_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AttribNameOrWildcard_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1342:1: p_AttribNameOrWildcard : ( p_AttributeName | STAR );
    // $ANTLR start "p_AttribNameOrWildcard"
    p_AttribNameOrWildcard: function() {
        var retval = new XQueryParser.p_AttribNameOrWildcard_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var STAR538 = null;
         var p_AttributeName537 = null;

        var STAR538_tree=null;

        try {
            // xquery/XQueryParser.g:1343:9: ( p_AttributeName | STAR )
            var alt167=2;
            var LA167_0 = this.input.LA(1);

            if ( ((LA167_0>=ANCESTOR && LA167_0<=SKIP)||(LA167_0>=VALUE && LA167_0<=QUOT_ER)||LA167_0==L_NCName||LA167_0==EXPLICITLY) ) {
                alt167=1;
            }
            else if ( (LA167_0==STAR) ) {
                alt167=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 167, 0, this.input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // xquery/XQueryParser.g:1343:11: p_AttributeName
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AttributeName_in_p_AttribNameOrWildcard10146);
                    p_AttributeName537=this.p_AttributeName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttributeName537.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1343:29: STAR
                    root_0 = this.adaptor.nil();

                    STAR538=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_AttribNameOrWildcard10150); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    STAR538_tree = this.adaptor.create(STAR538);
                    this.adaptor.addChild(root_0, STAR538_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SchemaAttributeTest_return: (function() {
        XQueryParser.p_SchemaAttributeTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SchemaAttributeTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1347:1: p_SchemaAttributeTest : SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN ;
    // $ANTLR start "p_SchemaAttributeTest"
    p_SchemaAttributeTest: function() {
        var retval = new XQueryParser.p_SchemaAttributeTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var SCHEMA_ATTRIBUTE539 = null;
        var LPAREN540 = null;
        var RPAREN542 = null;
         var p_AttributeDeclaration541 = null;

        var SCHEMA_ATTRIBUTE539_tree=null;
        var LPAREN540_tree=null;
        var RPAREN542_tree=null;

        try {
            // xquery/XQueryParser.g:1348:9: ( SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN )
            // xquery/XQueryParser.g:1348:11: SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN
            root_0 = this.adaptor.nil();

            SCHEMA_ATTRIBUTE539=this.match(this.input,SCHEMA_ATTRIBUTE,XQueryParser.FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest10176); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SCHEMA_ATTRIBUTE539_tree = this.adaptor.create(SCHEMA_ATTRIBUTE539);
            this.adaptor.addChild(root_0, SCHEMA_ATTRIBUTE539_tree);
            }
            LPAREN540=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SchemaAttributeTest10178); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN540_tree = this.adaptor.create(LPAREN540);
            this.adaptor.addChild(root_0, LPAREN540_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest10180);
            p_AttributeDeclaration541=this.p_AttributeDeclaration();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttributeDeclaration541.getTree());
            RPAREN542=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SchemaAttributeTest10182); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN542_tree = this.adaptor.create(RPAREN542);
            this.adaptor.addChild(root_0, RPAREN542_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AttributeDeclaration_return: (function() {
        XQueryParser.p_AttributeDeclaration_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AttributeDeclaration_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1352:1: p_AttributeDeclaration : p_AttributeName ;
    // $ANTLR start "p_AttributeDeclaration"
    p_AttributeDeclaration: function() {
        var retval = new XQueryParser.p_AttributeDeclaration_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_AttributeName543 = null;


        try {
            // xquery/XQueryParser.g:1353:9: ( p_AttributeName )
            // xquery/XQueryParser.g:1353:11: p_AttributeName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_AttributeName_in_p_AttributeDeclaration10208);
            p_AttributeName543=this.p_AttributeName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AttributeName543.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ElementTest_return: (function() {
        XQueryParser.p_ElementTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ElementTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1357:1: p_ElementTest : ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN ;
    // $ANTLR start "p_ElementTest"
    p_ElementTest: function() {
        var retval = new XQueryParser.p_ElementTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ELEMENT544 = null;
        var LPAREN545 = null;
        var COMMA547 = null;
        var QUESTION549 = null;
        var RPAREN550 = null;
         var p_ElementNameOrWildcard546 = null;
         var p_TypeName548 = null;

        var ELEMENT544_tree=null;
        var LPAREN545_tree=null;
        var COMMA547_tree=null;
        var QUESTION549_tree=null;
        var RPAREN550_tree=null;

        try {
            // xquery/XQueryParser.g:1358:9: ( ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN )
            // xquery/XQueryParser.g:1358:11: ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN
            root_0 = this.adaptor.nil();

            ELEMENT544=this.match(this.input,ELEMENT,XQueryParser.FOLLOW_ELEMENT_in_p_ElementTest10234); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            ELEMENT544_tree = this.adaptor.create(ELEMENT544);
            this.adaptor.addChild(root_0, ELEMENT544_tree);
            }
            LPAREN545=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ElementTest10236); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN545_tree = this.adaptor.create(LPAREN545);
            this.adaptor.addChild(root_0, LPAREN545_tree);
            }
            // xquery/XQueryParser.g:1358:26: ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )?
            var alt170=2;
            var LA170_0 = this.input.LA(1);

            if ( ((LA170_0>=ANCESTOR && LA170_0<=SKIP)||(LA170_0>=VALUE && LA170_0<=QUOT_ER)||LA170_0==STAR||LA170_0==L_NCName||LA170_0==EXPLICITLY) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // xquery/XQueryParser.g:1358:27: p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )?
                    this.pushFollow(XQueryParser.FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest10239);
                    p_ElementNameOrWildcard546=this.p_ElementNameOrWildcard();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementNameOrWildcard546.getTree());
                    // xquery/XQueryParser.g:1358:51: ( COMMA p_TypeName ( QUESTION )? )?
                    var alt169=2;
                    var LA169_0 = this.input.LA(1);

                    if ( (LA169_0==COMMA) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // xquery/XQueryParser.g:1358:52: COMMA p_TypeName ( QUESTION )?
                            COMMA547=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_ElementTest10242); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            COMMA547_tree = this.adaptor.create(COMMA547);
                            this.adaptor.addChild(root_0, COMMA547_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_TypeName_in_p_ElementTest10244);
                            p_TypeName548=this.p_TypeName();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeName548.getTree());
                            // xquery/XQueryParser.g:1358:69: ( QUESTION )?
                            var alt168=2;
                            var LA168_0 = this.input.LA(1);

                            if ( (LA168_0==QUESTION) ) {
                                alt168=1;
                            }
                            switch (alt168) {
                                case 1 :
                                    // xquery/XQueryParser.g:1358:69: QUESTION
                                    QUESTION549=this.match(this.input,QUESTION,XQueryParser.FOLLOW_QUESTION_in_p_ElementTest10246); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    QUESTION549_tree = this.adaptor.create(QUESTION549);
                                    this.adaptor.addChild(root_0, QUESTION549_tree);
                                    }


                                    break;

                            }



                            break;

                    }



                    break;

            }

            RPAREN550=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ElementTest10253); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN550_tree = this.adaptor.create(RPAREN550);
            this.adaptor.addChild(root_0, RPAREN550_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ElementNameOrWildcard_return: (function() {
        XQueryParser.p_ElementNameOrWildcard_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ElementNameOrWildcard_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1362:1: p_ElementNameOrWildcard : ( p_QName | STAR );
    // $ANTLR start "p_ElementNameOrWildcard"
    p_ElementNameOrWildcard: function() {
        var retval = new XQueryParser.p_ElementNameOrWildcard_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var STAR552 = null;
         var p_QName551 = null;

        var STAR552_tree=null;

        try {
            // xquery/XQueryParser.g:1363:9: ( p_QName | STAR )
            var alt171=2;
            var LA171_0 = this.input.LA(1);

            if ( ((LA171_0>=ANCESTOR && LA171_0<=SKIP)||(LA171_0>=VALUE && LA171_0<=QUOT_ER)||LA171_0==L_NCName||LA171_0==EXPLICITLY) ) {
                alt171=1;
            }
            else if ( (LA171_0==STAR) ) {
                alt171=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 171, 0, this.input);

                throw nvae;
            }
            switch (alt171) {
                case 1 :
                    // xquery/XQueryParser.g:1363:11: p_QName
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ElementNameOrWildcard10279);
                    p_QName551=this.p_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName551.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1363:21: STAR
                    root_0 = this.adaptor.nil();

                    STAR552=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_ElementNameOrWildcard10283); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    STAR552_tree = this.adaptor.create(STAR552);
                    this.adaptor.addChild(root_0, STAR552_tree);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SchemaElementTest_return: (function() {
        XQueryParser.p_SchemaElementTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SchemaElementTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1366:1: p_SchemaElementTest : SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN ;
    // $ANTLR start "p_SchemaElementTest"
    p_SchemaElementTest: function() {
        var retval = new XQueryParser.p_SchemaElementTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var SCHEMA_ELEMENT553 = null;
        var LPAREN554 = null;
        var RPAREN556 = null;
         var p_ElementDeclaration555 = null;

        var SCHEMA_ELEMENT553_tree=null;
        var LPAREN554_tree=null;
        var RPAREN556_tree=null;

        try {
            // xquery/XQueryParser.g:1367:9: ( SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN )
            // xquery/XQueryParser.g:1367:11: SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN
            root_0 = this.adaptor.nil();

            SCHEMA_ELEMENT553=this.match(this.input,SCHEMA_ELEMENT,XQueryParser.FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest10301); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SCHEMA_ELEMENT553_tree = this.adaptor.create(SCHEMA_ELEMENT553);
            this.adaptor.addChild(root_0, SCHEMA_ELEMENT553_tree);
            }
            LPAREN554=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SchemaElementTest10303); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN554_tree = this.adaptor.create(LPAREN554);
            this.adaptor.addChild(root_0, LPAREN554_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest10305);
            p_ElementDeclaration555=this.p_ElementDeclaration();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementDeclaration555.getTree());
            RPAREN556=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SchemaElementTest10307); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN556_tree = this.adaptor.create(RPAREN556);
            this.adaptor.addChild(root_0, RPAREN556_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ElementDeclaration_return: (function() {
        XQueryParser.p_ElementDeclaration_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ElementDeclaration_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1371:1: p_ElementDeclaration : p_ElementName ;
    // $ANTLR start "p_ElementDeclaration"
    p_ElementDeclaration: function() {
        var retval = new XQueryParser.p_ElementDeclaration_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ElementName557 = null;


        try {
            // xquery/XQueryParser.g:1372:9: ( p_ElementName )
            // xquery/XQueryParser.g:1372:11: p_ElementName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ElementName_in_p_ElementDeclaration10333);
            p_ElementName557=this.p_ElementName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ElementName557.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AttributeName_return: (function() {
        XQueryParser.p_AttributeName_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AttributeName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1376:1: p_AttributeName : p_QName ;
    // $ANTLR start "p_AttributeName"
    p_AttributeName: function() {
        var retval = new XQueryParser.p_AttributeName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName558 = null;


        try {
            // xquery/XQueryParser.g:1377:9: ( p_QName )
            // xquery/XQueryParser.g:1377:11: p_QName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_AttributeName10359);
            p_QName558=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName558.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ElementName_return: (function() {
        XQueryParser.p_ElementName_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ElementName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1381:1: p_ElementName : p_QName ;
    // $ANTLR start "p_ElementName"
    p_ElementName: function() {
        var retval = new XQueryParser.p_ElementName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName559 = null;


        try {
            // xquery/XQueryParser.g:1382:9: ( p_QName )
            // xquery/XQueryParser.g:1382:11: p_QName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ElementName10385);
            p_QName559=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName559.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TypeName_return: (function() {
        XQueryParser.p_TypeName_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TypeName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1386:1: p_TypeName : p_QName ;
    // $ANTLR start "p_TypeName"
    p_TypeName: function() {
        var retval = new XQueryParser.p_TypeName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName560 = null;


        try {
            // xquery/XQueryParser.g:1387:9: ( p_QName )
            // xquery/XQueryParser.g:1387:11: p_QName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_TypeName10411);
            p_QName560=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName560.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FunctionTest_return: (function() {
        XQueryParser.p_FunctionTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FunctionTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1391:1: p_FunctionTest : ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest ) ;
    // $ANTLR start "p_FunctionTest"
    p_FunctionTest: function() {
        var retval = new XQueryParser.p_FunctionTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Annotation561 = null;
         var p_AnyFunctionTest562 = null;
         var p_TypedFunctionTest563 = null;


        try {
            // xquery/XQueryParser.g:1392:9: ( ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest ) )
            // xquery/XQueryParser.g:1392:11: ( p_Annotation )* ( p_AnyFunctionTest | p_TypedFunctionTest )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1392:11: ( p_Annotation )*
            loop172:
            do {
                var alt172=2;
                var LA172_0 = this.input.LA(1);

                if ( (LA172_0==ANN_PERCENT) ) {
                    alt172=1;
                }


                switch (alt172) {
                case 1 :
                    // xquery/XQueryParser.g:1392:11: p_Annotation
                    this.pushFollow(XQueryParser.FOLLOW_p_Annotation_in_p_FunctionTest10437);
                    p_Annotation561=this.p_Annotation();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Annotation561.getTree());


                    break;

                default :
                    break loop172;
                }
            } while (true);

            // xquery/XQueryParser.g:1392:25: ( p_AnyFunctionTest | p_TypedFunctionTest )
            var alt173=2;
            var LA173_0 = this.input.LA(1);

            if ( (LA173_0==FUNCTION) ) {
                var LA173_1 = this.input.LA(2);

                if ( (LA173_1==LPAREN) ) {
                    var LA173_2 = this.input.LA(3);

                    if ( (LA173_2==STAR) ) {
                        alt173=1;
                    }
                    else if ( ((LA173_2>=ANCESTOR && LA173_2<=SKIP)||(LA173_2>=VALUE && LA173_2<=QUOT_ER)||(LA173_2>=LPAREN && LA173_2<=RPAREN)||LA173_2==L_NCName||LA173_2==EXPLICITLY) ) {
                        alt173=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 173, 2, this.input);

                        throw nvae;
                    }
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 173, 1, this.input);

                    throw nvae;
                }
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 173, 0, this.input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // xquery/XQueryParser.g:1392:26: p_AnyFunctionTest
                    this.pushFollow(XQueryParser.FOLLOW_p_AnyFunctionTest_in_p_FunctionTest10441);
                    p_AnyFunctionTest562=this.p_AnyFunctionTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AnyFunctionTest562.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1392:46: p_TypedFunctionTest
                    this.pushFollow(XQueryParser.FOLLOW_p_TypedFunctionTest_in_p_FunctionTest10445);
                    p_TypedFunctionTest563=this.p_TypedFunctionTest();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypedFunctionTest563.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AnyFunctionTest_return: (function() {
        XQueryParser.p_AnyFunctionTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AnyFunctionTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1396:1: p_AnyFunctionTest : FUNCTION LPAREN STAR RPAREN ;
    // $ANTLR start "p_AnyFunctionTest"
    p_AnyFunctionTest: function() {
        var retval = new XQueryParser.p_AnyFunctionTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var FUNCTION564 = null;
        var LPAREN565 = null;
        var STAR566 = null;
        var RPAREN567 = null;

        var FUNCTION564_tree=null;
        var LPAREN565_tree=null;
        var STAR566_tree=null;
        var RPAREN567_tree=null;

        try {
            // xquery/XQueryParser.g:1397:9: ( FUNCTION LPAREN STAR RPAREN )
            // xquery/XQueryParser.g:1397:11: FUNCTION LPAREN STAR RPAREN
            root_0 = this.adaptor.nil();

            FUNCTION564=this.match(this.input,FUNCTION,XQueryParser.FOLLOW_FUNCTION_in_p_AnyFunctionTest10472); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            FUNCTION564_tree = this.adaptor.create(FUNCTION564);
            this.adaptor.addChild(root_0, FUNCTION564_tree);
            }
            LPAREN565=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_AnyFunctionTest10474); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN565_tree = this.adaptor.create(LPAREN565);
            this.adaptor.addChild(root_0, LPAREN565_tree);
            }
            STAR566=this.match(this.input,STAR,XQueryParser.FOLLOW_STAR_in_p_AnyFunctionTest10476); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            STAR566_tree = this.adaptor.create(STAR566);
            this.adaptor.addChild(root_0, STAR566_tree);
            }
            RPAREN567=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_AnyFunctionTest10478); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN567_tree = this.adaptor.create(RPAREN567);
            this.adaptor.addChild(root_0, RPAREN567_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TypedFunctionTest_return: (function() {
        XQueryParser.p_TypedFunctionTest_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TypedFunctionTest_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1401:1: p_TypedFunctionTest : FUNCTION LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType ;
    // $ANTLR start "p_TypedFunctionTest"
    p_TypedFunctionTest: function() {
        var retval = new XQueryParser.p_TypedFunctionTest_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var FUNCTION568 = null;
        var LPAREN569 = null;
        var COMMA571 = null;
        var RPAREN573 = null;
        var AS574 = null;
         var p_SequenceType570 = null;
         var p_SequenceType572 = null;
         var p_SequenceType575 = null;

        var FUNCTION568_tree=null;
        var LPAREN569_tree=null;
        var COMMA571_tree=null;
        var RPAREN573_tree=null;
        var AS574_tree=null;

        try {
            // xquery/XQueryParser.g:1402:9: ( FUNCTION LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType )
            // xquery/XQueryParser.g:1402:11: FUNCTION LPAREN ( p_SequenceType ( COMMA p_SequenceType )* )? RPAREN AS p_SequenceType
            root_0 = this.adaptor.nil();

            FUNCTION568=this.match(this.input,FUNCTION,XQueryParser.FOLLOW_FUNCTION_in_p_TypedFunctionTest10504); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            FUNCTION568_tree = this.adaptor.create(FUNCTION568);
            this.adaptor.addChild(root_0, FUNCTION568_tree);
            }
            LPAREN569=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_TypedFunctionTest10506); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN569_tree = this.adaptor.create(LPAREN569);
            this.adaptor.addChild(root_0, LPAREN569_tree);
            }
            // xquery/XQueryParser.g:1402:27: ( p_SequenceType ( COMMA p_SequenceType )* )?
            var alt175=2;
            var LA175_0 = this.input.LA(1);

            if ( ((LA175_0>=ANCESTOR && LA175_0<=SKIP)||(LA175_0>=VALUE && LA175_0<=QUOT_ER)||LA175_0==LPAREN||LA175_0==L_NCName||LA175_0==EXPLICITLY) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // xquery/XQueryParser.g:1402:28: p_SequenceType ( COMMA p_SequenceType )*
                    this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TypedFunctionTest10509);
                    p_SequenceType570=this.p_SequenceType();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType570.getTree());
                    // xquery/XQueryParser.g:1402:43: ( COMMA p_SequenceType )*
                    loop174:
                    do {
                        var alt174=2;
                        var LA174_0 = this.input.LA(1);

                        if ( (LA174_0==COMMA) ) {
                            alt174=1;
                        }


                        switch (alt174) {
                        case 1 :
                            // xquery/XQueryParser.g:1402:44: COMMA p_SequenceType
                            COMMA571=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_TypedFunctionTest10512); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            COMMA571_tree = this.adaptor.create(COMMA571);
                            this.adaptor.addChild(root_0, COMMA571_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TypedFunctionTest10514);
                            p_SequenceType572=this.p_SequenceType();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType572.getTree());


                            break;

                        default :
                            break loop174;
                        }
                    } while (true);



                    break;

            }

            RPAREN573=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_TypedFunctionTest10520); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN573_tree = this.adaptor.create(RPAREN573);
            this.adaptor.addChild(root_0, RPAREN573_tree);
            }
            AS574=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_TypedFunctionTest10522); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            AS574_tree = this.adaptor.create(AS574);
            this.adaptor.addChild(root_0, AS574_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_TypedFunctionTest10524);
            p_SequenceType575=this.p_SequenceType();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType575.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ParenthesizedItemType_return: (function() {
        XQueryParser.p_ParenthesizedItemType_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ParenthesizedItemType_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1406:1: p_ParenthesizedItemType : LPAREN p_ItemType RPAREN ;
    // $ANTLR start "p_ParenthesizedItemType"
    p_ParenthesizedItemType: function() {
        var retval = new XQueryParser.p_ParenthesizedItemType_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LPAREN576 = null;
        var RPAREN578 = null;
         var p_ItemType577 = null;

        var LPAREN576_tree=null;
        var RPAREN578_tree=null;

        try {
            // xquery/XQueryParser.g:1407:9: ( LPAREN p_ItemType RPAREN )
            // xquery/XQueryParser.g:1407:11: LPAREN p_ItemType RPAREN
            root_0 = this.adaptor.nil();

            LPAREN576=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_ParenthesizedItemType10550); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN576_tree = this.adaptor.create(LPAREN576);
            this.adaptor.addChild(root_0, LPAREN576_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ItemType_in_p_ParenthesizedItemType10552);
            p_ItemType577=this.p_ItemType();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ItemType577.getTree());
            RPAREN578=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_ParenthesizedItemType10554); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN578_tree = this.adaptor.create(RPAREN578);
            this.adaptor.addChild(root_0, RPAREN578_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_StringLiteral_return: (function() {
        XQueryParser.p_StringLiteral_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_StringLiteral_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1436:1: p_StringLiteral : ( QUOT pg_QuotStringLiteralContent QUOT -> ^( StringLiteral ( pg_QuotStringLiteralContent )* ) | APOS pg_AposStringLiteralContent APOS -> ^( StringLiteral ( pg_AposStringLiteralContent )* ) );
    // $ANTLR start "p_StringLiteral"
    p_StringLiteral: function() {
        var retval = new XQueryParser.p_StringLiteral_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var QUOT579 = null;
        var QUOT581 = null;
        var APOS582 = null;
        var APOS584 = null;
         var pg_QuotStringLiteralContent580 = null;
         var pg_AposStringLiteralContent583 = null;

        var QUOT579_tree=null;
        var QUOT581_tree=null;
        var APOS582_tree=null;
        var APOS584_tree=null;
        var stream_APOS=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token APOS");
        var stream_QUOT=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token QUOT");
        var stream_pg_QuotStringLiteralContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pg_QuotStringLiteralContent");
        var stream_pg_AposStringLiteralContent=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule pg_AposStringLiteralContent");
        try {
            // xquery/XQueryParser.g:1437:9: ( QUOT pg_QuotStringLiteralContent QUOT -> ^( StringLiteral ( pg_QuotStringLiteralContent )* ) | APOS pg_AposStringLiteralContent APOS -> ^( StringLiteral ( pg_AposStringLiteralContent )* ) )
            var alt176=2;
            var LA176_0 = this.input.LA(1);

            if ( (LA176_0==QUOT) ) {
                alt176=1;
            }
            else if ( (LA176_0==APOS) ) {
                alt176=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 176, 0, this.input);

                throw nvae;
            }
            switch (alt176) {
                case 1 :
                    // xquery/XQueryParser.g:1437:11: QUOT pg_QuotStringLiteralContent QUOT
                    QUOT579=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_StringLiteral10605); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT579);

                    if ( this.state.backtracking===0 ) {
                       this.pushStringLexer(false);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_pg_QuotStringLiteralContent_in_p_StringLiteral10609);
                    pg_QuotStringLiteralContent580=this.pg_QuotStringLiteralContent();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_pg_QuotStringLiteralContent.add(pg_QuotStringLiteralContent580.getTree());
                    QUOT581=this.match(this.input,QUOT,XQueryParser.FOLLOW_QUOT_in_p_StringLiteral10611); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_QUOT.add(QUOT581);

                    if ( this.state.backtracking===0 ) {
                       this.popLexer(); 
                    }


                    // AST REWRITE
                    // elements: pg_QuotStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1438:17: -> ^( StringLiteral ( pg_QuotStringLiteralContent )* )
                    {
                        // xquery/XQueryParser.g:1438:20: ^( StringLiteral ( pg_QuotStringLiteralContent )* )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // xquery/XQueryParser.g:1438:36: ( pg_QuotStringLiteralContent )*
                        while ( stream_pg_QuotStringLiteralContent.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_pg_QuotStringLiteralContent.nextTree());

                        }
                        stream_pg_QuotStringLiteralContent.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;
                case 2 :
                    // xquery/XQueryParser.g:1439:11: APOS pg_AposStringLiteralContent APOS
                    APOS582=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_StringLiteral10650); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_APOS.add(APOS582);

                    if ( this.state.backtracking===0 ) {
                      this.pushStringLexer(true);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_pg_AposStringLiteralContent_in_p_StringLiteral10654);
                    pg_AposStringLiteralContent583=this.pg_AposStringLiteralContent();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_pg_AposStringLiteralContent.add(pg_AposStringLiteralContent583.getTree());
                    APOS584=this.match(this.input,APOS,XQueryParser.FOLLOW_APOS_in_p_StringLiteral10656); if (this.state.failed) return retval; 
                    if ( this.state.backtracking===0 ) stream_APOS.add(APOS584);

                    if ( this.state.backtracking===0 ) {
                       this.popLexer(); 
                    }


                    // AST REWRITE
                    // elements: pg_AposStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1440:17: -> ^( StringLiteral ( pg_AposStringLiteralContent )* )
                    {
                        // xquery/XQueryParser.g:1440:20: ^( StringLiteral ( pg_AposStringLiteralContent )* )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // xquery/XQueryParser.g:1440:36: ( pg_AposStringLiteralContent )*
                        while ( stream_pg_AposStringLiteralContent.hasNext() ) {
                            this.adaptor.addChild(root_1, stream_pg_AposStringLiteralContent.nextTree());

                        }
                        stream_pg_AposStringLiteralContent.reset();

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pg_QuotStringLiteralContent_return: (function() {
        XQueryParser.pg_QuotStringLiteralContent_return = function(){};
        org.antlr.lang.extend(XQueryParser.pg_QuotStringLiteralContent_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1445:1: pg_QuotStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* ;
    // $ANTLR start "pg_QuotStringLiteralContent"
    pg_QuotStringLiteralContent: function() {
        var retval = new XQueryParser.pg_QuotStringLiteralContent_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set585 = null;

        var set585_tree=null;

        try {
            // xquery/XQueryParser.g:1446:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* )
            // xquery/XQueryParser.g:1446:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1446:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            loop177:
            do {
                var alt177=2;
                var LA177_0 = this.input.LA(1);

                if ( ((LA177_0>=L_QuotAttrContentChar && LA177_0<=HASH)||(LA177_0>=COMMA && LA177_0<=APOS)||(LA177_0>=NCNameStartChar && LA177_0<=EXPLICITLY)) ) {
                    alt177=1;
                }


                switch (alt177) {
                case 1 :
                    // xquery/XQueryParser.g:
                    set585=this.input.LT(1);
                    if ( (this.input.LA(1)>=L_QuotAttrContentChar && this.input.LA(1)<=HASH)||(this.input.LA(1)>=COMMA && this.input.LA(1)<=APOS)||(this.input.LA(1)>=NCNameStartChar && this.input.LA(1)<=EXPLICITLY) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set585));
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }



                    break;

                default :
                    break loop177;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pg_AposStringLiteralContent_return: (function() {
        XQueryParser.pg_AposStringLiteralContent_return = function(){};
        org.antlr.lang.extend(XQueryParser.pg_AposStringLiteralContent_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1453:1: pg_AposStringLiteralContent : ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* ;
    // $ANTLR start "pg_AposStringLiteralContent"
    pg_AposStringLiteralContent: function() {
        var retval = new XQueryParser.pg_AposStringLiteralContent_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set586 = null;

        var set586_tree=null;

        try {
            // xquery/XQueryParser.g:1454:9: ( ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* )
            // xquery/XQueryParser.g:1454:11: ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1454:11: ( ESCAPE_APOS | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            loop178:
            do {
                var alt178=2;
                var LA178_0 = this.input.LA(1);

                if ( ((LA178_0>=L_QuotAttrContentChar && LA178_0<=HASH)||(LA178_0>=COMMA && LA178_0<=CHARREF_HEX)||(LA178_0>=QUOT && LA178_0<=EXPLICITLY)) ) {
                    alt178=1;
                }


                switch (alt178) {
                case 1 :
                    // xquery/XQueryParser.g:
                    set586=this.input.LT(1);
                    if ( (this.input.LA(1)>=L_QuotAttrContentChar && this.input.LA(1)<=HASH)||(this.input.LA(1)>=COMMA && this.input.LA(1)<=CHARREF_HEX)||(this.input.LA(1)>=QUOT && this.input.LA(1)<=EXPLICITLY) ) {
                        this.input.consume();
                        if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set586));
                        this.state.errorRecovery=false;this.state.failed=false;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                        throw mse;
                    }



                    break;

                default :
                    break loop178;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ElementContentChar_return: (function() {
        XQueryParser.p_ElementContentChar_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ElementContentChar_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1468:1: p_ElementContentChar : L_ElementContentChar ;
    // $ANTLR start "p_ElementContentChar"
    p_ElementContentChar: function() {
        var retval = new XQueryParser.p_ElementContentChar_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var L_ElementContentChar587 = null;

        var L_ElementContentChar587_tree=null;

        try {
            // xquery/XQueryParser.g:1469:9: ( L_ElementContentChar )
            // xquery/XQueryParser.g:1469:11: L_ElementContentChar
            root_0 = this.adaptor.nil();

            L_ElementContentChar587=this.match(this.input,L_ElementContentChar,XQueryParser.FOLLOW_L_ElementContentChar_in_p_ElementContentChar10819); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            L_ElementContentChar587_tree = this.adaptor.create(L_ElementContentChar587);
            this.adaptor.addChild(root_0, L_ElementContentChar587_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_QuotAttrContentChar_return: (function() {
        XQueryParser.p_QuotAttrContentChar_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_QuotAttrContentChar_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1473:1: p_QuotAttrContentChar : L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) ;
    // $ANTLR start "p_QuotAttrContentChar"
    p_QuotAttrContentChar: function() {
        var retval = new XQueryParser.p_QuotAttrContentChar_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var L_QuotAttrContentChar588 = null;

        var L_QuotAttrContentChar588_tree=null;
        var stream_L_QuotAttrContentChar=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token L_QuotAttrContentChar");

        try {
            // xquery/XQueryParser.g:1474:9: ( L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) )
            // xquery/XQueryParser.g:1474:11: L_QuotAttrContentChar
            L_QuotAttrContentChar588=this.match(this.input,L_QuotAttrContentChar,XQueryParser.FOLLOW_L_QuotAttrContentChar_in_p_QuotAttrContentChar10845); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_L_QuotAttrContentChar.add(L_QuotAttrContentChar588);



            // AST REWRITE
            // elements: L_QuotAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 1475:17: -> ^( AttributeValueChar L_QuotAttrContentChar )
            {
                // xquery/XQueryParser.g:1475:20: ^( AttributeValueChar L_QuotAttrContentChar )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                this.adaptor.addChild(root_1, stream_L_QuotAttrContentChar.nextNode());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AposAttrContentChar_return: (function() {
        XQueryParser.p_AposAttrContentChar_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AposAttrContentChar_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1479:1: p_AposAttrContentChar : L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) ;
    // $ANTLR start "p_AposAttrContentChar"
    p_AposAttrContentChar: function() {
        var retval = new XQueryParser.p_AposAttrContentChar_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var L_AposAttrContentChar589 = null;

        var L_AposAttrContentChar589_tree=null;
        var stream_L_AposAttrContentChar=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token L_AposAttrContentChar");

        try {
            // xquery/XQueryParser.g:1480:9: ( L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) )
            // xquery/XQueryParser.g:1480:11: L_AposAttrContentChar
            L_AposAttrContentChar589=this.match(this.input,L_AposAttrContentChar,XQueryParser.FOLLOW_L_AposAttrContentChar_in_p_AposAttrContentChar10895); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_L_AposAttrContentChar.add(L_AposAttrContentChar589);



            // AST REWRITE
            // elements: L_AposAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = this.adaptor.nil();
            // 1481:17: -> ^( AttributeValueChar L_AposAttrContentChar )
            {
                // xquery/XQueryParser.g:1481:20: ^( AttributeValueChar L_AposAttrContentChar )
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                this.adaptor.addChild(root_1, stream_L_AposAttrContentChar.nextNode());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_QName_return: (function() {
        XQueryParser.p_QName_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_QName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1499:1: p_QName : ( pg_QName | p_NCName -> ^( QName p_NCName ) );
    // $ANTLR start "p_QName"
    p_QName: function() {
        var retval = new XQueryParser.p_QName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var pg_QName590 = null;
         var p_NCName591 = null;

        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
        this.setWsExplicit(true);
        try {
            // xquery/XQueryParser.g:1501:9: ( pg_QName | p_NCName -> ^( QName p_NCName ) )
            var alt179=2;
            var LA179_0 = this.input.LA(1);

            if ( ((LA179_0>=ANCESTOR && LA179_0<=SKIP)||(LA179_0>=VALUE && LA179_0<=QUOT_ER)||LA179_0==L_NCName||LA179_0==EXPLICITLY) ) {
                var LA179_1 = this.input.LA(2);

                if ( (LA179_1==COLON) ) {
                    alt179=1;
                }
                else if ( (LA179_1==EOF||(LA179_1>=AND && LA179_1<=AT)||(LA179_1>=BY && LA179_1<=CASTABLE)||LA179_1==COLLATION||LA179_1==DEFAULT||(LA179_1>=DESCENDING && LA179_1<=DIV)||LA179_1==EMPTY||LA179_1==EQ||(LA179_1>=EXCEPT && LA179_1<=EXTERNAL)||(LA179_1>=FOR && LA179_1<=GE)||(LA179_1>=GT && LA179_1<=IDIV)||LA179_1==IN||(LA179_1>=INSTANCE && LA179_1<=IS)||LA179_1==LE||(LA179_1>=LET && LA179_1<=MOD)||LA179_1==NE||LA179_1==NODE||(LA179_1>=OR && LA179_1<=ORDER)||(LA179_1>=RETURN && LA179_1<=SATISFIES)||LA179_1==STABLE||(LA179_1>=TO && LA179_1<=TREAT)||LA179_1==UNION||LA179_1==VARIABLE||LA179_1==WHERE||LA179_1==ALLOWING||LA179_1==COUNT||(LA179_1>=DECIMAL_SEPARATOR && LA179_1<=MINUS_SIGN)||(LA179_1>=NAN && LA179_1<=PREVIOUS)||LA179_1==START||LA179_1==WHEN||(LA179_1>=ZERO_DIGIT && LA179_1<=BEFORE)||LA179_1==INTO||LA179_1==MODIFY||LA179_1==UPDATING||LA179_1==WITH||LA179_1==CONTAINS||LA179_1==PARAGRAPHS||LA179_1==SCORE||LA179_1==SENTENCES||LA179_1==TIMES||LA179_1==WORDS||(LA179_1>=CHECK && LA179_1<=COLLECTION)||(LA179_1>=FOREACH && LA179_1<=ON)||(LA179_1>=CONCAT && LA179_1<=ANN_PERCENT)||(LA179_1>=COMMA && LA179_1<=SLASH_SLASH)||LA179_1==EMPTY_CLOSE_TAG||(LA179_1>=SEMICOLON && LA179_1<=VBAR)||(LA179_1>=APOS && LA179_1<=QUOT)||LA179_1==S) ) {
                    alt179=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 179, 1, this.input);

                    throw nvae;
                }
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 179, 0, this.input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // xquery/XQueryParser.g:1501:11: pg_QName
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pg_QName_in_p_QName10981);
                    pg_QName590=this.pg_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_QName590.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1502:11: p_NCName
                    this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_p_QName10993);
                    p_NCName591=this.p_NCName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_NCName.add(p_NCName591.getTree());


                    // AST REWRITE
                    // elements: p_NCName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1503:17: -> ^( QName p_NCName )
                    {
                        // xquery/XQueryParser.g:1503:20: ^( QName p_NCName )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(QName, "QName"), root_1);

                        this.adaptor.addChild(root_1, stream_p_NCName.nextTree());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
            this.setWsExplicit(false);
        }
        return retval;
    },

    // inline static return class
    pg_FQName_return: (function() {
        XQueryParser.pg_FQName_return = function(){};
        org.antlr.lang.extend(XQueryParser.pg_FQName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1507:1: pg_FQName : ( pg_QName | p_FNCName -> ^( QName p_FNCName ) );
    // $ANTLR start "pg_FQName"
    pg_FQName: function() {
        var retval = new XQueryParser.pg_FQName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var pg_QName592 = null;
         var p_FNCName593 = null;

        var stream_p_FNCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_FNCName");
        try {
            // xquery/XQueryParser.g:1508:9: ( pg_QName | p_FNCName -> ^( QName p_FNCName ) )
            var alt180=2;
            switch ( this.input.LA(1) ) {
            case ANCESTOR:
            case ANCESTOR_OR_SELF:
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case ELSE:
            case EMPTY:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PARENT:
            case PRECEDING:
            case PRECEDING_SIBLING:
            case PRESERVE:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case THEN:
            case TO:
            case TREAT:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case ALLOWING:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAN:
            case NEXT:
            case ONLY:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PREVIOUS:
            case SLIDING:
            case START:
            case TRY:
            case TUMBLING:
            case TYPE:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case VALUE:
            case WITH:
            case ALL:
            case ANY:
            case CONTAINS:
            case CONTENT:
            case DIACRITICS:
            case DIFFERENT:
            case DISTANCE:
            case ENTIRE:
            case EXACTLY:
            case FROM:
            case FT_OPTION:
            case FTAND:
            case FTNOT:
            case FTOR:
            case INSENSITIVE:
            case LANGUAGE:
            case LEVELS:
            case LOWERCASE:
            case MOST:
            case NO:
            case NOT:
            case OCCURS:
            case PARAGRAPH:
            case PARAGRAPHS:
            case PHRASE:
            case RELATIONSHIP:
            case SAME:
            case SCORE:
            case SENSITIVE:
            case SENTENCE:
            case SENTENCES:
            case STEMMING:
            case STOP:
            case THESAURUS:
            case TIMES:
            case UPPERCASE:
            case USING:
            case WEIGHT:
            case WILDCARDS:
            case WITHOUT:
            case WORD:
            case WORDS:
            case BREAK:
            case CONTINUE:
            case EXIT:
            case LOOP:
            case RETURNING:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case FOREACH:
            case FOREIGN:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case ON:
            case UNIQUE:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case L_NCName:
            case EXPLICITLY:
                var LA180_1 = this.input.LA(2);

                if ( (LA180_1==COLON) ) {
                    alt180=1;
                }
                else if ( (LA180_1==LPAREN) ) {
                    alt180=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 180, 1, this.input);

                    throw nvae;
                }
                break;
            case ATTRIBUTE:
            case COMMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case EMPTY_SEQUENCE:
            case IF:
            case ITEM:
            case NODE:
            case PROCESSING_INSTRUCTION:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case TEXT:
            case TYPESWITCH:
            case NAMESPACE_NODE:
            case SWITCH:
            case WHILE:
                alt180=1;
                break;
            case UPDATING:
                alt180=2;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 180, 0, this.input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // xquery/XQueryParser.g:1508:11: pg_QName
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_pg_QName_in_pg_FQName11054);
                    pg_QName592=this.pg_QName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_QName592.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1509:11: p_FNCName
                    this.pushFollow(XQueryParser.FOLLOW_p_FNCName_in_pg_FQName11066);
                    p_FNCName593=this.p_FNCName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) stream_p_FNCName.add(p_FNCName593.getTree());


                    // AST REWRITE
                    // elements: p_FNCName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( this.state.backtracking===0 ) {
                    retval.tree = root_0;
                    var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = this.adaptor.nil();
                    // 1510:17: -> ^( QName p_FNCName )
                    {
                        // xquery/XQueryParser.g:1510:20: ^( QName p_FNCName )
                        {
                        var root_1 = this.adaptor.nil();
                        root_1 = this.adaptor.becomeRoot(this.adaptor.create(QName, "QName"), root_1);

                        this.adaptor.addChild(root_1, stream_p_FNCName.nextTree());

                        this.adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}

                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pg_QName_return: (function() {
        XQueryParser.pg_QName_return = function(){};
        org.antlr.lang.extend(XQueryParser.pg_QName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1512:1: pg_QName : nn= p_NCName COLON nl= p_NCName -> ^( QName $nn $nl) ;
    // $ANTLR start "pg_QName"
    pg_QName: function() {
        var retval = new XQueryParser.pg_QName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var COLON594 = null;
         var nn = null;
         var nl = null;

        var COLON594_tree=null;
        var stream_COLON=new org.antlr.runtime.tree.RewriteRuleTokenStream(this.adaptor,"token COLON");
        var stream_p_NCName=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"rule p_NCName");
        try {
            // xquery/XQueryParser.g:1513:9: (nn= p_NCName COLON nl= p_NCName -> ^( QName $nn $nl) )
            // xquery/XQueryParser.g:1513:11: nn= p_NCName COLON nl= p_NCName
            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pg_QName11110);
            nn=this.p_NCName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_NCName.add(nn.getTree());
            COLON594=this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_pg_QName11112); if (this.state.failed) return retval; 
            if ( this.state.backtracking===0 ) stream_COLON.add(COLON594);

            this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_pg_QName11116);
            nl=this.p_NCName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) stream_p_NCName.add(nl.getTree());


            // AST REWRITE
            // elements: nn, nl
            // token labels: 
            // rule labels: retval, nn, nl
            // token list labels: 
            // rule list labels: 
            if ( this.state.backtracking===0 ) {
            retval.tree = root_0;
            var stream_retval=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token retval",retval!=null?retval.tree:null);
            var stream_nn=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nn",nn!=null?nn.tree:null);
            var stream_nl=new org.antlr.runtime.tree.RewriteRuleSubtreeStream(this.adaptor,"token nl",nl!=null?nl.tree:null);

            root_0 = this.adaptor.nil();
            // 1514:17: -> ^( QName $nn $nl)
            {
                // xquery/XQueryParser.g:1514:20: ^( QName $nn $nl)
                {
                var root_1 = this.adaptor.nil();
                root_1 = this.adaptor.becomeRoot(this.adaptor.create(QName, "QName"), root_1);

                this.adaptor.addChild(root_1, stream_nn.nextTree());
                this.adaptor.addChild(root_1, stream_nl.nextTree());

                this.adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}


            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_NCName_return: (function() {
        XQueryParser.p_NCName_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_NCName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1544:1: p_NCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | SWITCH | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | WHILE | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
    // $ANTLR start "p_NCName"
    p_NCName: function() {
        var retval = new XQueryParser.p_NCName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set595 = null;

        var set595_tree=null;

        try {
            // xquery/XQueryParser.g:1545:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | SWITCH | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | WHILE | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
            // xquery/XQueryParser.g:
            root_0 = this.adaptor.nil();

            set595=this.input.LT(1);
            if ( (this.input.LA(1)>=ANCESTOR && this.input.LA(1)<=SKIP)||(this.input.LA(1)>=VALUE && this.input.LA(1)<=QUOT_ER)||this.input.LA(1)==L_NCName||this.input.LA(1)==EXPLICITLY ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set595));
                this.state.errorRecovery=false;this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                throw mse;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FNCName_return: (function() {
        XQueryParser.p_FNCName_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FNCName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1563:1: p_FNCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
    // $ANTLR start "p_FNCName"
    p_FNCName: function() {
        var retval = new XQueryParser.p_FNCName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var set596 = null;

        var set596_tree=null;

        try {
            // xquery/XQueryParser.g:1564:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | ALLOWING | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | SLIDING | START | TRY | TUMBLING | TYPE | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | ALL | ANY | CONTAINS | CONTENT | DIACRITICS | DIFFERENT | DISTANCE | ENTIRE | EXACTLY | FROM | FT_OPTION | FTAND | FTNOT | FTOR | INSENSITIVE | LANGUAGE | LEVELS | LOWERCASE | MOST | NO | NOT | OCCURS | PARAGRAPH | PARAGRAPHS | PHRASE | RELATIONSHIP | SAME | SCORE | SENSITIVE | SENTENCE | SENTENCES | STEMMING | STOP | THESAURUS | TIMES | UPPERCASE | USING | WEIGHT | WILDCARDS | WITHOUT | WORD | WORDS | BREAK | CONTINUE | EXIT | LOOP | RETURNING | CHECK | COLLECTION | CONSTRAINT | EXPLICITLY | FOREACH | FOREIGN | INDEX | INTEGRITY | KEY | ON | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
            // xquery/XQueryParser.g:
            root_0 = this.adaptor.nil();

            set596=this.input.LT(1);
            if ( (this.input.LA(1)>=ANCESTOR && this.input.LA(1)<=AT)||(this.input.LA(1)>=BASE_URI && this.input.LA(1)<=COLLATION)||(this.input.LA(1)>=CONSTRUCTION && this.input.LA(1)<=DOCUMENT)||(this.input.LA(1)>=ELSE && this.input.LA(1)<=EMPTY)||(this.input.LA(1)>=ENCODING && this.input.LA(1)<=IDIV)||(this.input.LA(1)>=IMPORT && this.input.LA(1)<=IS)||(this.input.LA(1)>=LAX && this.input.LA(1)<=NO_PRESERVE)||(this.input.LA(1)>=OF && this.input.LA(1)<=PRESERVE)||(this.input.LA(1)>=RETURN && this.input.LA(1)<=SCHEMA)||(this.input.LA(1)>=SELF && this.input.LA(1)<=STRIP)||(this.input.LA(1)>=THEN && this.input.LA(1)<=TREAT)||(this.input.LA(1)>=UNION && this.input.LA(1)<=MINUS_SIGN)||(this.input.LA(1)>=NAN && this.input.LA(1)<=START)||(this.input.LA(1)>=TRY && this.input.LA(1)<=RETURNING)||(this.input.LA(1)>=CHECK && this.input.LA(1)<=QUOT_ER)||this.input.LA(1)==L_NCName||this.input.LA(1)==EXPLICITLY ) {
                this.input.consume();
                if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, this.adaptor.create(set596));
                this.state.errorRecovery=false;this.state.failed=false;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                throw mse;
            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pg_UpdateExpr_return: (function() {
        XQueryParser.pg_UpdateExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.pg_UpdateExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1601:1: pg_UpdateExpr : ( p_InsertExpr | p_DeleteExpr | p_RenameExpr | p_ReplaceExpr | p_TransformExpr );
    // $ANTLR start "pg_UpdateExpr"
    pg_UpdateExpr: function() {
        var retval = new XQueryParser.pg_UpdateExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_InsertExpr597 = null;
         var p_DeleteExpr598 = null;
         var p_RenameExpr599 = null;
         var p_ReplaceExpr600 = null;
         var p_TransformExpr601 = null;


        try {
            // xquery/XQueryParser.g:1602:9: ( p_InsertExpr | p_DeleteExpr | p_RenameExpr | p_ReplaceExpr | p_TransformExpr )
            var alt181=5;
            switch ( this.input.LA(1) ) {
            case INSERT:
                alt181=1;
                break;
            case DELETE:
                alt181=2;
                break;
            case RENAME:
                alt181=3;
                break;
            case REPLACE:
                alt181=4;
                break;
            case COPY:
                alt181=5;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 181, 0, this.input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // xquery/XQueryParser.g:1602:11: p_InsertExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_InsertExpr_in_pg_UpdateExpr13107);
                    p_InsertExpr597=this.p_InsertExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InsertExpr597.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1603:11: p_DeleteExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_DeleteExpr_in_pg_UpdateExpr13119);
                    p_DeleteExpr598=this.p_DeleteExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_DeleteExpr598.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1604:11: p_RenameExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_RenameExpr_in_pg_UpdateExpr13131);
                    p_RenameExpr599=this.p_RenameExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_RenameExpr599.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:1605:11: p_ReplaceExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ReplaceExpr_in_pg_UpdateExpr13143);
                    p_ReplaceExpr600=this.p_ReplaceExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReplaceExpr600.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:1606:11: p_TransformExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_TransformExpr_in_pg_UpdateExpr13155);
                    p_TransformExpr601=this.p_TransformExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TransformExpr601.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_RevalidationDecl_return: (function() {
        XQueryParser.pm_RevalidationDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_RevalidationDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1610:1: pm_RevalidationDecl : k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) SEMICOLON ;
    // $ANTLR start "pm_RevalidationDecl"
    pm_RevalidationDecl: function() {
        var retval = new XQueryParser.pm_RevalidationDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var SEMICOLON602 = null;
        var k = null;
        var list_k=null;

        var SEMICOLON602_tree=null;
        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1611:9: (k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) SEMICOLON )
            // xquery/XQueryParser.g:1611:11: k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_RevalidationDecl13183); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            k=this.match(this.input,REVALIDATION,XQueryParser.FOLLOW_REVALIDATION_in_pm_RevalidationDecl13187); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            // xquery/XQueryParser.g:1611:38: (k+= STRICT | k+= LAX | k+= SKIP )
            var alt182=3;
            switch ( this.input.LA(1) ) {
            case STRICT:
                alt182=1;
                break;
            case LAX:
                alt182=2;
                break;
            case SKIP:
                alt182=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 182, 0, this.input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // xquery/XQueryParser.g:1611:39: k+= STRICT
                    k=this.match(this.input,STRICT,XQueryParser.FOLLOW_STRICT_in_pm_RevalidationDecl13192); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1611:51: k+= LAX
                    k=this.match(this.input,LAX,XQueryParser.FOLLOW_LAX_in_pm_RevalidationDecl13198); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 3 :
                    // xquery/XQueryParser.g:1611:60: k+= SKIP
                    k=this.match(this.input,SKIP,XQueryParser.FOLLOW_SKIP_in_pm_RevalidationDecl13204); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }
            SEMICOLON602=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_RevalidationDecl13209); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON602_tree = this.adaptor.create(SEMICOLON602);
            this.adaptor.addChild(root_0, SEMICOLON602_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_InsertExprTargetChoice_return: (function() {
        XQueryParser.p_InsertExprTargetChoice_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_InsertExprTargetChoice_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1615:1: p_InsertExprTargetChoice : ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE );
    // $ANTLR start "p_InsertExprTargetChoice"
    p_InsertExprTargetChoice: function() {
        var retval = new XQueryParser.p_InsertExprTargetChoice_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ka = null;
        var kb = null;
        var k = null;
        var list_k=null;

        var ka_tree=null;
        var kb_tree=null;
        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1616:9: ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE )
            var alt185=3;
            switch ( this.input.LA(1) ) {
            case AS:
            case INTO:
                alt185=1;
                break;
            case AFTER:
                alt185=2;
                break;
            case BEFORE:
                alt185=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 185, 0, this.input);

                throw nvae;
            }

            switch (alt185) {
                case 1 :
                    // xquery/XQueryParser.g:1616:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    root_0 = this.adaptor.nil();

                    // xquery/XQueryParser.g:1616:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    // xquery/XQueryParser.g:1616:12: (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO
                    // xquery/XQueryParser.g:1616:12: (k+= AS (k+= FIRST | k+= LAST ) )?
                    var alt184=2;
                    var LA184_0 = this.input.LA(1);

                    if ( (LA184_0==AS) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // xquery/XQueryParser.g:1616:13: k+= AS (k+= FIRST | k+= LAST )
                            k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_InsertExprTargetChoice13239); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            k_tree = this.adaptor.create(k);
                            this.adaptor.addChild(root_0, k_tree);
                            }
                            if (org.antlr.lang.isNull(list_k)) list_k = [];
                            list_k.push(k);

                            // xquery/XQueryParser.g:1616:19: (k+= FIRST | k+= LAST )
                            var alt183=2;
                            var LA183_0 = this.input.LA(1);

                            if ( (LA183_0==FIRST) ) {
                                alt183=1;
                            }
                            else if ( (LA183_0==LAST) ) {
                                alt183=2;
                            }
                            else {
                                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                                var nvae =
                                    new org.antlr.runtime.NoViableAltException("", 183, 0, this.input);

                                throw nvae;
                            }
                            switch (alt183) {
                                case 1 :
                                    // xquery/XQueryParser.g:1616:20: k+= FIRST
                                    k=this.match(this.input,FIRST,XQueryParser.FOLLOW_FIRST_in_p_InsertExprTargetChoice13244); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    k_tree = this.adaptor.create(k);
                                    this.adaptor.addChild(root_0, k_tree);
                                    }
                                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                                    list_k.push(k);



                                    break;
                                case 2 :
                                    // xquery/XQueryParser.g:1616:31: k+= LAST
                                    k=this.match(this.input,LAST,XQueryParser.FOLLOW_LAST_in_p_InsertExprTargetChoice13250); if (this.state.failed) return retval;
                                    if ( this.state.backtracking===0 ) {
                                    k_tree = this.adaptor.create(k);
                                    this.adaptor.addChild(root_0, k_tree);
                                    }
                                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                                    list_k.push(k);



                                    break;

                            }



                            break;

                    }

                    k=this.match(this.input,INTO,XQueryParser.FOLLOW_INTO_in_p_InsertExprTargetChoice13257); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);




                    if ( this.state.backtracking===0 ) {
                      this.ak(list_k);
                    }


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1617:11: ka= AFTER
                    root_0 = this.adaptor.nil();

                    ka=this.match(this.input,AFTER,XQueryParser.FOLLOW_AFTER_in_p_InsertExprTargetChoice13274); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ka_tree = this.adaptor.create(ka);
                    this.adaptor.addChild(root_0, ka_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(ka);
                    }


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1618:11: kb= BEFORE
                    root_0 = this.adaptor.nil();

                    kb=this.match(this.input,BEFORE,XQueryParser.FOLLOW_BEFORE_in_p_InsertExprTargetChoice13290); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    kb_tree = this.adaptor.create(kb);
                    this.adaptor.addChild(root_0, kb_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(kb);
                    }


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_InsertExpr_return: (function() {
        XQueryParser.p_InsertExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_InsertExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1622:1: p_InsertExpr : k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr ;
    // $ANTLR start "p_InsertExpr"
    p_InsertExpr: function() {
        var retval = new XQueryParser.p_InsertExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_SourceExpr603 = null;
         var p_InsertExprTargetChoice604 = null;
         var p_TargetExpr605 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1623:9: (k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr )
            // xquery/XQueryParser.g:1623:11: k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr
            root_0 = this.adaptor.nil();

            k=this.match(this.input,INSERT,XQueryParser.FOLLOW_INSERT_in_p_InsertExpr13320); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            // xquery/XQueryParser.g:1623:21: (k+= NODE | k+= NODES )
            var alt186=2;
            var LA186_0 = this.input.LA(1);

            if ( (LA186_0==NODE) ) {
                alt186=1;
            }
            else if ( (LA186_0==NODES) ) {
                alt186=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 186, 0, this.input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // xquery/XQueryParser.g:1623:22: k+= NODE
                    k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_InsertExpr13325); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1623:32: k+= NODES
                    k=this.match(this.input,NODES,XQueryParser.FOLLOW_NODES_in_p_InsertExpr13331); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_SourceExpr_in_p_InsertExpr13334);
            p_SourceExpr603=this.p_SourceExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SourceExpr603.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr13336);
            p_InsertExprTargetChoice604=this.p_InsertExprTargetChoice();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InsertExprTargetChoice604.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_TargetExpr_in_p_InsertExpr13338);
            p_TargetExpr605=this.p_TargetExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TargetExpr605.getTree());
            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_DeleteExpr_return: (function() {
        XQueryParser.p_DeleteExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_DeleteExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1627:1: p_DeleteExpr : k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr ;
    // $ANTLR start "p_DeleteExpr"
    p_DeleteExpr: function() {
        var retval = new XQueryParser.p_DeleteExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_TargetExpr606 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1628:9: (k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr )
            // xquery/XQueryParser.g:1628:11: k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DELETE,XQueryParser.FOLLOW_DELETE_in_p_DeleteExpr13368); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            // xquery/XQueryParser.g:1628:21: (k+= NODE | k+= NODES )
            var alt187=2;
            var LA187_0 = this.input.LA(1);

            if ( (LA187_0==NODE) ) {
                alt187=1;
            }
            else if ( (LA187_0==NODES) ) {
                alt187=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 187, 0, this.input);

                throw nvae;
            }
            switch (alt187) {
                case 1 :
                    // xquery/XQueryParser.g:1628:22: k+= NODE
                    k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_DeleteExpr13373); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1628:32: k+= NODES
                    k=this.match(this.input,NODES,XQueryParser.FOLLOW_NODES_in_p_DeleteExpr13379); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_TargetExpr_in_p_DeleteExpr13382);
            p_TargetExpr606=this.p_TargetExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TargetExpr606.getTree());
            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ReplaceExpr_return: (function() {
        XQueryParser.p_ReplaceExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ReplaceExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1632:1: p_ReplaceExpr : k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true] ;
    // $ANTLR start "p_ReplaceExpr"
    p_ReplaceExpr: function() {
        var retval = new XQueryParser.p_ReplaceExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_ExprSingle607 = null;
         var p_ExprSingle608 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1633:9: (k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true] )
            // xquery/XQueryParser.g:1633:11: k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle[true] k+= WITH p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,REPLACE,XQueryParser.FOLLOW_REPLACE_in_p_ReplaceExpr13412); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            // xquery/XQueryParser.g:1633:22: (k+= VALUE k+= OF )?
            var alt188=2;
            var LA188_0 = this.input.LA(1);

            if ( (LA188_0==VALUE) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // xquery/XQueryParser.g:1633:23: k+= VALUE k+= OF
                    k=this.match(this.input,VALUE,XQueryParser.FOLLOW_VALUE_in_p_ReplaceExpr13417); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,OF,XQueryParser.FOLLOW_OF_in_p_ReplaceExpr13421); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_ReplaceExpr13427); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ReplaceExpr13429);
            p_ExprSingle607=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle607.getTree());
            k=this.match(this.input,WITH,XQueryParser.FOLLOW_WITH_in_p_ReplaceExpr13434); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ReplaceExpr13436);
            p_ExprSingle608=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle608.getTree());
            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_RenameExpr_return: (function() {
        XQueryParser.p_RenameExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_RenameExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1637:1: p_RenameExpr : k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr ;
    // $ANTLR start "p_RenameExpr"
    p_RenameExpr: function() {
        var retval = new XQueryParser.p_RenameExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var AS610 = null;
        var k = null;
        var list_k=null;
         var p_TargetExpr609 = null;
         var p_NewNameExpr611 = null;

        var AS610_tree=null;
        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1638:9: (k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr )
            // xquery/XQueryParser.g:1638:11: k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr
            root_0 = this.adaptor.nil();

            k=this.match(this.input,RENAME,XQueryParser.FOLLOW_RENAME_in_p_RenameExpr13467); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_RenameExpr13471); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            this.pushFollow(XQueryParser.FOLLOW_p_TargetExpr_in_p_RenameExpr13473);
            p_TargetExpr609=this.p_TargetExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TargetExpr609.getTree());
            AS610=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_RenameExpr13475); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            AS610_tree = this.adaptor.create(AS610);
            this.adaptor.addChild(root_0, AS610_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_NewNameExpr_in_p_RenameExpr13477);
            p_NewNameExpr611=this.p_NewNameExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_NewNameExpr611.getTree());
            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SourceExpr_return: (function() {
        XQueryParser.p_SourceExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SourceExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1642:1: p_SourceExpr : p_ExprSingle[true] ;
    // $ANTLR start "p_SourceExpr"
    p_SourceExpr: function() {
        var retval = new XQueryParser.p_SourceExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ExprSingle612 = null;


        try {
            // xquery/XQueryParser.g:1643:9: ( p_ExprSingle[true] )
            // xquery/XQueryParser.g:1643:11: p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_SourceExpr13505);
            p_ExprSingle612=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle612.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TargetExpr_return: (function() {
        XQueryParser.p_TargetExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TargetExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1647:1: p_TargetExpr : p_ExprSingle[true] ;
    // $ANTLR start "p_TargetExpr"
    p_TargetExpr: function() {
        var retval = new XQueryParser.p_TargetExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ExprSingle613 = null;


        try {
            // xquery/XQueryParser.g:1648:9: ( p_ExprSingle[true] )
            // xquery/XQueryParser.g:1648:11: p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TargetExpr13532);
            p_ExprSingle613=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle613.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_NewNameExpr_return: (function() {
        XQueryParser.p_NewNameExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_NewNameExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1652:1: p_NewNameExpr : p_ExprSingle[true] ;
    // $ANTLR start "p_NewNameExpr"
    p_NewNameExpr: function() {
        var retval = new XQueryParser.p_NewNameExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_ExprSingle614 = null;


        try {
            // xquery/XQueryParser.g:1653:9: ( p_ExprSingle[true] )
            // xquery/XQueryParser.g:1653:11: p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_NewNameExpr13559);
            p_ExprSingle614=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle614.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TransformExpr_return: (function() {
        XQueryParser.p_TransformExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TransformExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1657:1: p_TransformExpr : k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true] ;
    // $ANTLR start "p_TransformExpr"
    p_TransformExpr: function() {
        var retval = new XQueryParser.p_TransformExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var DOLLAR615 = null;
        var BIND617 = null;
        var COMMA619 = null;
        var DOLLAR620 = null;
        var BIND622 = null;
        var k = null;
        var list_k=null;
         var p_VarName616 = null;
         var p_ExprSingle618 = null;
         var p_VarName621 = null;
         var p_ExprSingle623 = null;
         var p_ExprSingle624 = null;
         var p_ExprSingle625 = null;

        var DOLLAR615_tree=null;
        var BIND617_tree=null;
        var COMMA619_tree=null;
        var DOLLAR620_tree=null;
        var BIND622_tree=null;
        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1658:9: (k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true] )
            // xquery/XQueryParser.g:1658:11: k+= COPY DOLLAR p_VarName BIND p_ExprSingle[true] ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )* k+= MODIFY p_ExprSingle[true] k+= RETURN p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,COPY,XQueryParser.FOLLOW_COPY_in_p_TransformExpr13588); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            DOLLAR615=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TransformExpr13590); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR615_tree = this.adaptor.create(DOLLAR615);
            this.adaptor.addChild(root_0, DOLLAR615_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TransformExpr13592);
            p_VarName616=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName616.getTree());
            BIND617=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_TransformExpr13594); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            BIND617_tree = this.adaptor.create(BIND617);
            this.adaptor.addChild(root_0, BIND617_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TransformExpr13596);
            p_ExprSingle618=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle618.getTree());
            // xquery/XQueryParser.g:1658:60: ( COMMA DOLLAR p_VarName BIND p_ExprSingle[true] )*
            loop189:
            do {
                var alt189=2;
                var LA189_0 = this.input.LA(1);

                if ( (LA189_0==COMMA) ) {
                    alt189=1;
                }


                switch (alt189) {
                case 1 :
                    // xquery/XQueryParser.g:1658:61: COMMA DOLLAR p_VarName BIND p_ExprSingle[true]
                    COMMA619=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_TransformExpr13600); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COMMA619_tree = this.adaptor.create(COMMA619);
                    this.adaptor.addChild(root_0, COMMA619_tree);
                    }
                    DOLLAR620=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TransformExpr13602); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR620_tree = this.adaptor.create(DOLLAR620);
                    this.adaptor.addChild(root_0, DOLLAR620_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TransformExpr13604);
                    p_VarName621=this.p_VarName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName621.getTree());
                    BIND622=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_TransformExpr13606); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    BIND622_tree = this.adaptor.create(BIND622);
                    this.adaptor.addChild(root_0, BIND622_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TransformExpr13608);
                    p_ExprSingle623=this.p_ExprSingle(true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle623.getTree());


                    break;

                default :
                    break loop189;
                }
            } while (true);

            k=this.match(this.input,MODIFY,XQueryParser.FOLLOW_MODIFY_in_p_TransformExpr13615); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TransformExpr13617);
            p_ExprSingle624=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle624.getTree());
            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_TransformExpr13622); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_TransformExpr13624);
            p_ExprSingle625=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle625.getTree());
            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    pm_FTOptionDecl_return: (function() {
        XQueryParser.pm_FTOptionDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.pm_FTOptionDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1668:1: pm_FTOptionDecl : k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON ;
    // $ANTLR start "pm_FTOptionDecl"
    pm_FTOptionDecl: function() {
        var retval = new XQueryParser.pm_FTOptionDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var SEMICOLON627 = null;
        var k = null;
        var list_k=null;
         var p_FTMatchOptions626 = null;

        var SEMICOLON627_tree=null;
        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1669:9: (k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON )
            // xquery/XQueryParser.g:1669:11: k+= DECLARE k+= FT_OPTION p_FTMatchOptions SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,DECLARE,XQueryParser.FOLLOW_DECLARE_in_pm_FTOptionDecl13662); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            k=this.match(this.input,FT_OPTION,XQueryParser.FOLLOW_FT_OPTION_in_pm_FTOptionDecl13666); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            this.pushFollow(XQueryParser.FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl13668);
            p_FTMatchOptions626=this.p_FTMatchOptions();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMatchOptions626.getTree());
            SEMICOLON627=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_pm_FTOptionDecl13670); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON627_tree = this.adaptor.create(SEMICOLON627);
            this.adaptor.addChild(root_0, SEMICOLON627_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTScoreVar_return: (function() {
        XQueryParser.p_FTScoreVar_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTScoreVar_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1673:1: p_FTScoreVar : ks= SCORE DOLLAR p_VarName ;
    // $ANTLR start "p_FTScoreVar"
    p_FTScoreVar: function() {
        var retval = new XQueryParser.p_FTScoreVar_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ks = null;
        var DOLLAR628 = null;
         var p_VarName629 = null;

        var ks_tree=null;
        var DOLLAR628_tree=null;

        try {
            // xquery/XQueryParser.g:1674:9: (ks= SCORE DOLLAR p_VarName )
            // xquery/XQueryParser.g:1674:11: ks= SCORE DOLLAR p_VarName
            root_0 = this.adaptor.nil();

            ks=this.match(this.input,SCORE,XQueryParser.FOLLOW_SCORE_in_p_FTScoreVar13700); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            ks_tree = this.adaptor.create(ks);
            this.adaptor.addChild(root_0, ks_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(ks);
            }
            DOLLAR628=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_FTScoreVar13704); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR628_tree = this.adaptor.create(DOLLAR628);
            this.adaptor.addChild(root_0, DOLLAR628_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_FTScoreVar13706);
            p_VarName629=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName629.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTContainsExpr_return: (function() {
        XQueryParser.p_FTContainsExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTContainsExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1678:1: p_FTContainsExpr : p_StringConcatExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? ;
    // $ANTLR start "p_FTContainsExpr"
    p_FTContainsExpr: function() {
        var retval = new XQueryParser.p_FTContainsExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_StringConcatExpr630 = null;
         var p_FTSelection631 = null;
         var p_FTIgnoreOption632 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1679:9: ( p_StringConcatExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )? )
            // xquery/XQueryParser.g:1679:11: p_StringConcatExpr (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_StringConcatExpr_in_p_FTContainsExpr13732);
            p_StringConcatExpr630=this.p_StringConcatExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringConcatExpr630.getTree());
            // xquery/XQueryParser.g:1679:30: (k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )? )?
            var alt191=2;
            var LA191_0 = this.input.LA(1);

            if ( (LA191_0==CONTAINS) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // xquery/XQueryParser.g:1679:32: k+= CONTAINS k+= TEXT p_FTSelection ( p_FTIgnoreOption )?
                    k=this.match(this.input,CONTAINS,XQueryParser.FOLLOW_CONTAINS_in_p_FTContainsExpr13738); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,TEXT,XQueryParser.FOLLOW_TEXT_in_p_FTContainsExpr13742); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(list_k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_FTSelection_in_p_FTContainsExpr13746);
                    p_FTSelection631=this.p_FTSelection();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTSelection631.getTree());
                    // xquery/XQueryParser.g:1679:81: ( p_FTIgnoreOption )?
                    var alt190=2;
                    var LA190_0 = this.input.LA(1);

                    if ( (LA190_0==WITHOUT) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // xquery/XQueryParser.g:1679:81: p_FTIgnoreOption
                            this.pushFollow(XQueryParser.FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr13748);
                            p_FTIgnoreOption632=this.p_FTIgnoreOption();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTIgnoreOption632.getTree());


                            break;

                    }



                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTSelection_return: (function() {
        XQueryParser.p_FTSelection_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1683:1: p_FTSelection : p_FTOr ( p_FTPosFilter )* ;
    // $ANTLR start "p_FTSelection"
    p_FTSelection: function() {
        var retval = new XQueryParser.p_FTSelection_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_FTOr633 = null;
         var p_FTPosFilter634 = null;


        try {
            // xquery/XQueryParser.g:1684:9: ( p_FTOr ( p_FTPosFilter )* )
            // xquery/XQueryParser.g:1684:11: p_FTOr ( p_FTPosFilter )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_FTOr_in_p_FTSelection13778);
            p_FTOr633=this.p_FTOr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTOr633.getTree());
            // xquery/XQueryParser.g:1684:18: ( p_FTPosFilter )*
            loop192:
            do {
                var alt192=2;
                var LA192_0 = this.input.LA(1);

                if ( (LA192_0==AT||LA192_0==ORDERED||LA192_0==WINDOW||(LA192_0>=DIFFERENT && LA192_0<=ENTIRE)||LA192_0==SAME) ) {
                    alt192=1;
                }


                switch (alt192) {
                case 1 :
                    // xquery/XQueryParser.g:1684:18: p_FTPosFilter
                    this.pushFollow(XQueryParser.FOLLOW_p_FTPosFilter_in_p_FTSelection13780);
                    p_FTPosFilter634=this.p_FTPosFilter();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTPosFilter634.getTree());


                    break;

                default :
                    break loop192;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTWeight_return: (function() {
        XQueryParser.p_FTWeight_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTWeight_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1688:1: p_FTWeight : kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET ;
    // $ANTLR start "p_FTWeight"
    p_FTWeight: function() {
        var retval = new XQueryParser.p_FTWeight_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var kw = null;
        var LBRACKET635 = null;
        var RBRACKET637 = null;
         var p_Expr636 = null;

        var kw_tree=null;
        var LBRACKET635_tree=null;
        var RBRACKET637_tree=null;

        try {
            // xquery/XQueryParser.g:1689:9: (kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET )
            // xquery/XQueryParser.g:1689:11: kw= WEIGHT LBRACKET p_Expr[true,true] RBRACKET
            root_0 = this.adaptor.nil();

            kw=this.match(this.input,WEIGHT,XQueryParser.FOLLOW_WEIGHT_in_p_FTWeight13809); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            kw_tree = this.adaptor.create(kw);
            this.adaptor.addChild(root_0, kw_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(kw);
            }
            LBRACKET635=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_FTWeight13813); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET635_tree = this.adaptor.create(LBRACKET635);
            this.adaptor.addChild(root_0, LBRACKET635_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_FTWeight13815);
            p_Expr636=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr636.getTree());
            RBRACKET637=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_FTWeight13818); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET637_tree = this.adaptor.create(RBRACKET637);
            this.adaptor.addChild(root_0, RBRACKET637_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTOr_return: (function() {
        XQueryParser.p_FTOr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTOr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1693:1: p_FTOr : p_FTAnd (ko= FTOR p_FTAnd )* ;
    // $ANTLR start "p_FTOr"
    p_FTOr: function() {
        var retval = new XQueryParser.p_FTOr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ko = null;
         var p_FTAnd638 = null;
         var p_FTAnd639 = null;

        var ko_tree=null;

        try {
            // xquery/XQueryParser.g:1694:9: ( p_FTAnd (ko= FTOR p_FTAnd )* )
            // xquery/XQueryParser.g:1694:11: p_FTAnd (ko= FTOR p_FTAnd )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_FTAnd_in_p_FTOr13844);
            p_FTAnd638=this.p_FTAnd();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTAnd638.getTree());
            // xquery/XQueryParser.g:1694:19: (ko= FTOR p_FTAnd )*
            loop193:
            do {
                var alt193=2;
                var LA193_0 = this.input.LA(1);

                if ( (LA193_0==FTOR) ) {
                    alt193=1;
                }


                switch (alt193) {
                case 1 :
                    // xquery/XQueryParser.g:1694:21: ko= FTOR p_FTAnd
                    ko=this.match(this.input,FTOR,XQueryParser.FOLLOW_FTOR_in_p_FTOr13850); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ko_tree = this.adaptor.create(ko);
                    this.adaptor.addChild(root_0, ko_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(ko);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_FTAnd_in_p_FTOr13854);
                    p_FTAnd639=this.p_FTAnd();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTAnd639.getTree());


                    break;

                default :
                    break loop193;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTAnd_return: (function() {
        XQueryParser.p_FTAnd_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTAnd_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1698:1: p_FTAnd : p_FTMildNot (ka= FTAND p_FTMildNot )* ;
    // $ANTLR start "p_FTAnd"
    p_FTAnd: function() {
        var retval = new XQueryParser.p_FTAnd_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ka = null;
         var p_FTMildNot640 = null;
         var p_FTMildNot641 = null;

        var ka_tree=null;

        try {
            // xquery/XQueryParser.g:1699:9: ( p_FTMildNot (ka= FTAND p_FTMildNot )* )
            // xquery/XQueryParser.g:1699:11: p_FTMildNot (ka= FTAND p_FTMildNot )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_FTMildNot_in_p_FTAnd13883);
            p_FTMildNot640=this.p_FTMildNot();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMildNot640.getTree());
            // xquery/XQueryParser.g:1699:23: (ka= FTAND p_FTMildNot )*
            loop194:
            do {
                var alt194=2;
                var LA194_0 = this.input.LA(1);

                if ( (LA194_0==FTAND) ) {
                    alt194=1;
                }


                switch (alt194) {
                case 1 :
                    // xquery/XQueryParser.g:1699:25: ka= FTAND p_FTMildNot
                    ka=this.match(this.input,FTAND,XQueryParser.FOLLOW_FTAND_in_p_FTAnd13889); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ka_tree = this.adaptor.create(ka);
                    this.adaptor.addChild(root_0, ka_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(ka);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_FTMildNot_in_p_FTAnd13893);
                    p_FTMildNot641=this.p_FTMildNot();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMildNot641.getTree());


                    break;

                default :
                    break loop194;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTMildNot_return: (function() {
        XQueryParser.p_FTMildNot_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTMildNot_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1703:1: p_FTMildNot : p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* ;
    // $ANTLR start "p_FTMildNot"
    p_FTMildNot: function() {
        var retval = new XQueryParser.p_FTMildNot_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_FTUnaryNot642 = null;
         var p_FTUnaryNot643 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1704:9: ( p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )* )
            // xquery/XQueryParser.g:1704:11: p_FTUnaryNot (k+= NOT k+= IN p_FTUnaryNot )*
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_FTUnaryNot_in_p_FTMildNot13922);
            p_FTUnaryNot642=this.p_FTUnaryNot();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTUnaryNot642.getTree());
            // xquery/XQueryParser.g:1704:24: (k+= NOT k+= IN p_FTUnaryNot )*
            loop195:
            do {
                var alt195=2;
                var LA195_0 = this.input.LA(1);

                if ( (LA195_0==NOT) ) {
                    alt195=1;
                }


                switch (alt195) {
                case 1 :
                    // xquery/XQueryParser.g:1704:26: k+= NOT k+= IN p_FTUnaryNot
                    k=this.match(this.input,NOT,XQueryParser.FOLLOW_NOT_in_p_FTMildNot13928); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,IN,XQueryParser.FOLLOW_IN_in_p_FTMildNot13932); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    if ( this.state.backtracking===0 ) {
                      this.ak(list_k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_FTUnaryNot_in_p_FTMildNot13936);
                    p_FTUnaryNot643=this.p_FTUnaryNot();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTUnaryNot643.getTree());


                    break;

                default :
                    break loop195;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTUnaryNot_return: (function() {
        XQueryParser.p_FTUnaryNot_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTUnaryNot_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1708:1: p_FTUnaryNot : (kn= FTNOT )? p_FTPrimaryWithOptions ;
    // $ANTLR start "p_FTUnaryNot"
    p_FTUnaryNot: function() {
        var retval = new XQueryParser.p_FTUnaryNot_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var kn = null;
         var p_FTPrimaryWithOptions644 = null;

        var kn_tree=null;

        try {
            // xquery/XQueryParser.g:1709:9: ( (kn= FTNOT )? p_FTPrimaryWithOptions )
            // xquery/XQueryParser.g:1709:11: (kn= FTNOT )? p_FTPrimaryWithOptions
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1709:11: (kn= FTNOT )?
            var alt196=2;
            var LA196_0 = this.input.LA(1);

            if ( (LA196_0==FTNOT) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // xquery/XQueryParser.g:1709:13: kn= FTNOT
                    kn=this.match(this.input,FTNOT,XQueryParser.FOLLOW_FTNOT_in_p_FTUnaryNot13969); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    kn_tree = this.adaptor.create(kn);
                    this.adaptor.addChild(root_0, kn_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(kn);
                    }


                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot13976);
            p_FTPrimaryWithOptions644=this.p_FTPrimaryWithOptions();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTPrimaryWithOptions644.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTPrimaryWithOptions_return: (function() {
        XQueryParser.p_FTPrimaryWithOptions_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTPrimaryWithOptions_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1713:1: p_FTPrimaryWithOptions : p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? ;
    // $ANTLR start "p_FTPrimaryWithOptions"
    p_FTPrimaryWithOptions: function() {
        var retval = new XQueryParser.p_FTPrimaryWithOptions_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_FTPrimary645 = null;
         var p_FTMatchOptions646 = null;
         var p_FTWeight647 = null;


        try {
            // xquery/XQueryParser.g:1714:9: ( p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )? )
            // xquery/XQueryParser.g:1714:11: p_FTPrimary ( p_FTMatchOptions )? ( p_FTWeight )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions14002);
            p_FTPrimary645=this.p_FTPrimary();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTPrimary645.getTree());
            // xquery/XQueryParser.g:1714:23: ( p_FTMatchOptions )?
            var alt197=2;
            var LA197_0 = this.input.LA(1);

            if ( (LA197_0==USING) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // xquery/XQueryParser.g:1714:23: p_FTMatchOptions
                    this.pushFollow(XQueryParser.FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions14004);
                    p_FTMatchOptions646=this.p_FTMatchOptions();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMatchOptions646.getTree());


                    break;

            }

            // xquery/XQueryParser.g:1714:41: ( p_FTWeight )?
            var alt198=2;
            var LA198_0 = this.input.LA(1);

            if ( (LA198_0==WEIGHT) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // xquery/XQueryParser.g:1714:41: p_FTWeight
                    this.pushFollow(XQueryParser.FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions14007);
                    p_FTWeight647=this.p_FTWeight();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWeight647.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTPrimary_return: (function() {
        XQueryParser.p_FTPrimary_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTPrimary_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1721:1: p_FTPrimary : ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) | p_FTExtensionSelection );
    // $ANTLR start "p_FTPrimary"
    p_FTPrimary: function() {
        var retval = new XQueryParser.p_FTPrimary_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LPAREN650 = null;
        var RPAREN652 = null;
         var p_FTWords648 = null;
         var p_FTTimes649 = null;
         var p_FTSelection651 = null;
         var p_FTExtensionSelection653 = null;

        var LPAREN650_tree=null;
        var RPAREN652_tree=null;

        try {
            // xquery/XQueryParser.g:1722:9: ( ( p_FTWords ( p_FTTimes )? ) | ( LPAREN p_FTSelection RPAREN ) | p_FTExtensionSelection )
            var alt200=3;
            switch ( this.input.LA(1) ) {
            case LBRACKET:
            case APOS:
            case QUOT:
                alt200=1;
                break;
            case LPAREN:
                alt200=2;
                break;
            case L_Pragma:
                alt200=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 200, 0, this.input);

                throw nvae;
            }

            switch (alt200) {
                case 1 :
                    // xquery/XQueryParser.g:1722:11: ( p_FTWords ( p_FTTimes )? )
                    root_0 = this.adaptor.nil();

                    // xquery/XQueryParser.g:1722:11: ( p_FTWords ( p_FTTimes )? )
                    // xquery/XQueryParser.g:1722:12: p_FTWords ( p_FTTimes )?
                    this.pushFollow(XQueryParser.FOLLOW_p_FTWords_in_p_FTPrimary14038);
                    p_FTWords648=this.p_FTWords();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWords648.getTree());
                    // xquery/XQueryParser.g:1722:22: ( p_FTTimes )?
                    var alt199=2;
                    var LA199_0 = this.input.LA(1);

                    if ( (LA199_0==OCCURS) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // xquery/XQueryParser.g:1722:22: p_FTTimes
                            this.pushFollow(XQueryParser.FOLLOW_p_FTTimes_in_p_FTPrimary14040);
                            p_FTTimes649=this.p_FTTimes();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTTimes649.getTree());


                            break;

                    }






                    break;
                case 2 :
                    // xquery/XQueryParser.g:1723:11: ( LPAREN p_FTSelection RPAREN )
                    root_0 = this.adaptor.nil();

                    // xquery/XQueryParser.g:1723:11: ( LPAREN p_FTSelection RPAREN )
                    // xquery/XQueryParser.g:1723:12: LPAREN p_FTSelection RPAREN
                    LPAREN650=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_FTPrimary14055); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    LPAREN650_tree = this.adaptor.create(LPAREN650);
                    this.adaptor.addChild(root_0, LPAREN650_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_FTSelection_in_p_FTPrimary14057);
                    p_FTSelection651=this.p_FTSelection();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTSelection651.getTree());
                    RPAREN652=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_FTPrimary14059); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    RPAREN652_tree = this.adaptor.create(RPAREN652);
                    this.adaptor.addChild(root_0, RPAREN652_tree);
                    }





                    break;
                case 3 :
                    // xquery/XQueryParser.g:1724:11: p_FTExtensionSelection
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTExtensionSelection_in_p_FTPrimary14072);
                    p_FTExtensionSelection653=this.p_FTExtensionSelection();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTExtensionSelection653.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTWords_return: (function() {
        XQueryParser.p_FTWords_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTWords_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1728:1: p_FTWords : p_FTWordsValue ( p_FTAnyallOption )? ;
    // $ANTLR start "p_FTWords"
    p_FTWords: function() {
        var retval = new XQueryParser.p_FTWords_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_FTWordsValue654 = null;
         var p_FTAnyallOption655 = null;


        try {
            // xquery/XQueryParser.g:1729:9: ( p_FTWordsValue ( p_FTAnyallOption )? )
            // xquery/XQueryParser.g:1729:11: p_FTWordsValue ( p_FTAnyallOption )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_FTWordsValue_in_p_FTWords14098);
            p_FTWordsValue654=this.p_FTWordsValue();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWordsValue654.getTree());
            // xquery/XQueryParser.g:1729:26: ( p_FTAnyallOption )?
            var alt201=2;
            var LA201_0 = this.input.LA(1);

            if ( ((LA201_0>=ALL && LA201_0<=ANY)||LA201_0==PHRASE) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // xquery/XQueryParser.g:1729:26: p_FTAnyallOption
                    this.pushFollow(XQueryParser.FOLLOW_p_FTAnyallOption_in_p_FTWords14100);
                    p_FTAnyallOption655=this.p_FTAnyallOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTAnyallOption655.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTWordsValue_return: (function() {
        XQueryParser.p_FTWordsValue_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTWordsValue_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1733:1: p_FTWordsValue : ( p_StringLiteral | ( LBRACKET p_Expr[true,true] RBRACKET ) );
    // $ANTLR start "p_FTWordsValue"
    p_FTWordsValue: function() {
        var retval = new XQueryParser.p_FTWordsValue_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LBRACKET657 = null;
        var RBRACKET659 = null;
         var p_StringLiteral656 = null;
         var p_Expr658 = null;

        var LBRACKET657_tree=null;
        var RBRACKET659_tree=null;

        try {
            // xquery/XQueryParser.g:1734:9: ( p_StringLiteral | ( LBRACKET p_Expr[true,true] RBRACKET ) )
            var alt202=2;
            var LA202_0 = this.input.LA(1);

            if ( ((LA202_0>=APOS && LA202_0<=QUOT)) ) {
                alt202=1;
            }
            else if ( (LA202_0==LBRACKET) ) {
                alt202=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 202, 0, this.input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // xquery/XQueryParser.g:1734:11: p_StringLiteral
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTWordsValue14127);
                    p_StringLiteral656=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral656.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1735:11: ( LBRACKET p_Expr[true,true] RBRACKET )
                    root_0 = this.adaptor.nil();

                    // xquery/XQueryParser.g:1735:11: ( LBRACKET p_Expr[true,true] RBRACKET )
                    // xquery/XQueryParser.g:1735:12: LBRACKET p_Expr[true,true] RBRACKET
                    LBRACKET657=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_FTWordsValue14140); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    LBRACKET657_tree = this.adaptor.create(LBRACKET657);
                    this.adaptor.addChild(root_0, LBRACKET657_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_FTWordsValue14142);
                    p_Expr658=this.p_Expr(true, true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr658.getTree());
                    RBRACKET659=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_FTWordsValue14145); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    RBRACKET659_tree = this.adaptor.create(RBRACKET659);
                    this.adaptor.addChild(root_0, RBRACKET659_tree);
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTExtensionSelection_return: (function() {
        XQueryParser.p_FTExtensionSelection_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTExtensionSelection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1739:1: p_FTExtensionSelection : ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET ;
    // $ANTLR start "p_FTExtensionSelection"
    p_FTExtensionSelection: function() {
        var retval = new XQueryParser.p_FTExtensionSelection_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var L_Pragma660 = null;
        var LBRACKET661 = null;
        var RBRACKET663 = null;
         var p_FTSelection662 = null;

        var L_Pragma660_tree=null;
        var LBRACKET661_tree=null;
        var RBRACKET663_tree=null;

        try {
            // xquery/XQueryParser.g:1740:9: ( ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET )
            // xquery/XQueryParser.g:1740:11: ( L_Pragma )+ LBRACKET ( p_FTSelection )? RBRACKET
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1740:11: ( L_Pragma )+
            var cnt203=0;
            loop203:
            do {
                var alt203=2;
                var LA203_0 = this.input.LA(1);

                if ( (LA203_0==L_Pragma) ) {
                    alt203=1;
                }


                switch (alt203) {
                case 1 :
                    // xquery/XQueryParser.g:1740:11: L_Pragma
                    L_Pragma660=this.match(this.input,L_Pragma,XQueryParser.FOLLOW_L_Pragma_in_p_FTExtensionSelection14172); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    L_Pragma660_tree = this.adaptor.create(L_Pragma660);
                    this.adaptor.addChild(root_0, L_Pragma660_tree);
                    }


                    break;

                default :
                    if ( cnt203 >= 1 ) {
                        break loop203;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(203, this.input);
                        throw eee;
                }
                cnt203++;
            } while (true);

            LBRACKET661=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_FTExtensionSelection14175); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET661_tree = this.adaptor.create(LBRACKET661);
            this.adaptor.addChild(root_0, LBRACKET661_tree);
            }
            // xquery/XQueryParser.g:1740:30: ( p_FTSelection )?
            var alt204=2;
            var LA204_0 = this.input.LA(1);

            if ( (LA204_0==FTNOT||LA204_0==LPAREN||LA204_0==LBRACKET||(LA204_0>=APOS && LA204_0<=QUOT)||LA204_0==L_Pragma) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // xquery/XQueryParser.g:1740:30: p_FTSelection
                    this.pushFollow(XQueryParser.FOLLOW_p_FTSelection_in_p_FTExtensionSelection14177);
                    p_FTSelection662=this.p_FTSelection();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTSelection662.getTree());


                    break;

            }

            RBRACKET663=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_FTExtensionSelection14180); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET663_tree = this.adaptor.create(RBRACKET663);
            this.adaptor.addChild(root_0, RBRACKET663_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTAnyallOption_return: (function() {
        XQueryParser.p_FTAnyallOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTAnyallOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1744:1: p_FTAnyallOption : ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE ) ;
    // $ANTLR start "p_FTAnyallOption"
    p_FTAnyallOption: function() {
        var retval = new XQueryParser.p_FTAnyallOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var WORDS664 = null;
        var k = null;
        var list_k=null;

        var WORDS664_tree=null;
        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1745:9: ( ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE ) )
            // xquery/XQueryParser.g:1745:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1745:11: ( (k+= ANY (k+= WORD )? ) | (k+= ALL ( WORDS )? ) | k+= PHRASE )
            var alt207=3;
            switch ( this.input.LA(1) ) {
            case ANY:
                alt207=1;
                break;
            case ALL:
                alt207=2;
                break;
            case PHRASE:
                alt207=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 207, 0, this.input);

                throw nvae;
            }

            switch (alt207) {
                case 1 :
                    // xquery/XQueryParser.g:1745:13: (k+= ANY (k+= WORD )? )
                    // xquery/XQueryParser.g:1745:13: (k+= ANY (k+= WORD )? )
                    // xquery/XQueryParser.g:1745:14: k+= ANY (k+= WORD )?
                    k=this.match(this.input,ANY,XQueryParser.FOLLOW_ANY_in_p_FTAnyallOption14211); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    // xquery/XQueryParser.g:1745:22: (k+= WORD )?
                    var alt205=2;
                    var LA205_0 = this.input.LA(1);

                    if ( (LA205_0==WORD) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            // xquery/XQueryParser.g:1745:22: k+= WORD
                            k=this.match(this.input,WORD,XQueryParser.FOLLOW_WORD_in_p_FTAnyallOption14215); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            k_tree = this.adaptor.create(k);
                            this.adaptor.addChild(root_0, k_tree);
                            }
                            if (org.antlr.lang.isNull(list_k)) list_k = [];
                            list_k.push(k);



                            break;

                    }






                    break;
                case 2 :
                    // xquery/XQueryParser.g:1745:33: (k+= ALL ( WORDS )? )
                    // xquery/XQueryParser.g:1745:33: (k+= ALL ( WORDS )? )
                    // xquery/XQueryParser.g:1745:34: k+= ALL ( WORDS )?
                    k=this.match(this.input,ALL,XQueryParser.FOLLOW_ALL_in_p_FTAnyallOption14224); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    // xquery/XQueryParser.g:1745:41: ( WORDS )?
                    var alt206=2;
                    var LA206_0 = this.input.LA(1);

                    if ( (LA206_0==WORDS) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // xquery/XQueryParser.g:1745:41: WORDS
                            WORDS664=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTAnyallOption14226); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            WORDS664_tree = this.adaptor.create(WORDS664);
                            this.adaptor.addChild(root_0, WORDS664_tree);
                            }


                            break;

                    }






                    break;
                case 3 :
                    // xquery/XQueryParser.g:1745:51: k+= PHRASE
                    k=this.match(this.input,PHRASE,XQueryParser.FOLLOW_PHRASE_in_p_FTAnyallOption14234); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTTimes_return: (function() {
        XQueryParser.p_FTTimes_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTTimes_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1749:1: p_FTTimes : k+= OCCURS p_FTRange k+= TIMES ;
    // $ANTLR start "p_FTTimes"
    p_FTTimes: function() {
        var retval = new XQueryParser.p_FTTimes_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_FTRange665 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1750:9: (k+= OCCURS p_FTRange k+= TIMES )
            // xquery/XQueryParser.g:1750:11: k+= OCCURS p_FTRange k+= TIMES
            root_0 = this.adaptor.nil();

            k=this.match(this.input,OCCURS,XQueryParser.FOLLOW_OCCURS_in_p_FTTimes14266); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            this.pushFollow(XQueryParser.FOLLOW_p_FTRange_in_p_FTTimes14268);
            p_FTRange665=this.p_FTRange();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTRange665.getTree());
            k=this.match(this.input,TIMES,XQueryParser.FOLLOW_TIMES_in_p_FTTimes14272); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTRange_return: (function() {
        XQueryParser.p_FTRange_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTRange_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1754:1: p_FTRange : ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) ;
    // $ANTLR start "p_FTRange"
    p_FTRange: function() {
        var retval = new XQueryParser.p_FTRange_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_AdditiveExpr666 = null;
         var p_AdditiveExpr667 = null;
         var p_AdditiveExpr668 = null;
         var p_AdditiveExpr669 = null;
         var p_AdditiveExpr670 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1755:9: ( ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) ) )
            // xquery/XQueryParser.g:1755:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1755:11: ( (k+= EXACTLY p_AdditiveExpr ) | (k+= AT k+= LEAST p_AdditiveExpr ) | (k+= AT k+= MOST p_AdditiveExpr ) | (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr ) )
            var alt208=4;
            switch ( this.input.LA(1) ) {
            case EXACTLY:
                alt208=1;
                break;
            case AT:
                var LA208_2 = this.input.LA(2);

                if ( (LA208_2==LEAST) ) {
                    alt208=2;
                }
                else if ( (LA208_2==MOST) ) {
                    alt208=3;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 208, 2, this.input);

                    throw nvae;
                }
                break;
            case FROM:
                alt208=4;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 208, 0, this.input);

                throw nvae;
            }

            switch (alt208) {
                case 1 :
                    // xquery/XQueryParser.g:1755:13: (k+= EXACTLY p_AdditiveExpr )
                    // xquery/XQueryParser.g:1755:13: (k+= EXACTLY p_AdditiveExpr )
                    // xquery/XQueryParser.g:1755:14: k+= EXACTLY p_AdditiveExpr
                    k=this.match(this.input,EXACTLY,XQueryParser.FOLLOW_EXACTLY_in_p_FTRange14305); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14307);
                    p_AdditiveExpr666=this.p_AdditiveExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr666.getTree());





                    break;
                case 2 :
                    // xquery/XQueryParser.g:1756:13: (k+= AT k+= LEAST p_AdditiveExpr )
                    // xquery/XQueryParser.g:1756:13: (k+= AT k+= LEAST p_AdditiveExpr )
                    // xquery/XQueryParser.g:1756:14: k+= AT k+= LEAST p_AdditiveExpr
                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTRange14325); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,LEAST,XQueryParser.FOLLOW_LEAST_in_p_FTRange14329); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14331);
                    p_AdditiveExpr667=this.p_AdditiveExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr667.getTree());





                    break;
                case 3 :
                    // xquery/XQueryParser.g:1757:13: (k+= AT k+= MOST p_AdditiveExpr )
                    // xquery/XQueryParser.g:1757:13: (k+= AT k+= MOST p_AdditiveExpr )
                    // xquery/XQueryParser.g:1757:14: k+= AT k+= MOST p_AdditiveExpr
                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTRange14349); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,MOST,XQueryParser.FOLLOW_MOST_in_p_FTRange14353); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14355);
                    p_AdditiveExpr668=this.p_AdditiveExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr668.getTree());





                    break;
                case 4 :
                    // xquery/XQueryParser.g:1758:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
                    // xquery/XQueryParser.g:1758:13: (k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr )
                    // xquery/XQueryParser.g:1758:14: k+= FROM p_AdditiveExpr k+= TO p_AdditiveExpr
                    k=this.match(this.input,FROM,XQueryParser.FOLLOW_FROM_in_p_FTRange14373); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14375);
                    p_AdditiveExpr669=this.p_AdditiveExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr669.getTree());
                    k=this.match(this.input,TO,XQueryParser.FOLLOW_TO_in_p_FTRange14379); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTRange14381);
                    p_AdditiveExpr670=this.p_AdditiveExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr670.getTree());





                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTPosFilter_return: (function() {
        XQueryParser.p_FTPosFilter_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTPosFilter_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1762:1: p_FTPosFilter : ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent );
    // $ANTLR start "p_FTPosFilter"
    p_FTPosFilter: function() {
        var retval = new XQueryParser.p_FTPosFilter_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_FTOrder671 = null;
         var p_FTWindow672 = null;
         var p_FTDistance673 = null;
         var p_FTScope674 = null;
         var p_FTContent675 = null;


        try {
            // xquery/XQueryParser.g:1763:9: ( p_FTOrder | p_FTWindow | p_FTDistance | p_FTScope | p_FTContent )
            var alt209=5;
            switch ( this.input.LA(1) ) {
            case ORDERED:
                alt209=1;
                break;
            case WINDOW:
                alt209=2;
                break;
            case DISTANCE:
                alt209=3;
                break;
            case DIFFERENT:
            case SAME:
                alt209=4;
                break;
            case AT:
            case ENTIRE:
                alt209=5;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 209, 0, this.input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // xquery/XQueryParser.g:1763:11: p_FTOrder
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTOrder_in_p_FTPosFilter14412);
                    p_FTOrder671=this.p_FTOrder();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTOrder671.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1763:23: p_FTWindow
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTWindow_in_p_FTPosFilter14416);
                    p_FTWindow672=this.p_FTWindow();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWindow672.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1763:36: p_FTDistance
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTDistance_in_p_FTPosFilter14420);
                    p_FTDistance673=this.p_FTDistance();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTDistance673.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:1763:51: p_FTScope
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTScope_in_p_FTPosFilter14424);
                    p_FTScope674=this.p_FTScope();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTScope674.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:1763:63: p_FTContent
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTContent_in_p_FTPosFilter14428);
                    p_FTContent675=this.p_FTContent();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTContent675.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTOrder_return: (function() {
        XQueryParser.p_FTOrder_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTOrder_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1767:1: p_FTOrder : ko= ORDERED ;
    // $ANTLR start "p_FTOrder"
    p_FTOrder: function() {
        var retval = new XQueryParser.p_FTOrder_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ko = null;

        var ko_tree=null;

        try {
            // xquery/XQueryParser.g:1768:9: (ko= ORDERED )
            // xquery/XQueryParser.g:1768:11: ko= ORDERED
            root_0 = this.adaptor.nil();

            ko=this.match(this.input,ORDERED,XQueryParser.FOLLOW_ORDERED_in_p_FTOrder14456); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            ko_tree = this.adaptor.create(ko);
            this.adaptor.addChild(root_0, ko_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(ko);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTWindow_return: (function() {
        XQueryParser.p_FTWindow_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTWindow_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1772:1: p_FTWindow : kw= WINDOW p_AdditiveExpr p_FTUnit ;
    // $ANTLR start "p_FTWindow"
    p_FTWindow: function() {
        var retval = new XQueryParser.p_FTWindow_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var kw = null;
         var p_AdditiveExpr676 = null;
         var p_FTUnit677 = null;

        var kw_tree=null;

        try {
            // xquery/XQueryParser.g:1773:9: (kw= WINDOW p_AdditiveExpr p_FTUnit )
            // xquery/XQueryParser.g:1773:11: kw= WINDOW p_AdditiveExpr p_FTUnit
            root_0 = this.adaptor.nil();

            kw=this.match(this.input,WINDOW,XQueryParser.FOLLOW_WINDOW_in_p_FTWindow14486); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            kw_tree = this.adaptor.create(kw);
            this.adaptor.addChild(root_0, kw_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(kw);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_AdditiveExpr_in_p_FTWindow14490);
            p_AdditiveExpr676=this.p_AdditiveExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AdditiveExpr676.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_FTUnit_in_p_FTWindow14492);
            p_FTUnit677=this.p_FTUnit();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTUnit677.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTDistance_return: (function() {
        XQueryParser.p_FTDistance_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTDistance_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1777:1: p_FTDistance : kd= DISTANCE p_FTRange p_FTUnit ;
    // $ANTLR start "p_FTDistance"
    p_FTDistance: function() {
        var retval = new XQueryParser.p_FTDistance_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var kd = null;
         var p_FTRange678 = null;
         var p_FTUnit679 = null;

        var kd_tree=null;

        try {
            // xquery/XQueryParser.g:1778:9: (kd= DISTANCE p_FTRange p_FTUnit )
            // xquery/XQueryParser.g:1778:11: kd= DISTANCE p_FTRange p_FTUnit
            root_0 = this.adaptor.nil();

            kd=this.match(this.input,DISTANCE,XQueryParser.FOLLOW_DISTANCE_in_p_FTDistance14520); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            kd_tree = this.adaptor.create(kd);
            this.adaptor.addChild(root_0, kd_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(kd);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_FTRange_in_p_FTDistance14524);
            p_FTRange678=this.p_FTRange();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTRange678.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_FTUnit_in_p_FTDistance14526);
            p_FTUnit679=this.p_FTUnit();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTUnit679.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTUnit_return: (function() {
        XQueryParser.p_FTUnit_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTUnit_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1782:1: p_FTUnit : (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS ) ;
    // $ANTLR start "p_FTUnit"
    p_FTUnit: function() {
        var retval = new XQueryParser.p_FTUnit_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1783:9: ( (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS ) )
            // xquery/XQueryParser.g:1783:11: (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1783:11: (k+= WORDS | k+= SENTENCES | k+= PARAGRAPHS )
            var alt210=3;
            switch ( this.input.LA(1) ) {
            case WORDS:
                alt210=1;
                break;
            case SENTENCES:
                alt210=2;
                break;
            case PARAGRAPHS:
                alt210=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 210, 0, this.input);

                throw nvae;
            }

            switch (alt210) {
                case 1 :
                    // xquery/XQueryParser.g:1783:13: k+= WORDS
                    k=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTUnit14556); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1783:24: k+= SENTENCES
                    k=this.match(this.input,SENTENCES,XQueryParser.FOLLOW_SENTENCES_in_p_FTUnit14562); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 3 :
                    // xquery/XQueryParser.g:1783:39: k+= PARAGRAPHS
                    k=this.match(this.input,PARAGRAPHS,XQueryParser.FOLLOW_PARAGRAPHS_in_p_FTUnit14568); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTScope_return: (function() {
        XQueryParser.p_FTScope_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTScope_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1787:1: p_FTScope : (k+= SAME | k+= DIFFERENT ) p_FTBigUnit ;
    // $ANTLR start "p_FTScope"
    p_FTScope: function() {
        var retval = new XQueryParser.p_FTScope_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_FTBigUnit680 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1788:9: ( (k+= SAME | k+= DIFFERENT ) p_FTBigUnit )
            // xquery/XQueryParser.g:1788:11: (k+= SAME | k+= DIFFERENT ) p_FTBigUnit
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1788:11: (k+= SAME | k+= DIFFERENT )
            var alt211=2;
            var LA211_0 = this.input.LA(1);

            if ( (LA211_0==SAME) ) {
                alt211=1;
            }
            else if ( (LA211_0==DIFFERENT) ) {
                alt211=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 211, 0, this.input);

                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    // xquery/XQueryParser.g:1788:12: k+= SAME
                    k=this.match(this.input,SAME,XQueryParser.FOLLOW_SAME_in_p_FTScope14601); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1788:22: k+= DIFFERENT
                    k=this.match(this.input,DIFFERENT,XQueryParser.FOLLOW_DIFFERENT_in_p_FTScope14607); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_FTBigUnit_in_p_FTScope14612);
            p_FTBigUnit680=this.p_FTBigUnit();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTBigUnit680.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTBigUnit_return: (function() {
        XQueryParser.p_FTBigUnit_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTBigUnit_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1792:1: p_FTBigUnit : (k+= SENTENCE | k+= PARAGRAPH ) ;
    // $ANTLR start "p_FTBigUnit"
    p_FTBigUnit: function() {
        var retval = new XQueryParser.p_FTBigUnit_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1793:9: ( (k+= SENTENCE | k+= PARAGRAPH ) )
            // xquery/XQueryParser.g:1793:11: (k+= SENTENCE | k+= PARAGRAPH )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1793:11: (k+= SENTENCE | k+= PARAGRAPH )
            var alt212=2;
            var LA212_0 = this.input.LA(1);

            if ( (LA212_0==SENTENCE) ) {
                alt212=1;
            }
            else if ( (LA212_0==PARAGRAPH) ) {
                alt212=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 212, 0, this.input);

                throw nvae;
            }
            switch (alt212) {
                case 1 :
                    // xquery/XQueryParser.g:1793:13: k+= SENTENCE
                    k=this.match(this.input,SENTENCE,XQueryParser.FOLLOW_SENTENCE_in_p_FTBigUnit14642); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1793:27: k+= PARAGRAPH
                    k=this.match(this.input,PARAGRAPH,XQueryParser.FOLLOW_PARAGRAPH_in_p_FTBigUnit14648); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTContent_return: (function() {
        XQueryParser.p_FTContent_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTContent_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1797:1: p_FTContent : ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) ;
    // $ANTLR start "p_FTContent"
    p_FTContent: function() {
        var retval = new XQueryParser.p_FTContent_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1798:9: ( ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) ) )
            // xquery/XQueryParser.g:1798:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1798:11: ( (k+= AT k+= START ) | (k+= AT k+= END ) | (k+= ENTIRE k+= CONTENT ) )
            var alt213=3;
            var LA213_0 = this.input.LA(1);

            if ( (LA213_0==AT) ) {
                var LA213_1 = this.input.LA(2);

                if ( (LA213_1==START) ) {
                    alt213=1;
                }
                else if ( (LA213_1==END) ) {
                    alt213=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 213, 1, this.input);

                    throw nvae;
                }
            }
            else if ( (LA213_0==ENTIRE) ) {
                alt213=3;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 213, 0, this.input);

                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    // xquery/XQueryParser.g:1798:13: (k+= AT k+= START )
                    // xquery/XQueryParser.g:1798:13: (k+= AT k+= START )
                    // xquery/XQueryParser.g:1798:14: k+= AT k+= START
                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTContent14683); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,START,XQueryParser.FOLLOW_START_in_p_FTContent14687); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;
                case 2 :
                    // xquery/XQueryParser.g:1798:32: (k+= AT k+= END )
                    // xquery/XQueryParser.g:1798:32: (k+= AT k+= END )
                    // xquery/XQueryParser.g:1798:33: k+= AT k+= END
                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTContent14695); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,END,XQueryParser.FOLLOW_END_in_p_FTContent14699); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;
                case 3 :
                    // xquery/XQueryParser.g:1798:49: (k+= ENTIRE k+= CONTENT )
                    // xquery/XQueryParser.g:1798:49: (k+= ENTIRE k+= CONTENT )
                    // xquery/XQueryParser.g:1798:50: k+= ENTIRE k+= CONTENT
                    k=this.match(this.input,ENTIRE,XQueryParser.FOLLOW_ENTIRE_in_p_FTContent14707); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,CONTENT,XQueryParser.FOLLOW_CONTENT_in_p_FTContent14711); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTMatchOptions_return: (function() {
        XQueryParser.p_FTMatchOptions_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTMatchOptions_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1802:1: p_FTMatchOptions : (ku= USING p_FTMatchOption )+ ;
    // $ANTLR start "p_FTMatchOptions"
    p_FTMatchOptions: function() {
        var retval = new XQueryParser.p_FTMatchOptions_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ku = null;
         var p_FTMatchOption681 = null;

        var ku_tree=null;

        try {
            // xquery/XQueryParser.g:1803:9: ( (ku= USING p_FTMatchOption )+ )
            // xquery/XQueryParser.g:1803:11: (ku= USING p_FTMatchOption )+
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1803:11: (ku= USING p_FTMatchOption )+
            var cnt214=0;
            loop214:
            do {
                var alt214=2;
                var LA214_0 = this.input.LA(1);

                if ( (LA214_0==USING) ) {
                    alt214=1;
                }


                switch (alt214) {
                case 1 :
                    // xquery/XQueryParser.g:1803:12: ku= USING p_FTMatchOption
                    ku=this.match(this.input,USING,XQueryParser.FOLLOW_USING_in_p_FTMatchOptions14745); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ku_tree = this.adaptor.create(ku);
                    this.adaptor.addChild(root_0, ku_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(ku);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_FTMatchOption_in_p_FTMatchOptions14749);
                    p_FTMatchOption681=this.p_FTMatchOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTMatchOption681.getTree());


                    break;

                default :
                    if ( cnt214 >= 1 ) {
                        break loop214;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(214, this.input);
                        throw eee;
                }
                cnt214++;
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTMatchOption_return: (function() {
        XQueryParser.p_FTMatchOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTMatchOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1807:1: p_FTMatchOption : ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption );
    // $ANTLR start "p_FTMatchOption"
    p_FTMatchOption: function() {
        var retval = new XQueryParser.p_FTMatchOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_FTLanguageOption682 = null;
         var p_FTWildCardOption683 = null;
         var p_FTThesaurusOption684 = null;
         var p_FTStemOption685 = null;
         var p_FTCaseOption686 = null;
         var p_FTDiacriticsOption687 = null;
         var p_FTStopWordOption688 = null;
         var p_FTExtensionOption689 = null;


        try {
            // xquery/XQueryParser.g:1808:9: ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption )
            var alt215=8;
            alt215 = this.dfa215.predict(this.input);
            switch (alt215) {
                case 1 :
                    // xquery/XQueryParser.g:1808:11: p_FTLanguageOption
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTLanguageOption_in_p_FTMatchOption14777);
                    p_FTLanguageOption682=this.p_FTLanguageOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTLanguageOption682.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1809:11: p_FTWildCardOption
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTWildCardOption_in_p_FTMatchOption14789);
                    p_FTWildCardOption683=this.p_FTWildCardOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTWildCardOption683.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1810:11: p_FTThesaurusOption
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption14801);
                    p_FTThesaurusOption684=this.p_FTThesaurusOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTThesaurusOption684.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:1811:11: p_FTStemOption
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTStemOption_in_p_FTMatchOption14813);
                    p_FTStemOption685=this.p_FTStemOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStemOption685.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:1812:11: p_FTCaseOption
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTCaseOption_in_p_FTMatchOption14825);
                    p_FTCaseOption686=this.p_FTCaseOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTCaseOption686.getTree());


                    break;
                case 6 :
                    // xquery/XQueryParser.g:1813:11: p_FTDiacriticsOption
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption14837);
                    p_FTDiacriticsOption687=this.p_FTDiacriticsOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTDiacriticsOption687.getTree());


                    break;
                case 7 :
                    // xquery/XQueryParser.g:1814:11: p_FTStopWordOption
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTStopWordOption_in_p_FTMatchOption14849);
                    p_FTStopWordOption688=this.p_FTStopWordOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWordOption688.getTree());


                    break;
                case 8 :
                    // xquery/XQueryParser.g:1815:11: p_FTExtensionOption
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_FTExtensionOption_in_p_FTMatchOption14861);
                    p_FTExtensionOption689=this.p_FTExtensionOption();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTExtensionOption689.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTCaseOption_return: (function() {
        XQueryParser.p_FTCaseOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTCaseOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1819:1: p_FTCaseOption : ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE ) ;
    // $ANTLR start "p_FTCaseOption"
    p_FTCaseOption: function() {
        var retval = new XQueryParser.p_FTCaseOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1820:9: ( ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE ) )
            // xquery/XQueryParser.g:1820:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1820:11: ( (k+= CASE k+= INSENSITIVE ) | (k+= CASE k+= SENSITIVE ) | k+= LOWERCASE | k+= UPPERCASE )
            var alt216=4;
            switch ( this.input.LA(1) ) {
            case CASE:
                var LA216_1 = this.input.LA(2);

                if ( (LA216_1==INSENSITIVE) ) {
                    alt216=1;
                }
                else if ( (LA216_1==SENSITIVE) ) {
                    alt216=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 216, 1, this.input);

                    throw nvae;
                }
                break;
            case LOWERCASE:
                alt216=3;
                break;
            case UPPERCASE:
                alt216=4;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 216, 0, this.input);

                throw nvae;
            }

            switch (alt216) {
                case 1 :
                    // xquery/XQueryParser.g:1820:13: (k+= CASE k+= INSENSITIVE )
                    // xquery/XQueryParser.g:1820:13: (k+= CASE k+= INSENSITIVE )
                    // xquery/XQueryParser.g:1820:14: k+= CASE k+= INSENSITIVE
                    k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_FTCaseOption14892); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,INSENSITIVE,XQueryParser.FOLLOW_INSENSITIVE_in_p_FTCaseOption14896); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;
                case 2 :
                    // xquery/XQueryParser.g:1821:13: (k+= CASE k+= SENSITIVE )
                    // xquery/XQueryParser.g:1821:13: (k+= CASE k+= SENSITIVE )
                    // xquery/XQueryParser.g:1821:14: k+= CASE k+= SENSITIVE
                    k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_FTCaseOption14914); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,SENSITIVE,XQueryParser.FOLLOW_SENSITIVE_in_p_FTCaseOption14918); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;
                case 3 :
                    // xquery/XQueryParser.g:1822:13: k+= LOWERCASE
                    k=this.match(this.input,LOWERCASE,XQueryParser.FOLLOW_LOWERCASE_in_p_FTCaseOption14935); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 4 :
                    // xquery/XQueryParser.g:1823:13: k+= UPPERCASE
                    k=this.match(this.input,UPPERCASE,XQueryParser.FOLLOW_UPPERCASE_in_p_FTCaseOption14951); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTDiacriticsOption_return: (function() {
        XQueryParser.p_FTDiacriticsOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTDiacriticsOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1827:1: p_FTDiacriticsOption : ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) ;
    // $ANTLR start "p_FTDiacriticsOption"
    p_FTDiacriticsOption: function() {
        var retval = new XQueryParser.p_FTDiacriticsOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1828:9: ( ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) ) )
            // xquery/XQueryParser.g:1828:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1828:11: ( (k+= DIACRITICS k+= INSENSITIVE ) | (k+= DIACRITICS k+= SENSITIVE ) )
            var alt217=2;
            var LA217_0 = this.input.LA(1);

            if ( (LA217_0==DIACRITICS) ) {
                var LA217_1 = this.input.LA(2);

                if ( (LA217_1==INSENSITIVE) ) {
                    alt217=1;
                }
                else if ( (LA217_1==SENSITIVE) ) {
                    alt217=2;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 217, 1, this.input);

                    throw nvae;
                }
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 217, 0, this.input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // xquery/XQueryParser.g:1828:13: (k+= DIACRITICS k+= INSENSITIVE )
                    // xquery/XQueryParser.g:1828:13: (k+= DIACRITICS k+= INSENSITIVE )
                    // xquery/XQueryParser.g:1828:14: k+= DIACRITICS k+= INSENSITIVE
                    k=this.match(this.input,DIACRITICS,XQueryParser.FOLLOW_DIACRITICS_in_p_FTDiacriticsOption14986); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,INSENSITIVE,XQueryParser.FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption14990); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;
                case 2 :
                    // xquery/XQueryParser.g:1829:13: (k+= DIACRITICS k+= SENSITIVE )
                    // xquery/XQueryParser.g:1829:13: (k+= DIACRITICS k+= SENSITIVE )
                    // xquery/XQueryParser.g:1829:14: k+= DIACRITICS k+= SENSITIVE
                    k=this.match(this.input,DIACRITICS,XQueryParser.FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15008); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,SENSITIVE,XQueryParser.FOLLOW_SENSITIVE_in_p_FTDiacriticsOption15012); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTStemOption_return: (function() {
        XQueryParser.p_FTStemOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTStemOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1833:1: p_FTStemOption : (k+= STEMMING | (k+= NO k+= STEMMING ) ) ;
    // $ANTLR start "p_FTStemOption"
    p_FTStemOption: function() {
        var retval = new XQueryParser.p_FTStemOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1834:9: ( (k+= STEMMING | (k+= NO k+= STEMMING ) ) )
            // xquery/XQueryParser.g:1834:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1834:11: (k+= STEMMING | (k+= NO k+= STEMMING ) )
            var alt218=2;
            var LA218_0 = this.input.LA(1);

            if ( (LA218_0==STEMMING) ) {
                alt218=1;
            }
            else if ( (LA218_0==NO) ) {
                alt218=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 218, 0, this.input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // xquery/XQueryParser.g:1834:13: k+= STEMMING
                    k=this.match(this.input,STEMMING,XQueryParser.FOLLOW_STEMMING_in_p_FTStemOption15047); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1834:27: (k+= NO k+= STEMMING )
                    // xquery/XQueryParser.g:1834:27: (k+= NO k+= STEMMING )
                    // xquery/XQueryParser.g:1834:28: k+= NO k+= STEMMING
                    k=this.match(this.input,NO,XQueryParser.FOLLOW_NO_in_p_FTStemOption15054); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,STEMMING,XQueryParser.FOLLOW_STEMMING_in_p_FTStemOption15058); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTThesaurusOption_return: (function() {
        XQueryParser.p_FTThesaurusOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTThesaurusOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1838:1: p_FTThesaurusOption : ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) ;
    // $ANTLR start "p_FTThesaurusOption"
    p_FTThesaurusOption: function() {
        var retval = new XQueryParser.p_FTThesaurusOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LPAREN691 = null;
        var COMMA693 = null;
        var RPAREN695 = null;
        var k = null;
        var list_k=null;
         var p_FTThesaurusID690 = null;
         var p_FTThesaurusID692 = null;
         var p_FTThesaurusID694 = null;

        var LPAREN691_tree=null;
        var COMMA693_tree=null;
        var RPAREN695_tree=null;
        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1839:9: ( ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) ) )
            // xquery/XQueryParser.g:1839:11: ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1839:11: ( (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) ) | (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN ) | (k+= NO k+= THESAURUS ) )
            var alt222=3;
            var LA222_0 = this.input.LA(1);

            if ( (LA222_0==THESAURUS) ) {
                var LA222_1 = this.input.LA(2);

                if ( (LA222_1==LPAREN) ) {
                    alt222=2;
                }
                else if ( (LA222_1==AT||LA222_1==DEFAULT) ) {
                    alt222=1;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 222, 1, this.input);

                    throw nvae;
                }
            }
            else if ( (LA222_0==NO) ) {
                alt222=3;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 222, 0, this.input);

                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    // xquery/XQueryParser.g:1839:13: (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) )
                    // xquery/XQueryParser.g:1839:13: (k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT ) )
                    // xquery/XQueryParser.g:1839:14: k+= THESAURUS ( p_FTThesaurusID | k+= DEFAULT )
                    k=this.match(this.input,THESAURUS,XQueryParser.FOLLOW_THESAURUS_in_p_FTThesaurusOption15094); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    // xquery/XQueryParser.g:1839:27: ( p_FTThesaurusID | k+= DEFAULT )
                    var alt219=2;
                    var LA219_0 = this.input.LA(1);

                    if ( (LA219_0==AT) ) {
                        alt219=1;
                    }
                    else if ( (LA219_0==DEFAULT) ) {
                        alt219=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 219, 0, this.input);

                        throw nvae;
                    }
                    switch (alt219) {
                        case 1 :
                            // xquery/XQueryParser.g:1839:28: p_FTThesaurusID
                            this.pushFollow(XQueryParser.FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15097);
                            p_FTThesaurusID690=this.p_FTThesaurusID();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTThesaurusID690.getTree());


                            break;
                        case 2 :
                            // xquery/XQueryParser.g:1839:46: k+= DEFAULT
                            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_FTThesaurusOption15103); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            k_tree = this.adaptor.create(k);
                            this.adaptor.addChild(root_0, k_tree);
                            }
                            if (org.antlr.lang.isNull(list_k)) list_k = [];
                            list_k.push(k);



                            break;

                    }






                    break;
                case 2 :
                    // xquery/XQueryParser.g:1840:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
                    // xquery/XQueryParser.g:1840:13: (k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN )
                    // xquery/XQueryParser.g:1840:14: k+= THESAURUS LPAREN ( p_FTThesaurusID | k+= DEFAULT ) ( COMMA p_FTThesaurusID )* RPAREN
                    k=this.match(this.input,THESAURUS,XQueryParser.FOLLOW_THESAURUS_in_p_FTThesaurusOption15122); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    LPAREN691=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_FTThesaurusOption15124); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    LPAREN691_tree = this.adaptor.create(LPAREN691);
                    this.adaptor.addChild(root_0, LPAREN691_tree);
                    }
                    // xquery/XQueryParser.g:1840:34: ( p_FTThesaurusID | k+= DEFAULT )
                    var alt220=2;
                    var LA220_0 = this.input.LA(1);

                    if ( (LA220_0==AT) ) {
                        alt220=1;
                    }
                    else if ( (LA220_0==DEFAULT) ) {
                        alt220=2;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 220, 0, this.input);

                        throw nvae;
                    }
                    switch (alt220) {
                        case 1 :
                            // xquery/XQueryParser.g:1840:35: p_FTThesaurusID
                            this.pushFollow(XQueryParser.FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15127);
                            p_FTThesaurusID692=this.p_FTThesaurusID();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTThesaurusID692.getTree());


                            break;
                        case 2 :
                            // xquery/XQueryParser.g:1840:53: k+= DEFAULT
                            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_FTThesaurusOption15133); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            k_tree = this.adaptor.create(k);
                            this.adaptor.addChild(root_0, k_tree);
                            }
                            if (org.antlr.lang.isNull(list_k)) list_k = [];
                            list_k.push(k);



                            break;

                    }

                    // xquery/XQueryParser.g:1840:65: ( COMMA p_FTThesaurusID )*
                    loop221:
                    do {
                        var alt221=2;
                        var LA221_0 = this.input.LA(1);

                        if ( (LA221_0==COMMA) ) {
                            alt221=1;
                        }


                        switch (alt221) {
                        case 1 :
                            // xquery/XQueryParser.g:1840:66: COMMA p_FTThesaurusID
                            COMMA693=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_FTThesaurusOption15137); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            COMMA693_tree = this.adaptor.create(COMMA693);
                            this.adaptor.addChild(root_0, COMMA693_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15139);
                            p_FTThesaurusID694=this.p_FTThesaurusID();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTThesaurusID694.getTree());


                            break;

                        default :
                            break loop221;
                        }
                    } while (true);

                    RPAREN695=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_FTThesaurusOption15143); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    RPAREN695_tree = this.adaptor.create(RPAREN695);
                    this.adaptor.addChild(root_0, RPAREN695_tree);
                    }





                    break;
                case 3 :
                    // xquery/XQueryParser.g:1841:13: (k+= NO k+= THESAURUS )
                    // xquery/XQueryParser.g:1841:13: (k+= NO k+= THESAURUS )
                    // xquery/XQueryParser.g:1841:14: k+= NO k+= THESAURUS
                    k=this.match(this.input,NO,XQueryParser.FOLLOW_NO_in_p_FTThesaurusOption15161); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,THESAURUS,XQueryParser.FOLLOW_THESAURUS_in_p_FTThesaurusOption15165); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTThesaurusID_return: (function() {
        XQueryParser.p_FTThesaurusID_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTThesaurusID_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1845:1: p_FTThesaurusID : k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? ;
    // $ANTLR start "p_FTThesaurusID"
    p_FTThesaurusID: function() {
        var retval = new XQueryParser.p_FTThesaurusID_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_StringLiteral696 = null;
         var p_StringLiteral697 = null;
         var p_FTLiteralRange698 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1846:9: (k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )? )
            // xquery/XQueryParser.g:1846:11: k+= AT p_StringLiteral (k+= RELATIONSHIP p_StringLiteral )? ( p_FTLiteralRange k+= LEVELS )?
            root_0 = this.adaptor.nil();

            k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTThesaurusID15198); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTThesaurusID15200);
            p_StringLiteral696=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral696.getTree());
            // xquery/XQueryParser.g:1846:33: (k+= RELATIONSHIP p_StringLiteral )?
            var alt223=2;
            var LA223_0 = this.input.LA(1);

            if ( (LA223_0==RELATIONSHIP) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // xquery/XQueryParser.g:1846:34: k+= RELATIONSHIP p_StringLiteral
                    k=this.match(this.input,RELATIONSHIP,XQueryParser.FOLLOW_RELATIONSHIP_in_p_FTThesaurusID15205); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTThesaurusID15207);
                    p_StringLiteral697=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral697.getTree());


                    break;

            }

            // xquery/XQueryParser.g:1846:68: ( p_FTLiteralRange k+= LEVELS )?
            var alt224=2;
            var LA224_0 = this.input.LA(1);

            if ( ((LA224_0>=EXACTLY && LA224_0<=FROM)) ) {
                alt224=1;
            }
            else if ( (LA224_0==AT) ) {
                var LA224_2 = this.input.LA(2);

                if ( (LA224_2==LEAST||LA224_2==MOST) ) {
                    alt224=1;
                }
            }
            switch (alt224) {
                case 1 :
                    // xquery/XQueryParser.g:1846:69: p_FTLiteralRange k+= LEVELS
                    this.pushFollow(XQueryParser.FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID15212);
                    p_FTLiteralRange698=this.p_FTLiteralRange();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTLiteralRange698.getTree());
                    k=this.match(this.input,LEVELS,XQueryParser.FOLLOW_LEVELS_in_p_FTThesaurusID15216); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTLiteralRange_return: (function() {
        XQueryParser.p_FTLiteralRange_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTLiteralRange_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1850:1: p_FTLiteralRange : ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) ;
    // $ANTLR start "p_FTLiteralRange"
    p_FTLiteralRange: function() {
        var retval = new XQueryParser.p_FTLiteralRange_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var L_IntegerLiteral699 = null;
        var L_IntegerLiteral700 = null;
        var L_IntegerLiteral701 = null;
        var L_IntegerLiteral702 = null;
        var TO703 = null;
        var L_IntegerLiteral704 = null;
        var k = null;
        var list_k=null;

        var L_IntegerLiteral699_tree=null;
        var L_IntegerLiteral700_tree=null;
        var L_IntegerLiteral701_tree=null;
        var L_IntegerLiteral702_tree=null;
        var TO703_tree=null;
        var L_IntegerLiteral704_tree=null;
        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1851:9: ( ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) ) )
            // xquery/XQueryParser.g:1851:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1851:11: ( (k+= EXACTLY L_IntegerLiteral ) | (k+= AT k+= LEAST L_IntegerLiteral ) | (k+= AT k+= MOST L_IntegerLiteral ) | (k+= FROM L_IntegerLiteral TO L_IntegerLiteral ) )
            var alt225=4;
            switch ( this.input.LA(1) ) {
            case EXACTLY:
                alt225=1;
                break;
            case AT:
                var LA225_2 = this.input.LA(2);

                if ( (LA225_2==LEAST) ) {
                    alt225=2;
                }
                else if ( (LA225_2==MOST) ) {
                    alt225=3;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 225, 2, this.input);

                    throw nvae;
                }
                break;
            case FROM:
                alt225=4;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 225, 0, this.input);

                throw nvae;
            }

            switch (alt225) {
                case 1 :
                    // xquery/XQueryParser.g:1851:13: (k+= EXACTLY L_IntegerLiteral )
                    // xquery/XQueryParser.g:1851:13: (k+= EXACTLY L_IntegerLiteral )
                    // xquery/XQueryParser.g:1851:14: k+= EXACTLY L_IntegerLiteral
                    k=this.match(this.input,EXACTLY,XQueryParser.FOLLOW_EXACTLY_in_p_FTLiteralRange15251); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    L_IntegerLiteral699=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15253); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    L_IntegerLiteral699_tree = this.adaptor.create(L_IntegerLiteral699);
                    this.adaptor.addChild(root_0, L_IntegerLiteral699_tree);
                    }





                    break;
                case 2 :
                    // xquery/XQueryParser.g:1852:13: (k+= AT k+= LEAST L_IntegerLiteral )
                    // xquery/XQueryParser.g:1852:13: (k+= AT k+= LEAST L_IntegerLiteral )
                    // xquery/XQueryParser.g:1852:14: k+= AT k+= LEAST L_IntegerLiteral
                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTLiteralRange15271); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,LEAST,XQueryParser.FOLLOW_LEAST_in_p_FTLiteralRange15275); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    L_IntegerLiteral700=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15277); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    L_IntegerLiteral700_tree = this.adaptor.create(L_IntegerLiteral700);
                    this.adaptor.addChild(root_0, L_IntegerLiteral700_tree);
                    }





                    break;
                case 3 :
                    // xquery/XQueryParser.g:1853:13: (k+= AT k+= MOST L_IntegerLiteral )
                    // xquery/XQueryParser.g:1853:13: (k+= AT k+= MOST L_IntegerLiteral )
                    // xquery/XQueryParser.g:1853:14: k+= AT k+= MOST L_IntegerLiteral
                    k=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTLiteralRange15295); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,MOST,XQueryParser.FOLLOW_MOST_in_p_FTLiteralRange15299); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    L_IntegerLiteral701=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15301); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    L_IntegerLiteral701_tree = this.adaptor.create(L_IntegerLiteral701);
                    this.adaptor.addChild(root_0, L_IntegerLiteral701_tree);
                    }





                    break;
                case 4 :
                    // xquery/XQueryParser.g:1854:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
                    // xquery/XQueryParser.g:1854:13: (k+= FROM L_IntegerLiteral TO L_IntegerLiteral )
                    // xquery/XQueryParser.g:1854:14: k+= FROM L_IntegerLiteral TO L_IntegerLiteral
                    k=this.match(this.input,FROM,XQueryParser.FOLLOW_FROM_in_p_FTLiteralRange15319); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    L_IntegerLiteral702=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15321); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    L_IntegerLiteral702_tree = this.adaptor.create(L_IntegerLiteral702);
                    this.adaptor.addChild(root_0, L_IntegerLiteral702_tree);
                    }
                    TO703=this.match(this.input,TO,XQueryParser.FOLLOW_TO_in_p_FTLiteralRange15323); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    TO703_tree = this.adaptor.create(TO703);
                    this.adaptor.addChild(root_0, TO703_tree);
                    }
                    L_IntegerLiteral704=this.match(this.input,L_IntegerLiteral,XQueryParser.FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15325); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    L_IntegerLiteral704_tree = this.adaptor.create(L_IntegerLiteral704);
                    this.adaptor.addChild(root_0, L_IntegerLiteral704_tree);
                    }





                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTStopWordOption_return: (function() {
        XQueryParser.p_FTStopWordOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTStopWordOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1858:1: p_FTStopWordOption : ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) ;
    // $ANTLR start "p_FTStopWordOption"
    p_FTStopWordOption: function() {
        var retval = new XQueryParser.p_FTStopWordOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_FTStopWords705 = null;
         var p_FTStopWordsInclExcl706 = null;
         var p_FTStopWordsInclExcl707 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1859:9: ( ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) ) )
            // xquery/XQueryParser.g:1859:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1859:11: ( (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* ) | (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* ) | (k+= NO k+= STOP k+= WORDS ) )
            var alt228=3;
            var LA228_0 = this.input.LA(1);

            if ( (LA228_0==STOP) ) {
                var LA228_1 = this.input.LA(2);

                if ( (LA228_1==WORDS) ) {
                    var LA228_3 = this.input.LA(3);

                    if ( (LA228_3==DEFAULT) ) {
                        alt228=2;
                    }
                    else if ( (LA228_3==AT||LA228_3==LPAREN) ) {
                        alt228=1;
                    }
                    else {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var nvae =
                            new org.antlr.runtime.NoViableAltException("", 228, 3, this.input);

                        throw nvae;
                    }
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                    var nvae =
                        new org.antlr.runtime.NoViableAltException("", 228, 1, this.input);

                    throw nvae;
                }
            }
            else if ( (LA228_0==NO) ) {
                alt228=3;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 228, 0, this.input);

                throw nvae;
            }
            switch (alt228) {
                case 1 :
                    // xquery/XQueryParser.g:1859:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
                    // xquery/XQueryParser.g:1859:13: (k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )* )
                    // xquery/XQueryParser.g:1859:14: k+= STOP k+= WORDS p_FTStopWords ( p_FTStopWordsInclExcl )*
                    k=this.match(this.input,STOP,XQueryParser.FOLLOW_STOP_in_p_FTStopWordOption15361); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTStopWordOption15365); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    this.pushFollow(XQueryParser.FOLLOW_p_FTStopWords_in_p_FTStopWordOption15367);
                    p_FTStopWords705=this.p_FTStopWords();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWords705.getTree());
                    // xquery/XQueryParser.g:1859:45: ( p_FTStopWordsInclExcl )*
                    loop226:
                    do {
                        var alt226=2;
                        var LA226_0 = this.input.LA(1);

                        if ( (LA226_0==EXCEPT||LA226_0==UNION) ) {
                            alt226=1;
                        }


                        switch (alt226) {
                        case 1 :
                            // xquery/XQueryParser.g:1859:45: p_FTStopWordsInclExcl
                            this.pushFollow(XQueryParser.FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15369);
                            p_FTStopWordsInclExcl706=this.p_FTStopWordsInclExcl();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWordsInclExcl706.getTree());


                            break;

                        default :
                            break loop226;
                        }
                    } while (true);






                    break;
                case 2 :
                    // xquery/XQueryParser.g:1860:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
                    // xquery/XQueryParser.g:1860:13: (k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )* )
                    // xquery/XQueryParser.g:1860:14: k+= STOP k+= WORDS k+= DEFAULT ( p_FTStopWordsInclExcl )*
                    k=this.match(this.input,STOP,XQueryParser.FOLLOW_STOP_in_p_FTStopWordOption15388); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTStopWordOption15392); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_FTStopWordOption15396); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    // xquery/XQueryParser.g:1860:42: ( p_FTStopWordsInclExcl )*
                    loop227:
                    do {
                        var alt227=2;
                        var LA227_0 = this.input.LA(1);

                        if ( (LA227_0==EXCEPT||LA227_0==UNION) ) {
                            alt227=1;
                        }


                        switch (alt227) {
                        case 1 :
                            // xquery/XQueryParser.g:1860:42: p_FTStopWordsInclExcl
                            this.pushFollow(XQueryParser.FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15398);
                            p_FTStopWordsInclExcl707=this.p_FTStopWordsInclExcl();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWordsInclExcl707.getTree());


                            break;

                        default :
                            break loop227;
                        }
                    } while (true);






                    break;
                case 3 :
                    // xquery/XQueryParser.g:1861:13: (k+= NO k+= STOP k+= WORDS )
                    // xquery/XQueryParser.g:1861:13: (k+= NO k+= STOP k+= WORDS )
                    // xquery/XQueryParser.g:1861:14: k+= NO k+= STOP k+= WORDS
                    k=this.match(this.input,NO,XQueryParser.FOLLOW_NO_in_p_FTStopWordOption15417); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,STOP,XQueryParser.FOLLOW_STOP_in_p_FTStopWordOption15421); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,WORDS,XQueryParser.FOLLOW_WORDS_in_p_FTStopWordOption15425); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTStopWords_return: (function() {
        XQueryParser.p_FTStopWords_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTStopWords_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1865:1: p_FTStopWords : ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) );
    // $ANTLR start "p_FTStopWords"
    p_FTStopWords: function() {
        var retval = new XQueryParser.p_FTStopWords_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ka = null;
        var LPAREN709 = null;
        var COMMA711 = null;
        var RPAREN713 = null;
         var p_StringLiteral708 = null;
         var p_StringLiteral710 = null;
         var p_StringLiteral712 = null;

        var ka_tree=null;
        var LPAREN709_tree=null;
        var COMMA711_tree=null;
        var RPAREN713_tree=null;

        try {
            // xquery/XQueryParser.g:1866:9: ( (ka= AT p_StringLiteral ) | ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN ) )
            var alt230=2;
            var LA230_0 = this.input.LA(1);

            if ( (LA230_0==AT) ) {
                alt230=1;
            }
            else if ( (LA230_0==LPAREN) ) {
                alt230=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 230, 0, this.input);

                throw nvae;
            }
            switch (alt230) {
                case 1 :
                    // xquery/XQueryParser.g:1866:11: (ka= AT p_StringLiteral )
                    root_0 = this.adaptor.nil();

                    // xquery/XQueryParser.g:1866:11: (ka= AT p_StringLiteral )
                    // xquery/XQueryParser.g:1866:12: ka= AT p_StringLiteral
                    ka=this.match(this.input,AT,XQueryParser.FOLLOW_AT_in_p_FTStopWords15459); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    ka_tree = this.adaptor.create(ka);
                    this.adaptor.addChild(root_0, ka_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(ka);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTStopWords15463);
                    p_StringLiteral708=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral708.getTree());





                    break;
                case 2 :
                    // xquery/XQueryParser.g:1867:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
                    root_0 = this.adaptor.nil();

                    // xquery/XQueryParser.g:1867:11: ( LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN )
                    // xquery/XQueryParser.g:1867:12: LPAREN p_StringLiteral ( COMMA p_StringLiteral )* RPAREN
                    LPAREN709=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_FTStopWords15477); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    LPAREN709_tree = this.adaptor.create(LPAREN709);
                    this.adaptor.addChild(root_0, LPAREN709_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTStopWords15479);
                    p_StringLiteral710=this.p_StringLiteral();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral710.getTree());
                    // xquery/XQueryParser.g:1867:35: ( COMMA p_StringLiteral )*
                    loop229:
                    do {
                        var alt229=2;
                        var LA229_0 = this.input.LA(1);

                        if ( (LA229_0==COMMA) ) {
                            alt229=1;
                        }


                        switch (alt229) {
                        case 1 :
                            // xquery/XQueryParser.g:1867:36: COMMA p_StringLiteral
                            COMMA711=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_FTStopWords15482); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            COMMA711_tree = this.adaptor.create(COMMA711);
                            this.adaptor.addChild(root_0, COMMA711_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTStopWords15484);
                            p_StringLiteral712=this.p_StringLiteral();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral712.getTree());


                            break;

                        default :
                            break loop229;
                        }
                    } while (true);

                    RPAREN713=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_FTStopWords15488); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    RPAREN713_tree = this.adaptor.create(RPAREN713);
                    this.adaptor.addChild(root_0, RPAREN713_tree);
                    }





                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTStopWordsInclExcl_return: (function() {
        XQueryParser.p_FTStopWordsInclExcl_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTStopWordsInclExcl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1871:1: p_FTStopWordsInclExcl : ( (k+= UNION | k+= EXCEPT ) p_FTStopWords ) ;
    // $ANTLR start "p_FTStopWordsInclExcl"
    p_FTStopWordsInclExcl: function() {
        var retval = new XQueryParser.p_FTStopWordsInclExcl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_FTStopWords714 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1872:9: ( ( (k+= UNION | k+= EXCEPT ) p_FTStopWords ) )
            // xquery/XQueryParser.g:1872:11: ( (k+= UNION | k+= EXCEPT ) p_FTStopWords )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1872:11: ( (k+= UNION | k+= EXCEPT ) p_FTStopWords )
            // xquery/XQueryParser.g:1872:13: (k+= UNION | k+= EXCEPT ) p_FTStopWords
            // xquery/XQueryParser.g:1872:13: (k+= UNION | k+= EXCEPT )
            var alt231=2;
            var LA231_0 = this.input.LA(1);

            if ( (LA231_0==UNION) ) {
                alt231=1;
            }
            else if ( (LA231_0==EXCEPT) ) {
                alt231=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 231, 0, this.input);

                throw nvae;
            }
            switch (alt231) {
                case 1 :
                    // xquery/XQueryParser.g:1872:14: k+= UNION
                    k=this.match(this.input,UNION,XQueryParser.FOLLOW_UNION_in_p_FTStopWordsInclExcl15520); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1872:25: k+= EXCEPT
                    k=this.match(this.input,EXCEPT,XQueryParser.FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl15526); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl15529);
            p_FTStopWords714=this.p_FTStopWords();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_FTStopWords714.getTree());



            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTLanguageOption_return: (function() {
        XQueryParser.p_FTLanguageOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTLanguageOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1876:1: p_FTLanguageOption : kl= LANGUAGE p_StringLiteral ;
    // $ANTLR start "p_FTLanguageOption"
    p_FTLanguageOption: function() {
        var retval = new XQueryParser.p_FTLanguageOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var kl = null;
         var p_StringLiteral715 = null;

        var kl_tree=null;

        try {
            // xquery/XQueryParser.g:1877:9: (kl= LANGUAGE p_StringLiteral )
            // xquery/XQueryParser.g:1877:11: kl= LANGUAGE p_StringLiteral
            root_0 = this.adaptor.nil();

            kl=this.match(this.input,LANGUAGE,XQueryParser.FOLLOW_LANGUAGE_in_p_FTLanguageOption15561); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            kl_tree = this.adaptor.create(kl);
            this.adaptor.addChild(root_0, kl_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(kl);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTLanguageOption15565);
            p_StringLiteral715=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral715.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTWildCardOption_return: (function() {
        XQueryParser.p_FTWildCardOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTWildCardOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1881:1: p_FTWildCardOption : (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) ;
    // $ANTLR start "p_FTWildCardOption"
    p_FTWildCardOption: function() {
        var retval = new XQueryParser.p_FTWildCardOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1882:9: ( (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) ) )
            // xquery/XQueryParser.g:1882:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1882:11: (k+= WILDCARDS | (k+= NO k+= WILDCARDS ) )
            var alt232=2;
            var LA232_0 = this.input.LA(1);

            if ( (LA232_0==WILDCARDS) ) {
                alt232=1;
            }
            else if ( (LA232_0==NO) ) {
                alt232=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 232, 0, this.input);

                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    // xquery/XQueryParser.g:1882:13: k+= WILDCARDS
                    k=this.match(this.input,WILDCARDS,XQueryParser.FOLLOW_WILDCARDS_in_p_FTWildCardOption15595); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);



                    break;
                case 2 :
                    // xquery/XQueryParser.g:1882:28: (k+= NO k+= WILDCARDS )
                    // xquery/XQueryParser.g:1882:28: (k+= NO k+= WILDCARDS )
                    // xquery/XQueryParser.g:1882:29: k+= NO k+= WILDCARDS
                    k=this.match(this.input,NO,XQueryParser.FOLLOW_NO_in_p_FTWildCardOption15602); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);

                    k=this.match(this.input,WILDCARDS,XQueryParser.FOLLOW_WILDCARDS_in_p_FTWildCardOption15606); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if (org.antlr.lang.isNull(list_k)) list_k = [];
                    list_k.push(k);






                    break;

            }

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTExtensionOption_return: (function() {
        XQueryParser.p_FTExtensionOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTExtensionOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1886:1: p_FTExtensionOption : ko= OPTION p_QName p_StringLiteral ;
    // $ANTLR start "p_FTExtensionOption"
    p_FTExtensionOption: function() {
        var retval = new XQueryParser.p_FTExtensionOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var ko = null;
         var p_QName716 = null;
         var p_StringLiteral717 = null;

        var ko_tree=null;

        try {
            // xquery/XQueryParser.g:1887:9: (ko= OPTION p_QName p_StringLiteral )
            // xquery/XQueryParser.g:1887:11: ko= OPTION p_QName p_StringLiteral
            root_0 = this.adaptor.nil();

            ko=this.match(this.input,OPTION,XQueryParser.FOLLOW_OPTION_in_p_FTExtensionOption15639); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            ko_tree = this.adaptor.create(ko);
            this.adaptor.addChild(root_0, ko_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(ko);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_FTExtensionOption15643);
            p_QName716=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName716.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_FTExtensionOption15645);
            p_StringLiteral717=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral717.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FTIgnoreOption_return: (function() {
        XQueryParser.p_FTIgnoreOption_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FTIgnoreOption_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1891:1: p_FTIgnoreOption : k+= WITHOUT k+= CONTENT p_UnionExpr ;
    // $ANTLR start "p_FTIgnoreOption"
    p_FTIgnoreOption: function() {
        var retval = new XQueryParser.p_FTIgnoreOption_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var list_k=null;
         var p_UnionExpr718 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:1892:9: (k+= WITHOUT k+= CONTENT p_UnionExpr )
            // xquery/XQueryParser.g:1892:11: k+= WITHOUT k+= CONTENT p_UnionExpr
            root_0 = this.adaptor.nil();

            k=this.match(this.input,WITHOUT,XQueryParser.FOLLOW_WITHOUT_in_p_FTIgnoreOption15673); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            k=this.match(this.input,CONTENT,XQueryParser.FOLLOW_CONTENT_in_p_FTIgnoreOption15677); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if (org.antlr.lang.isNull(list_k)) list_k = [];
            list_k.push(k);

            if ( this.state.backtracking===0 ) {
              this.ak(list_k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_UnionExpr_in_p_FTIgnoreOption15681);
            p_UnionExpr718=this.p_UnionExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_UnionExpr718.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Program_return: (function() {
        XQueryParser.p_Program_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Program_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1902:1: p_Program : p_StatementsAndOptionalExpr ;
    // $ANTLR start "p_Program"
    p_Program: function() {
        var retval = new XQueryParser.p_Program_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_StatementsAndOptionalExpr719 = null;


        try {
            // xquery/XQueryParser.g:1903:9: ( p_StatementsAndOptionalExpr )
            // xquery/XQueryParser.g:1903:11: p_StatementsAndOptionalExpr
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndOptionalExpr_in_p_Program15713);
            p_StatementsAndOptionalExpr719=this.p_StatementsAndOptionalExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndOptionalExpr719.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Statements_return: (function() {
        XQueryParser.p_Statements_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Statements_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1907:1: p_Statements[strict] : ( p_Hybrid[$strict,true] )* ;
    // $ANTLR start "p_Statements"
    p_Statements: function(strict) {
        var retval = new XQueryParser.p_Statements_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Hybrid720 = null;


        try {
            // xquery/XQueryParser.g:1908:9: ( ( p_Hybrid[$strict,true] )* )
            // xquery/XQueryParser.g:1908:11: ( p_Hybrid[$strict,true] )*
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:1908:11: ( p_Hybrid[$strict,true] )*
            loop233:
            do {
                var alt233=2;
                var LA233_0 = this.input.LA(1);

                if ( ((LA233_0>=ANCESTOR && LA233_0<=QUOT_ER)||LA233_0==LPAREN||(LA233_0>=DOLLAR && LA233_0<=LBRACKET)||LA233_0==ANN_PERCENT||(LA233_0>=STAR && LA233_0<=SMALLER)||(LA233_0>=SLASH && LA233_0<=DOT_DOT)||LA233_0==ATTR_SIGN||(LA233_0>=APOS && LA233_0<=QUOT)||LA233_0==L_NCName||(LA233_0>=L_Pragma && LA233_0<=L_DoubleLiteral)||LA233_0==EXPLICITLY) ) {
                    alt233=1;
                }


                switch (alt233) {
                case 1 :
                    // xquery/XQueryParser.g:1908:11: p_Hybrid[$strict,true]
                    this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_Statements15740);
                    p_Hybrid720=this.p_Hybrid(strict, true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid720.getTree());


                    break;

                default :
                    break loop233;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_StatementsAndExpr_return: (function() {
        XQueryParser.p_StatementsAndExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_StatementsAndExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1912:1: p_StatementsAndExpr : p_Statements[false] ;
    // $ANTLR start "p_StatementsAndExpr"
    p_StatementsAndExpr: function() {
        var retval = new XQueryParser.p_StatementsAndExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Statements721 = null;


        try {
            // xquery/XQueryParser.g:1913:9: ( p_Statements[false] )
            // xquery/XQueryParser.g:1913:11: p_Statements[false]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_Statements_in_p_StatementsAndExpr15768);
            p_Statements721=this.p_Statements(false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statements721.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_StatementsAndOptionalExpr_return: (function() {
        XQueryParser.p_StatementsAndOptionalExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_StatementsAndOptionalExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1917:1: p_StatementsAndOptionalExpr : p_Statements[false] ;
    // $ANTLR start "p_StatementsAndOptionalExpr"
    p_StatementsAndOptionalExpr: function() {
        var retval = new XQueryParser.p_StatementsAndOptionalExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_Statements722 = null;


        try {
            // xquery/XQueryParser.g:1918:9: ( p_Statements[false] )
            // xquery/XQueryParser.g:1918:11: p_Statements[false]
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_Statements_in_p_StatementsAndOptionalExpr15795);
            p_Statements722=this.p_Statements(false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statements722.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Hybrid_return: (function() {
        XQueryParser.p_Hybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Hybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1921:1: p_Hybrid[strict, allowConcat] : ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement );
    // $ANTLR start "p_Hybrid"
    p_Hybrid: function(strict, allowConcat) {
        var retval = new XQueryParser.p_Hybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_HybridExprSingle723 = null;
         var p_Statement724 = null;


        try {
            // xquery/XQueryParser.g:1922:9: ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement )
            var alt234=2;
            alt234 = this.dfa234.predict(this.input);
            switch (alt234) {
                case 1 :
                    // xquery/XQueryParser.g:1922:11: p_HybridExprSingle[$strict,$allowConcat]
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_HybridExprSingle_in_p_Hybrid15822);
                    p_HybridExprSingle723=this.p_HybridExprSingle(strict, allowConcat);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_HybridExprSingle723.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1923:11: p_Statement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_Statement_in_p_Hybrid15835);
                    p_Statement724=this.p_Statement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statement724.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {

              if(re instanceof org.antlr.runtime.RecognitionException) {
                //console.log("catch3");
                var v = this.p_StepExpr();
                root_0 = this.adaptor.nil();
                this.adaptor.addChild(root_0, v.getTree());
                retval.stop = this.input.LT(-1);
                retval.tree = this.adaptor.rulePostProcessing(root_0);
                this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
              } else {
                throw re;
              }

        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_Statement_return: (function() {
        XQueryParser.p_Statement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_Statement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1939:1: p_Statement : ( p_AssignStatement | p_BreakStatement | p_ContinueStatement | p_ExitStatement | p_VarDeclStatement | p_WhileStatement );
    // $ANTLR start "p_Statement"
    p_Statement: function() {
        var retval = new XQueryParser.p_Statement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_AssignStatement725 = null;
         var p_BreakStatement726 = null;
         var p_ContinueStatement727 = null;
         var p_ExitStatement728 = null;
         var p_VarDeclStatement729 = null;
         var p_WhileStatement730 = null;


        try {
            // xquery/XQueryParser.g:1940:9: ( p_AssignStatement | p_BreakStatement | p_ContinueStatement | p_ExitStatement | p_VarDeclStatement | p_WhileStatement )
            var alt235=6;
            switch ( this.input.LA(1) ) {
            case DOLLAR:
                alt235=1;
                break;
            case BREAK:
                alt235=2;
                break;
            case CONTINUE:
                alt235=3;
                break;
            case EXIT:
                alt235=4;
                break;
            case VARIABLE:
            case ANN_PERCENT:
                alt235=5;
                break;
            case WHILE:
                alt235=6;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 235, 0, this.input);

                throw nvae;
            }

            switch (alt235) {
                case 1 :
                    // xquery/XQueryParser.g:1940:11: p_AssignStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_AssignStatement_in_p_Statement15866);
                    p_AssignStatement725=this.p_AssignStatement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AssignStatement725.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:1941:11: p_BreakStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_BreakStatement_in_p_Statement15878);
                    p_BreakStatement726=this.p_BreakStatement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BreakStatement726.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:1942:11: p_ContinueStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ContinueStatement_in_p_Statement15890);
                    p_ContinueStatement727=this.p_ContinueStatement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ContinueStatement727.getTree());


                    break;
                case 4 :
                    // xquery/XQueryParser.g:1943:11: p_ExitStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_ExitStatement_in_p_Statement15902);
                    p_ExitStatement728=this.p_ExitStatement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExitStatement728.getTree());


                    break;
                case 5 :
                    // xquery/XQueryParser.g:1944:11: p_VarDeclStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_VarDeclStatement_in_p_Statement15914);
                    p_VarDeclStatement729=this.p_VarDeclStatement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarDeclStatement729.getTree());


                    break;
                case 6 :
                    // xquery/XQueryParser.g:1945:11: p_WhileStatement
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_WhileStatement_in_p_Statement15926);
                    p_WhileStatement730=this.p_WhileStatement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_WhileStatement730.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_HybridExprSingle_return: (function() {
        XQueryParser.p_HybridExprSingle_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_HybridExprSingle_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1947:1: p_HybridExprSingle[strict, allowConcat] : e= p_Expr[$strict,$allowConcat] SEMICOLON ;
    // $ANTLR start "p_HybridExprSingle"
    p_HybridExprSingle: function(strict, allowConcat) {
        var retval = new XQueryParser.p_HybridExprSingle_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var SEMICOLON731 = null;
         var e = null;

        var SEMICOLON731_tree=null;

        try {
            // xquery/XQueryParser.g:1948:9: (e= p_Expr[$strict,$allowConcat] SEMICOLON )
            // xquery/XQueryParser.g:1948:11: e= p_Expr[$strict,$allowConcat] SEMICOLON
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_HybridExprSingle15953);
            e=this.p_Expr(strict, allowConcat);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, e.getTree());
            if ( this.state.backtracking===0 ) {
               if (strict || this.input.LT(1).getType() != SEMICOLON) throw new org.antlr.runtime.RecognitionException(this.input); 
            }
            SEMICOLON731=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_HybridExprSingle15968); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON731_tree = this.adaptor.create(SEMICOLON731);
            this.adaptor.addChild(root_0, SEMICOLON731_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {

                if(re instanceof org.antlr.runtime.RecognitionException) {
                  //console.log("catch4");
                  root_0 = this.adaptor.nil();
                  this.adaptor.addChild(root_0, e.getTree());
                  retval.stop = this.input.LT(-1);
                  retval.tree = this.adaptor.rulePostProcessing(root_0);
                  this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
                } else {
                  throw re;
                }

        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ApplyStatement_return: (function() {
        XQueryParser.p_ApplyStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ApplyStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1983:1: p_ApplyStatement : p_ExprSimple SEMICOLON ;
    // $ANTLR start "p_ApplyStatement"
    p_ApplyStatement: function() {
        var retval = new XQueryParser.p_ApplyStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var SEMICOLON733 = null;
         var p_ExprSimple732 = null;

        var SEMICOLON733_tree=null;

        try {
            // xquery/XQueryParser.g:1984:9: ( p_ExprSimple SEMICOLON )
            // xquery/XQueryParser.g:1984:11: p_ExprSimple SEMICOLON
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_ExprSimple_in_p_ApplyStatement16018);
            p_ExprSimple732=this.p_ExprSimple();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSimple732.getTree());
            SEMICOLON733=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_ApplyStatement16020); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON733_tree = this.adaptor.create(SEMICOLON733);
            this.adaptor.addChild(root_0, SEMICOLON733_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AssignStatement_return: (function() {
        XQueryParser.p_AssignStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AssignStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1988:1: p_AssignStatement : DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON ;
    // $ANTLR start "p_AssignStatement"
    p_AssignStatement: function() {
        var retval = new XQueryParser.p_AssignStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var DOLLAR734 = null;
        var BIND736 = null;
        var SEMICOLON738 = null;
         var p_VarName735 = null;
         var p_ExprSingle737 = null;

        var DOLLAR734_tree=null;
        var BIND736_tree=null;
        var SEMICOLON738_tree=null;

        try {
            // xquery/XQueryParser.g:1989:9: ( DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON )
            // xquery/XQueryParser.g:1989:11: DOLLAR p_VarName BIND p_ExprSingle[true] SEMICOLON
            root_0 = this.adaptor.nil();

            DOLLAR734=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_AssignStatement16046); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR734_tree = this.adaptor.create(DOLLAR734);
            this.adaptor.addChild(root_0, DOLLAR734_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_AssignStatement16048);
            p_VarName735=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName735.getTree());
            BIND736=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_AssignStatement16050); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            BIND736_tree = this.adaptor.create(BIND736);
            this.adaptor.addChild(root_0, BIND736_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_AssignStatement16052);
            p_ExprSingle737=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle737.getTree());
            SEMICOLON738=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_AssignStatement16055); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON738_tree = this.adaptor.create(SEMICOLON738);
            this.adaptor.addChild(root_0, SEMICOLON738_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_BlockStatement_return: (function() {
        XQueryParser.p_BlockStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_BlockStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1993:1: p_BlockStatement : LBRACKET p_Statements[false] RBRACKET ;
    // $ANTLR start "p_BlockStatement"
    p_BlockStatement: function() {
        var retval = new XQueryParser.p_BlockStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LBRACKET739 = null;
        var RBRACKET741 = null;
         var p_Statements740 = null;

        var LBRACKET739_tree=null;
        var RBRACKET741_tree=null;

        try {
            // xquery/XQueryParser.g:1994:9: ( LBRACKET p_Statements[false] RBRACKET )
            // xquery/XQueryParser.g:1994:11: LBRACKET p_Statements[false] RBRACKET
            root_0 = this.adaptor.nil();

            LBRACKET739=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_BlockStatement16081); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET739_tree = this.adaptor.create(LBRACKET739);
            this.adaptor.addChild(root_0, LBRACKET739_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Statements_in_p_BlockStatement16083);
            p_Statements740=this.p_Statements(false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statements740.getTree());
            RBRACKET741=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_BlockStatement16086); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET741_tree = this.adaptor.create(RBRACKET741);
            this.adaptor.addChild(root_0, RBRACKET741_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_BlockHybrid_return: (function() {
        XQueryParser.p_BlockHybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_BlockHybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:1997:1: p_BlockHybrid[strict] : LBRACKET p_Statements[$strict] RBRACKET ;
    // $ANTLR start "p_BlockHybrid"
    p_BlockHybrid: function(strict) {
        var retval = new XQueryParser.p_BlockHybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LBRACKET742 = null;
        var RBRACKET744 = null;
         var p_Statements743 = null;

        var LBRACKET742_tree=null;
        var RBRACKET744_tree=null;

        try {
            // xquery/XQueryParser.g:1998:9: ( LBRACKET p_Statements[$strict] RBRACKET )
            // xquery/XQueryParser.g:1998:11: LBRACKET p_Statements[$strict] RBRACKET
            root_0 = this.adaptor.nil();

            LBRACKET742=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_BlockHybrid16112); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET742_tree = this.adaptor.create(LBRACKET742);
            this.adaptor.addChild(root_0, LBRACKET742_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Statements_in_p_BlockHybrid16114);
            p_Statements743=this.p_Statements(strict);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Statements743.getTree());
            RBRACKET744=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_BlockHybrid16117); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET744_tree = this.adaptor.create(RBRACKET744);
            this.adaptor.addChild(root_0, RBRACKET744_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_BreakStatement_return: (function() {
        XQueryParser.p_BreakStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_BreakStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2002:1: p_BreakStatement : k= BREAK k= LOOP SEMICOLON ;
    // $ANTLR start "p_BreakStatement"
    p_BreakStatement: function() {
        var retval = new XQueryParser.p_BreakStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON745 = null;

        var k_tree=null;
        var SEMICOLON745_tree=null;

        try {
            // xquery/XQueryParser.g:2003:9: (k= BREAK k= LOOP SEMICOLON )
            // xquery/XQueryParser.g:2003:11: k= BREAK k= LOOP SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,BREAK,XQueryParser.FOLLOW_BREAK_in_p_BreakStatement16145); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,LOOP,XQueryParser.FOLLOW_LOOP_in_p_BreakStatement16151); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            SEMICOLON745=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_BreakStatement16155); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON745_tree = this.adaptor.create(SEMICOLON745);
            this.adaptor.addChild(root_0, SEMICOLON745_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ContinueStatement_return: (function() {
        XQueryParser.p_ContinueStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ContinueStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2007:1: p_ContinueStatement : k= CONTINUE k= LOOP SEMICOLON ;
    // $ANTLR start "p_ContinueStatement"
    p_ContinueStatement: function() {
        var retval = new XQueryParser.p_ContinueStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON746 = null;

        var k_tree=null;
        var SEMICOLON746_tree=null;

        try {
            // xquery/XQueryParser.g:2008:9: (k= CONTINUE k= LOOP SEMICOLON )
            // xquery/XQueryParser.g:2008:11: k= CONTINUE k= LOOP SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,CONTINUE,XQueryParser.FOLLOW_CONTINUE_in_p_ContinueStatement16183); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,LOOP,XQueryParser.FOLLOW_LOOP_in_p_ContinueStatement16189); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            SEMICOLON746=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_ContinueStatement16193); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON746_tree = this.adaptor.create(SEMICOLON746);
            this.adaptor.addChild(root_0, SEMICOLON746_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ExitStatement_return: (function() {
        XQueryParser.p_ExitStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ExitStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2012:1: p_ExitStatement : k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON ;
    // $ANTLR start "p_ExitStatement"
    p_ExitStatement: function() {
        var retval = new XQueryParser.p_ExitStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var SEMICOLON748 = null;
         var p_ExprSingle747 = null;

        var k_tree=null;
        var SEMICOLON748_tree=null;

        try {
            // xquery/XQueryParser.g:2013:9: (k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON )
            // xquery/XQueryParser.g:2013:11: k= EXIT k= RETURNING p_ExprSingle[true] SEMICOLON
            root_0 = this.adaptor.nil();

            k=this.match(this.input,EXIT,XQueryParser.FOLLOW_EXIT_in_p_ExitStatement16221); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,RETURNING,XQueryParser.FOLLOW_RETURNING_in_p_ExitStatement16227); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ExitStatement16231);
            p_ExprSingle747=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle747.getTree());
            SEMICOLON748=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_ExitStatement16234); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON748_tree = this.adaptor.create(SEMICOLON748);
            this.adaptor.addChild(root_0, SEMICOLON748_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_FLWORStatement_return: (function() {
        XQueryParser.p_FLWORStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_FLWORStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2017:1: p_FLWORStatement : p_InitialClause ( p_IntermediateClause )* p_ReturnStatement ;
    // $ANTLR start "p_FLWORStatement"
    p_FLWORStatement: function() {
        var retval = new XQueryParser.p_FLWORStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_InitialClause749 = null;
         var p_IntermediateClause750 = null;
         var p_ReturnStatement751 = null;


        try {
            // xquery/XQueryParser.g:2018:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnStatement )
            // xquery/XQueryParser.g:2018:11: p_InitialClause ( p_IntermediateClause )* p_ReturnStatement
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_InitialClause_in_p_FLWORStatement16260);
            p_InitialClause749=this.p_InitialClause();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_InitialClause749.getTree());
            // xquery/XQueryParser.g:2018:27: ( p_IntermediateClause )*
            loop236:
            do {
                var alt236=2;
                var LA236_0 = this.input.LA(1);

                if ( (LA236_0==FOR||LA236_0==LET||LA236_0==ORDER||LA236_0==STABLE||LA236_0==WHERE||LA236_0==COUNT||LA236_0==GROUP) ) {
                    alt236=1;
                }


                switch (alt236) {
                case 1 :
                    // xquery/XQueryParser.g:2018:27: p_IntermediateClause
                    this.pushFollow(XQueryParser.FOLLOW_p_IntermediateClause_in_p_FLWORStatement16262);
                    p_IntermediateClause750=this.p_IntermediateClause();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IntermediateClause750.getTree());


                    break;

                default :
                    break loop236;
                }
            } while (true);

            this.pushFollow(XQueryParser.FOLLOW_p_ReturnStatement_in_p_FLWORStatement16265);
            p_ReturnStatement751=this.p_ReturnStatement();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ReturnStatement751.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ReturnStatement_return: (function() {
        XQueryParser.p_ReturnStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ReturnStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2022:1: p_ReturnStatement : k= RETURN p_Hybrid[false,false] ;
    // $ANTLR start "p_ReturnStatement"
    p_ReturnStatement: function() {
        var retval = new XQueryParser.p_ReturnStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_Hybrid752 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2023:9: (k= RETURN p_Hybrid[false,false] )
            // xquery/XQueryParser.g:2023:11: k= RETURN p_Hybrid[false,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_ReturnStatement16297); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_ReturnStatement16301);
            p_Hybrid752=this.p_Hybrid(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid752.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IfStatement_return: (function() {
        XQueryParser.p_IfStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IfStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2027:1: p_IfStatement : k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false] ;
    // $ANTLR start "p_IfStatement"
    p_IfStatement: function() {
        var retval = new XQueryParser.p_IfStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LPAREN753 = null;
        var RPAREN755 = null;
         var p_Expr754 = null;
         var p_Hybrid756 = null;
         var p_Hybrid757 = null;

        var k_tree=null;
        var LPAREN753_tree=null;
        var RPAREN755_tree=null;

        try {
            // xquery/XQueryParser.g:2028:9: (k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false] )
            // xquery/XQueryParser.g:2028:11: k= IF LPAREN p_Expr[true,true] RPAREN k= THEN p_Hybrid[false,false] k= ELSE p_Hybrid[false,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,IF,XQueryParser.FOLLOW_IF_in_p_IfStatement16330); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LPAREN753=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_IfStatement16334); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN753_tree = this.adaptor.create(LPAREN753);
            this.adaptor.addChild(root_0, LPAREN753_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_IfStatement16336);
            p_Expr754=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr754.getTree());
            RPAREN755=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_IfStatement16339); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN755_tree = this.adaptor.create(RPAREN755);
            this.adaptor.addChild(root_0, RPAREN755_tree);
            }
            k=this.match(this.input,THEN,XQueryParser.FOLLOW_THEN_in_p_IfStatement16343); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_IfStatement16347);
            p_Hybrid756=this.p_Hybrid(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid756.getTree());
            k=this.match(this.input,ELSE,XQueryParser.FOLLOW_ELSE_in_p_IfStatement16352); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_IfStatement16356);
            p_Hybrid757=this.p_Hybrid(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid757.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SwitchStatement_return: (function() {
        XQueryParser.p_SwitchStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SwitchStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2032:1: p_SwitchStatement : k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false] ;
    // $ANTLR start "p_SwitchStatement"
    p_SwitchStatement: function() {
        var retval = new XQueryParser.p_SwitchStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LPAREN758 = null;
        var RPAREN760 = null;
         var p_Expr759 = null;
         var p_SwitchCaseStatement761 = null;
         var p_Hybrid762 = null;

        var k_tree=null;
        var LPAREN758_tree=null;
        var RPAREN760_tree=null;

        try {
            // xquery/XQueryParser.g:2033:9: (k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false] )
            // xquery/XQueryParser.g:2033:11: k= SWITCH LPAREN p_Expr[true,true] RPAREN ( p_SwitchCaseStatement )+ k= DEFAULT k= RETURN p_Hybrid[false,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,SWITCH,XQueryParser.FOLLOW_SWITCH_in_p_SwitchStatement16385); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LPAREN758=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_SwitchStatement16389); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN758_tree = this.adaptor.create(LPAREN758);
            this.adaptor.addChild(root_0, LPAREN758_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_SwitchStatement16391);
            p_Expr759=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr759.getTree());
            RPAREN760=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_SwitchStatement16394); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN760_tree = this.adaptor.create(RPAREN760);
            this.adaptor.addChild(root_0, RPAREN760_tree);
            }
            // xquery/XQueryParser.g:2033:67: ( p_SwitchCaseStatement )+
            var cnt237=0;
            loop237:
            do {
                var alt237=2;
                var LA237_0 = this.input.LA(1);

                if ( (LA237_0==CASE) ) {
                    alt237=1;
                }


                switch (alt237) {
                case 1 :
                    // xquery/XQueryParser.g:2033:67: p_SwitchCaseStatement
                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchCaseStatement_in_p_SwitchStatement16396);
                    p_SwitchCaseStatement761=this.p_SwitchCaseStatement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchCaseStatement761.getTree());


                    break;

                default :
                    if ( cnt237 >= 1 ) {
                        break loop237;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(237, this.input);
                        throw eee;
                }
                cnt237++;
            } while (true);

            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_SwitchStatement16401); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_SwitchStatement16407); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_SwitchStatement16411);
            p_Hybrid762=this.p_Hybrid(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid762.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_SwitchCaseStatement_return: (function() {
        XQueryParser.p_SwitchCaseStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_SwitchCaseStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2037:1: p_SwitchCaseStatement : (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false] ;
    // $ANTLR start "p_SwitchCaseStatement"
    p_SwitchCaseStatement: function() {
        var retval = new XQueryParser.p_SwitchCaseStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_SwitchCaseOperand763 = null;
         var p_Hybrid764 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2038:9: ( (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false] )
            // xquery/XQueryParser.g:2038:11: (k= CASE p_SwitchCaseOperand )+ k= RETURN p_Hybrid[false,false]
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:2038:11: (k= CASE p_SwitchCaseOperand )+
            var cnt238=0;
            loop238:
            do {
                var alt238=2;
                var LA238_0 = this.input.LA(1);

                if ( (LA238_0==CASE) ) {
                    alt238=1;
                }


                switch (alt238) {
                case 1 :
                    // xquery/XQueryParser.g:2038:12: k= CASE p_SwitchCaseOperand
                    k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_SwitchCaseStatement16441); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseStatement16445);
                    p_SwitchCaseOperand763=this.p_SwitchCaseOperand();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SwitchCaseOperand763.getTree());


                    break;

                default :
                    if ( cnt238 >= 1 ) {
                        break loop238;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(238, this.input);
                        throw eee;
                }
                cnt238++;
            } while (true);

            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_SwitchCaseStatement16451); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_SwitchCaseStatement16455);
            p_Hybrid764=this.p_Hybrid(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid764.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TryCatchStatement_return: (function() {
        XQueryParser.p_TryCatchStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TryCatchStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2042:1: p_TryCatchStatement : k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+ ;
    // $ANTLR start "p_TryCatchStatement"
    p_TryCatchStatement: function() {
        var retval = new XQueryParser.p_TryCatchStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_BlockStatement765 = null;
         var p_CatchErrorList766 = null;
         var p_BlockStatement767 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2043:9: (k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+ )
            // xquery/XQueryParser.g:2043:11: k= TRY p_BlockStatement (k= CATCH p_CatchErrorList p_BlockStatement )+
            root_0 = this.adaptor.nil();

            k=this.match(this.input,TRY,XQueryParser.FOLLOW_TRY_in_p_TryCatchStatement16484); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_BlockStatement_in_p_TryCatchStatement16488);
            p_BlockStatement765=this.p_BlockStatement();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockStatement765.getTree());
            // xquery/XQueryParser.g:2043:49: (k= CATCH p_CatchErrorList p_BlockStatement )+
            var cnt239=0;
            loop239:
            do {
                var alt239=2;
                var LA239_0 = this.input.LA(1);

                if ( (LA239_0==CATCH) ) {
                    alt239=1;
                }


                switch (alt239) {
                case 1 :
                    // xquery/XQueryParser.g:2043:50: k= CATCH p_CatchErrorList p_BlockStatement
                    k=this.match(this.input,CATCH,XQueryParser.FOLLOW_CATCH_in_p_TryCatchStatement16493); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_CatchErrorList_in_p_TryCatchStatement16497);
                    p_CatchErrorList766=this.p_CatchErrorList();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CatchErrorList766.getTree());
                    this.pushFollow(XQueryParser.FOLLOW_p_BlockStatement_in_p_TryCatchStatement16499);
                    p_BlockStatement767=this.p_BlockStatement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockStatement767.getTree());


                    break;

                default :
                    if ( cnt239 >= 1 ) {
                        break loop239;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(239, this.input);
                        throw eee;
                }
                cnt239++;
            } while (true);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TryCatchHybrid_return: (function() {
        XQueryParser.p_TryCatchHybrid_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TryCatchHybrid_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2046:1: p_TryCatchHybrid[strict] : k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+ ;
    // $ANTLR start "p_TryCatchHybrid"
    p_TryCatchHybrid: function(strict) {
        var retval = new XQueryParser.p_TryCatchHybrid_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_BlockHybrid768 = null;
         var p_CatchErrorList769 = null;
         var p_BlockHybrid770 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2047:9: (k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+ )
            // xquery/XQueryParser.g:2047:11: k= TRY p_BlockHybrid[$strict] (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+
            root_0 = this.adaptor.nil();

            k=this.match(this.input,TRY,XQueryParser.FOLLOW_TRY_in_p_TryCatchHybrid16531); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16535);
            p_BlockHybrid768=this.p_BlockHybrid(strict);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockHybrid768.getTree());
            // xquery/XQueryParser.g:2047:55: (k= CATCH p_CatchErrorList p_BlockHybrid[$strict] )+
            var cnt240=0;
            loop240:
            do {
                var alt240=2;
                var LA240_0 = this.input.LA(1);

                if ( (LA240_0==CATCH) ) {
                    alt240=1;
                }


                switch (alt240) {
                case 1 :
                    // xquery/XQueryParser.g:2047:56: k= CATCH p_CatchErrorList p_BlockHybrid[$strict]
                    k=this.match(this.input,CATCH,XQueryParser.FOLLOW_CATCH_in_p_TryCatchHybrid16541); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    k_tree = this.adaptor.create(k);
                    this.adaptor.addChild(root_0, k_tree);
                    }
                    if ( this.state.backtracking===0 ) {
                      this.ak(k);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_CatchErrorList_in_p_TryCatchHybrid16545);
                    p_CatchErrorList769=this.p_CatchErrorList();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CatchErrorList769.getTree());
                    this.pushFollow(XQueryParser.FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16547);
                    p_BlockHybrid770=this.p_BlockHybrid(strict);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_BlockHybrid770.getTree());


                    break;

                default :
                    if ( cnt240 >= 1 ) {
                        break loop240;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(240, this.input);
                        throw eee;
                }
                cnt240++;
            } while (true);

            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_TypeswitchStatement_return: (function() {
        XQueryParser.p_TypeswitchStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_TypeswitchStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2051:1: p_TypeswitchStatement : k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false] ;
    // $ANTLR start "p_TypeswitchStatement"
    p_TypeswitchStatement: function() {
        var retval = new XQueryParser.p_TypeswitchStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LPAREN771 = null;
        var RPAREN773 = null;
        var DOLLAR775 = null;
         var p_Expr772 = null;
         var p_CaseStatement774 = null;
         var p_VarName776 = null;
         var p_Hybrid777 = null;

        var k_tree=null;
        var LPAREN771_tree=null;
        var RPAREN773_tree=null;
        var DOLLAR775_tree=null;

        try {
            // xquery/XQueryParser.g:2052:9: (k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false] )
            // xquery/XQueryParser.g:2052:11: k= TYPESWITCH LPAREN p_Expr[true,true] RPAREN ( p_CaseStatement )+ k= DEFAULT ( DOLLAR p_VarName )? k= RETURN p_Hybrid[false,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,TYPESWITCH,XQueryParser.FOLLOW_TYPESWITCH_in_p_TypeswitchStatement16580); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LPAREN771=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_TypeswitchStatement16584); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN771_tree = this.adaptor.create(LPAREN771);
            this.adaptor.addChild(root_0, LPAREN771_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_TypeswitchStatement16586);
            p_Expr772=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr772.getTree());
            RPAREN773=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_TypeswitchStatement16589); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN773_tree = this.adaptor.create(RPAREN773);
            this.adaptor.addChild(root_0, RPAREN773_tree);
            }
            // xquery/XQueryParser.g:2052:71: ( p_CaseStatement )+
            var cnt241=0;
            loop241:
            do {
                var alt241=2;
                var LA241_0 = this.input.LA(1);

                if ( (LA241_0==CASE) ) {
                    alt241=1;
                }


                switch (alt241) {
                case 1 :
                    // xquery/XQueryParser.g:2052:71: p_CaseStatement
                    this.pushFollow(XQueryParser.FOLLOW_p_CaseStatement_in_p_TypeswitchStatement16591);
                    p_CaseStatement774=this.p_CaseStatement();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CaseStatement774.getTree());


                    break;

                default :
                    if ( cnt241 >= 1 ) {
                        break loop241;
                    }
                    if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        var eee = new org.antlr.runtime.EarlyExitException(241, this.input);
                        throw eee;
                }
                cnt241++;
            } while (true);

            k=this.match(this.input,DEFAULT,XQueryParser.FOLLOW_DEFAULT_in_p_TypeswitchStatement16596); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:2052:113: ( DOLLAR p_VarName )?
            var alt242=2;
            var LA242_0 = this.input.LA(1);

            if ( (LA242_0==DOLLAR) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    // xquery/XQueryParser.g:2052:114: DOLLAR p_VarName
                    DOLLAR775=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_TypeswitchStatement16601); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR775_tree = this.adaptor.create(DOLLAR775);
                    this.adaptor.addChild(root_0, DOLLAR775_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_TypeswitchStatement16603);
                    p_VarName776=this.p_VarName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName776.getTree());


                    break;

            }

            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_TypeswitchStatement16609); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_TypeswitchStatement16613);
            p_Hybrid777=this.p_Hybrid(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid777.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CaseStatement_return: (function() {
        XQueryParser.p_CaseStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CaseStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2056:1: p_CaseStatement : k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false] ;
    // $ANTLR start "p_CaseStatement"
    p_CaseStatement: function() {
        var retval = new XQueryParser.p_CaseStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR778 = null;
        var AS780 = null;
         var p_VarName779 = null;
         var p_SequenceType781 = null;
         var p_Hybrid782 = null;

        var k_tree=null;
        var DOLLAR778_tree=null;
        var AS780_tree=null;

        try {
            // xquery/XQueryParser.g:2057:9: (k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false] )
            // xquery/XQueryParser.g:2057:11: k= CASE ( DOLLAR p_VarName AS )? p_SequenceType k= RETURN p_Hybrid[false,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,CASE,XQueryParser.FOLLOW_CASE_in_p_CaseStatement16642); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            // xquery/XQueryParser.g:2057:33: ( DOLLAR p_VarName AS )?
            var alt243=2;
            var LA243_0 = this.input.LA(1);

            if ( (LA243_0==DOLLAR) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // xquery/XQueryParser.g:2057:34: DOLLAR p_VarName AS
                    DOLLAR778=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_CaseStatement16647); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR778_tree = this.adaptor.create(DOLLAR778);
                    this.adaptor.addChild(root_0, DOLLAR778_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_CaseStatement16649);
                    p_VarName779=this.p_VarName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName779.getTree());
                    AS780=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CaseStatement16651); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    AS780_tree = this.adaptor.create(AS780);
                    this.adaptor.addChild(root_0, AS780_tree);
                    }


                    break;

            }

            this.pushFollow(XQueryParser.FOLLOW_p_SequenceType_in_p_CaseStatement16655);
            p_SequenceType781=this.p_SequenceType();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_SequenceType781.getTree());
            k=this.match(this.input,RETURN,XQueryParser.FOLLOW_RETURN_in_p_CaseStatement16659); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_CaseStatement16663);
            p_Hybrid782=this.p_Hybrid(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid782.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_VarDeclStatement_return: (function() {
        XQueryParser.p_VarDeclStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_VarDeclStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2061:1: p_VarDeclStatement : ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON ;
    // $ANTLR start "p_VarDeclStatement"
    p_VarDeclStatement: function() {
        var retval = new XQueryParser.p_VarDeclStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR784 = null;
        var BIND787 = null;
        var COMMA789 = null;
        var DOLLAR790 = null;
        var BIND793 = null;
        var SEMICOLON795 = null;
         var p_Annotation783 = null;
         var p_VarName785 = null;
         var p_TypeDeclaration786 = null;
         var p_ExprSingle788 = null;
         var p_VarName791 = null;
         var p_TypeDeclaration792 = null;
         var p_ExprSingle794 = null;

        var k_tree=null;
        var DOLLAR784_tree=null;
        var BIND787_tree=null;
        var COMMA789_tree=null;
        var DOLLAR790_tree=null;
        var BIND793_tree=null;
        var SEMICOLON795_tree=null;

        try {
            // xquery/XQueryParser.g:2062:9: ( ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON )
            // xquery/XQueryParser.g:2062:11: ( p_Annotation )* k= VARIABLE DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )* SEMICOLON
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:2062:11: ( p_Annotation )*
            loop244:
            do {
                var alt244=2;
                var LA244_0 = this.input.LA(1);

                if ( (LA244_0==ANN_PERCENT) ) {
                    alt244=1;
                }


                switch (alt244) {
                case 1 :
                    // xquery/XQueryParser.g:2062:11: p_Annotation
                    this.pushFollow(XQueryParser.FOLLOW_p_Annotation_in_p_VarDeclStatement16690);
                    p_Annotation783=this.p_Annotation();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Annotation783.getTree());


                    break;

                default :
                    break loop244;
                }
            } while (true);

            k=this.match(this.input,VARIABLE,XQueryParser.FOLLOW_VARIABLE_in_p_VarDeclStatement16695); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR784=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_VarDeclStatement16699); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR784_tree = this.adaptor.create(DOLLAR784);
            this.adaptor.addChild(root_0, DOLLAR784_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_VarDeclStatement16701);
            p_VarName785=this.p_VarName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName785.getTree());
            // xquery/XQueryParser.g:2062:68: ( p_TypeDeclaration )?
            var alt245=2;
            var LA245_0 = this.input.LA(1);

            if ( (LA245_0==AS) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // xquery/XQueryParser.g:2062:68: p_TypeDeclaration
                    this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16703);
                    p_TypeDeclaration786=this.p_TypeDeclaration();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration786.getTree());


                    break;

            }

            // xquery/XQueryParser.g:2062:87: ( BIND p_ExprSingle[true] )?
            var alt246=2;
            var LA246_0 = this.input.LA(1);

            if ( (LA246_0==BIND) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // xquery/XQueryParser.g:2062:88: BIND p_ExprSingle[true]
                    BIND787=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_VarDeclStatement16707); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    BIND787_tree = this.adaptor.create(BIND787);
                    this.adaptor.addChild(root_0, BIND787_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_VarDeclStatement16709);
                    p_ExprSingle788=this.p_ExprSingle(true);

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle788.getTree());


                    break;

            }

            // xquery/XQueryParser.g:2063:11: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )? )*
            loop249:
            do {
                var alt249=2;
                var LA249_0 = this.input.LA(1);

                if ( (LA249_0==COMMA) ) {
                    alt249=1;
                }


                switch (alt249) {
                case 1 :
                    // xquery/XQueryParser.g:2063:12: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle[true] )?
                    COMMA789=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_VarDeclStatement16725); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COMMA789_tree = this.adaptor.create(COMMA789);
                    this.adaptor.addChild(root_0, COMMA789_tree);
                    }
                    DOLLAR790=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_VarDeclStatement16727); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    DOLLAR790_tree = this.adaptor.create(DOLLAR790);
                    this.adaptor.addChild(root_0, DOLLAR790_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_VarName_in_p_VarDeclStatement16729);
                    p_VarName791=this.p_VarName();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_VarName791.getTree());
                    // xquery/XQueryParser.g:2063:35: ( p_TypeDeclaration )?
                    var alt247=2;
                    var LA247_0 = this.input.LA(1);

                    if ( (LA247_0==AS) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            // xquery/XQueryParser.g:2063:35: p_TypeDeclaration
                            this.pushFollow(XQueryParser.FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16731);
                            p_TypeDeclaration792=this.p_TypeDeclaration();

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_TypeDeclaration792.getTree());


                            break;

                    }

                    // xquery/XQueryParser.g:2063:54: ( BIND p_ExprSingle[true] )?
                    var alt248=2;
                    var LA248_0 = this.input.LA(1);

                    if ( (LA248_0==BIND) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            // xquery/XQueryParser.g:2063:55: BIND p_ExprSingle[true]
                            BIND793=this.match(this.input,BIND,XQueryParser.FOLLOW_BIND_in_p_VarDeclStatement16735); if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) {
                            BIND793_tree = this.adaptor.create(BIND793);
                            this.adaptor.addChild(root_0, BIND793_tree);
                            }
                            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_VarDeclStatement16737);
                            p_ExprSingle794=this.p_ExprSingle(true);

                            this.state._fsp--;
                            if (this.state.failed) return retval;
                            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle794.getTree());


                            break;

                    }



                    break;

                default :
                    break loop249;
                }
            } while (true);

            SEMICOLON795=this.match(this.input,SEMICOLON,XQueryParser.FOLLOW_SEMICOLON_in_p_VarDeclStatement16754); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            SEMICOLON795_tree = this.adaptor.create(SEMICOLON795);
            this.adaptor.addChild(root_0, SEMICOLON795_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_WhileStatement_return: (function() {
        XQueryParser.p_WhileStatement_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_WhileStatement_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2068:1: p_WhileStatement : k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false] ;
    // $ANTLR start "p_WhileStatement"
    p_WhileStatement: function() {
        var retval = new XQueryParser.p_WhileStatement_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var LPAREN796 = null;
        var RPAREN798 = null;
         var p_Expr797 = null;
         var p_Hybrid799 = null;

        var k_tree=null;
        var LPAREN796_tree=null;
        var RPAREN798_tree=null;

        try {
            // xquery/XQueryParser.g:2069:9: (k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false] )
            // xquery/XQueryParser.g:2069:11: k= WHILE LPAREN p_Expr[true,true] RPAREN p_Hybrid[false,false]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,WHILE,XQueryParser.FOLLOW_WHILE_in_p_WhileStatement16782); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            LPAREN796=this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_p_WhileStatement16786); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LPAREN796_tree = this.adaptor.create(LPAREN796);
            this.adaptor.addChild(root_0, LPAREN796_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Expr_in_p_WhileStatement16788);
            p_Expr797=this.p_Expr(true, true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Expr797.getTree());
            RPAREN798=this.match(this.input,RPAREN,XQueryParser.FOLLOW_RPAREN_in_p_WhileStatement16791); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RPAREN798_tree = this.adaptor.create(RPAREN798);
            this.adaptor.addChild(root_0, RPAREN798_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_Hybrid_in_p_WhileStatement16793);
            p_Hybrid799=this.p_Hybrid(false, false);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_Hybrid799.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ExprSimple_return: (function() {
        XQueryParser.p_ExprSimple_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ExprSimple_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2073:1: p_ExprSimple : ( p_QuantifiedExpr | p_OrExpr | {...}? => pg_UpdateExpr );
    // $ANTLR start "p_ExprSimple"
    p_ExprSimple: function() {
        var retval = new XQueryParser.p_ExprSimple_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QuantifiedExpr800 = null;
         var p_OrExpr801 = null;
         var pg_UpdateExpr802 = null;


        try {
            // xquery/XQueryParser.g:2074:9: ( p_QuantifiedExpr | p_OrExpr | {...}? => pg_UpdateExpr )
            var alt250=3;
            alt250 = this.dfa250.predict(this.input);
            switch (alt250) {
                case 1 :
                    // xquery/XQueryParser.g:2074:11: p_QuantifiedExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_QuantifiedExpr_in_p_ExprSimple16820);
                    p_QuantifiedExpr800=this.p_QuantifiedExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QuantifiedExpr800.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:2075:11: p_OrExpr
                    root_0 = this.adaptor.nil();

                    this.pushFollow(XQueryParser.FOLLOW_p_OrExpr_in_p_ExprSimple16832);
                    p_OrExpr801=this.p_OrExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OrExpr801.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:2076:11: {...}? => pg_UpdateExpr
                    root_0 = this.adaptor.nil();

                    if ( !((this.lc(XQU))) ) {
                        if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                        throw new org.antlr.runtime.FailedPredicateException(this.input, "p_ExprSimple", "this.lc(XQU)");
                    }
                    this.pushFollow(XQueryParser.FOLLOW_pg_UpdateExpr_in_p_ExprSimple16847);
                    pg_UpdateExpr802=this.pg_UpdateExpr();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, pg_UpdateExpr802.getTree());


                    break;

            }
            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_BlockExpr_return: (function() {
        XQueryParser.p_BlockExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_BlockExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2080:1: p_BlockExpr : LBRACKET p_StatementsAndExpr RBRACKET ;
    // $ANTLR start "p_BlockExpr"
    p_BlockExpr: function() {
        var retval = new XQueryParser.p_BlockExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var LBRACKET803 = null;
        var RBRACKET805 = null;
         var p_StatementsAndExpr804 = null;

        var LBRACKET803_tree=null;
        var RBRACKET805_tree=null;

        try {
            // xquery/XQueryParser.g:2081:9: ( LBRACKET p_StatementsAndExpr RBRACKET )
            // xquery/XQueryParser.g:2081:11: LBRACKET p_StatementsAndExpr RBRACKET
            root_0 = this.adaptor.nil();

            LBRACKET803=this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_p_BlockExpr16873); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            LBRACKET803_tree = this.adaptor.create(LBRACKET803);
            this.adaptor.addChild(root_0, LBRACKET803_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StatementsAndExpr_in_p_BlockExpr16875);
            p_StatementsAndExpr804=this.p_StatementsAndExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StatementsAndExpr804.getTree());
            RBRACKET805=this.match(this.input,RBRACKET,XQueryParser.FOLLOW_RBRACKET_in_p_BlockExpr16877); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            RBRACKET805_tree = this.adaptor.create(RBRACKET805);
            this.adaptor.addChild(root_0, RBRACKET805_tree);
            }



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CollectionDecl_return: (function() {
        XQueryParser.p_CollectionDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CollectionDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2088:1: p_CollectionDecl : k= COLLECTION p_QName ( p_CollectionTypeDecl )? ;
    // $ANTLR start "p_CollectionDecl"
    p_CollectionDecl: function() {
        var retval = new XQueryParser.p_CollectionDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_QName806 = null;
         var p_CollectionTypeDecl807 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2089:9: (k= COLLECTION p_QName ( p_CollectionTypeDecl )? )
            // xquery/XQueryParser.g:2089:11: k= COLLECTION p_QName ( p_CollectionTypeDecl )?
            root_0 = this.adaptor.nil();

            k=this.match(this.input,COLLECTION,XQueryParser.FOLLOW_COLLECTION_in_p_CollectionDecl16908); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_CollectionDecl16912);
            p_QName806=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName806.getTree());
            // xquery/XQueryParser.g:2089:47: ( p_CollectionTypeDecl )?
            var alt251=2;
            var LA251_0 = this.input.LA(1);

            if ( (LA251_0==AS) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // xquery/XQueryParser.g:2089:47: p_CollectionTypeDecl
                    this.pushFollow(XQueryParser.FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl16914);
                    p_CollectionTypeDecl807=this.p_CollectionTypeDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_CollectionTypeDecl807.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_CollectionTypeDecl_return: (function() {
        XQueryParser.p_CollectionTypeDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_CollectionTypeDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2092:1: p_CollectionTypeDecl : (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) ;
    // $ANTLR start "p_CollectionTypeDecl"
    p_CollectionTypeDecl: function() {
        var retval = new XQueryParser.p_CollectionTypeDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_KindTest808 = null;
         var p_OccurrenceIndicator809 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2093:9: ( (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) )
            // xquery/XQueryParser.g:2093:11: (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
            root_0 = this.adaptor.nil();

            // xquery/XQueryParser.g:2093:11: (k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
            // xquery/XQueryParser.g:2093:12: k= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
            k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_CollectionTypeDecl16943); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_KindTest_in_p_CollectionTypeDecl16947);
            p_KindTest808=this.p_KindTest();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_KindTest808.getTree());
            // xquery/XQueryParser.g:2093:43: ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
            var alt252=2;
            var LA252_0 = this.input.LA(1);

            if ( ((LA252_0>=QUESTION && LA252_0<=PLUS)) && (this.synpred18_XQueryParser())) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // xquery/XQueryParser.g:2093:44: ( p_OccurrenceIndicator )=> p_OccurrenceIndicator
                    this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl16956);
                    p_OccurrenceIndicator809=this.p_OccurrenceIndicator();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OccurrenceIndicator809.getTree());


                    break;

            }







            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IndexDecl_return: (function() {
        XQueryParser.p_IndexDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IndexDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2096:1: p_IndexDecl : k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* ;
    // $ANTLR start "p_IndexDecl"
    p_IndexDecl: function() {
        var retval = new XQueryParser.p_IndexDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var COMMA813 = null;
         var p_IndexName810 = null;
         var p_IndexDomainExpr811 = null;
         var p_IndexKeySpec812 = null;
         var p_IndexKeySpec814 = null;

        var k_tree=null;
        var COMMA813_tree=null;

        try {
            // xquery/XQueryParser.g:2097:9: (k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* )
            // xquery/XQueryParser.g:2097:11: k= INDEX p_IndexName k= ON k= NODES p_IndexDomainExpr k= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )*
            root_0 = this.adaptor.nil();

            k=this.match(this.input,INDEX,XQueryParser.FOLLOW_INDEX_in_p_IndexDecl16986); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_IndexName_in_p_IndexDecl16990);
            p_IndexName810=this.p_IndexName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexName810.getTree());
            k=this.match(this.input,ON,XQueryParser.FOLLOW_ON_in_p_IndexDecl16994); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,NODES,XQueryParser.FOLLOW_NODES_in_p_IndexDecl17000); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_IndexDomainExpr_in_p_IndexDecl17004);
            p_IndexDomainExpr811=this.p_IndexDomainExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexDomainExpr811.getTree());
            k=this.match(this.input,BY,XQueryParser.FOLLOW_BY_in_p_IndexDecl17008); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_IndexKeySpec_in_p_IndexDecl17012);
            p_IndexKeySpec812=this.p_IndexKeySpec();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeySpec812.getTree());
            // xquery/XQueryParser.g:2097:142: ( COMMA p_IndexKeySpec )*
            loop253:
            do {
                var alt253=2;
                var LA253_0 = this.input.LA(1);

                if ( (LA253_0==COMMA) ) {
                    alt253=1;
                }


                switch (alt253) {
                case 1 :
                    // xquery/XQueryParser.g:2097:143: COMMA p_IndexKeySpec
                    COMMA813=this.match(this.input,COMMA,XQueryParser.FOLLOW_COMMA_in_p_IndexDecl17015); if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) {
                    COMMA813_tree = this.adaptor.create(COMMA813);
                    this.adaptor.addChild(root_0, COMMA813_tree);
                    }
                    this.pushFollow(XQueryParser.FOLLOW_p_IndexKeySpec_in_p_IndexDecl17017);
                    p_IndexKeySpec814=this.p_IndexKeySpec();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeySpec814.getTree());


                    break;

                default :
                    break loop253;
                }
            } while (true);




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IndexName_return: (function() {
        XQueryParser.p_IndexName_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IndexName_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2100:1: p_IndexName : p_QName ;
    // $ANTLR start "p_IndexName"
    p_IndexName: function() {
        var retval = new XQueryParser.p_IndexName_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName815 = null;


        try {
            // xquery/XQueryParser.g:2101:9: ( p_QName )
            // xquery/XQueryParser.g:2101:11: p_QName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_IndexName17044);
            p_QName815=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName815.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IndexDomainExpr_return: (function() {
        XQueryParser.p_IndexDomainExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IndexDomainExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2104:1: p_IndexDomainExpr : p_PathExpr ;
    // $ANTLR start "p_IndexDomainExpr"
    p_IndexDomainExpr: function() {
        var retval = new XQueryParser.p_IndexDomainExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_PathExpr816 = null;


        try {
            // xquery/XQueryParser.g:2105:9: ( p_PathExpr )
            // xquery/XQueryParser.g:2105:11: p_PathExpr
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_IndexDomainExpr17069);
            p_PathExpr816=this.p_PathExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr816.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IndexKeySpec_return: (function() {
        XQueryParser.p_IndexKeySpec_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IndexKeySpec_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2108:1: p_IndexKeySpec : p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )? ;
    // $ANTLR start "p_IndexKeySpec"
    p_IndexKeySpec: function() {
        var retval = new XQueryParser.p_IndexKeySpec_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_IndexKeyExpr817 = null;
         var p_IndexKeyTypeDecl818 = null;
         var p_IndexKeyCollation819 = null;


        try {
            // xquery/XQueryParser.g:2109:9: ( p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )? )
            // xquery/XQueryParser.g:2109:11: p_IndexKeyExpr ( p_IndexKeyTypeDecl )? ( p_IndexKeyCollation )?
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec17094);
            p_IndexKeyExpr817=this.p_IndexKeyExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeyExpr817.getTree());
            // xquery/XQueryParser.g:2109:26: ( p_IndexKeyTypeDecl )?
            var alt254=2;
            var LA254_0 = this.input.LA(1);

            if ( (LA254_0==AS) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // xquery/XQueryParser.g:2109:26: p_IndexKeyTypeDecl
                    this.pushFollow(XQueryParser.FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec17096);
                    p_IndexKeyTypeDecl818=this.p_IndexKeyTypeDecl();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeyTypeDecl818.getTree());


                    break;

            }

            // xquery/XQueryParser.g:2109:46: ( p_IndexKeyCollation )?
            var alt255=2;
            var LA255_0 = this.input.LA(1);

            if ( (LA255_0==COLLATION) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    // xquery/XQueryParser.g:2109:46: p_IndexKeyCollation
                    this.pushFollow(XQueryParser.FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec17099);
                    p_IndexKeyCollation819=this.p_IndexKeyCollation();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_IndexKeyCollation819.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IndexKeyExpr_return: (function() {
        XQueryParser.p_IndexKeyExpr_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IndexKeyExpr_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2112:1: p_IndexKeyExpr : p_PathExpr ;
    // $ANTLR start "p_IndexKeyExpr"
    p_IndexKeyExpr: function() {
        var retval = new XQueryParser.p_IndexKeyExpr_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_PathExpr820 = null;


        try {
            // xquery/XQueryParser.g:2113:9: ( p_PathExpr )
            // xquery/XQueryParser.g:2113:11: p_PathExpr
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_IndexKeyExpr17125);
            p_PathExpr820=this.p_PathExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr820.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IndexKeyTypeDecl_return: (function() {
        XQueryParser.p_IndexKeyTypeDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IndexKeyTypeDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2116:1: p_IndexKeyTypeDecl : k= AS p_AtomicType ( p_OccurrenceIndicator )? ;
    // $ANTLR start "p_IndexKeyTypeDecl"
    p_IndexKeyTypeDecl: function() {
        var retval = new XQueryParser.p_IndexKeyTypeDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_AtomicType821 = null;
         var p_OccurrenceIndicator822 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2117:9: (k= AS p_AtomicType ( p_OccurrenceIndicator )? )
            // xquery/XQueryParser.g:2117:11: k= AS p_AtomicType ( p_OccurrenceIndicator )?
            root_0 = this.adaptor.nil();

            k=this.match(this.input,AS,XQueryParser.FOLLOW_AS_in_p_IndexKeyTypeDecl17152); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl17156);
            p_AtomicType821=this.p_AtomicType();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_AtomicType821.getTree());
            // xquery/XQueryParser.g:2117:44: ( p_OccurrenceIndicator )?
            var alt256=2;
            var LA256_0 = this.input.LA(1);

            if ( ((LA256_0>=QUESTION && LA256_0<=PLUS)) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // xquery/XQueryParser.g:2117:44: p_OccurrenceIndicator
                    this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_p_IndexKeyTypeDecl17158);
                    p_OccurrenceIndicator822=this.p_OccurrenceIndicator();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_OccurrenceIndicator822.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_AtomicType_return: (function() {
        XQueryParser.p_AtomicType_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_AtomicType_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2120:1: p_AtomicType : p_QName ;
    // $ANTLR start "p_AtomicType"
    p_AtomicType: function() {
        var retval = new XQueryParser.p_AtomicType_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

         var p_QName823 = null;


        try {
            // xquery/XQueryParser.g:2121:9: ( p_QName )
            // xquery/XQueryParser.g:2121:11: p_QName
            root_0 = this.adaptor.nil();

            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_AtomicType17184);
            p_QName823=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName823.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_IndexKeyCollation_return: (function() {
        XQueryParser.p_IndexKeyCollation_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_IndexKeyCollation_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2124:1: p_IndexKeyCollation : k= COLLATION p_StringLiteral ;
    // $ANTLR start "p_IndexKeyCollation"
    p_IndexKeyCollation: function() {
        var retval = new XQueryParser.p_IndexKeyCollation_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_StringLiteral824 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2125:9: (k= COLLATION p_StringLiteral )
            // xquery/XQueryParser.g:2125:11: k= COLLATION p_StringLiteral
            root_0 = this.adaptor.nil();

            k=this.match(this.input,COLLATION,XQueryParser.FOLLOW_COLLATION_in_p_IndexKeyCollation17211); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_StringLiteral_in_p_IndexKeyCollation17215);
            p_StringLiteral824=this.p_StringLiteral();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_StringLiteral824.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ICDecl_return: (function() {
        XQueryParser.p_ICDecl_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ICDecl_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2128:1: p_ICDecl : k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) ;
    // $ANTLR start "p_ICDecl"
    p_ICDecl: function() {
        var retval = new XQueryParser.p_ICDecl_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_QName825 = null;
         var p_ICCollection826 = null;
         var p_ICForeignKey827 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2129:9: (k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) )
            // xquery/XQueryParser.g:2129:11: k= INTEGRITY k= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey )
            root_0 = this.adaptor.nil();

            k=this.match(this.input,INTEGRITY,XQueryParser.FOLLOW_INTEGRITY_in_p_ICDecl17242); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,CONSTRAINT,XQueryParser.FOLLOW_CONSTRAINT_in_p_ICDecl17248); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICDecl17252);
            p_QName825=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName825.getTree());
            // xquery/XQueryParser.g:2129:74: ( p_ICCollection | p_ICForeignKey )
            var alt257=2;
            var LA257_0 = this.input.LA(1);

            if ( (LA257_0==ON) ) {
                alt257=1;
            }
            else if ( (LA257_0==FOREIGN) ) {
                alt257=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 257, 0, this.input);

                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    // xquery/XQueryParser.g:2129:75: p_ICCollection
                    this.pushFollow(XQueryParser.FOLLOW_p_ICCollection_in_p_ICDecl17255);
                    p_ICCollection826=this.p_ICCollection();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICCollection826.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:2129:92: p_ICForeignKey
                    this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKey_in_p_ICDecl17259);
                    p_ICForeignKey827=this.p_ICForeignKey();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKey827.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ICCollection_return: (function() {
        XQueryParser.p_ICCollection_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ICCollection_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2132:1: p_ICCollection : k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) ;
    // $ANTLR start "p_ICCollection"
    p_ICCollection: function() {
        var retval = new XQueryParser.p_ICCollection_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_QName828 = null;
         var p_ICCollSequence829 = null;
         var p_ICCollSequenceUnique830 = null;
         var p_ICCollNode831 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2133:9: (k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) )
            // xquery/XQueryParser.g:2133:11: k= ON k= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
            root_0 = this.adaptor.nil();

            k=this.match(this.input,ON,XQueryParser.FOLLOW_ON_in_p_ICCollection17287); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,COLLECTION,XQueryParser.FOLLOW_COLLECTION_in_p_ICCollection17293); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICCollection17297);
            p_QName828=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName828.getTree());
            // xquery/XQueryParser.g:2133:67: ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
            var alt258=3;
            switch ( this.input.LA(1) ) {
            case DOLLAR:
                alt258=1;
                break;
            case NODE:
                alt258=2;
                break;
            case FOREACH:
                alt258=3;
                break;
            default:
                if (this.state.backtracking>0) {this.state.failed=true; return retval;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 258, 0, this.input);

                throw nvae;
            }

            switch (alt258) {
                case 1 :
                    // xquery/XQueryParser.g:2133:68: p_ICCollSequence
                    this.pushFollow(XQueryParser.FOLLOW_p_ICCollSequence_in_p_ICCollection17300);
                    p_ICCollSequence829=this.p_ICCollSequence();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICCollSequence829.getTree());


                    break;
                case 2 :
                    // xquery/XQueryParser.g:2133:87: p_ICCollSequenceUnique
                    this.pushFollow(XQueryParser.FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection17304);
                    p_ICCollSequenceUnique830=this.p_ICCollSequenceUnique();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICCollSequenceUnique830.getTree());


                    break;
                case 3 :
                    // xquery/XQueryParser.g:2133:112: p_ICCollNode
                    this.pushFollow(XQueryParser.FOLLOW_p_ICCollNode_in_p_ICCollection17308);
                    p_ICCollNode831=this.p_ICCollNode();

                    this.state._fsp--;
                    if (this.state.failed) return retval;
                    if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICCollNode831.getTree());


                    break;

            }




            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ICCollSequence_return: (function() {
        XQueryParser.p_ICCollSequence_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ICCollSequence_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2136:1: p_ICCollSequence : DOLLAR p_QName k= CHECK p_ExprSingle[true] ;
    // $ANTLR start "p_ICCollSequence"
    p_ICCollSequence: function() {
        var retval = new XQueryParser.p_ICCollSequence_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR832 = null;
         var p_QName833 = null;
         var p_ExprSingle834 = null;

        var k_tree=null;
        var DOLLAR832_tree=null;

        try {
            // xquery/XQueryParser.g:2137:9: ( DOLLAR p_QName k= CHECK p_ExprSingle[true] )
            // xquery/XQueryParser.g:2137:11: DOLLAR p_QName k= CHECK p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            DOLLAR832=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ICCollSequence17334); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR832_tree = this.adaptor.create(DOLLAR832);
            this.adaptor.addChild(root_0, DOLLAR832_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICCollSequence17336);
            p_QName833=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName833.getTree());
            k=this.match(this.input,CHECK,XQueryParser.FOLLOW_CHECK_in_p_ICCollSequence17340); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ICCollSequence17344);
            p_ExprSingle834=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle834.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ICCollSequenceUnique_return: (function() {
        XQueryParser.p_ICCollSequenceUnique_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ICCollSequenceUnique_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2140:1: p_ICCollSequenceUnique : k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr ;
    // $ANTLR start "p_ICCollSequenceUnique"
    p_ICCollSequenceUnique: function() {
        var retval = new XQueryParser.p_ICCollSequenceUnique_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR835 = null;
         var p_QName836 = null;
         var p_PathExpr837 = null;

        var k_tree=null;
        var DOLLAR835_tree=null;

        try {
            // xquery/XQueryParser.g:2141:9: (k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr )
            // xquery/XQueryParser.g:2141:11: k= NODE DOLLAR p_QName k= CHECK k= UNIQUE k= KEY p_PathExpr
            root_0 = this.adaptor.nil();

            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_ICCollSequenceUnique17372); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR835=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ICCollSequenceUnique17376); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR835_tree = this.adaptor.create(DOLLAR835);
            this.adaptor.addChild(root_0, DOLLAR835_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICCollSequenceUnique17378);
            p_QName836=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName836.getTree());
            k=this.match(this.input,CHECK,XQueryParser.FOLLOW_CHECK_in_p_ICCollSequenceUnique17382); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,UNIQUE,XQueryParser.FOLLOW_UNIQUE_in_p_ICCollSequenceUnique17388); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,KEY,XQueryParser.FOLLOW_KEY_in_p_ICCollSequenceUnique17394); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique17398);
            p_PathExpr837=this.p_PathExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr837.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ICCollNode_return: (function() {
        XQueryParser.p_ICCollNode_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ICCollNode_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2144:1: p_ICCollNode : k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true] ;
    // $ANTLR start "p_ICCollNode"
    p_ICCollNode: function() {
        var retval = new XQueryParser.p_ICCollNode_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR838 = null;
         var p_QName839 = null;
         var p_ExprSingle840 = null;

        var k_tree=null;
        var DOLLAR838_tree=null;

        try {
            // xquery/XQueryParser.g:2145:9: (k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true] )
            // xquery/XQueryParser.g:2145:11: k= FOREACH k= NODE DOLLAR p_QName k= CHECK p_ExprSingle[true]
            root_0 = this.adaptor.nil();

            k=this.match(this.input,FOREACH,XQueryParser.FOLLOW_FOREACH_in_p_ICCollNode17425); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_ICCollNode17431); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR838=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ICCollNode17435); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR838_tree = this.adaptor.create(DOLLAR838);
            this.adaptor.addChild(root_0, DOLLAR838_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICCollNode17437);
            p_QName839=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName839.getTree());
            k=this.match(this.input,CHECK,XQueryParser.FOLLOW_CHECK_in_p_ICCollNode17441); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ExprSingle_in_p_ICCollNode17445);
            p_ExprSingle840=this.p_ExprSingle(true);

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ExprSingle840.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ICForeignKey_return: (function() {
        XQueryParser.p_ICForeignKey_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ICForeignKey_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2148:1: p_ICForeignKey : k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget ;
    // $ANTLR start "p_ICForeignKey"
    p_ICForeignKey: function() {
        var retval = new XQueryParser.p_ICForeignKey_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_ICForeignKeySource841 = null;
         var p_ICForeignKeyTarget842 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2149:9: (k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget )
            // xquery/XQueryParser.g:2149:11: k= FOREIGN k= KEY p_ICForeignKeySource p_ICForeignKeyTarget
            root_0 = this.adaptor.nil();

            k=this.match(this.input,FOREIGN,XQueryParser.FOLLOW_FOREIGN_in_p_ICForeignKey17473); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            k=this.match(this.input,KEY,XQueryParser.FOLLOW_KEY_in_p_ICForeignKey17479); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey17483);
            p_ICForeignKeySource841=this.p_ICForeignKeySource();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKeySource841.getTree());
            this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey17485);
            p_ICForeignKeyTarget842=this.p_ICForeignKeyTarget();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKeyTarget842.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ICForeignKeySource_return: (function() {
        XQueryParser.p_ICForeignKeySource_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ICForeignKeySource_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2152:1: p_ICForeignKeySource : k= FROM p_ICForeignKeyValues ;
    // $ANTLR start "p_ICForeignKeySource"
    p_ICForeignKeySource: function() {
        var retval = new XQueryParser.p_ICForeignKeySource_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_ICForeignKeyValues843 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2153:9: (k= FROM p_ICForeignKeyValues )
            // xquery/XQueryParser.g:2153:11: k= FROM p_ICForeignKeyValues
            root_0 = this.adaptor.nil();

            k=this.match(this.input,FROM,XQueryParser.FOLLOW_FROM_in_p_ICForeignKeySource17512); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource17516);
            p_ICForeignKeyValues843=this.p_ICForeignKeyValues();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKeyValues843.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ICForeignKeyTarget_return: (function() {
        XQueryParser.p_ICForeignKeyTarget_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ICForeignKeyTarget_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2156:1: p_ICForeignKeyTarget : k= TO p_ICForeignKeyValues ;
    // $ANTLR start "p_ICForeignKeyTarget"
    p_ICForeignKeyTarget: function() {
        var retval = new XQueryParser.p_ICForeignKeyTarget_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
         var p_ICForeignKeyValues844 = null;

        var k_tree=null;

        try {
            // xquery/XQueryParser.g:2157:9: (k= TO p_ICForeignKeyValues )
            // xquery/XQueryParser.g:2157:11: k= TO p_ICForeignKeyValues
            root_0 = this.adaptor.nil();

            k=this.match(this.input,TO,XQueryParser.FOLLOW_TO_in_p_ICForeignKeyTarget17543); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget17547);
            p_ICForeignKeyValues844=this.p_ICForeignKeyValues();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_ICForeignKeyValues844.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // inline static return class
    p_ICForeignKeyValues_return: (function() {
        XQueryParser.p_ICForeignKeyValues_return = function(){};
        org.antlr.lang.extend(XQueryParser.p_ICForeignKeyValues_return,
                          org.antlr.runtime.ParserRuleReturnScope,
        {
            getTree: function() { return this.tree; }
        });
        return;
    })(),

    // xquery/XQueryParser.g:2160:1: p_ICForeignKeyValues : k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr ;
    // $ANTLR start "p_ICForeignKeyValues"
    p_ICForeignKeyValues: function() {
        var retval = new XQueryParser.p_ICForeignKeyValues_return();
        retval.start = this.input.LT(1);

        var root_0 = null;

        var k = null;
        var DOLLAR846 = null;
         var p_QName845 = null;
         var p_QName847 = null;
         var p_PathExpr848 = null;

        var k_tree=null;
        var DOLLAR846_tree=null;

        try {
            // xquery/XQueryParser.g:2161:9: (k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr )
            // xquery/XQueryParser.g:2161:11: k= COLLECTION p_QName k= NODE DOLLAR p_QName k= KEY p_PathExpr
            root_0 = this.adaptor.nil();

            k=this.match(this.input,COLLECTION,XQueryParser.FOLLOW_COLLECTION_in_p_ICForeignKeyValues17574); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICForeignKeyValues17578);
            p_QName845=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName845.getTree());
            k=this.match(this.input,NODE,XQueryParser.FOLLOW_NODE_in_p_ICForeignKeyValues17582); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            DOLLAR846=this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_p_ICForeignKeyValues17586); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            DOLLAR846_tree = this.adaptor.create(DOLLAR846);
            this.adaptor.addChild(root_0, DOLLAR846_tree);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_QName_in_p_ICForeignKeyValues17588);
            p_QName847=this.p_QName();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_QName847.getTree());
            k=this.match(this.input,KEY,XQueryParser.FOLLOW_KEY_in_p_ICForeignKeyValues17592); if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) {
            k_tree = this.adaptor.create(k);
            this.adaptor.addChild(root_0, k_tree);
            }
            if ( this.state.backtracking===0 ) {
              this.ak(k);
            }
            this.pushFollow(XQueryParser.FOLLOW_p_PathExpr_in_p_ICForeignKeyValues17596);
            p_PathExpr848=this.p_PathExpr();

            this.state._fsp--;
            if (this.state.failed) return retval;
            if ( this.state.backtracking===0 ) this.adaptor.addChild(root_0, p_PathExpr848.getTree());



            retval.stop = this.input.LT(-1);

            if ( this.state.backtracking===0 ) {

            retval.tree = this.adaptor.rulePostProcessing(root_0);
            this.adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (re) {
            if (re instanceof org.antlr.runtime.RecognitionException) {
                this.reportError(re);
                this.recover(this.input,re);
                retval.tree = this.adaptor.errorNode(this.input, retval.start, this.input.LT(-1), re);
            } else {
                throw re;
            }
        }
        finally {
        }
        return retval;
    },

    // $ANTLR start "synpred1_XQueryParser"
    synpred1_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:530:11: ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )
        var alt259=2;
        var LA259_0 = this.input.LA(1);

        if ( (LA259_0==FOR) ) {
            var LA259_1 = this.input.LA(2);

            if ( (LA259_1==DOLLAR) ) {
                alt259=1;
            }
            else if ( (LA259_1==SLIDING||LA259_1==TUMBLING) ) {
                alt259=2;
            }
            else {
                if (this.state.backtracking>0) {this.state.failed=true; return ;}
                var nvae =
                    new org.antlr.runtime.NoViableAltException("", 259, 1, this.input);

                throw nvae;
            }
        }
        else if ( (LA259_0==LET) ) {
            alt259=1;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var nvae =
                new org.antlr.runtime.NoViableAltException("", 259, 0, this.input);

            throw nvae;
        }
        switch (alt259) {
            case 1 :
                // xquery/XQueryParser.g:530:12: ( ( FOR | LET ) DOLLAR )
                // xquery/XQueryParser.g:530:12: ( ( FOR | LET ) DOLLAR )
                // xquery/XQueryParser.g:530:13: ( FOR | LET ) DOLLAR
                if ( this.input.LA(1)==FOR||this.input.LA(1)==LET ) {
                    this.input.consume();
                    this.state.errorRecovery=false;this.state.failed=false;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                    throw mse;
                }

                this.match(this.input,DOLLAR,XQueryParser.FOLLOW_DOLLAR_in_synpred1_XQueryParser3530); if (this.state.failed) return ;





                break;
            case 2 :
                // xquery/XQueryParser.g:530:35: ( FOR ( TUMBLING | SLIDING ) )
                // xquery/XQueryParser.g:530:35: ( FOR ( TUMBLING | SLIDING ) )
                // xquery/XQueryParser.g:530:36: FOR ( TUMBLING | SLIDING )
                this.match(this.input,FOR,XQueryParser.FOLLOW_FOR_in_synpred1_XQueryParser3536); if (this.state.failed) return ;
                if ( this.input.LA(1)==SLIDING||this.input.LA(1)==TUMBLING ) {
                    this.input.consume();
                    this.state.errorRecovery=false;this.state.failed=false;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                    throw mse;
                }






                break;

        }},
    // $ANTLR end "synpred1_XQueryParser",

    // $ANTLR start "synpred2_XQueryParser"
    synpred2_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:531:11: ( IF LPAREN )
        // xquery/XQueryParser.g:531:12: IF LPAREN
        this.match(this.input,IF,XQueryParser.FOLLOW_IF_in_synpred2_XQueryParser3564); if (this.state.failed) return ;
        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred2_XQueryParser3566); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred2_XQueryParser",

    // $ANTLR start "synpred3_XQueryParser"
    synpred3_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:532:11: ( SWITCH LPAREN )
        // xquery/XQueryParser.g:532:12: SWITCH LPAREN
        this.match(this.input,SWITCH,XQueryParser.FOLLOW_SWITCH_in_synpred3_XQueryParser3594); if (this.state.failed) return ;
        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred3_XQueryParser3596); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred3_XQueryParser",

    // $ANTLR start "synpred4_XQueryParser"
    synpred4_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:533:11: ( TYPESWITCH LPAREN )
        // xquery/XQueryParser.g:533:12: TYPESWITCH LPAREN
        this.match(this.input,TYPESWITCH,XQueryParser.FOLLOW_TYPESWITCH_in_synpred4_XQueryParser3620); if (this.state.failed) return ;
        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred4_XQueryParser3622); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred4_XQueryParser",

    // $ANTLR start "synpred5_XQueryParser"
    synpred5_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:534:11: ( TRY LBRACKET )
        // xquery/XQueryParser.g:534:12: TRY LBRACKET
        this.match(this.input,TRY,XQueryParser.FOLLOW_TRY_in_synpred5_XQueryParser3642); if (this.state.failed) return ;
        this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_synpred5_XQueryParser3644); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred5_XQueryParser",

    // $ANTLR start "synpred6_XQueryParser"
    synpred6_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:820:11: ( VALIDATE ( p_ValidationMode | TYPE )? )
        // xquery/XQueryParser.g:820:12: VALIDATE ( p_ValidationMode | TYPE )?
        this.match(this.input,VALIDATE,XQueryParser.FOLLOW_VALIDATE_in_synpred6_XQueryParser6081); if (this.state.failed) return ;
        // xquery/XQueryParser.g:820:21: ( p_ValidationMode | TYPE )?
        var alt260=3;
        var LA260_0 = this.input.LA(1);

        if ( (LA260_0==LAX||LA260_0==STRICT) ) {
            alt260=1;
        }
        else if ( (LA260_0==TYPE) ) {
            alt260=2;
        }
        switch (alt260) {
            case 1 :
                // xquery/XQueryParser.g:820:23: p_ValidationMode
                this.pushFollow(XQueryParser.FOLLOW_p_ValidationMode_in_synpred6_XQueryParser6085);
                this.p_ValidationMode();

                this.state._fsp--;
                if (this.state.failed) return ;


                break;
            case 2 :
                // xquery/XQueryParser.g:820:42: TYPE
                this.match(this.input,TYPE,XQueryParser.FOLLOW_TYPE_in_synpred6_XQueryParser6089); if (this.state.failed) return ;


                break;

        }



    },
    // $ANTLR end "synpred6_XQueryParser",

    // $ANTLR start "synpred7_XQueryParser"
    synpred7_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:865:11: ( SLASH p_RelativePathExpr )
        // xquery/XQueryParser.g:865:12: SLASH p_RelativePathExpr
        this.match(this.input,SLASH,XQueryParser.FOLLOW_SLASH_in_synpred7_XQueryParser6429); if (this.state.failed) return ;
        this.pushFollow(XQueryParser.FOLLOW_p_RelativePathExpr_in_synpred7_XQueryParser6431);
        this.p_RelativePathExpr();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred7_XQueryParser",

    // $ANTLR start "synpred8_XQueryParser"
    synpred8_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:878:11: ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )
        // xquery/XQueryParser.g:
        if ( this.input.LA(1)==LPAREN||(this.input.LA(1)>=DOLLAR && this.input.LA(1)<=LBRACKET)||this.input.LA(1)==SMALLER||(this.input.LA(1)>=APOS && this.input.LA(1)<=QUOT) ) {
            this.input.consume();
            this.state.errorRecovery=false;this.state.failed=false;
        }
        else {
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
            throw mse;
        }



    },
    // $ANTLR end "synpred8_XQueryParser",

    // $ANTLR start "synpred9_XQueryParser"
    synpred9_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:879:11: ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )
        var alt263=3;
        switch ( this.input.LA(1) ) {
        case ATTRIBUTE:
        case ELEMENT:
            alt263=1;
            break;
        case NAMESPACE:
        case PROCESSING_INSTRUCTION:
            alt263=2;
            break;
        case COMMENT:
        case DOCUMENT:
        case TEXT:
            alt263=3;
            break;
        default:
            if (this.state.backtracking>0) {this.state.failed=true; return ;}
            var nvae =
                new org.antlr.runtime.NoViableAltException("", 263, 0, this.input);

            throw nvae;
        }

        switch (alt263) {
            case 1 :
                // xquery/XQueryParser.g:880:13: ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET )
                // xquery/XQueryParser.g:880:13: ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET )
                // xquery/XQueryParser.g:880:14: ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET
                if ( this.input.LA(1)==ATTRIBUTE||this.input.LA(1)==ELEMENT ) {
                    this.input.consume();
                    this.state.errorRecovery=false;this.state.failed=false;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                    throw mse;
                }

                // xquery/XQueryParser.g:880:36: ( p_QName )?
                var alt261=2;
                var LA261_0 = this.input.LA(1);

                if ( ((LA261_0>=ANCESTOR && LA261_0<=SKIP)||(LA261_0>=VALUE && LA261_0<=QUOT_ER)||LA261_0==L_NCName||LA261_0==EXPLICITLY) ) {
                    alt261=1;
                }
                switch (alt261) {
                    case 1 :
                        // xquery/XQueryParser.g:880:36: p_QName
                        this.pushFollow(XQueryParser.FOLLOW_p_QName_in_synpred9_XQueryParser6606);
                        this.p_QName();

                        this.state._fsp--;
                        if (this.state.failed) return ;


                        break;

                }

                this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_synpred9_XQueryParser6609); if (this.state.failed) return ;





                break;
            case 2 :
                // xquery/XQueryParser.g:881:13: ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET )
                // xquery/XQueryParser.g:881:13: ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET )
                // xquery/XQueryParser.g:881:14: ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET
                if ( this.input.LA(1)==NAMESPACE||this.input.LA(1)==PROCESSING_INSTRUCTION ) {
                    this.input.consume();
                    this.state.errorRecovery=false;this.state.failed=false;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                    throw mse;
                }

                // xquery/XQueryParser.g:881:51: ( p_NCName )?
                var alt262=2;
                var LA262_0 = this.input.LA(1);

                if ( ((LA262_0>=ANCESTOR && LA262_0<=SKIP)||(LA262_0>=VALUE && LA262_0<=QUOT_ER)||LA262_0==L_NCName||LA262_0==EXPLICITLY) ) {
                    alt262=1;
                }
                switch (alt262) {
                    case 1 :
                        // xquery/XQueryParser.g:881:51: p_NCName
                        this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_synpred9_XQueryParser6635);
                        this.p_NCName();

                        this.state._fsp--;
                        if (this.state.failed) return ;


                        break;

                }

                this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_synpred9_XQueryParser6638); if (this.state.failed) return ;





                break;
            case 3 :
                // xquery/XQueryParser.g:882:13: ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET )
                // xquery/XQueryParser.g:882:13: ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET )
                // xquery/XQueryParser.g:882:14: ( DOCUMENT | TEXT | COMMENT ) LBRACKET
                if ( this.input.LA(1)==COMMENT||this.input.LA(1)==DOCUMENT||this.input.LA(1)==TEXT ) {
                    this.input.consume();
                    this.state.errorRecovery=false;this.state.failed=false;
                }
                else {
                    if (this.state.backtracking>0) {this.state.failed=true; return ;}
                    var mse = new org.antlr.runtime.MismatchedSetException(null,this.input);
                    throw mse;
                }

                this.match(this.input,LBRACKET,XQueryParser.FOLLOW_LBRACKET_in_synpred9_XQueryParser6668); if (this.state.failed) return ;





                break;

        }},
    // $ANTLR end "synpred9_XQueryParser",

    // $ANTLR start "synpred10_XQueryParser"
    synpred10_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:884:11: ( p_KindTest )
        // xquery/XQueryParser.g:884:12: p_KindTest
        this.pushFollow(XQueryParser.FOLLOW_p_KindTest_in_synpred10_XQueryParser6698);
        this.p_KindTest();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred10_XQueryParser",

    // $ANTLR start "synpred11_XQueryParser"
    synpred11_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:885:11: ( p_QName LPAREN )
        // xquery/XQueryParser.g:885:12: p_QName LPAREN
        this.pushFollow(XQueryParser.FOLLOW_p_QName_in_synpred11_XQueryParser6717);
        this.p_QName();

        this.state._fsp--;
        if (this.state.failed) return ;
        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred11_XQueryParser6719); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred11_XQueryParser",

    // $ANTLR start "synpred12_XQueryParser"
    synpred12_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:886:11: ( p_PrimaryExpr )
        // xquery/XQueryParser.g:886:12: p_PrimaryExpr
        this.pushFollow(XQueryParser.FOLLOW_p_PrimaryExpr_in_synpred12_XQueryParser6737);
        this.p_PrimaryExpr();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred12_XQueryParser",

    // $ANTLR start "synpred13_XQueryParser"
    synpred13_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:944:11: ( p_Wildcard )
        // xquery/XQueryParser.g:944:12: p_Wildcard
        this.pushFollow(XQueryParser.FOLLOW_p_Wildcard_in_synpred13_XQueryParser7176);
        this.p_Wildcard();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred13_XQueryParser",

    // $ANTLR start "synpred14_XQueryParser"
    synpred14_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:945:11: ( p_NCName COLON )
        // xquery/XQueryParser.g:945:12: p_NCName COLON
        this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_synpred14_XQueryParser7195);
        this.p_NCName();

        this.state._fsp--;
        if (this.state.failed) return ;
        this.match(this.input,COLON,XQueryParser.FOLLOW_COLON_in_synpred14_XQueryParser7197); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred14_XQueryParser",

    // $ANTLR start "synpred15_XQueryParser"
    synpred15_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:946:11: ( p_NCName )
        // xquery/XQueryParser.g:946:12: p_NCName
        this.pushFollow(XQueryParser.FOLLOW_p_NCName_in_synpred15_XQueryParser7215);
        this.p_NCName();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred15_XQueryParser",

    // $ANTLR start "synpred16_XQueryParser"
    synpred16_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:983:11: ( LPAREN )
        // xquery/XQueryParser.g:983:12: LPAREN
        this.match(this.input,LPAREN,XQueryParser.FOLLOW_LPAREN_in_synpred16_XQueryParser7471); if (this.state.failed) return ;


    },
    // $ANTLR end "synpred16_XQueryParser",

    // $ANTLR start "synpred17_XQueryParser"
    synpred17_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:1262:26: ( p_OccurrenceIndicator )
        // xquery/XQueryParser.g:1262:27: p_OccurrenceIndicator
        this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_synpred17_XQueryParser9439);
        this.p_OccurrenceIndicator();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred17_XQueryParser",

    // $ANTLR start "synpred18_XQueryParser"
    synpred18_XQueryParser_fragment: function() {
        // xquery/XQueryParser.g:2093:44: ( p_OccurrenceIndicator )
        // xquery/XQueryParser.g:2093:45: p_OccurrenceIndicator
        this.pushFollow(XQueryParser.FOLLOW_p_OccurrenceIndicator_in_synpred18_XQueryParser16951);
        this.p_OccurrenceIndicator();

        this.state._fsp--;
        if (this.state.failed) return ;


    },
    // $ANTLR end "synpred18_XQueryParser"

    // Delegated rules



    synpred3_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred3_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred15_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred15_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred7_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred7_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred9_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred9_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred10_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred10_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred17_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred17_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred5_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred5_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred12_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred12_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred16_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred16_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred14_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred14_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred6_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred6_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred18_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred18_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred8_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred8_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred13_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred13_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred4_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred4_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred11_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred11_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred1_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred1_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    },
    synpred2_XQueryParser: function() {
        this.state.backtracking++;
        var start = this.input.mark();
        try {
            this.synpred2_XQueryParser_fragment(); // can never throw exception
        } catch (re) {
            alert("impossible: "+re.toString());
        }
        var success = !this.state.failed;
        this.input.rewind(start);
        this.state.backtracking--;
        this.state.failed=false;
        return success;
    }

}, true); // important to pass true to overwrite default implementations

org.antlr.lang.augmentObject(XQueryParser, {
    DFA1_eotS:
        "\u000a\uffff",
    DFA1_eofS:
        "\u0001\u0005\u0001\u0009\u0008\uffff",
    DFA1_minS:
        "\u0001\u0010\u0001\u0012\u0008\uffff",
    DFA1_maxS:
        "\u0001\u0154\u0001\u00fe\u0008\uffff",
    DFA1_acceptS:
        "\u0002\uffff\u0004\u0002\u0001\u0001\u0003\u0002",
    DFA1_specialS:
        "\u0001\u0000\u0001\u0001\u0008\uffff}>",
    DFA1_transitionS: [
            "\u0002\u0002\u0004\u0004\u0001\u0002\u0006\u0004\u0001\u0002"+
            "\u0001\u0004\u0001\u0002\u0002\u0004\u0001\u0002\u0001\u0004"+
            "\u0002\u0002\u0002\u0004\u0003\u0002\u0005\u0004\u0001\u0002"+
            "\u0002\u0004\u0003\u0002\u0005\u0004\u0002\u0002\u0009\u0004"+
            "\u0001\u0002\u0002\u0004\u0002\u0002\u0003\u0004\u0001\u0002"+
            "\u0004\u0004\u0001\u0002\u0001\u0004\u0003\u0002\u0001\u0004"+
            "\u0001\u0002\u0003\u0004\u0004\u0002\u0003\u0004\u0001\u0002"+
            "\u0003\u0004\u0001\u0002\u0001\u0004\u0003\u0002\u0002\u0004"+
            "\u0001\u0001\u000c\u0004\u0001\u0002\u0009\u0004\u0002\u0002"+
            "\u0007\u0004\u0002\u0002\u0001\u0004\u0001\u0002\u0004\u0004"+
            "\u0002\u0002\u0002\u0004\u0001\u0002\u002c\u0004\u0003\u0002"+
            "\u0002\u0004\u0001\u0002\u000a\u0004\u0001\u0002\u0003\u0004"+
            "\u0001\uffff\u0001\u0002\u0001\uffff\u0002\u0002\u0006\uffff"+
            "\u0001\u0003\u0004\uffff\u0004\u0002\u0005\uffff\u0004\u0002"+
            "\u000c\uffff\u0001\u0002\u0002\uffff\u0002\u0002\u0002\uffff"+
            "\u0001\u0004\u0006\uffff\u0006\u0002\u003b\uffff\u0001\u0004",
            "\u0001\u0007\u0008\uffff\u0002\u0007\u000a\uffff\u0001\u0007"+
            "\u0006\uffff\u0001\u0006\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0005\uffff\u0001\u0007\u0001\uffff\u0002\u0007\u0004\uffff"+
            "\u0003\u0007\u0002\uffff\u0001\u0007\u0002\uffff\u0002\u0007"+
            "\u0002\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0014\uffff"+
            "\u0002\u0007\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0006"+
            "\u0032\uffff\u0001\u0007\u003b\uffff\u0002\u0007\u0004\uffff"+
            "\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0003\uffff\u0001\u0007\u0001\uffff\u000b\u0007\u0002\uffff"+
            "\u0001\u0007\u0003\uffff\u0001\u0008\u0001\u0007",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA1_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_eotS),
    DFA1_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_eofS),
    DFA1_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA1_minS),
    DFA1_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA1_maxS),
    DFA1_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_acceptS),
    DFA1_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_specialS),
    DFA1_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA1_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA1_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA1 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 1;
    this.eot = XQueryParser.DFA1_eot;
    this.eof = XQueryParser.DFA1_eof;
    this.min = XQueryParser.DFA1_min;
    this.max = XQueryParser.DFA1_max;
    this.accept = XQueryParser.DFA1_accept;
    this.special = XQueryParser.DFA1_special;
    this.transition = XQueryParser.DFA1_transition;
};

org.antlr.lang.extend(XQueryParser.DFA1, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "252:13: (vd= p_VersionDecl )?";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA1_0 = input.LA(1);

                             
                            var index1_0 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA1_0==XQUERY) ) {s = 1;}

                            else if ( ((LA1_0>=ANCESTOR && LA1_0<=ANCESTOR_OR_SELF)||LA1_0==ATTRIBUTE||LA1_0==CHILD||LA1_0==COMMENT||LA1_0==DECLARE||(LA1_0>=DESCENDANT && LA1_0<=DESCENDANT_OR_SELF)||(LA1_0>=DOCUMENT && LA1_0<=ELEMENT)||LA1_0==EVERY||(LA1_0>=FOLLOWING && LA1_0<=FOR)||(LA1_0>=IF && LA1_0<=IMPORT)||LA1_0==LET||(LA1_0>=MODULE && LA1_0<=NAMESPACE)||LA1_0==NODE||LA1_0==ORDERED||(LA1_0>=PARENT && LA1_0<=PRECEDING_SIBLING)||LA1_0==PROCESSING_INSTRUCTION||(LA1_0>=SCHEMA_ATTRIBUTE && LA1_0<=SOME)||LA1_0==TEXT||LA1_0==TYPESWITCH||(LA1_0>=UNORDERED && LA1_0<=VARIABLE)||LA1_0==NAMESPACE_NODE||(LA1_0>=SWITCH && LA1_0<=TRY)||(LA1_0>=COPY && LA1_0<=DELETE)||LA1_0==INSERT||(LA1_0>=RENAME && LA1_0<=REPLACE)||LA1_0==UPDATING||(LA1_0>=BREAK && LA1_0<=EXIT)||LA1_0==WHILE||LA1_0==BINARY||LA1_0==LPAREN||(LA1_0>=DOLLAR && LA1_0<=LBRACKET)||(LA1_0>=STAR && LA1_0<=SMALLER)||(LA1_0>=SLASH && LA1_0<=DOT_DOT)||LA1_0==ATTR_SIGN||(LA1_0>=APOS && LA1_0<=QUOT)||(LA1_0>=L_Pragma && LA1_0<=L_DoubleLiteral)) ) {s = 2;}

                            else if ( (LA1_0==ANN_PERCENT) && ((this.lc(XQS)))) {s = 3;}

                            else if ( ((LA1_0>=AND && LA1_0<=AT)||(LA1_0>=BASE_URI && LA1_0<=CASTABLE)||LA1_0==COLLATION||(LA1_0>=CONSTRUCTION && LA1_0<=COPY_NAMESPACES)||LA1_0==DEFAULT||(LA1_0>=DESCENDING && LA1_0<=DIV)||(LA1_0>=ELSE && LA1_0<=EQ)||(LA1_0>=EXCEPT && LA1_0<=EXTERNAL)||(LA1_0>=FUNCTION && LA1_0<=IDIV)||(LA1_0>=IN && LA1_0<=LEAST)||(LA1_0>=LT && LA1_0<=MOD)||(LA1_0>=NE && LA1_0<=NO_PRESERVE)||(LA1_0>=OF && LA1_0<=ORDER)||LA1_0==ORDERING||LA1_0==PRESERVE||(LA1_0>=RETURN && LA1_0<=SCHEMA)||(LA1_0>=STABLE && LA1_0<=STRIP)||(LA1_0>=THEN && LA1_0<=TREAT)||LA1_0==UNION||(LA1_0>=VERSION && LA1_0<=WHERE)||(LA1_0>=ALLOWING && LA1_0<=MINUS_SIGN)||(LA1_0>=NAN && LA1_0<=START)||(LA1_0>=TUMBLING && LA1_0<=BEFORE)||LA1_0==FIRST||(LA1_0>=INTO && LA1_0<=NODES)||(LA1_0>=REVALIDATION && LA1_0<=SKIP)||(LA1_0>=VALUE && LA1_0<=WORDS)||(LA1_0>=LOOP && LA1_0<=RETURNING)||(LA1_0>=CHECK && LA1_0<=UNIQUE)||(LA1_0>=AMP_ER && LA1_0<=QUOT_ER)||LA1_0==L_NCName||LA1_0==EXPLICITLY) ) {s = 4;}

                            else if ( (LA1_0==EOF) && ((this.lc(XQS)))) {s = 5;}

                             
                            input.seek(index1_0);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA1_1 = input.LA(1);

                             
                            var index1_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA1_1==ENCODING||LA1_1==VERSION) ) {s = 6;}

                            else if ( (LA1_1==AND||(LA1_1>=CAST && LA1_1<=CASTABLE)||LA1_1==DIV||LA1_1==EQ||LA1_1==EXCEPT||LA1_1==GE||(LA1_1>=GT && LA1_1<=IDIV)||(LA1_1>=INSTANCE && LA1_1<=IS)||LA1_1==LE||(LA1_1>=LT && LA1_1<=MOD)||LA1_1==NE||LA1_1==OR||(LA1_1>=TO && LA1_1<=TREAT)||LA1_1==UNION||LA1_1==CONTAINS||(LA1_1>=CONCAT && LA1_1<=LPAREN)||LA1_1==LSQUARE||LA1_1==EQUAL||LA1_1==NOTEQUAL||LA1_1==COMMA||(LA1_1>=STAR && LA1_1<=SLASH_SLASH)||LA1_1==COLON||LA1_1==VBAR) ) {s = 7;}

                            else if ( (LA1_1==SEMICOLON) && ((this.lc(XQS)))) {s = 8;}

                            else if ( (LA1_1==EOF) ) {s = 9;}

                             
                            input.seek(index1_1);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 1, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA2_eotS:
        "\u000a\uffff",
    DFA2_eofS:
        "\u0001\u0005\u0001\u0009\u0008\uffff",
    DFA2_minS:
        "\u0001\u0010\u0001\u0012\u0008\uffff",
    DFA2_maxS:
        "\u0001\u0154\u0001\u00fe\u0008\uffff",
    DFA2_acceptS:
        "\u0002\uffff\u0004\u0002\u0001\u0001\u0003\u0002",
    DFA2_specialS:
        "\u0001\u0001\u0001\u0000\u0008\uffff}>",
    DFA2_transitionS: [
            "\u0002\u0002\u0004\u0004\u0001\u0002\u0006\u0004\u0001\u0002"+
            "\u0001\u0004\u0001\u0002\u0002\u0004\u0001\u0002\u0001\u0004"+
            "\u0002\u0002\u0002\u0004\u0003\u0002\u0005\u0004\u0001\u0002"+
            "\u0002\u0004\u0003\u0002\u0005\u0004\u0002\u0002\u0009\u0004"+
            "\u0001\u0002\u0002\u0004\u0001\u0001\u0001\u0002\u0003\u0004"+
            "\u0001\u0002\u0004\u0004\u0001\u0002\u0001\u0004\u0003\u0002"+
            "\u0001\u0004\u0001\u0002\u0003\u0004\u0004\u0002\u0003\u0004"+
            "\u0001\u0002\u0003\u0004\u0001\u0002\u0001\u0004\u0003\u0002"+
            "\u000f\u0004\u0001\u0002\u0009\u0004\u0002\u0002\u0007\u0004"+
            "\u0002\u0002\u0001\u0004\u0001\u0002\u0004\u0004\u0002\u0002"+
            "\u0002\u0004\u0001\u0002\u002c\u0004\u0003\u0002\u0002\u0004"+
            "\u0001\u0002\u000a\u0004\u0001\u0002\u0003\u0004\u0001\uffff"+
            "\u0001\u0002\u0001\uffff\u0002\u0002\u0006\uffff\u0001\u0003"+
            "\u0004\uffff\u0004\u0002\u0005\uffff\u0004\u0002\u000c\uffff"+
            "\u0001\u0002\u0002\uffff\u0002\u0002\u0002\uffff\u0001\u0004"+
            "\u0006\uffff\u0006\u0002\u003b\uffff\u0001\u0004",
            "\u0001\u0007\u0008\uffff\u0002\u0007\u000a\uffff\u0001\u0007"+
            "\u0007\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0005\uffff"+
            "\u0001\u0007\u0001\uffff\u0002\u0007\u0004\uffff\u0003\u0007"+
            "\u0002\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0001\uffff"+
            "\u0001\u0006\u0001\u0007\u0005\uffff\u0001\u0007\u0014\uffff"+
            "\u0002\u0007\u0001\uffff\u0001\u0007\u0036\uffff\u0001\u0007"+
            "\u003b\uffff\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff"+
            "\u0001\u0007\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0007"+
            "\u0001\uffff\u000b\u0007\u0002\uffff\u0001\u0007\u0003\uffff"+
            "\u0001\u0008\u0001\u0007",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA2_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_eotS),
    DFA2_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_eofS),
    DFA2_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA2_minS),
    DFA2_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA2_maxS),
    DFA2_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_acceptS),
    DFA2_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_specialS),
    DFA2_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA2_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA2_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA2 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 2;
    this.eot = XQueryParser.DFA2_eot;
    this.eof = XQueryParser.DFA2_eof;
    this.min = XQueryParser.DFA2_min;
    this.max = XQueryParser.DFA2_max;
    this.accept = XQueryParser.DFA2_accept;
    this.special = XQueryParser.DFA2_special;
    this.transition = XQueryParser.DFA2_transition;
};

org.antlr.lang.extend(XQueryParser.DFA2, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "253:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA2_1 = input.LA(1);

                             
                            var index2_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA2_1==NAMESPACE) ) {s = 6;}

                            else if ( (LA2_1==AND||(LA2_1>=CAST && LA2_1<=CASTABLE)||LA2_1==DIV||LA2_1==EQ||LA2_1==EXCEPT||LA2_1==GE||(LA2_1>=GT && LA2_1<=IDIV)||(LA2_1>=INSTANCE && LA2_1<=IS)||LA2_1==LE||(LA2_1>=LT && LA2_1<=MOD)||LA2_1==NE||LA2_1==OR||(LA2_1>=TO && LA2_1<=TREAT)||LA2_1==UNION||LA2_1==CONTAINS||(LA2_1>=CONCAT && LA2_1<=LPAREN)||LA2_1==LSQUARE||LA2_1==EQUAL||LA2_1==NOTEQUAL||LA2_1==COMMA||(LA2_1>=STAR && LA2_1<=SLASH_SLASH)||LA2_1==COLON||LA2_1==VBAR) ) {s = 7;}

                            else if ( (LA2_1==SEMICOLON) && ((this.lc(XQS)))) {s = 8;}

                            else if ( (LA2_1==EOF) ) {s = 9;}

                             
                            input.seek(index2_1);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA2_0 = input.LA(1);

                             
                            var index2_0 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA2_0==MODULE) ) {s = 1;}

                            else if ( ((LA2_0>=ANCESTOR && LA2_0<=ANCESTOR_OR_SELF)||LA2_0==ATTRIBUTE||LA2_0==CHILD||LA2_0==COMMENT||LA2_0==DECLARE||(LA2_0>=DESCENDANT && LA2_0<=DESCENDANT_OR_SELF)||(LA2_0>=DOCUMENT && LA2_0<=ELEMENT)||LA2_0==EVERY||(LA2_0>=FOLLOWING && LA2_0<=FOR)||(LA2_0>=IF && LA2_0<=IMPORT)||LA2_0==LET||LA2_0==NAMESPACE||LA2_0==NODE||LA2_0==ORDERED||(LA2_0>=PARENT && LA2_0<=PRECEDING_SIBLING)||LA2_0==PROCESSING_INSTRUCTION||(LA2_0>=SCHEMA_ATTRIBUTE && LA2_0<=SOME)||LA2_0==TEXT||LA2_0==TYPESWITCH||(LA2_0>=UNORDERED && LA2_0<=VARIABLE)||LA2_0==NAMESPACE_NODE||(LA2_0>=SWITCH && LA2_0<=TRY)||(LA2_0>=COPY && LA2_0<=DELETE)||LA2_0==INSERT||(LA2_0>=RENAME && LA2_0<=REPLACE)||LA2_0==UPDATING||(LA2_0>=BREAK && LA2_0<=EXIT)||LA2_0==WHILE||LA2_0==BINARY||LA2_0==LPAREN||(LA2_0>=DOLLAR && LA2_0<=LBRACKET)||(LA2_0>=STAR && LA2_0<=SMALLER)||(LA2_0>=SLASH && LA2_0<=DOT_DOT)||LA2_0==ATTR_SIGN||(LA2_0>=APOS && LA2_0<=QUOT)||(LA2_0>=L_Pragma && LA2_0<=L_DoubleLiteral)) ) {s = 2;}

                            else if ( (LA2_0==ANN_PERCENT) && ((this.lc(XQS)))) {s = 3;}

                            else if ( ((LA2_0>=AND && LA2_0<=AT)||(LA2_0>=BASE_URI && LA2_0<=CASTABLE)||LA2_0==COLLATION||(LA2_0>=CONSTRUCTION && LA2_0<=COPY_NAMESPACES)||LA2_0==DEFAULT||(LA2_0>=DESCENDING && LA2_0<=DIV)||(LA2_0>=ELSE && LA2_0<=EQ)||(LA2_0>=EXCEPT && LA2_0<=EXTERNAL)||(LA2_0>=FUNCTION && LA2_0<=IDIV)||(LA2_0>=IN && LA2_0<=LEAST)||(LA2_0>=LT && LA2_0<=MOD)||(LA2_0>=NE && LA2_0<=NO_PRESERVE)||(LA2_0>=OF && LA2_0<=ORDER)||LA2_0==ORDERING||LA2_0==PRESERVE||(LA2_0>=RETURN && LA2_0<=SCHEMA)||(LA2_0>=STABLE && LA2_0<=STRIP)||(LA2_0>=THEN && LA2_0<=TREAT)||LA2_0==UNION||(LA2_0>=VERSION && LA2_0<=MINUS_SIGN)||(LA2_0>=NAN && LA2_0<=START)||(LA2_0>=TUMBLING && LA2_0<=BEFORE)||LA2_0==FIRST||(LA2_0>=INTO && LA2_0<=NODES)||(LA2_0>=REVALIDATION && LA2_0<=SKIP)||(LA2_0>=VALUE && LA2_0<=WORDS)||(LA2_0>=LOOP && LA2_0<=RETURNING)||(LA2_0>=CHECK && LA2_0<=UNIQUE)||(LA2_0>=AMP_ER && LA2_0<=QUOT_ER)||LA2_0==L_NCName||LA2_0==EXPLICITLY) ) {s = 4;}

                            else if ( (LA2_0==EOF) && ((this.lc(XQS)))) {s = 5;}

                             
                            input.seek(index2_0);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 2, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA6_eotS:
        "\u000a\uffff",
    DFA6_eofS:
        "\u0001\u0005\u0001\u0009\u0002\uffff\u0001\u0009\u0005\uffff",
    DFA6_minS:
        "\u0001\u0010\u0001\u0012\u0002\uffff\u0001\u0012\u0005\uffff",
    DFA6_maxS:
        "\u0001\u0154\u0001\u00fe\u0002\uffff\u0001\u00fe\u0005\uffff",
    DFA6_acceptS:
        "\u0002\uffff\u0002\u0002\u0001\uffff\u0001\u0002\u0002\u0001\u0002"+
    "\u0002",
    DFA6_specialS:
        "\u0001\u0002\u0001\u0001\u0002\uffff\u0001\u0000\u0005\uffff}>",
    DFA6_transitionS: [
            "\u0002\u0002\u0004\u0005\u0001\u0002\u0006\u0005\u0001\u0002"+
            "\u0001\u0005\u0001\u0002\u0002\u0005\u0001\u0001\u0001\u0005"+
            "\u0002\u0002\u0002\u0005\u0003\u0002\u0005\u0005\u0001\u0002"+
            "\u0002\u0005\u0003\u0002\u0005\u0005\u0001\u0002\u0001\u0004"+
            "\u0009\u0005\u0001\u0002\u0003\u0005\u0001\u0002\u0003\u0005"+
            "\u0001\u0002\u0004\u0005\u0001\u0002\u0001\u0005\u0003\u0002"+
            "\u0001\u0005\u0001\u0002\u0003\u0005\u0004\u0002\u0003\u0005"+
            "\u0001\u0002\u0003\u0005\u0001\u0002\u0001\u0005\u0003\u0002"+
            "\u000f\u0005\u0001\u0002\u0009\u0005\u0002\u0002\u0007\u0005"+
            "\u0002\u0002\u0001\u0005\u0001\u0002\u0004\u0005\u0002\u0002"+
            "\u0002\u0005\u0001\u0002\u002c\u0005\u0003\u0002\u0002\u0005"+
            "\u0001\u0002\u000a\u0005\u0001\u0002\u0003\u0005\u0001\uffff"+
            "\u0001\u0002\u0001\uffff\u0002\u0002\u0006\uffff\u0001\u0003"+
            "\u0004\uffff\u0004\u0002\u0005\uffff\u0004\u0002\u000c\uffff"+
            "\u0001\u0002\u0002\uffff\u0002\u0002\u0002\uffff\u0001\u0005"+
            "\u0006\uffff\u0006\u0002\u003b\uffff\u0001\u0005",
            "\u0001\u0005\u0004\uffff\u0002\u0007\u0002\uffff\u0002\u0005"+
            "\u0003\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0003\uffff"+
            "\u0001\u0005\u0007\uffff\u0001\u0005\u0001\uffff\u0001\u0005"+
            "\u0004\uffff\u0002\u0005\u0001\uffff\u0002\u0005\u0004\uffff"+
            "\u0003\u0005\u0002\uffff\u0001\u0005\u0002\uffff\u0002\u0005"+
            "\u0001\uffff\u0001\u0007\u0001\u0005\u0004\uffff\u0002\u0005"+
            "\u0002\uffff\u0001\u0007\u0011\uffff\u0002\u0005\u0001\uffff"+
            "\u0001\u0005\u0002\uffff\u0001\u0005\u0005\uffff\u0001\u0005"+
            "\u0001\uffff\u0001\u0007\u0024\uffff\u0001\u0006\u0001\uffff"+
            "\u0001\u0005\u0004\uffff\u0001\u0005\u0007\uffff\u0001\u0007"+
            "\u0026\uffff\u0001\u0005\u0003\uffff\u0002\u0005\u0007\uffff"+
            "\u0002\u0005\u0004\uffff\u0001\u0005\u0001\uffff\u0001\u0005"+
            "\u0001\uffff\u0002\u0005\u0002\uffff\u0001\u0005\u0001\uffff"+
            "\u000b\u0005\u0002\uffff\u0001\u0005\u0003\uffff\u0001\u0008"+
            "\u0001\u0005",
            "",
            "",
            "\u0001\u0009\u0008\uffff\u0002\u0009\u000a\uffff\u0001\u0009"+
            "\u0007\uffff\u0001\u0009\u0001\uffff\u0001\u0009\u0005\uffff"+
            "\u0001\u0009\u0001\uffff\u0002\u0009\u0004\uffff\u0003\u0009"+
            "\u0002\uffff\u0001\u0009\u0002\uffff\u0002\u0009\u0001\u0007"+
            "\u0001\uffff\u0001\u0009\u0005\uffff\u0001\u0009\u000a\uffff"+
            "\u0001\u0007\u0009\uffff\u0002\u0009\u0001\uffff\u0001\u0009"+
            "\u0036\uffff\u0001\u0009\u003b\uffff\u0002\u0009\u0004\uffff"+
            "\u0001\u0009\u0001\uffff\u0001\u0009\u0001\uffff\u0001\u0009"+
            "\u0003\uffff\u0001\u0009\u0001\uffff\u000b\u0009\u0002\uffff"+
            "\u0001\u0009\u0003\uffff\u0001\u0008\u0001\u0009",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA6_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_eotS),
    DFA6_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_eofS),
    DFA6_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA6_minS),
    DFA6_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA6_maxS),
    DFA6_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_acceptS),
    DFA6_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_specialS),
    DFA6_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA6_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA6_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA6 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 6;
    this.eot = XQueryParser.DFA6_eot;
    this.eof = XQueryParser.DFA6_eof;
    this.min = XQueryParser.DFA6_min;
    this.max = XQueryParser.DFA6_max;
    this.accept = XQueryParser.DFA6_accept;
    this.special = XQueryParser.DFA6_special;
    this.transition = XQueryParser.DFA6_transition;
};

org.antlr.lang.extend(XQueryParser.DFA6, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "()* loopback of 288:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import | fto+= pm_FTOptionDecl ) )*";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA6_4 = input.LA(1);

                             
                            var index6_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA6_4==EOF||LA6_4==AND||(LA6_4>=CAST && LA6_4<=CASTABLE)||LA6_4==DIV||LA6_4==EQ||LA6_4==EXCEPT||LA6_4==GE||(LA6_4>=GT && LA6_4<=IDIV)||(LA6_4>=INSTANCE && LA6_4<=IS)||LA6_4==LE||(LA6_4>=LT && LA6_4<=MOD)||LA6_4==NE||LA6_4==OR||(LA6_4>=TO && LA6_4<=TREAT)||LA6_4==UNION||LA6_4==CONTAINS||(LA6_4>=CONCAT && LA6_4<=LPAREN)||LA6_4==LSQUARE||LA6_4==EQUAL||LA6_4==NOTEQUAL||LA6_4==COMMA||(LA6_4>=STAR && LA6_4<=SLASH_SLASH)||LA6_4==COLON||LA6_4==VBAR) ) {s = 9;}

                            else if ( (LA6_4==SEMICOLON) && ((this.lc(XQS)))) {s = 8;}

                            else if ( (LA6_4==MODULE||LA6_4==SCHEMA) ) {s = 7;}

                             
                            input.seek(index6_4);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA6_1 = input.LA(1);

                             
                            var index6_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA6_1==REVALIDATION) && ((this.lc(XQU)))) {s = 6;}

                            else if ( ((LA6_1>=BASE_URI && LA6_1<=BOUNDARY_SPACE)||(LA6_1>=CONSTRUCTION && LA6_1<=COPY_NAMESPACES)||LA6_1==DEFAULT||LA6_1==NAMESPACE||LA6_1==ORDERING||LA6_1==DECIMAL_FORMAT||LA6_1==FT_OPTION) ) {s = 7;}

                            else if ( (LA6_1==AND||(LA6_1>=CAST && LA6_1<=CASTABLE)||LA6_1==DIV||LA6_1==EQ||LA6_1==EXCEPT||(LA6_1>=FUNCTION && LA6_1<=GE)||(LA6_1>=GT && LA6_1<=IDIV)||(LA6_1>=INSTANCE && LA6_1<=IS)||LA6_1==LE||(LA6_1>=LT && LA6_1<=MOD)||LA6_1==NE||(LA6_1>=OPTION && LA6_1<=OR)||(LA6_1>=TO && LA6_1<=TREAT)||LA6_1==UNION||LA6_1==VARIABLE||LA6_1==CONTEXT||LA6_1==UPDATING||LA6_1==CONTAINS||LA6_1==COLLECTION||(LA6_1>=INDEX && LA6_1<=INTEGRITY)||(LA6_1>=CONCAT && LA6_1<=LPAREN)||LA6_1==LSQUARE||LA6_1==EQUAL||(LA6_1>=NOTEQUAL && LA6_1<=ANN_PERCENT)||LA6_1==COMMA||(LA6_1>=STAR && LA6_1<=SLASH_SLASH)||LA6_1==COLON||LA6_1==VBAR) ) {s = 5;}

                            else if ( (LA6_1==SEMICOLON) && ((this.lc(XQS)))) {s = 8;}

                            else if ( (LA6_1==EOF) ) {s = 9;}

                             
                            input.seek(index6_1);
                            if ( s>=0 ) return s;
                            break;
                        case 2 : 
                            var LA6_0 = input.LA(1);

                             
                            var index6_0 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA6_0==DECLARE) ) {s = 1;}

                            else if ( ((LA6_0>=ANCESTOR && LA6_0<=ANCESTOR_OR_SELF)||LA6_0==ATTRIBUTE||LA6_0==CHILD||LA6_0==COMMENT||(LA6_0>=DESCENDANT && LA6_0<=DESCENDANT_OR_SELF)||(LA6_0>=DOCUMENT && LA6_0<=ELEMENT)||LA6_0==EVERY||(LA6_0>=FOLLOWING && LA6_0<=FOR)||LA6_0==IF||LA6_0==LET||LA6_0==NAMESPACE||LA6_0==NODE||LA6_0==ORDERED||(LA6_0>=PARENT && LA6_0<=PRECEDING_SIBLING)||LA6_0==PROCESSING_INSTRUCTION||(LA6_0>=SCHEMA_ATTRIBUTE && LA6_0<=SOME)||LA6_0==TEXT||LA6_0==TYPESWITCH||(LA6_0>=UNORDERED && LA6_0<=VARIABLE)||LA6_0==NAMESPACE_NODE||(LA6_0>=SWITCH && LA6_0<=TRY)||(LA6_0>=COPY && LA6_0<=DELETE)||LA6_0==INSERT||(LA6_0>=RENAME && LA6_0<=REPLACE)||LA6_0==UPDATING||(LA6_0>=BREAK && LA6_0<=EXIT)||LA6_0==WHILE||LA6_0==BINARY||LA6_0==LPAREN||(LA6_0>=DOLLAR && LA6_0<=LBRACKET)||(LA6_0>=STAR && LA6_0<=SMALLER)||(LA6_0>=SLASH && LA6_0<=DOT_DOT)||LA6_0==ATTR_SIGN||(LA6_0>=APOS && LA6_0<=QUOT)||(LA6_0>=L_Pragma && LA6_0<=L_DoubleLiteral)) ) {s = 2;}

                            else if ( (LA6_0==ANN_PERCENT) && ((this.lc(XQS)))) {s = 3;}

                            else if ( (LA6_0==IMPORT) ) {s = 4;}

                            else if ( (LA6_0==EOF||(LA6_0>=AND && LA6_0<=AT)||(LA6_0>=BASE_URI && LA6_0<=CASTABLE)||LA6_0==COLLATION||(LA6_0>=CONSTRUCTION && LA6_0<=COPY_NAMESPACES)||LA6_0==DEFAULT||(LA6_0>=DESCENDING && LA6_0<=DIV)||(LA6_0>=ELSE && LA6_0<=EQ)||(LA6_0>=EXCEPT && LA6_0<=EXTERNAL)||(LA6_0>=FUNCTION && LA6_0<=IDIV)||(LA6_0>=IN && LA6_0<=LEAST)||(LA6_0>=LT && LA6_0<=MODULE)||(LA6_0>=NE && LA6_0<=NO_PRESERVE)||(LA6_0>=OF && LA6_0<=ORDER)||LA6_0==ORDERING||LA6_0==PRESERVE||(LA6_0>=RETURN && LA6_0<=SCHEMA)||(LA6_0>=STABLE && LA6_0<=STRIP)||(LA6_0>=THEN && LA6_0<=TREAT)||LA6_0==UNION||(LA6_0>=VERSION && LA6_0<=MINUS_SIGN)||(LA6_0>=NAN && LA6_0<=START)||(LA6_0>=TUMBLING && LA6_0<=BEFORE)||LA6_0==FIRST||(LA6_0>=INTO && LA6_0<=NODES)||(LA6_0>=REVALIDATION && LA6_0<=SKIP)||(LA6_0>=VALUE && LA6_0<=WORDS)||(LA6_0>=LOOP && LA6_0<=RETURNING)||(LA6_0>=CHECK && LA6_0<=UNIQUE)||(LA6_0>=AMP_ER && LA6_0<=QUOT_ER)||LA6_0==L_NCName||LA6_0==EXPLICITLY) ) {s = 5;}

                             
                            input.seek(index6_0);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 6, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA9_eotS:
        "\u000c\uffff",
    DFA9_eofS:
        "\u000c\uffff",
    DFA9_minS:
        "\u0001\u0022\u0001\u0017\u0002\uffff\u0001\u001e\u0007\uffff",
    DFA9_maxS:
        "\u0001\u0022\u0001\u0099\u0002\uffff\u0001\u0074\u0007\uffff",
    DFA9_acceptS:
        "\u0002\uffff\u0001\u0007\u0001\u0001\u0001\uffff\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0008\u0001\u0009\u0001\u0002\u0001\u0006",
    DFA9_specialS:
        "\u0001\uffff\u0001\u0000\u000a\uffff}>",
    DFA9_transitionS: [
            "\u0001\u0001",
            "\u0001\u0005\u0001\u0003\u0007\uffff\u0001\u0006\u0001\u0008"+
            "\u0001\uffff\u0001\u0004\u0030\uffff\u0001\u0007\u001f\uffff"+
            "\u0001\u0009\u0024\uffff\u0001\u0002",
            "",
            "",
            "\u0001\u000a\u0033\uffff\u0001\u000b\u0021\uffff\u0001\u0009",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA9_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_eotS),
    DFA9_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_eofS),
    DFA9_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA9_minS),
    DFA9_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA9_maxS),
    DFA9_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_acceptS),
    DFA9_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_specialS),
    DFA9_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA9_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA9_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA9 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 9;
    this.eot = XQueryParser.DFA9_eot;
    this.eof = XQueryParser.DFA9_eof;
    this.min = XQueryParser.DFA9_min;
    this.max = XQueryParser.DFA9_max;
    this.accept = XQueryParser.DFA9_accept;
    this.special = XQueryParser.DFA9_special;
    this.transition = XQueryParser.DFA9_transition;
};

org.antlr.lang.extend(XQueryParser.DFA9, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "314:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl | pm_DecimalFormatDecl );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA9_1 = input.LA(1);

                             
                            var index9_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA9_1==REVALIDATION) && ((this.lc(XQU)))) {s = 2;}

                            else if ( (LA9_1==BOUNDARY_SPACE) ) {s = 3;}

                            else if ( (LA9_1==DEFAULT) ) {s = 4;}

                            else if ( (LA9_1==BASE_URI) ) {s = 5;}

                            else if ( (LA9_1==CONSTRUCTION) ) {s = 6;}

                            else if ( (LA9_1==ORDERING) ) {s = 7;}

                            else if ( (LA9_1==COPY_NAMESPACES) ) {s = 8;}

                            else if ( (LA9_1==DECIMAL_FORMAT) ) {s = 9;}

                             
                            input.seek(index9_1);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 9, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA44_eotS:
        "\u0046\uffff",
    DFA44_eofS:
        "\u0001\u0041\u0045\uffff",
    DFA44_minS:
        "\u0001\u0010\u0040\u0000\u0001\uffff\u0002\u0000\u0002\uffff",
    DFA44_maxS:
        "\u0001\u0154\u0040\u0000\u0001\uffff\u0002\u0000\u0002\uffff",
    DFA44_acceptS:
        "\u0041\uffff\u0001\u0001\u0003\uffff\u0001\u0002",
    DFA44_specialS:
        "\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001"+
    "\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001\u000a\u0001"+
    "\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001\u0010\u0001"+
    "\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001"+
    "\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001"+
    "\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001\u0022\u0001"+
    "\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001\u0028\u0001"+
    "\u0029\u0001\u002a\u0001\u002b\u0001\u002c\u0001\u002d\u0001\u002e\u0001"+
    "\u002f\u0001\u0030\u0001\u0031\u0001\u0032\u0001\u0033\u0001\u0034\u0001"+
    "\u0035\u0001\u0036\u0001\u0037\u0001\u0038\u0001\u0039\u0001\u003a\u0001"+
    "\u003b\u0001\u003c\u0001\u003d\u0001\u003e\u0001\u003f\u0001\u0040\u0001"+
    "\uffff\u0001\u0041\u0001\u0042\u0002\uffff}>",
    DFA44_transitionS: [
            "\u0001\u0025\u0001\u0028\u0004\u0042\u0001\u001d\u0006\u0042"+
            "\u0001\u0029\u0001\u0042\u0001\u0020\u0004\u0042\u0001\u002b"+
            "\u0001\u002d\u0002\u0042\u0001\u0018\u0001\u0022\u0001\u0015"+
            "\u0002\u0042\u0001\u0043\u0002\u0042\u0001\u0008\u0002\u0042"+
            "\u0001\u002f\u0001\u002e\u0001\u0001\u0005\u0042\u0001\u0003"+
            "\u0006\u0042\u0001\u0043\u0003\u0042\u0001\u0002\u0003\u0042"+
            "\u0001\u001c\u0003\u0042\u0001\u0035\u0004\u0042\u0001\u0014"+
            "\u0001\u0042\u0001\u0023\u0001\u0027\u0001\u0026\u0001\u0042"+
            "\u0001\u0021\u0003\u0042\u0001\u0033\u0001\u0032\u0001\u002c"+
            "\u0001\u0007\u0003\u0042\u0001\u001e\u0003\u0042\u0001\u0005"+
            "\u0001\u0042\u0001\u0017\u0001\u000b\u0001\u0040\u000f\u0042"+
            "\u0001\u0034\u0009\u0042\u0001\u0004\u0001\u0006\u0007\u0042"+
            "\u0001\u003c\u0001\u0039\u0001\u0042\u0001\u0030\u0004\u0042"+
            "\u0001\u003a\u0001\u003b\u0002\u0042\u0001\u0016\u002c\u0042"+
            "\u0001\u003d\u0001\u003e\u0001\u003f\u0002\u0042\u0001\u0036"+
            "\u000a\u0042\u0001\u001f\u0003\u0042\u0001\uffff\u0001\u000e"+
            "\u0001\uffff\u0001\u0012\u0001\u0024\u0006\uffff\u0001\u0041"+
            "\u0004\uffff\u0001\u0037\u0001\u0009\u0001\u000a\u0001\u0019"+
            "\u0005\uffff\u0001\u000c\u0001\u000d\u0001\u0013\u0001\u002a"+
            "\u000c\uffff\u0001\u0031\u0002\uffff\u0001\u0011\u0001\u0010"+
            "\u0002\uffff\u0001\u0042\u0006\uffff\u0001\u0038\u0001\u001a"+
            "\u0001\u001b\u0003\u000f\u003b\uffff\u0001\u0042",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA44_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_eotS),
    DFA44_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_eofS),
    DFA44_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA44_minS),
    DFA44_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA44_maxS),
    DFA44_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_acceptS),
    DFA44_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_specialS),
    DFA44_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA44_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA44_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA44 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 44;
    this.eot = XQueryParser.DFA44_eot;
    this.eof = XQueryParser.DFA44_eof;
    this.min = XQueryParser.DFA44_min;
    this.max = XQueryParser.DFA44_max;
    this.accept = XQueryParser.DFA44_accept;
    this.special = XQueryParser.DFA44_special;
    this.transition = XQueryParser.DFA44_transition;
};

org.antlr.lang.extend(XQueryParser.DFA44, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "493:1: pm_QueryBody : ({...}? => p_Program | p_Expr[true,true] );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA44_0 = input.LA(1);

                             
                            var index44_0 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA44_0==FOR) ) {s = 1;}

                            else if ( (LA44_0==LET) ) {s = 2;}

                            else if ( (LA44_0==IF) ) {s = 3;}

                            else if ( (LA44_0==SWITCH) ) {s = 4;}

                            else if ( (LA44_0==TYPESWITCH) ) {s = 5;}

                            else if ( (LA44_0==TRY) ) {s = 6;}

                            else if ( (LA44_0==SOME) ) {s = 7;}

                            else if ( (LA44_0==EVERY) ) {s = 8;}

                            else if ( (LA44_0==PLUS) ) {s = 9;}

                            else if ( (LA44_0==MINUS) ) {s = 10;}

                            else if ( (LA44_0==VALIDATE) ) {s = 11;}

                            else if ( (LA44_0==SLASH) ) {s = 12;}

                            else if ( (LA44_0==SLASH_SLASH) ) {s = 13;}

                            else if ( (LA44_0==LPAREN) ) {s = 14;}

                            else if ( ((LA44_0>=L_IntegerLiteral && LA44_0<=L_DoubleLiteral)) ) {s = 15;}

                            else if ( (LA44_0==QUOT) ) {s = 16;}

                            else if ( (LA44_0==APOS) ) {s = 17;}

                            else if ( (LA44_0==DOLLAR) ) {s = 18;}

                            else if ( (LA44_0==DOT) ) {s = 19;}

                            else if ( (LA44_0==ORDERED) ) {s = 20;}

                            else if ( (LA44_0==ELEMENT) ) {s = 21;}

                            else if ( (LA44_0==UPDATING) ) {s = 22;}

                            else if ( (LA44_0==UNORDERED) ) {s = 23;}

                            else if ( (LA44_0==DOCUMENT) ) {s = 24;}

                            else if ( (LA44_0==SMALLER) ) {s = 25;}

                            else if ( (LA44_0==L_DirCommentConstructor) ) {s = 26;}

                            else if ( (LA44_0==L_DirPIConstructor) ) {s = 27;}

                            else if ( (LA44_0==NAMESPACE) ) {s = 28;}

                            else if ( (LA44_0==ATTRIBUTE) ) {s = 29;}

                            else if ( (LA44_0==TEXT) ) {s = 30;}

                            else if ( (LA44_0==BINARY) ) {s = 31;}

                            else if ( (LA44_0==COMMENT) ) {s = 32;}

                            else if ( (LA44_0==PROCESSING_INSTRUCTION) ) {s = 33;}

                            else if ( (LA44_0==DOCUMENT_NODE) ) {s = 34;}

                            else if ( (LA44_0==PARENT) ) {s = 35;}

                            else if ( (LA44_0==LBRACKET) ) {s = 36;}

                            else if ( (LA44_0==ANCESTOR) ) {s = 37;}

                            else if ( (LA44_0==PRECEDING_SIBLING) ) {s = 38;}

                            else if ( (LA44_0==PRECEDING) ) {s = 39;}

                            else if ( (LA44_0==ANCESTOR_OR_SELF) ) {s = 40;}

                            else if ( (LA44_0==CHILD) ) {s = 41;}

                            else if ( (LA44_0==DOT_DOT) ) {s = 42;}

                            else if ( (LA44_0==DESCENDANT) ) {s = 43;}

                            else if ( (LA44_0==SELF) ) {s = 44;}

                            else if ( (LA44_0==DESCENDANT_OR_SELF) ) {s = 45;}

                            else if ( (LA44_0==FOLLOWING_SIBLING) ) {s = 46;}

                            else if ( (LA44_0==FOLLOWING) ) {s = 47;}

                            else if ( (LA44_0==INSERT) ) {s = 48;}

                            else if ( (LA44_0==ATTR_SIGN) ) {s = 49;}

                            else if ( (LA44_0==SCHEMA_ELEMENT) ) {s = 50;}

                            else if ( (LA44_0==SCHEMA_ATTRIBUTE) ) {s = 51;}

                            else if ( (LA44_0==NAMESPACE_NODE) ) {s = 52;}

                            else if ( (LA44_0==NODE) ) {s = 53;}

                            else if ( (LA44_0==WHILE) ) {s = 54;}

                            else if ( (LA44_0==STAR) ) {s = 55;}

                            else if ( (LA44_0==L_Pragma) ) {s = 56;}

                            else if ( (LA44_0==DELETE) ) {s = 57;}

                            else if ( (LA44_0==RENAME) ) {s = 58;}

                            else if ( (LA44_0==REPLACE) ) {s = 59;}

                            else if ( (LA44_0==COPY) ) {s = 60;}

                            else if ( (LA44_0==BREAK) ) {s = 61;}

                            else if ( (LA44_0==CONTINUE) ) {s = 62;}

                            else if ( (LA44_0==EXIT) ) {s = 63;}

                            else if ( (LA44_0==VARIABLE) ) {s = 64;}

                            else if ( (LA44_0==EOF||LA44_0==ANN_PERCENT) && ((this.lc(XQS)))) {s = 65;}

                            else if ( ((LA44_0>=AND && LA44_0<=AT)||(LA44_0>=BASE_URI && LA44_0<=CASTABLE)||LA44_0==COLLATION||(LA44_0>=CONSTRUCTION && LA44_0<=DEFAULT)||(LA44_0>=DESCENDING && LA44_0<=DIV)||(LA44_0>=ELSE && LA44_0<=EMPTY)||(LA44_0>=ENCODING && LA44_0<=EQ)||(LA44_0>=EXCEPT && LA44_0<=EXTERNAL)||(LA44_0>=FUNCTION && LA44_0<=IDIV)||(LA44_0>=IMPORT && LA44_0<=IS)||(LA44_0>=LAX && LA44_0<=LEAST)||(LA44_0>=LT && LA44_0<=MODULE)||(LA44_0>=NE && LA44_0<=NO_PRESERVE)||(LA44_0>=OF && LA44_0<=ORDER)||LA44_0==ORDERING||LA44_0==PRESERVE||(LA44_0>=RETURN && LA44_0<=SCHEMA)||(LA44_0>=STABLE && LA44_0<=STRIP)||(LA44_0>=THEN && LA44_0<=TREAT)||LA44_0==UNION||(LA44_0>=VERSION && LA44_0<=MINUS_SIGN)||(LA44_0>=NAN && LA44_0<=START)||(LA44_0>=TUMBLING && LA44_0<=BEFORE)||LA44_0==FIRST||(LA44_0>=INTO && LA44_0<=NODES)||(LA44_0>=REVALIDATION && LA44_0<=SKIP)||(LA44_0>=VALUE && LA44_0<=WORDS)||(LA44_0>=LOOP && LA44_0<=RETURNING)||(LA44_0>=CHECK && LA44_0<=UNIQUE)||(LA44_0>=AMP_ER && LA44_0<=QUOT_ER)||LA44_0==L_NCName||LA44_0==EXPLICITLY) ) {s = 66;}

                            else if ( (LA44_0==EMPTY_SEQUENCE||LA44_0==ITEM) ) {s = 67;}

                             
                            input.seek(index44_0);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA44_1 = input.LA(1);

                             
                            var index44_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_1);
                            if ( s>=0 ) return s;
                            break;
                        case 2 : 
                            var LA44_2 = input.LA(1);

                             
                            var index44_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_2);
                            if ( s>=0 ) return s;
                            break;
                        case 3 : 
                            var LA44_3 = input.LA(1);

                             
                            var index44_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_3);
                            if ( s>=0 ) return s;
                            break;
                        case 4 : 
                            var LA44_4 = input.LA(1);

                             
                            var index44_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_4);
                            if ( s>=0 ) return s;
                            break;
                        case 5 : 
                            var LA44_5 = input.LA(1);

                             
                            var index44_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_5);
                            if ( s>=0 ) return s;
                            break;
                        case 6 : 
                            var LA44_6 = input.LA(1);

                             
                            var index44_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_6);
                            if ( s>=0 ) return s;
                            break;
                        case 7 : 
                            var LA44_7 = input.LA(1);

                             
                            var index44_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_7);
                            if ( s>=0 ) return s;
                            break;
                        case 8 : 
                            var LA44_8 = input.LA(1);

                             
                            var index44_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_8);
                            if ( s>=0 ) return s;
                            break;
                        case 9 : 
                            var LA44_9 = input.LA(1);

                             
                            var index44_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_9);
                            if ( s>=0 ) return s;
                            break;
                        case 10 : 
                            var LA44_10 = input.LA(1);

                             
                            var index44_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_10);
                            if ( s>=0 ) return s;
                            break;
                        case 11 : 
                            var LA44_11 = input.LA(1);

                             
                            var index44_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_11);
                            if ( s>=0 ) return s;
                            break;
                        case 12 : 
                            var LA44_12 = input.LA(1);

                             
                            var index44_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_12);
                            if ( s>=0 ) return s;
                            break;
                        case 13 : 
                            var LA44_13 = input.LA(1);

                             
                            var index44_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_13);
                            if ( s>=0 ) return s;
                            break;
                        case 14 : 
                            var LA44_14 = input.LA(1);

                             
                            var index44_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_14);
                            if ( s>=0 ) return s;
                            break;
                        case 15 : 
                            var LA44_15 = input.LA(1);

                             
                            var index44_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_15);
                            if ( s>=0 ) return s;
                            break;
                        case 16 : 
                            var LA44_16 = input.LA(1);

                             
                            var index44_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_16);
                            if ( s>=0 ) return s;
                            break;
                        case 17 : 
                            var LA44_17 = input.LA(1);

                             
                            var index44_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_17);
                            if ( s>=0 ) return s;
                            break;
                        case 18 : 
                            var LA44_18 = input.LA(1);

                             
                            var index44_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_18);
                            if ( s>=0 ) return s;
                            break;
                        case 19 : 
                            var LA44_19 = input.LA(1);

                             
                            var index44_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_19);
                            if ( s>=0 ) return s;
                            break;
                        case 20 : 
                            var LA44_20 = input.LA(1);

                             
                            var index44_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_20);
                            if ( s>=0 ) return s;
                            break;
                        case 21 : 
                            var LA44_21 = input.LA(1);

                             
                            var index44_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_21);
                            if ( s>=0 ) return s;
                            break;
                        case 22 : 
                            var LA44_22 = input.LA(1);

                             
                            var index44_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_22);
                            if ( s>=0 ) return s;
                            break;
                        case 23 : 
                            var LA44_23 = input.LA(1);

                             
                            var index44_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_23);
                            if ( s>=0 ) return s;
                            break;
                        case 24 : 
                            var LA44_24 = input.LA(1);

                             
                            var index44_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_24);
                            if ( s>=0 ) return s;
                            break;
                        case 25 : 
                            var LA44_25 = input.LA(1);

                             
                            var index44_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_25);
                            if ( s>=0 ) return s;
                            break;
                        case 26 : 
                            var LA44_26 = input.LA(1);

                             
                            var index44_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_26);
                            if ( s>=0 ) return s;
                            break;
                        case 27 : 
                            var LA44_27 = input.LA(1);

                             
                            var index44_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_27);
                            if ( s>=0 ) return s;
                            break;
                        case 28 : 
                            var LA44_28 = input.LA(1);

                             
                            var index44_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_28);
                            if ( s>=0 ) return s;
                            break;
                        case 29 : 
                            var LA44_29 = input.LA(1);

                             
                            var index44_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_29);
                            if ( s>=0 ) return s;
                            break;
                        case 30 : 
                            var LA44_30 = input.LA(1);

                             
                            var index44_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_30);
                            if ( s>=0 ) return s;
                            break;
                        case 31 : 
                            var LA44_31 = input.LA(1);

                             
                            var index44_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((((this.lc(XQS))&&(this.lc(MLS)))||(this.lc(XQS))||((this.lc(XQS))&&(this.lc(MLS)))||((this.lc(XQS))&&(this.lc(MLS)))||((this.lc(XQS))&&(this.lc(MLS))))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_31);
                            if ( s>=0 ) return s;
                            break;
                        case 32 : 
                            var LA44_32 = input.LA(1);

                             
                            var index44_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_32);
                            if ( s>=0 ) return s;
                            break;
                        case 33 : 
                            var LA44_33 = input.LA(1);

                             
                            var index44_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_33);
                            if ( s>=0 ) return s;
                            break;
                        case 34 : 
                            var LA44_34 = input.LA(1);

                             
                            var index44_34 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_34);
                            if ( s>=0 ) return s;
                            break;
                        case 35 : 
                            var LA44_35 = input.LA(1);

                             
                            var index44_35 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_35);
                            if ( s>=0 ) return s;
                            break;
                        case 36 : 
                            var LA44_36 = input.LA(1);

                             
                            var index44_36 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_36);
                            if ( s>=0 ) return s;
                            break;
                        case 37 : 
                            var LA44_37 = input.LA(1);

                             
                            var index44_37 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_37);
                            if ( s>=0 ) return s;
                            break;
                        case 38 : 
                            var LA44_38 = input.LA(1);

                             
                            var index44_38 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_38);
                            if ( s>=0 ) return s;
                            break;
                        case 39 : 
                            var LA44_39 = input.LA(1);

                             
                            var index44_39 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_39);
                            if ( s>=0 ) return s;
                            break;
                        case 40 : 
                            var LA44_40 = input.LA(1);

                             
                            var index44_40 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_40);
                            if ( s>=0 ) return s;
                            break;
                        case 41 : 
                            var LA44_41 = input.LA(1);

                             
                            var index44_41 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_41);
                            if ( s>=0 ) return s;
                            break;
                        case 42 : 
                            var LA44_42 = input.LA(1);

                             
                            var index44_42 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_42);
                            if ( s>=0 ) return s;
                            break;
                        case 43 : 
                            var LA44_43 = input.LA(1);

                             
                            var index44_43 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_43);
                            if ( s>=0 ) return s;
                            break;
                        case 44 : 
                            var LA44_44 = input.LA(1);

                             
                            var index44_44 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_44);
                            if ( s>=0 ) return s;
                            break;
                        case 45 : 
                            var LA44_45 = input.LA(1);

                             
                            var index44_45 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_45);
                            if ( s>=0 ) return s;
                            break;
                        case 46 : 
                            var LA44_46 = input.LA(1);

                             
                            var index44_46 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_46);
                            if ( s>=0 ) return s;
                            break;
                        case 47 : 
                            var LA44_47 = input.LA(1);

                             
                            var index44_47 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_47);
                            if ( s>=0 ) return s;
                            break;
                        case 48 : 
                            var LA44_48 = input.LA(1);

                             
                            var index44_48 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((((this.lc(XQS))&&(this.lc(XQU)))||(this.lc(XQS)))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_48);
                            if ( s>=0 ) return s;
                            break;
                        case 49 : 
                            var LA44_49 = input.LA(1);

                             
                            var index44_49 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_49);
                            if ( s>=0 ) return s;
                            break;
                        case 50 : 
                            var LA44_50 = input.LA(1);

                             
                            var index44_50 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_50);
                            if ( s>=0 ) return s;
                            break;
                        case 51 : 
                            var LA44_51 = input.LA(1);

                             
                            var index44_51 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_51);
                            if ( s>=0 ) return s;
                            break;
                        case 52 : 
                            var LA44_52 = input.LA(1);

                             
                            var index44_52 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_52);
                            if ( s>=0 ) return s;
                            break;
                        case 53 : 
                            var LA44_53 = input.LA(1);

                             
                            var index44_53 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_53);
                            if ( s>=0 ) return s;
                            break;
                        case 54 : 
                            var LA44_54 = input.LA(1);

                             
                            var index44_54 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_54);
                            if ( s>=0 ) return s;
                            break;
                        case 55 : 
                            var LA44_55 = input.LA(1);

                             
                            var index44_55 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_55);
                            if ( s>=0 ) return s;
                            break;
                        case 56 : 
                            var LA44_56 = input.LA(1);

                             
                            var index44_56 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_56);
                            if ( s>=0 ) return s;
                            break;
                        case 57 : 
                            var LA44_57 = input.LA(1);

                             
                            var index44_57 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((((this.lc(XQS))&&(this.lc(XQU)))||(this.lc(XQS)))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_57);
                            if ( s>=0 ) return s;
                            break;
                        case 58 : 
                            var LA44_58 = input.LA(1);

                             
                            var index44_58 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((((this.lc(XQS))&&(this.lc(XQU)))||(this.lc(XQS)))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_58);
                            if ( s>=0 ) return s;
                            break;
                        case 59 : 
                            var LA44_59 = input.LA(1);

                             
                            var index44_59 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((((this.lc(XQS))&&(this.lc(XQU)))||(this.lc(XQS)))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_59);
                            if ( s>=0 ) return s;
                            break;
                        case 60 : 
                            var LA44_60 = input.LA(1);

                             
                            var index44_60 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((((this.lc(XQS))&&(this.lc(XQU)))||(this.lc(XQS)))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_60);
                            if ( s>=0 ) return s;
                            break;
                        case 61 : 
                            var LA44_61 = input.LA(1);

                             
                            var index44_61 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_61);
                            if ( s>=0 ) return s;
                            break;
                        case 62 : 
                            var LA44_62 = input.LA(1);

                             
                            var index44_62 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_62);
                            if ( s>=0 ) return s;
                            break;
                        case 63 : 
                            var LA44_63 = input.LA(1);

                             
                            var index44_63 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_63);
                            if ( s>=0 ) return s;
                            break;
                        case 64 : 
                            var LA44_64 = input.LA(1);

                             
                            var index44_64 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_64);
                            if ( s>=0 ) return s;
                            break;
                        case 65 : 
                            var LA44_66 = input.LA(1);

                             
                            var index44_66 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_66);
                            if ( s>=0 ) return s;
                            break;
                        case 66 : 
                            var LA44_67 = input.LA(1);

                             
                            var index44_67 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.lc(XQS))) ) {s = 65;}

                            else if ( (true) ) {s = 69;}

                             
                            input.seek(index44_67);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 44, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA46_eotS:
        "\u0011\uffff",
    DFA46_eofS:
        "\u0001\uffff\u0006\u0007\u000a\uffff",
    DFA46_minS:
        "\u0001\u0010\u0006\u0012\u000a\uffff",
    DFA46_maxS:
        "\u0001\u0154\u0006\u00fe\u000a\uffff",
    DFA46_acceptS:
        "\u0007\uffff\u0001\u0006\u0005\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005",
    DFA46_specialS:
        "\u0001\uffff\u0001\u0003\u0001\u0000\u0001\u0005\u0001\u0001\u0001"+
    "\u0004\u0001\u0002\u000a\uffff}>",
    DFA46_transitionS: [
            "\u0025\u0007\u0001\u0001\u0005\u0007\u0001\u0003\u000a\u0007"+
            "\u0001\u0002\u0021\u0007\u0001\u0005\u001d\u0007\u0001\u0004"+
            "\u0001\u0006\u0054\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
            "\u0002\u0007\u000b\uffff\u0004\u0007\u0005\uffff\u0004\u0007"+
            "\u000c\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0002\uffff"+
            "\u0001\u0007\u0006\uffff\u0006\u0007\u003b\uffff\u0001\u0007",
            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
            "\u0001\u0007\u0004\uffff\u0001\u0007\u0003\uffff\u0002\u0007"+
            "\u0006\uffff\u0001\u0007\u0004\uffff\u0001\u000a\u0001\u0007"+
            "\u0002\uffff\u0001\u0009\u0004\uffff\u0002\u0007\u0004\uffff"+
            "\u0001\u0007\u0001\uffff\u0001\u0007\u0007\uffff\u0001\u0007"+
            "\u0002\uffff\u0001\u0007\u003b\uffff\u0003\u0007\u0001\u0008"+
            "\u0001\uffff\u0004\u0007\u0001\uffff\u0001\u0007\u0003\uffff"+
            "\u0001\u0007\u0001\uffff\u000b\u0007\u0002\uffff\u0001\u0007"+
            "\u0003\uffff\u0002\u0007",
            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
            "\u0001\u0007\u0004\uffff\u0001\u0007\u0003\uffff\u0002\u0007"+
            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u0018\uffff"+
            "\u0001\u000c\u0022\uffff\u0003\u0007\u0001\u000b\u0001\uffff"+
            "\u0004\u0007\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0007"+
            "\u0001\uffff\u000b\u0007\u0002\uffff\u0001\u0007\u0003\uffff"+
            "\u0002\u0007",
            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
            "\u0001\u0007\u0004\uffff\u0001\u0007\u0003\uffff\u0002\u0007"+
            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u003b\uffff"+
            "\u0001\u0007\u0001\u000d\u0001\u0007\u0002\uffff\u0004\u0007"+
            "\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0007\u0001\uffff"+
            "\u000b\u0007\u0002\uffff\u0001\u0007\u0003\uffff\u0002\u0007",
            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
            "\u0001\u0007\u0004\uffff\u0001\u0007\u0003\uffff\u0002\u0007"+
            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u003b\uffff"+
            "\u0001\u0007\u0001\u000e\u0001\u0007\u0002\uffff\u0004\u0007"+
            "\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0007\u0001\uffff"+
            "\u000b\u0007\u0002\uffff\u0001\u0007\u0003\uffff\u0002\u0007",
            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
            "\u0001\u0007\u0004\uffff\u0001\u0007\u0003\uffff\u0002\u0007"+
            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u003b\uffff"+
            "\u0001\u0007\u0001\u000f\u0001\u0007\u0002\uffff\u0004\u0007"+
            "\u0001\uffff\u0001\u0007\u0003\uffff\u0001\u0007\u0001\uffff"+
            "\u000b\u0007\u0002\uffff\u0001\u0007\u0003\uffff\u0002\u0007",
            "\u0003\u0007\u0005\uffff\u0003\u0007\u0001\uffff\u0001\u0007"+
            "\u0004\uffff\u0001\u0007\u0002\uffff\u0002\u0007\u0004\uffff"+
            "\u0001\u0007\u0002\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0003\uffff\u0001\u0007\u0001\uffff\u0001\u0007\u0001\uffff"+
            "\u0002\u0007\u0004\uffff\u0003\u0007\u0002\uffff\u0001\u0007"+
            "\u0001\uffff\u0003\u0007\u0002\uffff\u0001\u0007\u0005\uffff"+
            "\u0002\u0007\u0007\uffff\u0002\u0007\u0005\uffff\u0001\u0007"+
            "\u0004\uffff\u0002\u0007\u0001\uffff\u0001\u0007\u0004\uffff"+
            "\u0001\u0007\u0004\uffff\u0001\u0007\u0003\uffff\u0002\u0007"+
            "\u0006\uffff\u0001\u0007\u0005\uffff\u0001\u0007\u0007\uffff"+
            "\u0002\u0007\u0004\uffff\u0001\u0007\u0001\uffff\u0001\u0007"+
            "\u0007\uffff\u0001\u0007\u0002\uffff\u0001\u0007\u003b\uffff"+
            "\u0003\u0007\u0001\uffff\u0001\u0010\u0004\u0007\u0001\uffff"+
            "\u0001\u0007\u0003\uffff\u0001\u0007\u0001\uffff\u000b\u0007"+
            "\u0002\uffff\u0001\u0007\u0003\uffff\u0002\u0007",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA46_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_eotS),
    DFA46_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_eofS),
    DFA46_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA46_minS),
    DFA46_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA46_maxS),
    DFA46_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_acceptS),
    DFA46_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_specialS),
    DFA46_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA46_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA46_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA46 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 46;
    this.eot = XQueryParser.DFA46_eot;
    this.eof = XQueryParser.DFA46_eof;
    this.min = XQueryParser.DFA46_min;
    this.max = XQueryParser.DFA46_max;
    this.accept = XQueryParser.DFA46_accept;
    this.special = XQueryParser.DFA46_special;
    this.transition = XQueryParser.DFA46_transition;
};

org.antlr.lang.extend(XQueryParser.DFA46, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "529:1: p_ExprSingle[strict] : ( ( ( ( FOR | LET ) DOLLAR ) | ( FOR ( TUMBLING | SLIDING ) ) )=> p_FLWORHybrid[$strict] | ( IF LPAREN )=> p_IfHybrid[$strict] | ( SWITCH LPAREN )=> p_SwitchHybrid[$strict] | ( TYPESWITCH LPAREN )=> p_TypeswitchHybrid[$strict] | ( TRY LBRACKET )=> p_TryCatchHybrid[$strict] | p_ExprSimple );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA46_2 = input.LA(1);

                             
                            var index46_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA46_2==DOLLAR) && (this.synpred1_XQueryParser())) {s = 11;}

                            else if ( (LA46_2==SCORE) && (this.synpred1_XQueryParser())) {s = 12;}

                            else if ( (LA46_2==EOF||(LA46_2>=AND && LA46_2<=ASCENDING)||(LA46_2>=CASE && LA46_2<=CASTABLE)||LA46_2==COLLATION||LA46_2==DEFAULT||(LA46_2>=DESCENDING && LA46_2<=DIV)||LA46_2==EMPTY||LA46_2==EQ||LA46_2==EXCEPT||LA46_2==FOR||LA46_2==GE||(LA46_2>=GT && LA46_2<=IDIV)||(LA46_2>=INSTANCE && LA46_2<=IS)||LA46_2==LE||(LA46_2>=LET && LA46_2<=MOD)||LA46_2==NE||(LA46_2>=OR && LA46_2<=ORDER)||(LA46_2>=RETURN && LA46_2<=SATISFIES)||LA46_2==STABLE||(LA46_2>=TO && LA46_2<=TREAT)||LA46_2==UNION||LA46_2==WHERE||LA46_2==COUNT||(LA46_2>=END && LA46_2<=GROUP)||LA46_2==ONLY||LA46_2==START||(LA46_2>=AFTER && LA46_2<=BEFORE)||LA46_2==INTO||LA46_2==MODIFY||LA46_2==WITH||LA46_2==CONTAINS||(LA46_2>=CONCAT && LA46_2<=RPAREN)||(LA46_2>=RBRACKET && LA46_2<=EQUAL)||LA46_2==NOTEQUAL||LA46_2==COMMA||(LA46_2>=STAR && LA46_2<=SLASH_SLASH)||LA46_2==COLON||(LA46_2>=SEMICOLON && LA46_2<=VBAR)) ) {s = 7;}

                             
                            input.seek(index46_2);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA46_4 = input.LA(1);

                             
                            var index46_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA46_4==LPAREN) && (this.synpred3_XQueryParser())) {s = 14;}

                            else if ( (LA46_4==EOF||(LA46_4>=AND && LA46_4<=ASCENDING)||(LA46_4>=CASE && LA46_4<=CASTABLE)||LA46_4==COLLATION||LA46_4==DEFAULT||(LA46_4>=DESCENDING && LA46_4<=DIV)||LA46_4==EMPTY||LA46_4==EQ||LA46_4==EXCEPT||LA46_4==FOR||LA46_4==GE||(LA46_4>=GT && LA46_4<=IDIV)||(LA46_4>=INSTANCE && LA46_4<=IS)||LA46_4==LE||(LA46_4>=LET && LA46_4<=MOD)||LA46_4==NE||(LA46_4>=OR && LA46_4<=ORDER)||(LA46_4>=RETURN && LA46_4<=SATISFIES)||LA46_4==STABLE||(LA46_4>=TO && LA46_4<=TREAT)||LA46_4==UNION||LA46_4==WHERE||LA46_4==COUNT||(LA46_4>=END && LA46_4<=GROUP)||LA46_4==ONLY||LA46_4==START||(LA46_4>=AFTER && LA46_4<=BEFORE)||LA46_4==INTO||LA46_4==MODIFY||LA46_4==WITH||LA46_4==CONTAINS||LA46_4==CONCAT||LA46_4==RPAREN||(LA46_4>=RBRACKET && LA46_4<=EQUAL)||LA46_4==NOTEQUAL||LA46_4==COMMA||(LA46_4>=STAR && LA46_4<=SLASH_SLASH)||LA46_4==COLON||(LA46_4>=SEMICOLON && LA46_4<=VBAR)) ) {s = 7;}

                             
                            input.seek(index46_4);
                            if ( s>=0 ) return s;
                            break;
                        case 2 : 
                            var LA46_6 = input.LA(1);

                             
                            var index46_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA46_6==LBRACKET) && (this.synpred5_XQueryParser())) {s = 16;}

                            else if ( (LA46_6==EOF||(LA46_6>=AND && LA46_6<=ASCENDING)||(LA46_6>=CASE && LA46_6<=CASTABLE)||LA46_6==COLLATION||LA46_6==DEFAULT||(LA46_6>=DESCENDING && LA46_6<=DIV)||LA46_6==EMPTY||LA46_6==EQ||LA46_6==EXCEPT||LA46_6==FOR||LA46_6==GE||(LA46_6>=GT && LA46_6<=IDIV)||(LA46_6>=INSTANCE && LA46_6<=IS)||LA46_6==LE||(LA46_6>=LET && LA46_6<=MOD)||LA46_6==NE||(LA46_6>=OR && LA46_6<=ORDER)||(LA46_6>=RETURN && LA46_6<=SATISFIES)||LA46_6==STABLE||(LA46_6>=TO && LA46_6<=TREAT)||LA46_6==UNION||LA46_6==WHERE||LA46_6==COUNT||(LA46_6>=END && LA46_6<=GROUP)||LA46_6==ONLY||LA46_6==START||(LA46_6>=AFTER && LA46_6<=BEFORE)||LA46_6==INTO||LA46_6==MODIFY||LA46_6==WITH||LA46_6==CONTAINS||(LA46_6>=CONCAT && LA46_6<=RPAREN)||(LA46_6>=RBRACKET && LA46_6<=EQUAL)||LA46_6==NOTEQUAL||LA46_6==COMMA||(LA46_6>=STAR && LA46_6<=SLASH_SLASH)||LA46_6==COLON||(LA46_6>=SEMICOLON && LA46_6<=VBAR)) ) {s = 7;}

                             
                            input.seek(index46_6);
                            if ( s>=0 ) return s;
                            break;
                        case 3 : 
                            var LA46_1 = input.LA(1);

                             
                            var index46_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA46_1==DOLLAR) && (this.synpred1_XQueryParser())) {s = 8;}

                            else if ( (LA46_1==TUMBLING) && (this.synpred1_XQueryParser())) {s = 9;}

                            else if ( (LA46_1==SLIDING) && (this.synpred1_XQueryParser())) {s = 10;}

                            else if ( (LA46_1==EOF||(LA46_1>=AND && LA46_1<=ASCENDING)||(LA46_1>=CASE && LA46_1<=CASTABLE)||LA46_1==COLLATION||LA46_1==DEFAULT||(LA46_1>=DESCENDING && LA46_1<=DIV)||LA46_1==EMPTY||LA46_1==EQ||LA46_1==EXCEPT||LA46_1==FOR||LA46_1==GE||(LA46_1>=GT && LA46_1<=IDIV)||(LA46_1>=INSTANCE && LA46_1<=IS)||LA46_1==LE||(LA46_1>=LET && LA46_1<=MOD)||LA46_1==NE||(LA46_1>=OR && LA46_1<=ORDER)||(LA46_1>=RETURN && LA46_1<=SATISFIES)||LA46_1==STABLE||(LA46_1>=TO && LA46_1<=TREAT)||LA46_1==UNION||LA46_1==WHERE||LA46_1==COUNT||(LA46_1>=END && LA46_1<=GROUP)||LA46_1==ONLY||LA46_1==START||(LA46_1>=AFTER && LA46_1<=BEFORE)||LA46_1==INTO||LA46_1==MODIFY||LA46_1==WITH||LA46_1==CONTAINS||(LA46_1>=CONCAT && LA46_1<=RPAREN)||(LA46_1>=RBRACKET && LA46_1<=EQUAL)||LA46_1==NOTEQUAL||LA46_1==COMMA||(LA46_1>=STAR && LA46_1<=SLASH_SLASH)||LA46_1==COLON||(LA46_1>=SEMICOLON && LA46_1<=VBAR)) ) {s = 7;}

                             
                            input.seek(index46_1);
                            if ( s>=0 ) return s;
                            break;
                        case 4 : 
                            var LA46_5 = input.LA(1);

                             
                            var index46_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA46_5==LPAREN) && (this.synpred4_XQueryParser())) {s = 15;}

                            else if ( (LA46_5==EOF||(LA46_5>=AND && LA46_5<=ASCENDING)||(LA46_5>=CASE && LA46_5<=CASTABLE)||LA46_5==COLLATION||LA46_5==DEFAULT||(LA46_5>=DESCENDING && LA46_5<=DIV)||LA46_5==EMPTY||LA46_5==EQ||LA46_5==EXCEPT||LA46_5==FOR||LA46_5==GE||(LA46_5>=GT && LA46_5<=IDIV)||(LA46_5>=INSTANCE && LA46_5<=IS)||LA46_5==LE||(LA46_5>=LET && LA46_5<=MOD)||LA46_5==NE||(LA46_5>=OR && LA46_5<=ORDER)||(LA46_5>=RETURN && LA46_5<=SATISFIES)||LA46_5==STABLE||(LA46_5>=TO && LA46_5<=TREAT)||LA46_5==UNION||LA46_5==WHERE||LA46_5==COUNT||(LA46_5>=END && LA46_5<=GROUP)||LA46_5==ONLY||LA46_5==START||(LA46_5>=AFTER && LA46_5<=BEFORE)||LA46_5==INTO||LA46_5==MODIFY||LA46_5==WITH||LA46_5==CONTAINS||LA46_5==CONCAT||LA46_5==RPAREN||(LA46_5>=RBRACKET && LA46_5<=EQUAL)||LA46_5==NOTEQUAL||LA46_5==COMMA||(LA46_5>=STAR && LA46_5<=SLASH_SLASH)||LA46_5==COLON||(LA46_5>=SEMICOLON && LA46_5<=VBAR)) ) {s = 7;}

                             
                            input.seek(index46_5);
                            if ( s>=0 ) return s;
                            break;
                        case 5 : 
                            var LA46_3 = input.LA(1);

                             
                            var index46_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA46_3==LPAREN) && (this.synpred2_XQueryParser())) {s = 13;}

                            else if ( (LA46_3==EOF||(LA46_3>=AND && LA46_3<=ASCENDING)||(LA46_3>=CASE && LA46_3<=CASTABLE)||LA46_3==COLLATION||LA46_3==DEFAULT||(LA46_3>=DESCENDING && LA46_3<=DIV)||LA46_3==EMPTY||LA46_3==EQ||LA46_3==EXCEPT||LA46_3==FOR||LA46_3==GE||(LA46_3>=GT && LA46_3<=IDIV)||(LA46_3>=INSTANCE && LA46_3<=IS)||LA46_3==LE||(LA46_3>=LET && LA46_3<=MOD)||LA46_3==NE||(LA46_3>=OR && LA46_3<=ORDER)||(LA46_3>=RETURN && LA46_3<=SATISFIES)||LA46_3==STABLE||(LA46_3>=TO && LA46_3<=TREAT)||LA46_3==UNION||LA46_3==WHERE||LA46_3==COUNT||(LA46_3>=END && LA46_3<=GROUP)||LA46_3==ONLY||LA46_3==START||(LA46_3>=AFTER && LA46_3<=BEFORE)||LA46_3==INTO||LA46_3==MODIFY||LA46_3==WITH||LA46_3==CONTAINS||LA46_3==CONCAT||LA46_3==RPAREN||(LA46_3>=RBRACKET && LA46_3<=EQUAL)||LA46_3==NOTEQUAL||LA46_3==COMMA||(LA46_3>=STAR && LA46_3<=SLASH_SLASH)||LA46_3==COLON||(LA46_3>=SEMICOLON && LA46_3<=VBAR)) ) {s = 7;}

                             
                            input.seek(index46_3);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 46, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA115_eotS:
        "\u002f\uffff",
    DFA115_eofS:
        "\u002f\uffff",
    DFA115_minS:
        "\u0001\u0010\u0001\u0000\u002d\uffff",
    DFA115_maxS:
        "\u0001\u0154\u0001\u0000\u002d\uffff",
    DFA115_acceptS:
        "\u0002\uffff\u0001\u0003\u0001\u0004\u0029\uffff\u0001\u0001\u0001"+
    "\u0002",
    DFA115_specialS:
        "\u0001\uffff\u0001\u0000\u002d\uffff}>",
    DFA115_transitionS: [
            "\u00cc\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0002\u0003"+
            "\u000b\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u0005\uffff"+
            "\u0001\u0001\u0001\u0002\u0002\u0003\u000c\uffff\u0001\u0003"+
            "\u0002\uffff\u0002\u0003\u0002\uffff\u0001\u0003\u0007\uffff"+
            "\u0005\u0003\u003b\uffff\u0001\u0003",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA115_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA115_eotS),
    DFA115_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA115_eofS),
    DFA115_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA115_minS),
    DFA115_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA115_maxS),
    DFA115_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA115_acceptS),
    DFA115_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA115_specialS),
    DFA115_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA115_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA115_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA115 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 115;
    this.eot = XQueryParser.DFA115_eot;
    this.eof = XQueryParser.DFA115_eof;
    this.min = XQueryParser.DFA115_min;
    this.max = XQueryParser.DFA115_max;
    this.accept = XQueryParser.DFA115_accept;
    this.special = XQueryParser.DFA115_special;
    this.transition = XQueryParser.DFA115_transition;
};

org.antlr.lang.extend(XQueryParser.DFA115, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "864:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA115_1 = input.LA(1);

                             
                            var index115_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred7_XQueryParser()) ) {s = 45;}

                            else if ( (true) ) {s = 46;}

                             
                            input.seek(index115_1);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 115, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA117_eotS:
        "\u0031\uffff",
    DFA117_eofS:
        "\u0031\uffff",
    DFA117_minS:
        "\u0001\u0010\u002a\u0000\u0006\uffff",
    DFA117_maxS:
        "\u0001\u0154\u002a\u0000\u0006\uffff",
    DFA117_acceptS:
        "\u002b\uffff\u0001\u0001\u0001\u0002\u0001\u0004\u0001\u0005\u0001"+
    "\u0003\u0001\u0006",
    DFA117_specialS:
        "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008\u0001\u0009\u0001"+
    "\u000a\u0001\u000b\u0001\u000c\u0001\u000d\u0001\u000e\u0001\u000f\u0001"+
    "\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001"+
    "\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001"+
    "\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021\u0001"+
    "\u0022\u0001\u0023\u0001\u0024\u0001\u0025\u0001\u0026\u0001\u0027\u0001"+
    "\u0028\u0001\u0029\u0006\uffff}>",
    DFA117_transitionS: [
            "\u0001\u0018\u0001\u001b\u0004\u0023\u0001\u0010\u0006\u0023"+
            "\u0001\u001c\u0001\u0023\u0001\u0013\u0004\u0023\u0001\u001e"+
            "\u0001\u0020\u0002\u0023\u0001\u000b\u0001\u0015\u0001\u0008"+
            "\u0002\u0023\u0001\u0029\u0005\u0023\u0001\u0022\u0001\u0021"+
            "\u0006\u0023\u0001\u0029\u0006\u0023\u0001\u0029\u0007\u0023"+
            "\u0001\u000f\u0003\u0023\u0001\u0028\u0004\u0023\u0001\u0007"+
            "\u0001\u0023\u0001\u0016\u0001\u001a\u0001\u0019\u0001\u0023"+
            "\u0001\u0014\u0003\u0023\u0001\u0026\u0001\u0025\u0001\u001f"+
            "\u0004\u0023\u0001\u0011\u0003\u0023\u0001\u0029\u0001\u0023"+
            "\u0001\u000a\u0011\u0023\u0001\u0027\u0009\u0023\u0001\u0029"+
            "\u0014\u0023\u0001\u0009\u0031\u0023\u0001\u0029\u000a\u0023"+
            "\u0001\u0012\u0003\u0023\u0001\uffff\u0001\u0001\u0001\uffff"+
            "\u0001\u0005\u0001\u0017\u000b\uffff\u0001\u002a\u0002\uffff"+
            "\u0001\u000c\u0007\uffff\u0001\u0006\u0001\u001d\u000c\uffff"+
            "\u0001\u0024\u0002\uffff\u0001\u0004\u0001\u0003\u0002\uffff"+
            "\u0001\u0023\u0007\uffff\u0001\u000d\u0001\u000e\u0003\u0002"+
            "\u003b\uffff\u0001\u0023",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA117_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA117_eotS),
    DFA117_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA117_eofS),
    DFA117_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA117_minS),
    DFA117_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA117_maxS),
    DFA117_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA117_acceptS),
    DFA117_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA117_specialS),
    DFA117_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA117_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA117_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA117 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 117;
    this.eot = XQueryParser.DFA117_eot;
    this.eof = XQueryParser.DFA117_eof;
    this.min = XQueryParser.DFA117_min;
    this.max = XQueryParser.DFA117_max;
    this.accept = XQueryParser.DFA117_accept;
    this.special = XQueryParser.DFA117_special;
    this.transition = XQueryParser.DFA117_transition;
};

org.antlr.lang.extend(XQueryParser.DFA117, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "877:1: p_StepExpr : ( ( LBRACKET | LPAREN | SMALLER | QUOT | APOS | DOLLAR )=> p_PostfixExpr | ( ( ( ELEMENT | ATTRIBUTE ) ( p_QName )? LBRACKET ) | ( ( NAMESPACE | PROCESSING_INSTRUCTION ) ( p_NCName )? LBRACKET ) | ( ( DOCUMENT | TEXT | COMMENT ) LBRACKET ) )=> p_PostfixExpr | ( p_KindTest )=> p_AxisStep | ( p_QName LPAREN )=> p_PostfixExpr | ( p_PrimaryExpr )=> p_PostfixExpr | p_AxisStep );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA117_1 = input.LA(1);

                             
                            var index117_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                             
                            input.seek(index117_1);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA117_2 = input.LA(1);

                             
                            var index117_2 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                             
                            input.seek(index117_2);
                            if ( s>=0 ) return s;
                            break;
                        case 2 : 
                            var LA117_3 = input.LA(1);

                             
                            var index117_3 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_3);
                            if ( s>=0 ) return s;
                            break;
                        case 3 : 
                            var LA117_4 = input.LA(1);

                             
                            var index117_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_4);
                            if ( s>=0 ) return s;
                            break;
                        case 4 : 
                            var LA117_5 = input.LA(1);

                             
                            var index117_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                             
                            input.seek(index117_5);
                            if ( s>=0 ) return s;
                            break;
                        case 5 : 
                            var LA117_6 = input.LA(1);

                             
                            var index117_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                             
                            input.seek(index117_6);
                            if ( s>=0 ) return s;
                            break;
                        case 6 : 
                            var LA117_7 = input.LA(1);

                             
                            var index117_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_7);
                            if ( s>=0 ) return s;
                            break;
                        case 7 : 
                            var LA117_8 = input.LA(1);

                             
                            var index117_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_8);
                            if ( s>=0 ) return s;
                            break;
                        case 8 : 
                            var LA117_9 = input.LA(1);

                             
                            var index117_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                             
                            input.seek(index117_9);
                            if ( s>=0 ) return s;
                            break;
                        case 9 : 
                            var LA117_10 = input.LA(1);

                             
                            var index117_10 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_10);
                            if ( s>=0 ) return s;
                            break;
                        case 10 : 
                            var LA117_11 = input.LA(1);

                             
                            var index117_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_11);
                            if ( s>=0 ) return s;
                            break;
                        case 11 : 
                            var LA117_12 = input.LA(1);

                             
                            var index117_12 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                             
                            input.seek(index117_12);
                            if ( s>=0 ) return s;
                            break;
                        case 12 : 
                            var LA117_13 = input.LA(1);

                             
                            var index117_13 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                             
                            input.seek(index117_13);
                            if ( s>=0 ) return s;
                            break;
                        case 13 : 
                            var LA117_14 = input.LA(1);

                             
                            var index117_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                             
                            input.seek(index117_14);
                            if ( s>=0 ) return s;
                            break;
                        case 14 : 
                            var LA117_15 = input.LA(1);

                             
                            var index117_15 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_15);
                            if ( s>=0 ) return s;
                            break;
                        case 15 : 
                            var LA117_16 = input.LA(1);

                             
                            var index117_16 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_16);
                            if ( s>=0 ) return s;
                            break;
                        case 16 : 
                            var LA117_17 = input.LA(1);

                             
                            var index117_17 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_17);
                            if ( s>=0 ) return s;
                            break;
                        case 17 : 
                            var LA117_18 = input.LA(1);

                             
                            var index117_18 = input.index();
                            input.rewind();
                            s = -1;
                            if ( ((this.synpred8_XQueryParser()||(this.synpred8_XQueryParser()&&(this.lc(MLS))))) ) {s = 43;}

                            else if ( (((this.synpred9_XQueryParser()&&(this.lc(MLS)))||this.synpred9_XQueryParser())) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( ((this.synpred11_XQueryParser()||(this.synpred11_XQueryParser()&&(this.lc(MLS))))) ) {s = 45;}

                            else if ( (((this.synpred12_XQueryParser()&&(this.lc(MLS)))||this.synpred12_XQueryParser())) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_18);
                            if ( s>=0 ) return s;
                            break;
                        case 18 : 
                            var LA117_19 = input.LA(1);

                             
                            var index117_19 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_19);
                            if ( s>=0 ) return s;
                            break;
                        case 19 : 
                            var LA117_20 = input.LA(1);

                             
                            var index117_20 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_20);
                            if ( s>=0 ) return s;
                            break;
                        case 20 : 
                            var LA117_21 = input.LA(1);

                             
                            var index117_21 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_21);
                            if ( s>=0 ) return s;
                            break;
                        case 21 : 
                            var LA117_22 = input.LA(1);

                             
                            var index117_22 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_22);
                            if ( s>=0 ) return s;
                            break;
                        case 22 : 
                            var LA117_23 = input.LA(1);

                             
                            var index117_23 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                             
                            input.seek(index117_23);
                            if ( s>=0 ) return s;
                            break;
                        case 23 : 
                            var LA117_24 = input.LA(1);

                             
                            var index117_24 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_24);
                            if ( s>=0 ) return s;
                            break;
                        case 24 : 
                            var LA117_25 = input.LA(1);

                             
                            var index117_25 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_25);
                            if ( s>=0 ) return s;
                            break;
                        case 25 : 
                            var LA117_26 = input.LA(1);

                             
                            var index117_26 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_26);
                            if ( s>=0 ) return s;
                            break;
                        case 26 : 
                            var LA117_27 = input.LA(1);

                             
                            var index117_27 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_27);
                            if ( s>=0 ) return s;
                            break;
                        case 27 : 
                            var LA117_28 = input.LA(1);

                             
                            var index117_28 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_28);
                            if ( s>=0 ) return s;
                            break;
                        case 28 : 
                            var LA117_29 = input.LA(1);

                             
                            var index117_29 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_29);
                            if ( s>=0 ) return s;
                            break;
                        case 29 : 
                            var LA117_30 = input.LA(1);

                             
                            var index117_30 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_30);
                            if ( s>=0 ) return s;
                            break;
                        case 30 : 
                            var LA117_31 = input.LA(1);

                             
                            var index117_31 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_31);
                            if ( s>=0 ) return s;
                            break;
                        case 31 : 
                            var LA117_32 = input.LA(1);

                             
                            var index117_32 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_32);
                            if ( s>=0 ) return s;
                            break;
                        case 32 : 
                            var LA117_33 = input.LA(1);

                             
                            var index117_33 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_33);
                            if ( s>=0 ) return s;
                            break;
                        case 33 : 
                            var LA117_34 = input.LA(1);

                             
                            var index117_34 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_34);
                            if ( s>=0 ) return s;
                            break;
                        case 34 : 
                            var LA117_35 = input.LA(1);

                             
                            var index117_35 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_35);
                            if ( s>=0 ) return s;
                            break;
                        case 35 : 
                            var LA117_36 = input.LA(1);

                             
                            var index117_36 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_36);
                            if ( s>=0 ) return s;
                            break;
                        case 36 : 
                            var LA117_37 = input.LA(1);

                             
                            var index117_37 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_37);
                            if ( s>=0 ) return s;
                            break;
                        case 37 : 
                            var LA117_38 = input.LA(1);

                             
                            var index117_38 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_38);
                            if ( s>=0 ) return s;
                            break;
                        case 38 : 
                            var LA117_39 = input.LA(1);

                             
                            var index117_39 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_39);
                            if ( s>=0 ) return s;
                            break;
                        case 39 : 
                            var LA117_40 = input.LA(1);

                             
                            var index117_40 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_40);
                            if ( s>=0 ) return s;
                            break;
                        case 40 : 
                            var LA117_41 = input.LA(1);

                             
                            var index117_41 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred8_XQueryParser()) ) {s = 43;}

                            else if ( (this.synpred9_XQueryParser()) ) {s = 44;}

                            else if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (this.synpred11_XQueryParser()) ) {s = 45;}

                            else if ( (this.synpred12_XQueryParser()) ) {s = 46;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_41);
                            if ( s>=0 ) return s;
                            break;
                        case 41 : 
                            var LA117_42 = input.LA(1);

                             
                            var index117_42 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred10_XQueryParser()) ) {s = 47;}

                            else if ( (true) ) {s = 48;}

                             
                            input.seek(index117_42);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 117, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA119_eotS:
        "\u000a\uffff",
    DFA119_eofS:
        "\u0001\uffff\u0007\u0008\u0002\uffff",
    DFA119_minS:
        "\u0001\u0010\u0007\u0012\u0002\uffff",
    DFA119_maxS:
        "\u0001\u0154\u0007\u00fe\u0002\uffff",
    DFA119_acceptS:
        "\u0008\uffff\u0001\u0002\u0001\u0001",
    DFA119_specialS:
        "\u000a\uffff}>",
    DFA119_transitionS: [
            "\u0006\u0008\u0001\u0003\u0006\u0008\u0001\u0001\u0006\u0008"+
            "\u0001\u0002\u0001\u0005\u000d\u0008\u0001\u0007\u0001\u0006"+
            "\u002a\u0008\u0001\u0004\u003b\u0008\u0001\uffff\u0040\u0008"+
            "\u0010\uffff\u0001\u0008\u0018\uffff\u0001\u0008\u0002\uffff"+
            "\u0002\u0008\u0002\uffff\u0001\u0008\u0047\uffff\u0001\u0008",
            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
            "\u0001\u0008\u0004\uffff\u0001\u0008\u0003\uffff\u0002\u0008"+
            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
            "\u0006\uffff\u0001\u0008\u0014\uffff\u0001\u0008\u0001\uffff"+
            "\u0001\u0008\u0002\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u000b\u0008\u0002\uffff"+
            "\u0001\u0008\u0001\u0009\u0002\uffff\u0002\u0008",
            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
            "\u0001\u0008\u0004\uffff\u0001\u0008\u0003\uffff\u0002\u0008"+
            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
            "\u0006\uffff\u0001\u0008\u0014\uffff\u0001\u0008\u0001\uffff"+
            "\u0001\u0008\u0002\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u000b\u0008\u0002\uffff"+
            "\u0001\u0008\u0001\u0009\u0002\uffff\u0002\u0008",
            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
            "\u0001\u0008\u0004\uffff\u0001\u0008\u0003\uffff\u0002\u0008"+
            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
            "\u0006\uffff\u0001\u0008\u0014\uffff\u0003\u0008\u0002\uffff"+
            "\u0004\u0008\u0001\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
            "\u0001\uffff\u000b\u0008\u0002\uffff\u0001\u0008\u0001\u0009"+
            "\u0002\uffff\u0002\u0008",
            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
            "\u0001\u0008\u0004\uffff\u0001\u0008\u0003\uffff\u0002\u0008"+
            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
            "\u0006\uffff\u0001\u0008\u0014\uffff\u0001\u0008\u0001\uffff"+
            "\u0001\u0008\u0002\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u000b\u0008\u0002\uffff"+
            "\u0001\u0008\u0001\u0009\u0002\uffff\u0002\u0008",
            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
            "\u0001\u0008\u0004\uffff\u0001\u0008\u0003\uffff\u0002\u0008"+
            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
            "\u0006\uffff\u0001\u0008\u0014\uffff\u0001\u0008\u0001\uffff"+
            "\u0001\u0008\u0002\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u000b\u0008\u0002\uffff"+
            "\u0001\u0008\u0001\u0009\u0002\uffff\u0002\u0008",
            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
            "\u0001\u0008\u0004\uffff\u0001\u0008\u0003\uffff\u0002\u0008"+
            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
            "\u0006\uffff\u0001\u0008\u0014\uffff\u0001\u0008\u0001\uffff"+
            "\u0001\u0008\u0002\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u000b\u0008\u0002\uffff"+
            "\u0001\u0008\u0001\u0009\u0002\uffff\u0002\u0008",
            "\u0003\u0008\u0004\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0004\uffff\u0001\u0008\u0002\uffff\u0002\u0008\u0004\uffff"+
            "\u0001\u0008\u0002\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u0001\u0008\u0001\uffff"+
            "\u0002\u0008\u0004\uffff\u0003\u0008\u0002\uffff\u0001\u0008"+
            "\u0001\uffff\u0003\u0008\u0002\uffff\u0001\u0008\u0005\uffff"+
            "\u0002\u0008\u0007\uffff\u0002\u0008\u0005\uffff\u0001\u0008"+
            "\u0004\uffff\u0002\u0008\u0001\uffff\u0001\u0008\u0004\uffff"+
            "\u0001\u0008\u0004\uffff\u0001\u0008\u0003\uffff\u0002\u0008"+
            "\u0006\uffff\u0001\u0008\u0005\uffff\u0001\u0008\u0007\uffff"+
            "\u0002\u0008\u0004\uffff\u0001\u0008\u0001\uffff\u0001\u0008"+
            "\u0007\uffff\u0001\u0008\u0002\uffff\u0001\u0008\u0014\uffff"+
            "\u0001\u0008\u0006\uffff\u0001\u0008\u0003\uffff\u0001\u0008"+
            "\u0006\uffff\u0001\u0008\u0014\uffff\u0001\u0008\u0001\uffff"+
            "\u0001\u0008\u0002\uffff\u0004\u0008\u0001\uffff\u0001\u0008"+
            "\u0003\uffff\u0001\u0008\u0001\uffff\u000b\u0008\u0002\uffff"+
            "\u0001\u0008\u0001\u0009\u0002\uffff\u0002\u0008",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA119_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA119_eotS),
    DFA119_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA119_eofS),
    DFA119_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA119_minS),
    DFA119_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA119_maxS),
    DFA119_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA119_acceptS),
    DFA119_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA119_specialS),
    DFA119_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA119_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA119_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA119 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 119;
    this.eot = XQueryParser.DFA119_eot;
    this.eof = XQueryParser.DFA119_eof;
    this.min = XQueryParser.DFA119_min;
    this.max = XQueryParser.DFA119_max;
    this.accept = XQueryParser.DFA119_accept;
    this.special = XQueryParser.DFA119_special;
    this.transition = XQueryParser.DFA119_transition;
};

org.antlr.lang.extend(XQueryParser.DFA119, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "896:1: p_ForwardStep : ( p_ForwardAxis p_NodeTest | p_AbbrevForwardStep );";
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA124_eotS:
        "\u000d\uffff",
    DFA124_eofS:
        "\u0001\uffff\u000a\u000b\u0002\uffff",
    DFA124_minS:
        "\u0001\u0010\u000a\u0012\u0002\uffff",
    DFA124_maxS:
        "\u0001\u0154\u000a\u00fe\u0002\uffff",
    DFA124_acceptS:
        "\u000b\uffff\u0001\u0002\u0001\u0001",
    DFA124_specialS:
        "\u000d\uffff}>",
    DFA124_transitionS: [
            "\u0006\u000b\u0001\u0003\u0008\u000b\u0001\u0007\u0009\u000b"+
            "\u0001\u0001\u0001\u0002\u0023\u000b\u0001\u000a\u000a\u000b"+
            "\u0001\u0006\u0003\u000b\u0001\u0005\u0001\u0004\u0005\u000b"+
            "\u0001\u0008\u0017\u000b\u0001\u0009\u001e\u000b\u0001\uffff"+
            "\u0040\u000b\u0010\uffff\u0001\u000b\u001b\uffff\u0002\u000b"+
            "\u0002\uffff\u0001\u000b\u0047\uffff\u0001\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "\u0003\u000b\u0004\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0004\uffff\u0001\u000b\u0002\uffff\u0002\u000b\u0004\uffff"+
            "\u0001\u000b\u0002\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u0001\u000b\u0001\uffff"+
            "\u0002\u000b\u0004\uffff\u0003\u000b\u0002\uffff\u0001\u000b"+
            "\u0001\uffff\u0003\u000b\u0002\uffff\u0001\u000b\u0005\uffff"+
            "\u0002\u000b\u0007\uffff\u0002\u000b\u0005\uffff\u0001\u000b"+
            "\u0004\uffff\u0002\u000b\u0001\uffff\u0001\u000b\u0004\uffff"+
            "\u0001\u000b\u0004\uffff\u0001\u000b\u0003\uffff\u0002\u000b"+
            "\u0006\uffff\u0001\u000b\u0005\uffff\u0001\u000b\u0007\uffff"+
            "\u0002\u000b\u0004\uffff\u0001\u000b\u0001\uffff\u0001\u000b"+
            "\u0007\uffff\u0001\u000b\u0002\uffff\u0001\u000b\u0014\uffff"+
            "\u0001\u000b\u0006\uffff\u0001\u000b\u0003\uffff\u0001\u000b"+
            "\u0006\uffff\u0001\u000b\u0014\uffff\u0001\u000b\u0001\u000c"+
            "\u0001\u000b\u0002\uffff\u0004\u000b\u0001\uffff\u0001\u000b"+
            "\u0003\uffff\u0001\u000b\u0001\uffff\u000b\u000b\u0002\uffff"+
            "\u0001\u000b\u0003\uffff\u0002\u000b",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA124_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA124_eotS),
    DFA124_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA124_eofS),
    DFA124_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA124_minS),
    DFA124_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA124_maxS),
    DFA124_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA124_acceptS),
    DFA124_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA124_specialS),
    DFA124_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA124_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA124_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA124 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 124;
    this.eot = XQueryParser.DFA124_eot;
    this.eof = XQueryParser.DFA124_eof;
    this.min = XQueryParser.DFA124_min;
    this.max = XQueryParser.DFA124_max;
    this.accept = XQueryParser.DFA124_accept;
    this.special = XQueryParser.DFA124_special;
    this.transition = XQueryParser.DFA124_transition;
};

org.antlr.lang.extend(XQueryParser.DFA124, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "938:1: p_NodeTest : ( p_KindTest | p_NameTest );";
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA132_eotS:
        "\u0016\uffff",
    DFA132_eofS:
        "\u0016\uffff",
    DFA132_minS:
        "\u0001\u0010\u0004\uffff\u0001\u00dd\u0001\u0010\u0001\uffff\u0002"+
    "\u00dd\u0001\uffff\u0002\u0010\u0001\u00e0\u0001\u00dd\u0001\u00e0\u0001"+
    "\u0010\u0005\uffff",
    DFA132_maxS:
        "\u0001\u0154\u0004\uffff\u0001\u00f9\u0001\u0154\u0001\uffff\u0002"+
    "\u00f9\u0001\uffff\u0002\u0154\u0003\u00f9\u0001\u0154\u0005\uffff",
    DFA132_acceptS:
        "\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0002"+
    "\uffff\u0001\u0005\u0002\uffff\u0001\u0008\u0006\uffff\u0001\u0009\u0001"+
    "\u0006\u0001\u0007\u0002\u0008",
    DFA132_specialS:
        "\u0001\u0000\u000d\uffff\u0001\u0001\u0007\uffff}>",
    DFA132_transitionS: [
            "\u0006\u0007\u0001\u000c\u0008\u0007\u0001\u000f\u0008\u0007"+
            "\u0001\u0009\u0001\u0007\u0001\u0006\u001f\u0007\u0001\u000b"+
            "\u0008\u0007\u0001\u0005\u0005\u0007\u0001\u0010\u000a\u0007"+
            "\u0001\u000d\u0005\u0007\u0001\u0008\u006d\u0007\u0001\u000e"+
            "\u0003\u0007\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0003"+
            "\u0001\u0011\u000e\uffff\u0001\u000a\u0007\uffff\u0001\u0004"+
            "\u0010\uffff\u0002\u0002\u0002\uffff\u0001\u0007\u0007\uffff"+
            "\u0002\u000a\u0003\u0002\u003b\uffff\u0001\u0007",
            "",
            "",
            "",
            "",
            "\u0001\u0007\u0002\uffff\u0001\u0012\u0018\uffff\u0001\u0007",
            "\u008b\u000a\u0001\uffff\u0040\u000a\u0004\uffff\u0001\u000a"+
            "\u0018\uffff\u0001\u0007\u0012\uffff\u0001\u000a\u0047\uffff"+
            "\u0001\u000a",
            "",
            "\u0001\u0007\u0002\uffff\u0001\u0013\u0018\uffff\u0001\u0007",
            "\u0001\u0007\u0002\uffff\u0001\u000a\u0018\uffff\u0001\u0007",
            "",
            "\u008b\u000a\u0001\uffff\u0040\u000a\u0001\uffff\u0001\u0007"+
            "\u0002\uffff\u0001\u000a\u0018\uffff\u0001\u0007\u0012\uffff"+
            "\u0001\u000a\u0047\uffff\u0001\u000a",
            "\u008b\u000a\u0001\uffff\u0040\u000a\u0004\uffff\u0001\u000a"+
            "\u0018\uffff\u0001\u0007\u0012\uffff\u0001\u000a\u0047\uffff"+
            "\u0001\u000a",
            "\u0001\u000a\u0018\uffff\u0001\u0007",
            "\u0001\u0007\u0002\uffff\u0001\u0014\u0018\uffff\u0001\u0007",
            "\u0001\u0015\u0018\uffff\u0001\u0007",
            "\u008b\u0015\u0001\uffff\u0040\u0015\u0004\uffff\u0001\u0015"+
            "\u0018\uffff\u0001\u0007\u0012\uffff\u0001\u0015\u0047\uffff"+
            "\u0001\u0015",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA132_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA132_eotS),
    DFA132_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA132_eofS),
    DFA132_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA132_minS),
    DFA132_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA132_maxS),
    DFA132_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA132_acceptS),
    DFA132_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA132_specialS),
    DFA132_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA132_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA132_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA132 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 132;
    this.eot = XQueryParser.DFA132_eot;
    this.eof = XQueryParser.DFA132_eof;
    this.min = XQueryParser.DFA132_min;
    this.max = XQueryParser.DFA132_max;
    this.accept = XQueryParser.DFA132_accept;
    this.special = XQueryParser.DFA132_special;
    this.transition = XQueryParser.DFA132_transition;
};

org.antlr.lang.extend(XQueryParser.DFA132, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "982:1: p_PrimaryExpr : ( ( LPAREN )=> p_ParenthesizedExpr | p_Literal | p_VarRef | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor | p_BlockExpr );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA132_0 = input.LA(1);

                             
                            var index132_0 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA132_0==LPAREN) && (this.synpred16_XQueryParser())) {s = 1;}

                            else if ( ((LA132_0>=APOS && LA132_0<=QUOT)||(LA132_0>=L_IntegerLiteral && LA132_0<=L_DoubleLiteral)) ) {s = 2;}

                            else if ( (LA132_0==DOLLAR) ) {s = 3;}

                            else if ( (LA132_0==DOT) ) {s = 4;}

                            else if ( (LA132_0==ORDERED) ) {s = 5;}

                            else if ( (LA132_0==ELEMENT) ) {s = 6;}

                            else if ( ((LA132_0>=ANCESTOR && LA132_0<=AT)||(LA132_0>=BASE_URI && LA132_0<=COLLATION)||(LA132_0>=CONSTRUCTION && LA132_0<=DIV)||LA132_0==DOCUMENT_NODE||(LA132_0>=ELSE && LA132_0<=MODULE)||(LA132_0>=NE && LA132_0<=ORDER)||(LA132_0>=ORDERING && LA132_0<=PRESERVE)||(LA132_0>=RETURN && LA132_0<=STRIP)||(LA132_0>=THEN && LA132_0<=UNION)||(LA132_0>=VALIDATE && LA132_0<=UNIQUE)||(LA132_0>=AMP_ER && LA132_0<=QUOT_ER)||LA132_0==L_NCName||LA132_0==EXPLICITLY) ) {s = 7;}

                            else if ( (LA132_0==UNORDERED) ) {s = 8;}

                            else if ( (LA132_0==DOCUMENT) ) {s = 9;}

                            else if ( (LA132_0==SMALLER||(LA132_0>=L_DirCommentConstructor && LA132_0<=L_DirPIConstructor)) ) {s = 10;}

                            else if ( (LA132_0==NAMESPACE) ) {s = 11;}

                            else if ( (LA132_0==ATTRIBUTE) ) {s = 12;}

                            else if ( (LA132_0==TEXT) ) {s = 13;}

                            else if ( (LA132_0==BINARY) ) {s = 14;}

                            else if ( (LA132_0==COMMENT) ) {s = 15;}

                            else if ( (LA132_0==PROCESSING_INSTRUCTION) ) {s = 16;}

                            else if ( (LA132_0==LBRACKET) ) {s = 17;}

                             
                            input.seek(index132_0);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA132_14 = input.LA(1);

                             
                            var index132_14 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA132_14==LPAREN||LA132_14==COLON) ) {s = 7;}

                            else if ( (LA132_14==LBRACKET) && ((this.lc(MLS)))) {s = 20;}

                             
                            input.seek(index132_14);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 132, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA159_eotS:
        "\u0045\uffff",
    DFA159_eofS:
        "\u0001\u0002\u0044\uffff",
    DFA159_minS:
        "\u0001\u0012\u0001\u0000\u0007\uffff\u0001\u0000\u003b\uffff",
    DFA159_maxS:
        "\u0001\u00fe\u0001\u0000\u0007\uffff\u0001\u0000\u003b\uffff",
    DFA159_acceptS:
        "\u0002\uffff\u0001\u0002\u000a\uffff\u0001\u0001\u0037\uffff",
    DFA159_specialS:
        "\u0001\u0000\u0001\u0001\u0007\uffff\u0001\u0002\u003b\uffff}>",
    DFA159_transitionS: [
            "\u0004\u0002\u0004\uffff\u0001\u0002\u0003\uffff\u0001\u0002"+
            "\u0004\uffff\u0001\u0002\u0002\uffff\u0002\u0002\u0004\uffff"+
            "\u0001\u0002\u0002\uffff\u0001\u0002\u0001\uffff\u0002\u0002"+
            "\u0002\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0001\uffff"+
            "\u0002\u0002\u0002\uffff\u0001\u0002\u0001\uffff\u0003\u0002"+
            "\u0002\uffff\u0001\u0002\u0001\uffff\u0003\u0002\u0002\uffff"+
            "\u0001\u0002\u0005\uffff\u0002\u0002\u0007\uffff\u0002\u0002"+
            "\u0005\uffff\u0001\u0002\u0004\uffff\u0001\u0002\u0002\uffff"+
            "\u0001\u0002\u0004\uffff\u0001\u0002\u0001\uffff\u0001\u0002"+
            "\u0002\uffff\u0001\u0002\u0003\uffff\u0002\u0002\u0006\uffff"+
            "\u0001\u0002\u0005\uffff\u0001\u0002\u0007\uffff\u0002\u0002"+
            "\u0004\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0007\uffff"+
            "\u0001\u0002\u0002\uffff\u0001\u0002\u0014\uffff\u0001\u0002"+
            "\u0003\uffff\u0001\u0002\u0002\uffff\u0001\u0002\u0003\uffff"+
            "\u0001\u0002\u0006\uffff\u0001\u0002\u0014\uffff\u0001\u0002"+
            "\u0001\uffff\u0001\u0002\u0001\uffff\u0002\u0002\u0001\uffff"+
            "\u0004\u0002\u0003\uffff\u0001\u0002\u0001\u000d\u0001\u0001"+
            "\u0001\u0009\u0007\u0002\u0008\uffff\u0002\u0002",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\u0001\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA159_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA159_eotS),
    DFA159_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA159_eofS),
    DFA159_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA159_minS),
    DFA159_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA159_maxS),
    DFA159_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA159_acceptS),
    DFA159_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA159_specialS),
    DFA159_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA159_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA159_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA159 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 159;
    this.eot = XQueryParser.DFA159_eot;
    this.eof = XQueryParser.DFA159_eof;
    this.min = XQueryParser.DFA159_min;
    this.max = XQueryParser.DFA159_max;
    this.accept = XQueryParser.DFA159_accept;
    this.special = XQueryParser.DFA159_special;
    this.transition = XQueryParser.DFA159_transition;
};

org.antlr.lang.extend(XQueryParser.DFA159, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1262:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA159_0 = input.LA(1);

                             
                            var index159_0 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA159_0==STAR) ) {s = 1;}

                            else if ( (LA159_0==EOF||(LA159_0>=AND && LA159_0<=AT)||LA159_0==CASE||LA159_0==COLLATION||LA159_0==DEFAULT||(LA159_0>=DESCENDING && LA159_0<=DIV)||LA159_0==EMPTY||LA159_0==EQ||(LA159_0>=EXCEPT && LA159_0<=EXTERNAL)||LA159_0==FOR||LA159_0==GE||(LA159_0>=GT && LA159_0<=IDIV)||LA159_0==IN||(LA159_0>=INSTANCE && LA159_0<=IS)||LA159_0==LE||(LA159_0>=LET && LA159_0<=MOD)||LA159_0==NE||(LA159_0>=OR && LA159_0<=ORDER)||(LA159_0>=RETURN && LA159_0<=SATISFIES)||LA159_0==STABLE||LA159_0==TO||LA159_0==UNION||LA159_0==WHERE||LA159_0==ALLOWING||LA159_0==COUNT||(LA159_0>=END && LA159_0<=GROUP)||LA159_0==ONLY||LA159_0==START||(LA159_0>=AFTER && LA159_0<=BEFORE)||LA159_0==INTO||LA159_0==MODIFY||LA159_0==WITH||LA159_0==CONTAINS||LA159_0==PARAGRAPHS||LA159_0==SCORE||LA159_0==SENTENCES||LA159_0==TIMES||LA159_0==WORDS||LA159_0==CONCAT||LA159_0==RPAREN||(LA159_0>=LBRACKET && LA159_0<=RBRACKET)||(LA159_0>=RSQUARE && LA159_0<=NOTEQUAL)||LA159_0==COMMA||(LA159_0>=MINUS && LA159_0<=GREATER_GREATER)||(LA159_0>=SEMICOLON && LA159_0<=VBAR)) ) {s = 2;}

                            else if ( (LA159_0==PLUS) ) {s = 9;}

                            else if ( (LA159_0==QUESTION) && (this.synpred17_XQueryParser())) {s = 13;}

                             
                            input.seek(index159_0);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA159_1 = input.LA(1);

                             
                            var index159_1 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred17_XQueryParser()) ) {s = 13;}

                            else if ( (true) ) {s = 2;}

                             
                            input.seek(index159_1);
                            if ( s>=0 ) return s;
                            break;
                        case 2 : 
                            var LA159_9 = input.LA(1);

                             
                            var index159_9 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (this.synpred17_XQueryParser()) ) {s = 13;}

                            else if ( (true) ) {s = 2;}

                             
                            input.seek(index159_9);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 159, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA161_eotS:
        "\u0012\uffff",
    DFA161_eofS:
        "\u0001\uffff\u000c\u000d\u0005\uffff",
    DFA161_minS:
        "\u0001\u0010\u000c\u0012\u0005\uffff",
    DFA161_maxS:
        "\u0001\u0154\u000c\u00fe\u0005\uffff",
    DFA161_acceptS:
        "\u000d\uffff\u0001\u0004\u0001\u0005\u0001\u0001\u0001\u0002\u0001"+
    "\u0003",
    DFA161_specialS:
        "\u000b\uffff\u0001\u0000\u0006\uffff}>",
    DFA161_transitionS: [
            "\u0006\u000d\u0001\u0003\u0008\u000d\u0001\u0007\u0009\u000d"+
            "\u0001\u0001\u0001\u0002\u0017\u000d\u0001\u000c\u000b\u000d"+
            "\u0001\u000a\u000a\u000d\u0001\u0006\u0003\u000d\u0001\u0005"+
            "\u0001\u0004\u0005\u000d\u0001\u0008\u0017\u000d\u0001\u0009"+
            "\u001e\u000d\u0001\uffff\u003c\u000d\u0001\u000b\u0003\u000d"+
            "\u0001\uffff\u0001\u000e\u002e\uffff\u0001\u000d\u0047\uffff"+
            "\u0001\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u000f\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u0010\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "\u0004\u000d\u0004\uffff\u0001\u000d\u0003\uffff\u0001\u000d"+
            "\u0004\uffff\u0001\u000d\u0002\uffff\u0002\u000d\u0004\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0002\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0001\uffff"+
            "\u0002\u000d\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d"+
            "\u0002\uffff\u0001\u000d\u0001\uffff\u0003\u000d\u0002\uffff"+
            "\u0001\u000d\u0005\uffff\u0002\u000d\u0007\uffff\u0002\u000d"+
            "\u0005\uffff\u0001\u000d\u0004\uffff\u0001\u000d\u0002\uffff"+
            "\u0001\u000d\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d"+
            "\u0002\uffff\u0001\u000d\u0003\uffff\u0002\u000d\u0006\uffff"+
            "\u0001\u000d\u0005\uffff\u0001\u000d\u0007\uffff\u0002\u000d"+
            "\u0004\uffff\u0001\u000d\u0001\uffff\u0001\u000d\u0007\uffff"+
            "\u0001\u000d\u0002\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0003\uffff\u0001\u000d\u0002\uffff\u0001\u000d\u0003\uffff"+
            "\u0001\u000d\u0006\uffff\u0001\u000d\u0014\uffff\u0001\u000d"+
            "\u0001\u0011\u0001\u000d\u0001\uffff\u0002\u000d\u0001\uffff"+
            "\u0004\u000d\u0003\uffff\u000b\u000d\u0004\uffff\u0001\u000d"+
            "\u0003\uffff\u0002\u000d",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA161_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA161_eotS),
    DFA161_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA161_eofS),
    DFA161_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA161_minS),
    DFA161_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA161_maxS),
    DFA161_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA161_acceptS),
    DFA161_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA161_specialS),
    DFA161_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA161_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA161_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA161 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 161;
    this.eot = XQueryParser.DFA161_eot;
    this.eof = XQueryParser.DFA161_eof;
    this.min = XQueryParser.DFA161_min;
    this.max = XQueryParser.DFA161_max;
    this.accept = XQueryParser.DFA161_accept;
    this.special = XQueryParser.DFA161_special;
    this.transition = XQueryParser.DFA161_transition;
};

org.antlr.lang.extend(XQueryParser.DFA161, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1272:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicOrUnionType | p_ParenthesizedItemType );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA161_11 = input.LA(1);

                             
                            var index161_11 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA161_11==LPAREN) && ((this.lc(MLS)))) {s = 16;}

                            else if ( (LA161_11==EOF||(LA161_11>=AND && LA161_11<=AT)||LA161_11==CASE||LA161_11==COLLATION||LA161_11==DEFAULT||(LA161_11>=DESCENDING && LA161_11<=DIV)||LA161_11==EMPTY||LA161_11==EQ||(LA161_11>=EXCEPT && LA161_11<=EXTERNAL)||LA161_11==FOR||LA161_11==GE||(LA161_11>=GT && LA161_11<=IDIV)||LA161_11==IN||(LA161_11>=INSTANCE && LA161_11<=IS)||LA161_11==LE||(LA161_11>=LET && LA161_11<=MOD)||LA161_11==NE||(LA161_11>=OR && LA161_11<=ORDER)||(LA161_11>=RETURN && LA161_11<=SATISFIES)||LA161_11==STABLE||LA161_11==TO||LA161_11==UNION||LA161_11==WHERE||LA161_11==ALLOWING||LA161_11==COUNT||(LA161_11>=END && LA161_11<=GROUP)||LA161_11==ONLY||LA161_11==START||(LA161_11>=AFTER && LA161_11<=BEFORE)||LA161_11==INTO||LA161_11==MODIFY||LA161_11==WITH||LA161_11==CONTAINS||LA161_11==PARAGRAPHS||LA161_11==SCORE||LA161_11==SENTENCES||LA161_11==TIMES||LA161_11==WORDS||LA161_11==CONCAT||LA161_11==RPAREN||(LA161_11>=LBRACKET && LA161_11<=RBRACKET)||(LA161_11>=RSQUARE && LA161_11<=NOTEQUAL)||(LA161_11>=COMMA && LA161_11<=GREATER_GREATER)||LA161_11==COLON||(LA161_11>=SEMICOLON && LA161_11<=VBAR)) ) {s = 13;}

                             
                            input.seek(index161_11);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 161, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA215_eotS:
        "\u000a\uffff",
    DFA215_eofS:
        "\u000a\uffff",
    DFA215_minS:
        "\u0001\u001a\u0002\uffff\u0001\u00bd\u0006\uffff",
    DFA215_maxS:
        "\u0001\u00c4\u0002\uffff\u0001\u00c4\u0006\uffff",
    DFA215_acceptS:
        "\u0001\uffff\u0001\u0001\u0001\u0002\u0001\uffff\u0001\u0003\u0001"+
    "\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\u0008",
    DFA215_specialS:
        "\u000a\uffff}>",
    DFA215_transitionS: [
            "\u0001\u0006\u0035\uffff\u0001\u0009\u0051\uffff\u0001\u0007"+
            "\u000a\uffff\u0001\u0001\u0001\uffff\u0001\u0006\u0001\uffff"+
            "\u0001\u0003\u000b\uffff\u0001\u0005\u0001\u0008\u0001\u0004"+
            "\u0001\uffff\u0001\u0006\u0002\uffff\u0001\u0002",
            "",
            "",
            "\u0001\u0005\u0001\u0008\u0001\u0004\u0004\uffff\u0001\u0002",
            "",
            "",
            "",
            "",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA215_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA215_eotS),
    DFA215_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA215_eofS),
    DFA215_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA215_minS),
    DFA215_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA215_maxS),
    DFA215_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA215_acceptS),
    DFA215_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA215_specialS),
    DFA215_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA215_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA215_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA215 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 215;
    this.eot = XQueryParser.DFA215_eot;
    this.eof = XQueryParser.DFA215_eof;
    this.min = XQueryParser.DFA215_min;
    this.max = XQueryParser.DFA215_max;
    this.accept = XQueryParser.DFA215_accept;
    this.special = XQueryParser.DFA215_special;
    this.transition = XQueryParser.DFA215_transition;
};

org.antlr.lang.extend(XQueryParser.DFA215, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1807:1: p_FTMatchOption : ( p_FTLanguageOption | p_FTWildCardOption | p_FTThesaurusOption | p_FTStemOption | p_FTCaseOption | p_FTDiacriticsOption | p_FTStopWordOption | p_FTExtensionOption );";
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA234_eotS:
        "\u000c\uffff",
    DFA234_eofS:
        "\u000c\uffff",
    DFA234_minS:
        "\u0001\u0010\u0001\uffff\u0001\u0010\u0005\u0012\u0001\uffff\u0001"+
    "\u0012\u0001\u0010\u0001\u0012",
    DFA234_maxS:
        "\u0001\u0154\u0001\uffff\u0001\u0154\u0005\u00fe\u0001\uffff\u0001"+
    "\u00fe\u0001\u0154\u0001\u00fe",
    DFA234_acceptS:
        "\u0001\uffff\u0001\u0001\u0006\uffff\u0001\u0002\u0003\uffff",
    DFA234_specialS:
        "\u000c\uffff}>",
    DFA234_transitionS: [
            "\u005c\u0001\u0001\u0007\u005b\u0001\u0001\u0004\u0001\u0005"+
            "\u0001\u0006\u0002\u0001\u0001\u0003\u000e\u0001\u0001\uffff"+
            "\u0001\u0001\u0001\uffff\u0001\u0002\u0001\u0001\u0006\uffff"+
            "\u0001\u0008\u0004\uffff\u0004\u0001\u0005\uffff\u0004\u0001"+
            "\u000c\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
            "\u0001\u0001\u0006\uffff\u0006\u0001\u003b\uffff\u0001\u0001",
            "",
            "\u008b\u0009\u0001\uffff\u0040\u0009\u0030\uffff\u0001\u0009"+
            "\u0047\uffff\u0001\u0009",
            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
            "\u0001\uffff\u0001\u0001\u0036\uffff\u0001\u0001\u003b\uffff"+
            "\u0001\u0001\u0001\u0008\u0004\uffff\u0001\u0001\u0001\uffff"+
            "\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff\u0001\u0001"+
            "\u0001\uffff\u000b\u0001\u0002\uffff\u0001\u0001\u0003\uffff"+
            "\u0002\u0001",
            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
            "\u0001\uffff\u0001\u0001\u0036\uffff\u0001\u0001\u002a\uffff"+
            "\u0001\u0008\u0010\uffff\u0002\u0001\u0004\uffff\u0001\u0001"+
            "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff"+
            "\u0001\u0001\u0001\uffff\u000b\u0001\u0002\uffff\u0001\u0001"+
            "\u0003\uffff\u0002\u0001",
            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
            "\u0001\uffff\u0001\u0001\u0036\uffff\u0001\u0001\u002a\uffff"+
            "\u0001\u0008\u0010\uffff\u0002\u0001\u0004\uffff\u0001\u0001"+
            "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff"+
            "\u0001\u0001\u0001\uffff\u000b\u0001\u0002\uffff\u0001\u0001"+
            "\u0003\uffff\u0002\u0001",
            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
            "\u0001\uffff\u0001\u0001\u0036\uffff\u0001\u0001\u002b\uffff"+
            "\u0001\u0008\u000f\uffff\u0002\u0001\u0004\uffff\u0001\u0001"+
            "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff"+
            "\u0001\u0001\u0001\uffff\u000b\u0001\u0002\uffff\u0001\u0001"+
            "\u0003\uffff\u0002\u0001",
            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
            "\u0001\uffff\u0001\u0001\u0036\uffff\u0001\u0001\u003b\uffff"+
            "\u0002\u0001\u0001\uffff\u0001\u0008\u0002\uffff\u0001\u0001"+
            "\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff"+
            "\u0001\u0001\u0001\uffff\u000b\u0001\u0002\uffff\u0001\u0001"+
            "\u0003\uffff\u0002\u0001",
            "",
            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
            "\u0001\uffff\u0001\u0001\u0036\uffff\u0001\u0001\u003b\uffff"+
            "\u0001\u0001\u0005\uffff\u0001\u0001\u0001\uffff\u0001\u0001"+
            "\u0001\u0008\u0001\u0001\u0003\uffff\u0001\u0001\u0001\uffff"+
            "\u000b\u0001\u0002\uffff\u0001\u000a\u0003\uffff\u0002\u0001",
            "\u008b\u000b\u0001\uffff\u0040\u000b\u0030\uffff\u0001\u000b"+
            "\u0047\uffff\u0001\u000b",
            "\u0001\u0001\u0008\uffff\u0002\u0001\u000a\uffff\u0001\u0001"+
            "\u0007\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0005\uffff"+
            "\u0001\u0001\u0001\uffff\u0002\u0001\u0004\uffff\u0003\u0001"+
            "\u0002\uffff\u0001\u0001\u0002\uffff\u0002\u0001\u0002\uffff"+
            "\u0001\u0001\u0005\uffff\u0001\u0001\u0014\uffff\u0002\u0001"+
            "\u0001\uffff\u0001\u0001\u0036\uffff\u0001\u0001\u003b\uffff"+
            "\u0001\u0001\u0005\uffff\u0001\u0001\u0001\uffff\u0001\u0001"+
            "\u0001\u0008\u0001\u0001\u0003\uffff\u0001\u0001\u0001\uffff"+
            "\u000b\u0001\u0006\uffff\u0002\u0001"
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA234_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA234_eotS),
    DFA234_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA234_eofS),
    DFA234_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA234_minS),
    DFA234_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA234_maxS),
    DFA234_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA234_acceptS),
    DFA234_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA234_specialS),
    DFA234_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA234_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA234_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA234 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 234;
    this.eot = XQueryParser.DFA234_eot;
    this.eof = XQueryParser.DFA234_eof;
    this.min = XQueryParser.DFA234_min;
    this.max = XQueryParser.DFA234_max;
    this.accept = XQueryParser.DFA234_accept;
    this.special = XQueryParser.DFA234_special;
    this.transition = XQueryParser.DFA234_transition;
};

org.antlr.lang.extend(XQueryParser.DFA234, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "1921:1: p_Hybrid[strict, allowConcat] : ( p_HybridExprSingle[$strict,$allowConcat] | p_Statement );";
    },
    dummy: null
});
org.antlr.lang.augmentObject(XQueryParser, {
    DFA250_eotS:
        "\u000b\uffff",
    DFA250_eofS:
        "\u0001\uffff\u0002\u0003\u0001\uffff\u0005\u0003\u0002\uffff",
    DFA250_minS:
        "\u0001\u0010\u0002\u0012\u0001\uffff\u0005\u0012\u0002\uffff",
    DFA250_maxS:
        "\u0001\u0154\u0002\u00fe\u0001\uffff\u0005\u00fe\u0002\uffff",
    DFA250_acceptS:
        "\u0003\uffff\u0001\u0002\u0005\uffff\u0001\u0001\u0001\u0003",
    DFA250_specialS:
        "\u0004\uffff\u0001\u0001\u0001\u0004\u0001\u0002\u0001\u0003\u0001"+
    "\u0000\u0002\uffff}>",
    DFA250_transitionS: [
            "\u0020\u0003\u0001\u0002\u002f\u0003\u0001\u0001\u002e\u0003"+
            "\u0001\u0008\u0001\u0005\u0001\u0003\u0001\u0004\u0004\u0003"+
            "\u0001\u0006\u0001\u0007\u0043\u0003\u0001\uffff\u0001\u0003"+
            "\u0001\uffff\u0002\u0003\u000b\uffff\u0004\u0003\u0005\uffff"+
            "\u0004\u0003\u000c\uffff\u0001\u0003\u0002\uffff\u0002\u0003"+
            "\u0002\uffff\u0001\u0003\u0006\uffff\u0006\u0003\u003b\uffff"+
            "\u0001\u0003",
            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0005\uffff"+
            "\u0002\u0003\u0007\uffff\u0002\u0003\u0005\uffff\u0001\u0003"+
            "\u0004\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0004\uffff"+
            "\u0001\u0003\u0004\uffff\u0001\u0003\u0003\uffff\u0002\u0003"+
            "\u0006\uffff\u0001\u0003\u0005\uffff\u0001\u0003\u0007\uffff"+
            "\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0007\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u003b\uffff"+
            "\u0003\u0003\u0001\u0009\u0001\uffff\u0004\u0003\u0001\uffff"+
            "\u0001\u0003\u0003\uffff\u0001\u0003\u0001\uffff\u000b\u0003"+
            "\u0002\uffff\u0001\u0003\u0003\uffff\u0002\u0003",
            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0005\uffff"+
            "\u0002\u0003\u0007\uffff\u0002\u0003\u0005\uffff\u0001\u0003"+
            "\u0004\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0004\uffff"+
            "\u0001\u0003\u0004\uffff\u0001\u0003\u0003\uffff\u0002\u0003"+
            "\u0006\uffff\u0001\u0003\u0005\uffff\u0001\u0003\u0007\uffff"+
            "\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0007\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u003b\uffff"+
            "\u0003\u0003\u0001\u0009\u0001\uffff\u0004\u0003\u0001\uffff"+
            "\u0001\u0003\u0003\uffff\u0001\u0003\u0001\uffff\u000b\u0003"+
            "\u0002\uffff\u0001\u0003\u0003\uffff\u0002\u0003",
            "",
            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0002\uffff"+
            "\u0001\u000a\u0002\uffff\u0002\u0003\u0007\uffff\u0002\u0003"+
            "\u0005\uffff\u0001\u0003\u0004\uffff\u0002\u0003\u0001\uffff"+
            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0001\u0003"+
            "\u0003\uffff\u0002\u0003\u0006\uffff\u0001\u0003\u0005\uffff"+
            "\u0001\u0003\u0007\uffff\u0002\u0003\u0004\uffff\u0001\u0003"+
            "\u0001\uffff\u0001\u0003\u0001\u000a\u0006\uffff\u0001\u0003"+
            "\u0002\uffff\u0001\u0003\u003b\uffff\u0003\u0003\u0002\uffff"+
            "\u0004\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\u0003"+
            "\u0001\uffff\u000b\u0003\u0002\uffff\u0001\u0003\u0003\uffff"+
            "\u0002\u0003",
            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0002\uffff"+
            "\u0001\u000a\u0002\uffff\u0002\u0003\u0007\uffff\u0002\u0003"+
            "\u0005\uffff\u0001\u0003\u0004\uffff\u0002\u0003\u0001\uffff"+
            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0001\u0003"+
            "\u0003\uffff\u0002\u0003\u0006\uffff\u0001\u0003\u0005\uffff"+
            "\u0001\u0003\u0007\uffff\u0002\u0003\u0004\uffff\u0001\u0003"+
            "\u0001\uffff\u0001\u0003\u0001\u000a\u0006\uffff\u0001\u0003"+
            "\u0002\uffff\u0001\u0003\u003b\uffff\u0003\u0003\u0002\uffff"+
            "\u0004\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\u0003"+
            "\u0001\uffff\u000b\u0003\u0002\uffff\u0001\u0003\u0003\uffff"+
            "\u0002\u0003",
            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0002\uffff"+
            "\u0001\u000a\u0002\uffff\u0002\u0003\u0007\uffff\u0002\u0003"+
            "\u0005\uffff\u0001\u0003\u0004\uffff\u0002\u0003\u0001\uffff"+
            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0001\u0003"+
            "\u0003\uffff\u0002\u0003\u0006\uffff\u0001\u0003\u0005\uffff"+
            "\u0001\u0003\u0007\uffff\u0002\u0003\u0004\uffff\u0001\u0003"+
            "\u0001\uffff\u0001\u0003\u0007\uffff\u0001\u0003\u0002\uffff"+
            "\u0001\u0003\u003b\uffff\u0003\u0003\u0002\uffff\u0004\u0003"+
            "\u0001\uffff\u0001\u0003\u0003\uffff\u0001\u0003\u0001\uffff"+
            "\u000b\u0003\u0002\uffff\u0001\u0003\u0003\uffff\u0002\u0003",
            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0002\uffff"+
            "\u0001\u000a\u0002\uffff\u0002\u0003\u0007\uffff\u0002\u0003"+
            "\u0005\uffff\u0001\u0003\u0004\uffff\u0002\u0003\u0001\uffff"+
            "\u0001\u0003\u0004\uffff\u0001\u0003\u0004\uffff\u0001\u0003"+
            "\u0003\uffff\u0002\u0003\u0006\uffff\u0001\u0003\u0005\uffff"+
            "\u0001\u0003\u0007\uffff\u0002\u0003\u0004\uffff\u0001\u0003"+
            "\u0001\uffff\u0001\u0003\u0006\uffff\u0001\u000a\u0001\u0003"+
            "\u0002\uffff\u0001\u0003\u003b\uffff\u0003\u0003\u0002\uffff"+
            "\u0004\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\u0003"+
            "\u0001\uffff\u000b\u0003\u0002\uffff\u0001\u0003\u0003\uffff"+
            "\u0002\u0003",
            "\u0003\u0003\u0005\uffff\u0003\u0003\u0001\uffff\u0001\u0003"+
            "\u0004\uffff\u0001\u0003\u0002\uffff\u0002\u0003\u0004\uffff"+
            "\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff"+
            "\u0002\u0003\u0004\uffff\u0003\u0003\u0002\uffff\u0001\u0003"+
            "\u0001\uffff\u0003\u0003\u0002\uffff\u0001\u0003\u0005\uffff"+
            "\u0002\u0003\u0007\uffff\u0002\u0003\u0005\uffff\u0001\u0003"+
            "\u0004\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0004\uffff"+
            "\u0001\u0003\u0004\uffff\u0001\u0003\u0003\uffff\u0002\u0003"+
            "\u0006\uffff\u0001\u0003\u0005\uffff\u0001\u0003\u0007\uffff"+
            "\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0003"+
            "\u0007\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u003b\uffff"+
            "\u0003\u0003\u0001\u000a\u0001\uffff\u0004\u0003\u0001\uffff"+
            "\u0001\u0003\u0003\uffff\u0001\u0003\u0001\uffff\u000b\u0003"+
            "\u0002\uffff\u0001\u0003\u0003\uffff\u0002\u0003",
            "",
            ""
    ]
});

org.antlr.lang.augmentObject(XQueryParser, {
    DFA250_eot:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA250_eotS),
    DFA250_eof:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA250_eofS),
    DFA250_min:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA250_minS),
    DFA250_max:
        org.antlr.runtime.DFA.unpackEncodedStringToUnsignedChars(XQueryParser.DFA250_maxS),
    DFA250_accept:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA250_acceptS),
    DFA250_special:
        org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA250_specialS),
    DFA250_transition: (function() {
        var a = [],
            i,
            numStates = XQueryParser.DFA250_transitionS.length;
        for (i=0; i<numStates; i++) {
            a.push(org.antlr.runtime.DFA.unpackEncodedString(XQueryParser.DFA250_transitionS[i]));
        }
        return a;
    })()
});

XQueryParser.DFA250 = function(recognizer) {
    this.recognizer = recognizer;
    this.decisionNumber = 250;
    this.eot = XQueryParser.DFA250_eot;
    this.eof = XQueryParser.DFA250_eof;
    this.min = XQueryParser.DFA250_min;
    this.max = XQueryParser.DFA250_max;
    this.accept = XQueryParser.DFA250_accept;
    this.special = XQueryParser.DFA250_special;
    this.transition = XQueryParser.DFA250_transition;
};

org.antlr.lang.extend(XQueryParser.DFA250, org.antlr.runtime.DFA, {
    getDescription: function() {
        return "2073:1: p_ExprSimple : ( p_QuantifiedExpr | p_OrExpr | {...}? => pg_UpdateExpr );";
    },
    specialStateTransition: function(s, input) {
        var _s = s;
        /* bind to recognizer so semantic predicates can be evaluated */
        var retval = (function(s, input) {
            switch ( s ) {
                        case 0 : 
                            var LA250_8 = input.LA(1);

                             
                            var index250_8 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA250_8==DOLLAR) && ((this.lc(XQU)))) {s = 10;}

                            else if ( (LA250_8==EOF||(LA250_8>=AND && LA250_8<=ASCENDING)||(LA250_8>=CASE && LA250_8<=CASTABLE)||LA250_8==COLLATION||LA250_8==DEFAULT||(LA250_8>=DESCENDING && LA250_8<=DIV)||LA250_8==EMPTY||LA250_8==EQ||LA250_8==EXCEPT||LA250_8==FOR||LA250_8==GE||(LA250_8>=GT && LA250_8<=IDIV)||(LA250_8>=INSTANCE && LA250_8<=IS)||LA250_8==LE||(LA250_8>=LET && LA250_8<=MOD)||LA250_8==NE||(LA250_8>=OR && LA250_8<=ORDER)||(LA250_8>=RETURN && LA250_8<=SATISFIES)||LA250_8==STABLE||(LA250_8>=TO && LA250_8<=TREAT)||LA250_8==UNION||LA250_8==WHERE||LA250_8==COUNT||(LA250_8>=END && LA250_8<=GROUP)||LA250_8==ONLY||LA250_8==START||(LA250_8>=AFTER && LA250_8<=BEFORE)||LA250_8==INTO||LA250_8==MODIFY||LA250_8==WITH||LA250_8==CONTAINS||(LA250_8>=CONCAT && LA250_8<=RPAREN)||(LA250_8>=RBRACKET && LA250_8<=EQUAL)||LA250_8==NOTEQUAL||LA250_8==COMMA||(LA250_8>=STAR && LA250_8<=SLASH_SLASH)||LA250_8==COLON||(LA250_8>=SEMICOLON && LA250_8<=VBAR)) ) {s = 3;}

                             
                            input.seek(index250_8);
                            if ( s>=0 ) return s;
                            break;
                        case 1 : 
                            var LA250_4 = input.LA(1);

                             
                            var index250_4 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA250_4==EOF||(LA250_4>=AND && LA250_4<=ASCENDING)||(LA250_4>=CASE && LA250_4<=CASTABLE)||LA250_4==COLLATION||LA250_4==DEFAULT||(LA250_4>=DESCENDING && LA250_4<=DIV)||LA250_4==EMPTY||LA250_4==EQ||LA250_4==EXCEPT||LA250_4==FOR||LA250_4==GE||(LA250_4>=GT && LA250_4<=IDIV)||(LA250_4>=INSTANCE && LA250_4<=IS)||LA250_4==LE||(LA250_4>=LET && LA250_4<=MOD)||LA250_4==NE||(LA250_4>=OR && LA250_4<=ORDER)||(LA250_4>=RETURN && LA250_4<=SATISFIES)||LA250_4==STABLE||(LA250_4>=TO && LA250_4<=TREAT)||LA250_4==UNION||LA250_4==WHERE||LA250_4==COUNT||(LA250_4>=END && LA250_4<=GROUP)||LA250_4==ONLY||LA250_4==START||(LA250_4>=AFTER && LA250_4<=BEFORE)||LA250_4==INTO||LA250_4==MODIFY||LA250_4==WITH||LA250_4==CONTAINS||(LA250_4>=CONCAT && LA250_4<=RPAREN)||(LA250_4>=RBRACKET && LA250_4<=EQUAL)||LA250_4==NOTEQUAL||LA250_4==COMMA||(LA250_4>=STAR && LA250_4<=SLASH_SLASH)||LA250_4==COLON||(LA250_4>=SEMICOLON && LA250_4<=VBAR)) ) {s = 3;}

                            else if ( (LA250_4==NODE||LA250_4==NODES) && ((this.lc(XQU)))) {s = 10;}

                             
                            input.seek(index250_4);
                            if ( s>=0 ) return s;
                            break;
                        case 2 : 
                            var LA250_6 = input.LA(1);

                             
                            var index250_6 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA250_6==NODE) && ((this.lc(XQU)))) {s = 10;}

                            else if ( (LA250_6==EOF||(LA250_6>=AND && LA250_6<=ASCENDING)||(LA250_6>=CASE && LA250_6<=CASTABLE)||LA250_6==COLLATION||LA250_6==DEFAULT||(LA250_6>=DESCENDING && LA250_6<=DIV)||LA250_6==EMPTY||LA250_6==EQ||LA250_6==EXCEPT||LA250_6==FOR||LA250_6==GE||(LA250_6>=GT && LA250_6<=IDIV)||(LA250_6>=INSTANCE && LA250_6<=IS)||LA250_6==LE||(LA250_6>=LET && LA250_6<=MOD)||LA250_6==NE||(LA250_6>=OR && LA250_6<=ORDER)||(LA250_6>=RETURN && LA250_6<=SATISFIES)||LA250_6==STABLE||(LA250_6>=TO && LA250_6<=TREAT)||LA250_6==UNION||LA250_6==WHERE||LA250_6==COUNT||(LA250_6>=END && LA250_6<=GROUP)||LA250_6==ONLY||LA250_6==START||(LA250_6>=AFTER && LA250_6<=BEFORE)||LA250_6==INTO||LA250_6==MODIFY||LA250_6==WITH||LA250_6==CONTAINS||(LA250_6>=CONCAT && LA250_6<=RPAREN)||(LA250_6>=RBRACKET && LA250_6<=EQUAL)||LA250_6==NOTEQUAL||LA250_6==COMMA||(LA250_6>=STAR && LA250_6<=SLASH_SLASH)||LA250_6==COLON||(LA250_6>=SEMICOLON && LA250_6<=VBAR)) ) {s = 3;}

                             
                            input.seek(index250_6);
                            if ( s>=0 ) return s;
                            break;
                        case 3 : 
                            var LA250_7 = input.LA(1);

                             
                            var index250_7 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA250_7==EOF||(LA250_7>=AND && LA250_7<=ASCENDING)||(LA250_7>=CASE && LA250_7<=CASTABLE)||LA250_7==COLLATION||LA250_7==DEFAULT||(LA250_7>=DESCENDING && LA250_7<=DIV)||LA250_7==EMPTY||LA250_7==EQ||LA250_7==EXCEPT||LA250_7==FOR||LA250_7==GE||(LA250_7>=GT && LA250_7<=IDIV)||(LA250_7>=INSTANCE && LA250_7<=IS)||LA250_7==LE||(LA250_7>=LET && LA250_7<=MOD)||LA250_7==NE||(LA250_7>=OR && LA250_7<=ORDER)||(LA250_7>=RETURN && LA250_7<=SATISFIES)||LA250_7==STABLE||(LA250_7>=TO && LA250_7<=TREAT)||LA250_7==UNION||LA250_7==WHERE||LA250_7==COUNT||(LA250_7>=END && LA250_7<=GROUP)||LA250_7==ONLY||LA250_7==START||(LA250_7>=AFTER && LA250_7<=BEFORE)||LA250_7==INTO||LA250_7==MODIFY||LA250_7==WITH||LA250_7==CONTAINS||(LA250_7>=CONCAT && LA250_7<=RPAREN)||(LA250_7>=RBRACKET && LA250_7<=EQUAL)||LA250_7==NOTEQUAL||LA250_7==COMMA||(LA250_7>=STAR && LA250_7<=SLASH_SLASH)||LA250_7==COLON||(LA250_7>=SEMICOLON && LA250_7<=VBAR)) ) {s = 3;}

                            else if ( (LA250_7==NODE||LA250_7==VALUE) && ((this.lc(XQU)))) {s = 10;}

                             
                            input.seek(index250_7);
                            if ( s>=0 ) return s;
                            break;
                        case 4 : 
                            var LA250_5 = input.LA(1);

                             
                            var index250_5 = input.index();
                            input.rewind();
                            s = -1;
                            if ( (LA250_5==EOF||(LA250_5>=AND && LA250_5<=ASCENDING)||(LA250_5>=CASE && LA250_5<=CASTABLE)||LA250_5==COLLATION||LA250_5==DEFAULT||(LA250_5>=DESCENDING && LA250_5<=DIV)||LA250_5==EMPTY||LA250_5==EQ||LA250_5==EXCEPT||LA250_5==FOR||LA250_5==GE||(LA250_5>=GT && LA250_5<=IDIV)||(LA250_5>=INSTANCE && LA250_5<=IS)||LA250_5==LE||(LA250_5>=LET && LA250_5<=MOD)||LA250_5==NE||(LA250_5>=OR && LA250_5<=ORDER)||(LA250_5>=RETURN && LA250_5<=SATISFIES)||LA250_5==STABLE||(LA250_5>=TO && LA250_5<=TREAT)||LA250_5==UNION||LA250_5==WHERE||LA250_5==COUNT||(LA250_5>=END && LA250_5<=GROUP)||LA250_5==ONLY||LA250_5==START||(LA250_5>=AFTER && LA250_5<=BEFORE)||LA250_5==INTO||LA250_5==MODIFY||LA250_5==WITH||LA250_5==CONTAINS||(LA250_5>=CONCAT && LA250_5<=RPAREN)||(LA250_5>=RBRACKET && LA250_5<=EQUAL)||LA250_5==NOTEQUAL||LA250_5==COMMA||(LA250_5>=STAR && LA250_5<=SLASH_SLASH)||LA250_5==COLON||(LA250_5>=SEMICOLON && LA250_5<=VBAR)) ) {s = 3;}

                            else if ( (LA250_5==NODE||LA250_5==NODES) && ((this.lc(XQU)))) {s = 10;}

                             
                            input.seek(index250_5);
                            if ( s>=0 ) return s;
                            break;
            }
        }).call(this.recognizer, s, input);
        if (!org.antlr.lang.isUndefined(retval)) {
            return retval;
        }
        if (this.recognizer.state.backtracking>0) {this.recognizer.state.failed=true; return -1;}
        var nvae =
            new org.antlr.runtime.NoViableAltException(this.getDescription(), 250, _s, input);
        this.error(nvae);
        throw nvae;
    },
    dummy: null
});
 

// public class variables
org.antlr.lang.augmentObject(XQueryParser, {
    tokenNames: ["<invalid>", "<EOR>", "<DOWN>", "<UP>", "L_QuotAttrContentChar", "L_AposAttrContentChar", "L_ElementContentChar", "L_CDataSection", "L_PredefinedEntityRef", "L_CharRef", "ESCAPE_LBRACKET", "ESCAPE_RBRACKET", "ESCAPE_APOS", "ESCAPE_QUOT", "CDATA_START", "CDATA_END", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BOUNDARY_SPACE", "BY", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "EMPTY", "EMPTY_SEQUENCE", "ENCODING", "EQ", "EVERY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSTANCE", "INTERSECT", "IS", "ITEM", "LAX", "LE", "LEAST", "LET", "LT", "MOD", "MODULE", "NAMESPACE", "NE", "NO_INHERIT", "NO_PRESERVE", "NODE", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARENT", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RETURN", "SATISFIES", "SCHEMA", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "SELF", "SOME", "STABLE", "STRICT", "STRIP", "TEXT", "THEN", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "VALIDATE", "VARIABLE", "VERSION", "WHERE", "XQUERY", "ALLOWING", "CATCH", "CONTEXT", "COUNT", "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "DIGIT", "END", "GROUP", "GROUPING_SEPARATOR", "INFINITY", "MINUS_SIGN", "NAMESPACE_NODE", "NAN", "NEXT", "ONLY", "PATTERN_SEPARATOR", "PERCENT", "PER_MILLE", "PREVIOUS", "SLIDING", "START", "SWITCH", "TRY", "TUMBLING", "TYPE", "WHEN", "WINDOW", "ZERO_DIGIT", "AFTER", "BEFORE", "COPY", "DELETE", "FIRST", "INSERT", "INTO", "LAST", "MODIFY", "NODES", "RENAME", "REPLACE", "REVALIDATION", "SKIP", "UPDATING", "VALUE", "WITH", "ALL", "ANY", "CONTAINS", "CONTENT", "DIACRITICS", "DIFFERENT", "DISTANCE", "ENTIRE", "EXACTLY", "FROM", "FT_OPTION", "FTAND", "FTNOT", "FTOR", "INSENSITIVE", "LANGUAGE", "LEVELS", "LOWERCASE", "MOST", "NO", "NOT", "OCCURS", "PARAGRAPH", "PARAGRAPHS", "PHRASE", "RELATIONSHIP", "SAME", "SCORE", "SENSITIVE", "SENTENCE", "SENTENCES", "STEMMING", "STOP", "THESAURUS", "TIMES", "UPPERCASE", "USING", "WEIGHT", "WILDCARDS", "WITHOUT", "WORD", "WORDS", "BREAK", "CONTINUE", "EXIT", "LOOP", "RETURNING", "WHILE", "CHECK", "COLLECTION", "CONSTRAINT", "FOREACH", "FOREIGN", "INDEX", "INTEGRITY", "KEY", "ON", "UNIQUE", "BINARY", "AMP_ER", "APOS_ER", "QUOT_ER", "CONCAT", "LPAREN", "RPAREN", "DOLLAR", "LBRACKET", "RBRACKET", "LSQUARE", "RSQUARE", "EQUAL", "BIND", "NOTEQUAL", "ANN_PERCENT", "HASH", "AMP", "COMMA", "QUESTION", "STAR", "PLUS", "MINUS", "SMALLER", "GREATER", "SMALLEREQ", "GREATEREQ", "SMALLER_SMALLER", "GREATER_GREATER", "SLASH", "SLASH_SLASH", "DOT", "DOT_DOT", "COLON", "COLON_COLON", "EMPTY_CLOSE_TAG", "CLOSE_TAG", "SEMICOLON", "VBAR", "PRAGMA_START", "PRAGMA_END", "XML_COMMENT_START", "XML_COMMENT_END", "PI_START", "PI_END", "ATTR_SIGN", "CHARREF_DEC", "CHARREF_HEX", "APOS", "QUOT", "NCNameStartChar", "NCNameChar", "L_NCName", "Letter", "HexLetter", "Digit", "Digits", "S", "SU", "L_Pragma", "L_DirCommentConstructor", "L_DirPIConstructor", "L_IntegerLiteral", "L_DecimalLiteral", "L_DoubleLiteral", "L_Comment", "L_AnyChar", "L_QuotStringLiteralChar", "L_AposStringLiteralChar", "LibraryModule", "MainModule", "VersionDecl", "VersionDeclEncoding", "VersionDeclVersion", "ModuleDecl", "Prolog", "DefaultNamespaceDecls", "DefaultNamespaceDecl", "Setters", "Setter", "NamespaceDecls", "NamespaceDecl", "Imports", "FTOptionDecls", "SchemaImport", "SchemaPrefix", "NamespaceName", "DefaultElementNamespace", "AtHints", "ModuleImport", "BaseURIDecl", "OrderedDecls", "VarDecl", "VarType", "VarValue", "VarDefaultValue", "VarVariableDecl", "FunctionDecl", "ParamList", "ReturnType", "OptionDecl", "TypeDeclaration", "Param", "EnclosedExpr", "QueryBody", "UnaryExpr", "DirElemConstructor", "DirAttributeList", "DirAttributeValue", "DirElemContent", "CommonContent", "SequenceType", "EmptySequenceTest", "KindTest", "ItemTest", "FunctionTest", "AtomicType", "AtomicOrUnionType", "StringLiteral", "ElementContentChar", "AttributeValueChar", "QName", "BlockExpr", "BinaryTest", "EXPLICITLY"],
    FOLLOW_p_VersionDecl_in_p_Module502: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_LibraryModule_in_p_Module535: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_p_MainModule_in_p_Module558: new org.antlr.runtime.BitSet([0x00000000, 0x00000000]),
    FOLLOW_EOF_in_p_Module582: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_XQUERY_in_p_VersionDecl610: new org.antlr.runtime.BitSet([0x00000000, 0x00004000,0x00000000, 0x00002000]),
    FOLLOW_ENCODING_in_p_VersionDecl618: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_VersionDecl624: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_VERSION_in_p_VersionDecl645: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_VersionDecl651: new org.antlr.runtime.BitSet([0x00000000, 0x00004000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_ENCODING_in_p_VersionDecl656: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_VersionDecl662: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_p_VersionDecl668: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_Prolog_in_p_MainModule734: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_pm_QueryBody_in_p_MainModule736: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ModuleDecl_in_p_LibraryModule792: new org.antlr.runtime.BitSet([0x00000000, 0x10000004]),
    FOLLOW_pm_Prolog_in_p_LibraryModule794: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MODULE_in_p_ModuleDecl850: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_NAMESPACE_in_p_ModuleDecl854: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NCName_in_p_ModuleDecl858: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
    FOLLOW_EQUAL_in_p_ModuleDecl860: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_ModuleDecl862: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_p_ModuleDecl864: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog923: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
    FOLLOW_p_Setter_in_pm_Prolog929: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
    FOLLOW_pm_NamespaceDecl_in_pm_Prolog935: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
    FOLLOW_p_Import_in_pm_Prolog941: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
    FOLLOW_pm_FTOptionDecl_in_pm_Prolog947: new org.antlr.runtime.BitSet([0x00000002, 0x10000004]),
    FOLLOW_pg_OrderedDecl_in_pm_Prolog954: new org.antlr.runtime.BitSet([0x00000002, 0x00000004]),
    FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1269: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_AnnotatedDecl_in_pg_OrderedDecl1281: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1293: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1323: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_DefaultCollationDecl_in_p_Setter1335: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_BaseURIDecl_in_p_Setter1347: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_ConstructionDecl_in_p_Setter1359: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_OrderingModeDecl_in_p_Setter1371: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_EmptyOrderDecl_in_p_Setter1383: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_RevalidationDecl_in_p_Setter1398: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1410: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_DecimalFormatDecl_in_p_Setter1422: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1454: new org.antlr.runtime.BitSet([0x01000000, 0x00000000]),
    FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1460: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x01000000, 0x00000008]),
    FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1469: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_STRIP_in_pm_BoundarySpaceDecl1479: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1486: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_DefaultCollationDecl1514: new org.antlr.runtime.BitSet([0x00000000, 0x00000008]),
    FOLLOW_DEFAULT_in_pm_DefaultCollationDecl1520: new org.antlr.runtime.BitSet([0x40000000, 0x00000000]),
    FOLLOW_COLLATION_in_pm_DefaultCollationDecl1526: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl1530: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl1532: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_BaseURIDecl1568: new org.antlr.runtime.BitSet([0x00800000, 0x00000000]),
    FOLLOW_BASE_URI_in_pm_BaseURIDecl1574: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_BaseURIDecl1580: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_BaseURIDecl1582: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_ConstructionDecl1635: new org.antlr.runtime.BitSet([0x00000000, 0x00000001]),
    FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl1641: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x01000000, 0x00000008]),
    FOLLOW_STRIP_in_pm_ConstructionDecl1650: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_PRESERVE_in_pm_ConstructionDecl1656: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_ConstructionDecl1663: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_OrderingModeDecl1691: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_ORDERING_in_pm_OrderingModeDecl1697: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00080000, 0x00000400]),
    FOLLOW_ORDERED_in_pm_OrderingModeDecl1706: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_UNORDERED_in_pm_OrderingModeDecl1712: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1719: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_EmptyOrderDecl1747: new org.antlr.runtime.BitSet([0x00000000, 0x00000008]),
    FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1753: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00040000, 0x00000000]),
    FOLLOW_ORDER_in_pm_EmptyOrderDecl1759: new org.antlr.runtime.BitSet([0x00000000, 0x00001000]),
    FOLLOW_EMPTY_in_pm_EmptyOrderDecl1765: new org.antlr.runtime.BitSet([0x00000000, 0x01000000,0x00000020, 0x00000000]),
    FOLLOW_GREATEST_in_pm_EmptyOrderDecl1774: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_LEAST_in_pm_EmptyOrderDecl1780: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1787: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1815: new org.antlr.runtime.BitSet([0x00000000, 0x00000002]),
    FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1821: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x01002000, 0x00000000]),
    FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1825: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_pm_CopyNamespacesDecl1827: new org.antlr.runtime.BitSet([0x00000000, 0x40000000,0x00001000, 0x00000000]),
    FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1829: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1831: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PRESERVE_in_p_PreserveMode1860: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NO_PRESERVE_in_p_PreserveMode1866: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_INHERIT_in_p_InheritMode1898: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NO_INHERIT_in_p_InheritMode1904: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_DecimalFormatDecl1943: new org.antlr.runtime.BitSet([0x00000000, 0x00000008,0x00000000, 0x00100000]),
    FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1951: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_pm_DecimalFormatDecl1955: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x2E600000,0x00001007, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_DEFAULT_in_pm_DecimalFormatDecl1963: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00100000]),
    FOLLOW_DECIMAL_FORMAT_in_pm_DecimalFormatDecl1969: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x2E600000,0x00001007, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_p_DFPropertyName_in_pm_DecimalFormatDecl1976: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
    FOLLOW_EQUAL_in_pm_DecimalFormatDecl1978: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_DecimalFormatDecl1980: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x2E600000,0x00001007, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_DecimalFormatDecl1984: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName2013: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName2019: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_INFINITY_in_p_DFPropertyName2025: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_MINUS_SIGN_in_p_DFPropertyName2031: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NAN_in_p_DFPropertyName2037: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PERCENT_in_p_DFPropertyName2043: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PER_MILLE_in_p_DFPropertyName2049: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ZERO_DIGIT_in_p_DFPropertyName2055: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DIGIT_in_p_DFPropertyName2061: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName2067: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_SchemaImport_in_p_Import2096: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_ModuleImport_in_p_Import2100: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IMPORT_in_pm_SchemaImport2136: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x10000000, 0x00000000]),
    FOLLOW_SCHEMA_in_pm_SchemaImport2142: new org.antlr.runtime.BitSet([0x00000000, 0x00000008,0x00000400, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2148: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_SchemaImport2153: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_AT_in_pm_SchemaImport2158: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_SchemaImport2164: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
    FOLLOW_COMMA_in_pm_SchemaImport2167: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_SchemaImport2171: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
    FOLLOW_SEMICOLON_in_pm_SchemaImport2177: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NAMESPACE_in_p_SchemaPrefix2247: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NCName_in_p_SchemaPrefix2253: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
    FOLLOW_EQUAL_in_p_SchemaPrefix2255: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DEFAULT_in_p_SchemaPrefix2294: new org.antlr.runtime.BitSet([0x00000000, 0x00000400]),
    FOLLOW_ELEMENT_in_p_SchemaPrefix2300: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_NAMESPACE_in_p_SchemaPrefix2306: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IMPORT_in_pm_ModuleImport2356: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_MODULE_in_pm_ModuleImport2362: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_NAMESPACE_in_pm_ModuleImport2369: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NCName_in_pm_ModuleImport2375: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
    FOLLOW_EQUAL_in_pm_ModuleImport2377: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_ModuleImport2383: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_AT_in_pm_ModuleImport2388: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_ModuleImport2394: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
    FOLLOW_COMMA_in_pm_ModuleImport2397: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_ModuleImport2401: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
    FOLLOW_SEMICOLON_in_pm_ModuleImport2407: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_NamespaceDecl2476: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_NAMESPACE_in_pm_NamespaceDecl2482: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NCName_in_pm_NamespaceDecl2488: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
    FOLLOW_EQUAL_in_pm_NamespaceDecl2490: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_NamespaceDecl2494: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_NamespaceDecl2496: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl2553: new org.antlr.runtime.BitSet([0x00000000, 0x00000008]),
    FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl2559: new org.antlr.runtime.BitSet([0x00000000, 0x00400400]),
    FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl2566: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl2572: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl2579: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl2583: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl2585: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_AnnotatedDecl2613: new org.antlr.runtime.BitSet([0x00000000, 0x00400000,0x00000000, 0x00001000,0x08000000, 0x00000000,0x00188000, 0x00000080]),
    FOLLOW_p_Annotation_in_pm_AnnotatedDecl2617: new org.antlr.runtime.BitSet([0x00000000, 0x00400000,0x00000000, 0x00001000,0x08000000, 0x00000000,0x00188000, 0x00000080]),
    FOLLOW_pg_AnnotatedDecl_in_pm_AnnotatedDecl2620: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_AnnotatedDecl2622: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_VarDecl_in_pg_AnnotatedDecl2646: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_FunctionDecl_in_pg_AnnotatedDecl2658: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_CollectionDecl_in_pg_AnnotatedDecl2673: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_IndexDecl_in_pg_AnnotatedDecl2688: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ICDecl_in_pg_AnnotatedDecl2703: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ANN_PERCENT_in_p_Annotation2729: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_Annotation2731: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_Annotation2734: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_Literal_in_p_Annotation2736: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_COMMA_in_p_Annotation2739: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_Literal_in_p_Annotation2741: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_RPAREN_in_p_Annotation2745: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_VARIABLE_in_p_VarDecl2775: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_VarDecl2779: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_VarDecl2783: new org.antlr.runtime.BitSet([0x00080000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_p_TypeDeclaration_in_p_VarDecl2787: new org.antlr.runtime.BitSet([0x00000000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_BIND_in_p_VarDecl2792: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarValue_in_p_VarDecl2796: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EXTERNAL_in_p_VarDecl2804: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_BIND_in_p_VarDecl2809: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarDefaultValue_in_p_VarDecl2813: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_VarValue2892: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_VarDefaultValue2919: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_ContextItemDecl2948: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00040000]),
    FOLLOW_CONTEXT_in_pm_ContextItemDecl2954: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000004, 0x00000000]),
    FOLLOW_ITEM_in_pm_ContextItemDecl2960: new org.antlr.runtime.BitSet([0x00080000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_AS_in_pm_ContextItemDecl2967: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ItemType_in_pm_ContextItemDecl2971: new org.antlr.runtime.BitSet([0x00000000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_BIND_in_pm_ContextItemDecl2977: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarValue_in_pm_ContextItemDecl2979: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_EXTERNAL_in_pm_ContextItemDecl2987: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000020]),
    FOLLOW_BIND_in_pm_ContextItemDecl2992: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarDefaultValue_in_pm_ContextItemDecl2994: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_ContextItemDecl3000: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_UPDATING_in_pm_FunctionDecl3033: new org.antlr.runtime.BitSet([0x00000000, 0x00400000]),
    FOLLOW_FUNCTION_in_pm_FunctionDecl3041: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_pg_FQName_in_pm_FunctionDecl3047: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_pm_FunctionDecl3049: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0xC0000000, 0x00000000]),
    FOLLOW_p_ParamList_in_pm_FunctionDecl3053: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_pm_FunctionDecl3056: new org.antlr.runtime.BitSet([0x00080000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_AS_in_pm_FunctionDecl3061: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceType_in_pm_FunctionDecl3067: new org.antlr.runtime.BitSet([0x00000000, 0x00040000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_pm_FunctionDecl3072: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_StatementsAndOptionalExpr_in_pm_FunctionDecl3076: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pm_FunctionDecl3078: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EXTERNAL_in_pm_FunctionDecl3084: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Param_in_p_ParamList3161: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_p_ParamList3164: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_p_Param_in_p_ParamList3168: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_DOLLAR_in_p_Param3226: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_Param3230: new org.antlr.runtime.BitSet([0x00080002, 0x00000000]),
    FOLLOW_p_TypeDeclaration_in_p_Param3234: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_EnclosedExpr_in_pm_FunctionBody3290: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LBRACKET_in_p_EnclosedExpr3317: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_EnclosedExpr3319: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_EnclosedExpr3322: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_OptionDecl3374: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00010000, 0x00000000]),
    FOLLOW_OPTION_in_pm_OptionDecl3380: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_pm_OptionDecl3384: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_pm_OptionDecl3386: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_OptionDecl3388: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Program_in_pm_QueryBody3417: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Expr_in_pm_QueryBody3429: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_Expr3465: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_p_Expr3481: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_Expr3483: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_p_FLWORHybrid_in_p_ExprSingle3550: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_IfHybrid_in_p_ExprSingle3580: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_SwitchHybrid_in_p_ExprSingle3606: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_TypeswitchHybrid_in_p_ExprSingle3628: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_TryCatchHybrid_in_p_ExprSingle3655: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSimple_in_p_ExprSingle3668: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_InitialClause_in_p_FLWORHybrid3695: new org.antlr.runtime.BitSet([0x00000000, 0x00200000,0x04040040, 0x01084002]),
    FOLLOW_p_IntermediateClause_in_p_FLWORHybrid3697: new org.antlr.runtime.BitSet([0x00000000, 0x00200000,0x04040040, 0x01084002]),
    FOLLOW_p_ReturnHybrid_in_p_FLWORHybrid3700: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ForClause_in_p_InitialClause3727: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_LetClause_in_p_InitialClause3731: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_WindowClause_in_p_InitialClause3735: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_InitialClause_in_p_IntermediateClause3761: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_WhereClause_in_p_IntermediateClause3765: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_GroupByClause_in_p_IntermediateClause3769: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_OrderByClause_in_p_IntermediateClause3773: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_CountClause_in_p_IntermediateClause3777: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_RangeExpr_in_p_StringConcatExpr3798: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x10000000, 0x00000000]),
    FOLLOW_CONCAT_in_p_StringConcatExpr3802: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_RangeExpr_in_p_StringConcatExpr3804: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x10000000, 0x00000000]),
    FOLLOW_FOR_in_p_ForClause3831: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_p_ForBinding_in_p_ForClause3835: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_p_ForClause3838: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_p_ForBinding_in_p_ForClause3840: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_DOLLAR_in_p_ForBinding3868: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_ForBinding3870: new org.antlr.runtime.BitSet([0x00280000, 0x20000000,0x00000000, 0x00010000,0x00000000, 0x02000000]),
    FOLLOW_p_TypeDeclaration_in_p_ForBinding3872: new org.antlr.runtime.BitSet([0x00200000, 0x20000000,0x00000000, 0x00010000,0x00000000, 0x02000000]),
    FOLLOW_p_AllowingEmpty_in_p_ForBinding3875: new org.antlr.runtime.BitSet([0x00200000, 0x20000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
    FOLLOW_p_PositionalVar_in_p_ForBinding3878: new org.antlr.runtime.BitSet([0x00000000, 0x20000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
    FOLLOW_p_FTScoreVar_in_p_ForBinding3881: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
    FOLLOW_IN_in_p_ForBinding3886: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_ForBinding3890: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ALLOWING_in_p_AllowingEmpty3919: new org.antlr.runtime.BitSet([0x00000000, 0x00001000]),
    FOLLOW_EMPTY_in_p_AllowingEmpty3925: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AT_in_p_PositionalVar3955: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_PositionalVar3959: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_PositionalVar3961: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LET_in_p_LetClause3989: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000,0x80000000, 0x00000000]),
    FOLLOW_p_LetBinding_in_p_LetClause3993: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_p_LetClause3996: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000,0x80000000, 0x00000000]),
    FOLLOW_p_LetBinding_in_p_LetClause3998: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_DOLLAR_in_p_LetBinding4030: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_LetBinding4032: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_p_TypeDeclaration_in_p_LetBinding4034: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_p_FTScoreVar_in_p_LetBinding4040: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_BIND_in_p_LetBinding4044: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_LetBinding4046: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FOR_in_p_WindowClause4075: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000110, 0x00000000]),
    FOLLOW_p_TumblingWindowClause_in_p_WindowClause4080: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_SlidingWindowClause_in_p_WindowClause4084: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TUMBLING_in_p_TumblingWindowClause4121: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
    FOLLOW_WINDOW_in_p_TumblingWindowClause4127: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_TumblingWindowClause4131: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_TumblingWindowClause4133: new org.antlr.runtime.BitSet([0x00080000, 0x20000000]),
    FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4135: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
    FOLLOW_IN_in_p_TumblingWindowClause4140: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4144: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4147: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x80800000]),
    FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4149: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SLIDING_in_p_SlidingWindowClause4178: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
    FOLLOW_WINDOW_in_p_SlidingWindowClause4184: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_SlidingWindowClause4188: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_SlidingWindowClause4190: new org.antlr.runtime.BitSet([0x00080000, 0x20000000]),
    FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4192: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
    FOLLOW_IN_in_p_SlidingWindowClause4197: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4201: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4204: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x80800000]),
    FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4206: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_START_in_p_WindowStartCondition4235: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x40000000,0x00000408, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_p_WindowVars_in_p_WindowStartCondition4239: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_WHEN_in_p_WindowStartCondition4243: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_WindowStartCondition4247: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ONLY_in_p_WindowEndCondition4277: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00800000]),
    FOLLOW_END_in_p_WindowEndCondition4285: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x40000000,0x00000408, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_p_WindowVars_in_p_WindowEndCondition4289: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000400, 0x00000000]),
    FOLLOW_WHEN_in_p_WindowEndCondition4293: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_WindowEndCondition4297: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOLLAR_in_p_WindowVars4325: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_CurrentItem_in_p_WindowVars4327: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00000000, 0x40000000,0x00000008, 0x00000000]),
    FOLLOW_p_PositionalVar_in_p_WindowVars4331: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x40000000,0x00000008, 0x00000000]),
    FOLLOW_PREVIOUS_in_p_WindowVars4337: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_WindowVars4341: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_PreviousItem_in_p_WindowVars4343: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x40000000]),
    FOLLOW_NEXT_in_p_WindowVars4350: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_WindowVars4354: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NextItem_in_p_WindowVars4356: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_CurrentItem4384: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_PreviousItem4410: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_NextItem4436: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COUNT_in_p_CountClause4464: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_CountClause4468: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_CountClause4470: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_WHERE_in_p_WhereClause4506: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_WhereClause4510: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_GROUP_in_p_GroupByClause4539: new org.antlr.runtime.BitSet([0x02000000, 0x00000000]),
    FOLLOW_BY_in_p_GroupByClause4545: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_p_GroupingSpecList_in_p_GroupByClause4549: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4575: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_p_GroupingSpecList4578: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4580: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_DOLLAR_in_p_GroupingSpec4608: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_GroupingSpec4610: new org.antlr.runtime.BitSet([0x40000002, 0x00000000]),
    FOLLOW_COLLATION_in_p_GroupingSpec4615: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_GroupingSpec4619: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ORDER_in_p_OrderByClause4651: new org.antlr.runtime.BitSet([0x02000000, 0x00000000]),
    FOLLOW_BY_in_p_OrderByClause4655: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_STABLE_in_p_OrderByClause4663: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00040000, 0x00000000]),
    FOLLOW_ORDER_in_p_OrderByClause4667: new org.antlr.runtime.BitSet([0x02000000, 0x00000000]),
    FOLLOW_BY_in_p_OrderByClause4671: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_OrderSpecList_in_p_OrderByClause4677: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_OrderSpec_in_p_OrderSpecList4703: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_p_OrderSpecList4706: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_OrderSpec_in_p_OrderSpecList4708: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_p_ExprSingle_in_p_OrderSpec4736: new org.antlr.runtime.BitSet([0x40100000, 0x00001040]),
    FOLLOW_p_OrderModifier_in_p_OrderSpec4739: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ASCENDING_in_p_OrderModifier4768: new org.antlr.runtime.BitSet([0x40000002, 0x00001000]),
    FOLLOW_DESCENDING_in_p_OrderModifier4774: new org.antlr.runtime.BitSet([0x40000002, 0x00001000]),
    FOLLOW_EMPTY_in_p_OrderModifier4781: new org.antlr.runtime.BitSet([0x00000000, 0x01000000,0x00000020, 0x00000000]),
    FOLLOW_GREATEST_in_p_OrderModifier4786: new org.antlr.runtime.BitSet([0x40000002, 0x00000000]),
    FOLLOW_LEAST_in_p_OrderModifier4792: new org.antlr.runtime.BitSet([0x40000002, 0x00000000]),
    FOLLOW_COLLATION_in_p_OrderModifier4800: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_OrderModifier4802: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_RETURN_in_p_ReturnHybrid4835: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_ReturnHybrid4839: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SOME_in_p_QuantifiedExpr4869: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_EVERY_in_p_QuantifiedExpr4875: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_QuantifiedExpr4880: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_QuantifiedExpr4882: new org.antlr.runtime.BitSet([0x00080000, 0x20000000]),
    FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4884: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
    FOLLOW_IN_in_p_QuantifiedExpr4889: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4893: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x08000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_p_QuantifiedExpr4897: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_QuantifiedExpr4899: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_QuantifiedExpr4901: new org.antlr.runtime.BitSet([0x00080000, 0x20000000]),
    FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4903: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
    FOLLOW_IN_in_p_QuantifiedExpr4908: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4912: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x08000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_SATISFIES_in_p_QuantifiedExpr4919: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4923: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SWITCH_in_p_SwitchHybrid4953: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_SwitchHybrid4957: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_SwitchHybrid4959: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_SwitchHybrid4962: new org.antlr.runtime.BitSet([0x04000000, 0x00000000]),
    FOLLOW_p_SwitchCaseHybrid_in_p_SwitchHybrid4964: new org.antlr.runtime.BitSet([0x04000000, 0x00000008]),
    FOLLOW_DEFAULT_in_p_SwitchHybrid4970: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
    FOLLOW_RETURN_in_p_SwitchHybrid4976: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_SwitchHybrid4980: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CASE_in_p_SwitchCaseHybrid5011: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseHybrid5015: new org.antlr.runtime.BitSet([0x04000000, 0x00000000,0x04000000, 0x00000000]),
    FOLLOW_RETURN_in_p_SwitchCaseHybrid5021: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_SwitchCaseHybrid5025: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_SwitchCaseOperand5052: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPESWITCH_in_p_TypeswitchHybrid5082: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_TypeswitchHybrid5086: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_TypeswitchHybrid5088: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_TypeswitchHybrid5091: new org.antlr.runtime.BitSet([0x04000000, 0x00000000]),
    FOLLOW_p_CaseHybrid_in_p_TypeswitchHybrid5093: new org.antlr.runtime.BitSet([0x04000000, 0x00000008]),
    FOLLOW_DEFAULT_in_p_TypeswitchHybrid5099: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_TypeswitchHybrid5104: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_TypeswitchHybrid5106: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
    FOLLOW_RETURN_in_p_TypeswitchHybrid5112: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_TypeswitchHybrid5116: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CASE_in_p_CaseHybrid5146: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_CaseHybrid5151: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_CaseHybrid5153: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_AS_in_p_CaseHybrid5157: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceTypeUnion_in_p_CaseHybrid5163: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
    FOLLOW_RETURN_in_p_CaseHybrid5167: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_CaseHybrid5171: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5198: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
    FOLLOW_VBAR_in_p_SequenceTypeUnion5201: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceType_in_p_SequenceTypeUnion5203: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
    FOLLOW_IF_in_p_IfHybrid5234: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_IfHybrid5238: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_IfHybrid5240: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_IfHybrid5243: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_THEN_in_p_IfHybrid5247: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_IfHybrid5251: new org.antlr.runtime.BitSet([0x00000000, 0x00000800]),
    FOLLOW_ELSE_in_p_IfHybrid5256: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_IfHybrid5260: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_TryClause_in_p_TryCatchExpr5287: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00020000]),
    FOLLOW_p_CatchClause_in_p_TryCatchExpr5289: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00020000]),
    FOLLOW_TRY_in_p_TryClause5318: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_TryClause5322: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_TryTargetExpr_in_p_TryClause5324: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_TryClause5326: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Expr_in_p_TryTargetExpr5352: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CATCH_in_p_CatchClause5381: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x01001001,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_CatchErrorList_in_p_CatchClause5385: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_CatchClause5387: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_CatchClause5389: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_CatchClause5392: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NameTest_in_p_CatchErrorList5418: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
    FOLLOW_VBAR_in_p_CatchErrorList5421: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x01001000,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NameTest_in_p_CatchErrorList5423: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
    FOLLOW_p_AndExpr_in_p_OrExpr5468: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00020000, 0x00000000]),
    FOLLOW_OR_in_p_OrExpr5474: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AndExpr_in_p_OrExpr5478: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00020000, 0x00000000]),
    FOLLOW_p_ComparisonExpr_in_p_AndExpr5507: new org.antlr.runtime.BitSet([0x00040002, 0x00000000]),
    FOLLOW_AND_in_p_AndExpr5513: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ComparisonExpr_in_p_AndExpr5517: new org.antlr.runtime.BitSet([0x00040002, 0x00000000]),
    FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5547: new org.antlr.runtime.BitSet([0x00000002, 0x02808000,0x00000892, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x001F8050]),
    FOLLOW_p_ValueComp_in_p_ComparisonExpr5552: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_GeneralComp_in_p_ComparisonExpr5556: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NodeComp_in_p_ComparisonExpr5560: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_FTContainsExpr_in_p_ComparisonExpr5563: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AdditiveExpr_in_p_RangeExpr5592: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000040]),
    FOLLOW_TO_in_p_RangeExpr5598: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AdditiveExpr_in_p_RangeExpr5602: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5631: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00006000]),
    FOLLOW_set_in_p_AdditiveExpr5635: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5643: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00006000]),
    FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5672: new org.antlr.runtime.BitSet([0x00000002, 0x04000080,0x00000100, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_STAR_in_p_MultiplicativeExpr5677: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_DIV_in_p_MultiplicativeExpr5684: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_IDIV_in_p_MultiplicativeExpr5690: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_MOD_in_p_MultiplicativeExpr5696: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5702: new org.antlr.runtime.BitSet([0x00000002, 0x04000080,0x00000100, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5731: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000200,0x00000000, 0x00000000,0x00000000, 0x40000000]),
    FOLLOW_UNION_in_p_UnionExpr5738: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_VBAR_in_p_UnionExpr5744: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5747: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000200,0x00000000, 0x00000000,0x00000000, 0x40000000]),
    FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5776: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000001, 0x00000000]),
    FOLLOW_INTERSECT_in_p_IntersectExceptExpr5783: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_EXCEPT_in_p_IntersectExceptExpr5789: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5794: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000001, 0x00000000]),
    FOLLOW_p_TreatExpr_in_p_InstanceofExpr5823: new org.antlr.runtime.BitSet([0x00000002, 0x80000000]),
    FOLLOW_INSTANCE_in_p_InstanceofExpr5829: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00008000, 0x00000000]),
    FOLLOW_OF_in_p_InstanceofExpr5835: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceType_in_p_InstanceofExpr5839: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_CastableExpr_in_p_TreatExpr5867: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000080]),
    FOLLOW_TREAT_in_p_TreatExpr5873: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_AS_in_p_TreatExpr5879: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceType_in_p_TreatExpr5883: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_CastExpr_in_p_CastableExpr5920: new org.antlr.runtime.BitSet([0x10000002, 0x00000000]),
    FOLLOW_CASTABLE_in_p_CastableExpr5926: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_AS_in_p_CastableExpr5932: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SingleType_in_p_CastableExpr5936: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_UnaryExpr_in_p_CastExpr5973: new org.antlr.runtime.BitSet([0x08000002, 0x00000000]),
    FOLLOW_CAST_in_p_CastExpr5979: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_AS_in_p_CastExpr5985: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SingleType_in_p_CastExpr5989: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PLUS_in_p_UnaryExpr6019: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_MINUS_in_p_UnaryExpr6023: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ValueExpr_in_p_UnaryExpr6027: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ValidateExpr_in_p_ValueExpr6097: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_PathExpr_in_p_ValueExpr6109: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExtensionExpr_in_p_ValueExpr6121: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_p_GeneralComp0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EQ_in_p_ValueComp6196: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NE_in_p_ValueComp6202: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LT_in_p_ValueComp6208: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LE_in_p_ValueComp6214: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_GT_in_p_ValueComp6220: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_GE_in_p_ValueComp6226: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IS_in_p_NodeComp6257: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SMALLER_SMALLER_in_p_NodeComp6263: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_GREATER_GREATER_in_p_NodeComp6267: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_VALIDATE_in_p_ValidateExpr6295: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000008, 0x00000004,0x00000200, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_p_ValidationMode_in_p_ValidateExpr6301: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_TYPE_in_p_ValidateExpr6307: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_TypeName_in_p_ValidateExpr6311: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_ValidateExpr6316: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_ValidateExpr6318: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_ValidateExpr6321: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LAX_in_p_ValidationMode6350: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_STRICT_in_p_ValidationMode6356: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_L_Pragma_in_p_ExtensionExpr6385: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00080000, 0x00000000]),
    FOLLOW_LBRACKET_in_p_ExtensionExpr6388: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F003,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_ExtensionExpr6390: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_ExtensionExpr6394: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SLASH_in_p_PathExpr6437: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_RelativePathExpr_in_p_PathExpr6439: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SLASH_in_p_PathExpr6452: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SLASH_SLASH_in_p_PathExpr6464: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_RelativePathExpr_in_p_PathExpr6466: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_RelativePathExpr_in_p_PathExpr6478: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_StepExpr_in_p_RelativePathExpr6506: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00600000]),
    FOLLOW_set_in_p_RelativePathExpr6509: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_StepExpr_in_p_RelativePathExpr6517: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00600000]),
    FOLLOW_p_PostfixExpr_in_p_StepExpr6571: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_PostfixExpr_in_p_StepExpr6685: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AxisStep_in_p_StepExpr6703: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_PostfixExpr_in_p_StepExpr6724: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_PostfixExpr_in_p_StepExpr6742: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AxisStep_in_p_StepExpr6754: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ReverseStep_in_p_AxisStep6781: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
    FOLLOW_p_ForwardStep_in_p_AxisStep6785: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
    FOLLOW_p_PredicateList_in_p_AxisStep6788: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ForwardAxis_in_p_ForwardStep6814: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x01001000,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NodeTest_in_p_ForwardStep6816: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6828: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CHILD_in_p_ForwardAxis6854: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ForwardAxis6856: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DESCENDANT_in_p_ForwardAxis6868: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ForwardAxis6870: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ATTRIBUTE_in_p_ForwardAxis6882: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ForwardAxis6884: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SELF_in_p_ForwardAxis6896: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ForwardAxis6898: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6910: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ForwardAxis6912: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6924: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ForwardAxis6926: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FOLLOWING_in_p_ForwardAxis6938: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ForwardAxis6940: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6966: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x01001000,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6969: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ReverseAxis_in_p_ReverseStep6995: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x01001000,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NodeTest_in_p_ReverseStep6997: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep7009: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PARENT_in_p_ReverseAxis7035: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ReverseAxis7037: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ANCESTOR_in_p_ReverseAxis7049: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ReverseAxis7051: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis7063: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ReverseAxis7065: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PRECEDING_in_p_ReverseAxis7077: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ReverseAxis7079: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis7091: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_COLON_COLON_in_p_ReverseAxis7093: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOT_DOT_in_p_AbbrevReverseStep7119: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_KindTest_in_p_NodeTest7145: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NameTest_in_p_NodeTest7149: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Wildcard_in_p_NameTest7181: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_NameTest7202: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_NameTest7220: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_STAR_in_p_Wildcard7250: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
    FOLLOW_COLON_in_p_Wildcard7253: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NCName_in_p_Wildcard7255: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NCName_in_p_Wildcard7269: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
    FOLLOW_COLON_in_p_Wildcard7271: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_STAR_in_p_Wildcard7273: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_Wildcard7285: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
    FOLLOW_COLON_in_p_Wildcard7287: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_STAR_in_p_Wildcard7289: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_PrimaryExpr_in_p_PostfixExpr7327: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
    FOLLOW_p_Predicate_in_p_PostfixExpr7330: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
    FOLLOW_LPAREN_in_p_ArgumentList7371: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xEFFFFFFF, 0x01E0F801,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Argument_in_p_ArgumentList7374: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_COMMA_in_p_ArgumentList7377: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F801,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Argument_in_p_ArgumentList7379: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_RPAREN_in_p_ArgumentList7385: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Predicate_in_p_PredicateList7411: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000004]),
    FOLLOW_LSQUARE_in_p_Predicate7438: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_Predicate7440: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000008]),
    FOLLOW_RSQUARE_in_p_Predicate7443: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr7476: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Literal_in_p_PrimaryExpr7488: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_VarRef_in_p_PrimaryExpr7500: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr7512: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FunctionCall_in_p_PrimaryExpr7524: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_OrderedExpr_in_p_PrimaryExpr7536: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr7548: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Constructor_in_p_PrimaryExpr7560: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_BlockExpr_in_p_PrimaryExpr7574: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NumericLiteral_in_p_Literal7600: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_Literal7604: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_p_NumericLiteral0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOLLAR_in_p_VarRef7672: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_VarRef7674: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_VarName7700: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LPAREN_in_p_ParenthesizedExpr7726: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xEFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_ParenthesizedExpr7728: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_ParenthesizedExpr7732: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOT_in_p_ContextItemExpr7758: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ORDERED_in_p_OrderedExpr7786: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_OrderedExpr7790: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_OrderedExpr7792: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_OrderedExpr7795: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_UNORDERED_in_p_UnorderedExpr7823: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_UnorderedExpr7827: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_UnorderedExpr7829: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_UnorderedExpr7832: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pg_FQName_in_p_FunctionCall7859: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_p_ArgumentList_in_p_FunctionCall7861: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_Argument7887: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ArgumentPlaceholder_in_p_Argument7892: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_QUESTION_in_p_ArgumentPlaceholder7918: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_DirectConstructor_in_p_Constructor7944: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ComputedConstructor_in_p_Constructor7956: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7982: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_DirCommentConstructor_in_p_DirectConstructor7994: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_DirPIConstructor_in_p_DirectConstructor8006: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SMALLER_in_p_DirElemConstructor8033: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_DirElemConstructor8047: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08010000,0x00020000, 0x00000000]),
    FOLLOW_p_DirAttributeList_in_p_DirElemConstructor8049: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08010000]),
    FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor8063: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_GREATER_in_p_DirElemConstructor8068: new org.antlr.runtime.BitSet([0x00000FC0, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10008001,0x00300000, 0x00000000]),
    FOLLOW_pm_DirElemContent_in_p_DirElemConstructor8070: new org.antlr.runtime.BitSet([0x00000FC0, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10008001,0x00300000, 0x00000000]),
    FOLLOW_CLOSE_TAG_in_p_DirElemConstructor8073: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_DirElemConstructor8075: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00010000,0x00020000, 0x00000000]),
    FOLLOW_S_in_p_DirElemConstructor8077: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00010000]),
    FOLLOW_GREATER_in_p_DirElemConstructor8080: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_S_in_p_DirAttributeList8157: new org.antlr.runtime.BitSet([0xFFFF0002, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00021000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_DirAttributeList8160: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010,0x00020000, 0x00000000]),
    FOLLOW_S_in_p_DirAttributeList8162: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000010]),
    FOLLOW_EQUAL_in_p_DirAttributeList8165: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00020300, 0x00000000]),
    FOLLOW_S_in_p_DirAttributeList8167: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00020300, 0x00000000]),
    FOLLOW_p_DirAttributeValue_in_p_DirAttributeList8170: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00020000, 0x00000000]),
    FOLLOW_QUOT_in_p_DirAttributeValue8201: new org.antlr.runtime.BitSet([0x00002F10, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
    FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue8204: new org.antlr.runtime.BitSet([0x00002F10, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
    FOLLOW_APOS_in_p_DirAttributeValue8208: new org.antlr.runtime.BitSet([0x00002F10, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
    FOLLOW_p_QuotAttrValueContent_in_p_DirAttributeValue8212: new org.antlr.runtime.BitSet([0x00002F10, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
    FOLLOW_QUOT_in_p_DirAttributeValue8216: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_APOS_in_p_DirAttributeValue8255: new org.antlr.runtime.BitSet([0x00001F20, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
    FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue8258: new org.antlr.runtime.BitSet([0x00001F20, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
    FOLLOW_QUOT_in_p_DirAttributeValue8262: new org.antlr.runtime.BitSet([0x00001F20, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
    FOLLOW_p_AposAttrValueContent_in_p_DirAttributeValue8266: new org.antlr.runtime.BitSet([0x00001F20, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00000300, 0x00000000]),
    FOLLOW_APOS_in_p_DirAttributeValue8270: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QuotAttrContentChar_in_p_QuotAttrValueContent8322: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_CommonContent_in_p_QuotAttrValueContent8326: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AposAttrContentChar_in_p_AposAttrValueContent8352: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_CommonContent_in_p_AposAttrValueContent8356: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_DirectConstructor_in_pm_DirElemContent8382: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_CDataSection_in_pm_DirElemContent8394: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_CommonContent_in_pm_DirElemContent8406: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ElementContentChar_in_pm_DirElemContent8418: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_L_PredefinedEntityRef_in_pm_CommonContent8446: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_L_CharRef_in_pm_CommonContent8458: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ESCAPE_LBRACKET_in_pm_CommonContent8470: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ESCAPE_RBRACKET_in_pm_CommonContent8482: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pg_EnclosedExprXml_in_pm_CommonContent8494: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LBRACKET_in_pg_EnclosedExprXml8526: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_StatementsAndOptionalExpr_in_pg_EnclosedExprXml8542: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pg_EnclosedExprXml8556: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_L_DirCommentConstructor_in_p_DirCommentConstructor8587: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_L_DirPIConstructor_in_p_DirPIConstructor8621: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_L_CDataSection_in_p_CDataSection8654: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_CompDocConstructor_in_p_ComputedConstructor8686: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_CompElemConstructor_in_p_ComputedConstructor8698: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_CompAttrConstructor_in_p_ComputedConstructor8710: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8722: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8734: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_CompCommentConstructor_in_p_ComputedConstructor8746: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pm_CompPIConstructor_in_p_ComputedConstructor8758: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8773: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOCUMENT_in_pm_CompDocConstructor8802: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_pm_CompDocConstructor8806: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompDocConstructor8808: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pm_CompDocConstructor8810: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ELEMENT_in_pm_CompElemConstructor8846: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_pm_CompElemConstructor8851: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_pm_CompElemConstructor8856: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_pm_CompElemConstructor8858: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pm_CompElemConstructor8861: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_pm_CompElemConstructor8865: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_pm_ContentExpr_in_pm_CompElemConstructor8867: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pm_CompElemConstructor8869: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_StatementsAndOptionalExpr_in_pm_ContentExpr8896: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ATTRIBUTE_in_pm_CompAttrConstructor8925: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_pm_CompAttrConstructor8930: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_pm_CompAttrConstructor8935: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_pm_CompAttrConstructor8937: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pm_CompAttrConstructor8940: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_pm_CompAttrConstructor8944: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompAttrConstructor8946: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pm_CompAttrConstructor8948: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8976: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Prefix_in_p_CompNamespaceConstructor8981: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8986: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_PrefixExpr_in_p_CompNamespaceConstructor8988: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8990: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8994: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F003,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_URIExpr_in_p_CompNamespaceConstructor8996: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8999: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NCName_in_p_Prefix9025: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Expr_in_p_PrefixExpr9051: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Expr_in_p_URIExpr9078: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TEXT_in_p_CompTextConstructor9107: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_CompTextConstructor9111: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_CompTextConstructor9113: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_CompTextConstructor9116: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_BINARY_in_p_CompBinaryConstructor9144: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_CompBinaryConstructor9148: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_CompBinaryConstructor9150: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_CompBinaryConstructor9153: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COMMENT_in_pm_CompCommentConstructor9182: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_pm_CompCommentConstructor9186: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompCommentConstructor9188: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pm_CompCommentConstructor9190: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PROCESSING_INSTRUCTION_in_pm_CompPIConstructor9219: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NCName_in_pm_CompPIConstructor9224: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_pm_CompPIConstructor9229: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_pm_CompPIConstructor9231: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pm_CompPIConstructor9234: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_pm_CompPIConstructor9238: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_StatementsAndOptionalExpr_in_pm_CompPIConstructor9240: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_pm_CompPIConstructor9242: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AtomicOrUnionType_in_p_SingleType9286: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800]),
    FOLLOW_QUESTION_in_p_SingleType9288: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AS_in_p_TypeDeclaration9317: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceType_in_p_TypeDeclaration9323: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType9376: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_SequenceType9382: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_SequenceType9386: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ItemType_in_p_SequenceType9435: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003800]),
    FOLLOW_p_OccurrenceIndicator_in_p_SequenceType9446: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_p_OccurrenceIndicator0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_KindTest_in_p_ItemType9548: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_BINARY_in_p_ItemType9588: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_ItemType9590: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_ItemType9592: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ITEM_in_p_ItemType9634: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_ItemType9636: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_ItemType9638: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AtomicOrUnionType_in_p_ItemType9682: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ParenthesizedItemType_in_p_ItemType9694: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_AtomicOrUnionType9720: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_DocumentTest_in_p_KindTest9770: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ElementTest_in_p_KindTest9782: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AttributeTest_in_p_KindTest9794: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_SchemaElementTest_in_p_KindTest9806: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_SchemaAttributeTest_in_p_KindTest9818: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_PITest_in_p_KindTest9830: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_CommentTest_in_p_KindTest9842: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_TextTest_in_p_KindTest9854: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NamespaceNodeTest_in_p_KindTest9866: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AnyKindTest_in_p_KindTest9878: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NODE_in_p_AnyKindTest9904: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_AnyKindTest9906: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_AnyKindTest9908: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9934: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_DocumentTest9936: new org.antlr.runtime.BitSet([0x00000000, 0x00000400,0x40000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_p_ElementTest_in_p_DocumentTest9939: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_p_SchemaElementTest_in_p_DocumentTest9943: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_DocumentTest9947: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TEXT_in_p_TextTest9973: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_TextTest9975: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_TextTest9977: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COMMENT_in_p_CommentTest10003: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_CommentTest10005: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_CommentTest10007: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest10033: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_NamespaceNodeTest10035: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_NamespaceNodeTest10037: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest10063: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_PITest10065: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x4FFFFFFF, 0x00000000,0x01C01300, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NCName_in_p_PITest10068: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_PITest10072: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_PITest10076: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ATTRIBUTE_in_p_AttributeTest10102: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_AttributeTest10104: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x4FFFFFFF, 0x00001000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest10107: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_COMMA_in_p_AttributeTest10110: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_TypeName_in_p_AttributeTest10112: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_AttributeTest10118: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AttributeName_in_p_AttribNameOrWildcard10146: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_STAR_in_p_AttribNameOrWildcard10150: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest10176: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_SchemaAttributeTest10178: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest10180: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_SchemaAttributeTest10182: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AttributeName_in_p_AttributeDeclaration10208: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ELEMENT_in_p_ElementTest10234: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_ElementTest10236: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x4FFFFFFF, 0x00001000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest10239: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_COMMA_in_p_ElementTest10242: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_TypeName_in_p_ElementTest10244: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000800]),
    FOLLOW_QUESTION_in_p_ElementTest10246: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_ElementTest10253: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_ElementNameOrWildcard10279: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_STAR_in_p_ElementNameOrWildcard10283: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest10301: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_SchemaElementTest10303: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest10305: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_SchemaElementTest10307: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ElementName_in_p_ElementDeclaration10333: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_AttributeName10359: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_ElementName10385: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_TypeName10411: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Annotation_in_p_FunctionTest10437: new org.antlr.runtime.BitSet([0x00000000, 0x00400000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000080]),
    FOLLOW_p_AnyFunctionTest_in_p_FunctionTest10441: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_TypedFunctionTest_in_p_FunctionTest10445: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FUNCTION_in_p_AnyFunctionTest10472: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_AnyFunctionTest10474: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_STAR_in_p_AnyFunctionTest10476: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_AnyFunctionTest10478: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FUNCTION_in_p_TypedFunctionTest10504: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_TypedFunctionTest10506: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x6FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceType_in_p_TypedFunctionTest10509: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_COMMA_in_p_TypedFunctionTest10512: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceType_in_p_TypedFunctionTest10514: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_RPAREN_in_p_TypedFunctionTest10520: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_AS_in_p_TypedFunctionTest10522: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceType_in_p_TypedFunctionTest10524: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LPAREN_in_p_ParenthesizedItemType10550: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ItemType_in_p_ParenthesizedItemType10552: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_ParenthesizedItemType10554: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_QUOT_in_p_StringLiteral10605: new org.antlr.runtime.BitSet([0xFFFFFFF0, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFDFF,0xFFFFFFFF, 0xFFFFFFFF,0x001FFFFF, 0x00000000]),
    FOLLOW_pg_QuotStringLiteralContent_in_p_StringLiteral10609: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000200, 0x00000000]),
    FOLLOW_QUOT_in_p_StringLiteral10611: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_APOS_in_p_StringLiteral10650: new org.antlr.runtime.BitSet([0xFFFFFFF0, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFDFF,0xFFFFFFFF, 0xFFFFFFFF,0x001FFFFF, 0x00000000]),
    FOLLOW_pg_AposStringLiteralContent_in_p_StringLiteral10654: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000100, 0x00000000]),
    FOLLOW_APOS_in_p_StringLiteral10656: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_pg_QuotStringLiteralContent10710: new org.antlr.runtime.BitSet([0xFFFFFFF2, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFDFF,0xFFFFFDFF, 0xFFFFFFFF,0x001FFFFF, 0x00000000]),
    FOLLOW_set_in_pg_AposStringLiteralContent10761: new org.antlr.runtime.BitSet([0xFFFFFFF2, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFDFF,0xFFFFFEFF, 0xFFFFFFFF,0x001FFFFF, 0x00000000]),
    FOLLOW_L_ElementContentChar_in_p_ElementContentChar10819: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_L_QuotAttrContentChar_in_p_QuotAttrContentChar10845: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_L_AposAttrContentChar_in_p_AposAttrContentChar10895: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pg_QName_in_p_QName10981: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NCName_in_p_QName10993: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pg_QName_in_pg_FQName11054: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FNCName_in_pg_FQName11066: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NCName_in_pg_QName11110: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
    FOLLOW_COLON_in_pg_QName11112: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NCName_in_pg_QName11116: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_p_NCName0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_p_FNCName0: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_InsertExpr_in_pg_UpdateExpr13107: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_DeleteExpr_in_pg_UpdateExpr13119: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_RenameExpr_in_pg_UpdateExpr13131: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ReplaceExpr_in_pg_UpdateExpr13143: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_TransformExpr_in_pg_UpdateExpr13155: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_RevalidationDecl13183: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x02000000, 0x00000000]),
    FOLLOW_REVALIDATION_in_pm_RevalidationDecl13187: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000008, 0x00000004,0x04000000, 0x00000000]),
    FOLLOW_STRICT_in_pm_RevalidationDecl13192: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_LAX_in_pm_RevalidationDecl13198: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SKIP_in_pm_RevalidationDecl13204: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_RevalidationDecl13209: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AS_in_p_InsertExprTargetChoice13239: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00120000, 0x00000000]),
    FOLLOW_FIRST_in_p_InsertExprTargetChoice13244: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00080000, 0x00000000]),
    FOLLOW_LAST_in_p_InsertExprTargetChoice13250: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00080000, 0x00000000]),
    FOLLOW_INTO_in_p_InsertExprTargetChoice13257: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AFTER_in_p_InsertExprTargetChoice13274: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_BEFORE_in_p_InsertExprTargetChoice13290: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_INSERT_in_p_InsertExpr13320: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_NODE_in_p_InsertExpr13325: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_NODES_in_p_InsertExpr13331: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SourceExpr_in_p_InsertExpr13334: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000000, 0x00000000,0x00086000, 0x00000000]),
    FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr13336: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_TargetExpr_in_p_InsertExpr13338: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DELETE_in_p_DeleteExpr13368: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_NODE_in_p_DeleteExpr13373: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_NODES_in_p_DeleteExpr13379: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_TargetExpr_in_p_DeleteExpr13382: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_REPLACE_in_p_ReplaceExpr13412: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x10000000, 0x00000000]),
    FOLLOW_VALUE_in_p_ReplaceExpr13417: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00008000, 0x00000000]),
    FOLLOW_OF_in_p_ReplaceExpr13421: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000]),
    FOLLOW_NODE_in_p_ReplaceExpr13427: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_ReplaceExpr13429: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_WITH_in_p_ReplaceExpr13434: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_ReplaceExpr13436: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_RENAME_in_p_RenameExpr13467: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000]),
    FOLLOW_NODE_in_p_RenameExpr13471: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_TargetExpr_in_p_RenameExpr13473: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_AS_in_p_RenameExpr13475: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NewNameExpr_in_p_RenameExpr13477: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_SourceExpr13505: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_TargetExpr13532: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_NewNameExpr13559: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COPY_in_p_TransformExpr13588: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_TransformExpr13590: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_TransformExpr13592: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_BIND_in_p_TransformExpr13594: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_TransformExpr13596: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00200000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_p_TransformExpr13600: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_TransformExpr13602: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_TransformExpr13604: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_BIND_in_p_TransformExpr13606: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_TransformExpr13608: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00200000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_MODIFY_in_p_TransformExpr13615: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_TransformExpr13617: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
    FOLLOW_RETURN_in_p_TransformExpr13622: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_TransformExpr13624: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DECLARE_in_pm_FTOptionDecl13662: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000100]),
    FOLLOW_FT_OPTION_in_pm_FTOptionDecl13666: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000004, 0x00000000]),
    FOLLOW_p_FTMatchOptions_in_pm_FTOptionDecl13668: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_pm_FTOptionDecl13670: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SCORE_in_p_FTScoreVar13700: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_FTScoreVar13704: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_FTScoreVar13706: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_StringConcatExpr_in_p_FTContainsExpr13732: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_CONTAINS_in_p_FTContainsExpr13738: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000010]),
    FOLLOW_TEXT_in_p_FTContainsExpr13742: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
    FOLLOW_p_FTSelection_in_p_FTContainsExpr13746: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_p_FTIgnoreOption_in_p_FTContainsExpr13748: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTOr_in_p_FTSelection13778: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00080000, 0x00000000,0x00000800, 0x01000038]),
    FOLLOW_p_FTPosFilter_in_p_FTSelection13780: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00080000, 0x00000000,0x00000800, 0x01000038]),
    FOLLOW_WEIGHT_in_p_FTWeight13809: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_p_FTWeight13813: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_FTWeight13815: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_FTWeight13818: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTAnd_in_p_FTOr13844: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800]),
    FOLLOW_FTOR_in_p_FTOr13850: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
    FOLLOW_p_FTAnd_in_p_FTOr13854: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000800]),
    FOLLOW_p_FTMildNot_in_p_FTAnd13883: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000200]),
    FOLLOW_FTAND_in_p_FTAnd13889: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
    FOLLOW_p_FTMildNot_in_p_FTAnd13893: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000200]),
    FOLLOW_p_FTUnaryNot_in_p_FTMildNot13922: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00040000]),
    FOLLOW_NOT_in_p_FTMildNot13928: new org.antlr.runtime.BitSet([0x00000000, 0x20000000]),
    FOLLOW_IN_in_p_FTMildNot13932: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
    FOLLOW_p_FTUnaryNot_in_p_FTMildNot13936: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00040000]),
    FOLLOW_FTNOT_in_p_FTUnaryNot13969: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
    FOLLOW_p_FTPrimaryWithOptions_in_p_FTUnaryNot13976: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTPrimary_in_p_FTPrimaryWithOptions14002: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x0000000C, 0x00000000]),
    FOLLOW_p_FTMatchOptions_in_p_FTPrimaryWithOptions14004: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000008, 0x00000000]),
    FOLLOW_p_FTWeight_in_p_FTPrimaryWithOptions14007: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTWords_in_p_FTPrimary14038: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00080000]),
    FOLLOW_p_FTTimes_in_p_FTPrimary14040: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LPAREN_in_p_FTPrimary14055: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400,0x20000000, 0x00000001,0x01C80300, 0x00000000]),
    FOLLOW_p_FTSelection_in_p_FTPrimary14057: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_FTPrimary14059: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTExtensionSelection_in_p_FTPrimary14072: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTWordsValue_in_p_FTWords14098: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0xC0000000, 0x00400000]),
    FOLLOW_p_FTAnyallOption_in_p_FTWords14100: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_FTWordsValue14127: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LBRACKET_in_p_FTWordsValue14140: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_FTWordsValue14142: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_FTWordsValue14145: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_L_Pragma_in_p_FTExtensionSelection14172: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001,0x00080000, 0x00000000]),
    FOLLOW_LBRACKET_in_p_FTExtensionSelection14175: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400,0x20000000, 0x00000003,0x01C80300, 0x00000000]),
    FOLLOW_p_FTSelection_in_p_FTExtensionSelection14177: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_FTExtensionSelection14180: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ANY_in_p_FTAnyallOption14211: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000040, 0x00000000]),
    FOLLOW_WORD_in_p_FTAnyallOption14215: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ALL_in_p_FTAnyallOption14224: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000080, 0x00000000]),
    FOLLOW_WORDS_in_p_FTAnyallOption14226: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PHRASE_in_p_FTAnyallOption14234: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_OCCURS_in_p_FTTimes14266: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x000000C0]),
    FOLLOW_p_FTRange_in_p_FTTimes14268: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000001, 0x00000000]),
    FOLLOW_TIMES_in_p_FTTimes14272: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EXACTLY_in_p_FTRange14305: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AdditiveExpr_in_p_FTRange14307: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AT_in_p_FTRange14325: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_LEAST_in_p_FTRange14329: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AdditiveExpr_in_p_FTRange14331: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AT_in_p_FTRange14349: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00010000]),
    FOLLOW_MOST_in_p_FTRange14353: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AdditiveExpr_in_p_FTRange14355: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FROM_in_p_FTRange14373: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AdditiveExpr_in_p_FTRange14375: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000040]),
    FOLLOW_TO_in_p_FTRange14379: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AdditiveExpr_in_p_FTRange14381: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTOrder_in_p_FTPosFilter14412: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTWindow_in_p_FTPosFilter14416: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTDistance_in_p_FTPosFilter14420: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTScope_in_p_FTPosFilter14424: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTContent_in_p_FTPosFilter14428: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ORDERED_in_p_FTOrder14456: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_WINDOW_in_p_FTWindow14486: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AdditiveExpr_in_p_FTWindow14490: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10200000,0x00000080, 0x00000000]),
    FOLLOW_p_FTUnit_in_p_FTWindow14492: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DISTANCE_in_p_FTDistance14520: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x000000C0]),
    FOLLOW_p_FTRange_in_p_FTDistance14524: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x10200000,0x00000080, 0x00000000]),
    FOLLOW_p_FTUnit_in_p_FTDistance14526: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_WORDS_in_p_FTUnit14556: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SENTENCES_in_p_FTUnit14562: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PARAGRAPHS_in_p_FTUnit14568: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SAME_in_p_FTScope14601: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08100000]),
    FOLLOW_DIFFERENT_in_p_FTScope14607: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x08100000]),
    FOLLOW_p_FTBigUnit_in_p_FTScope14612: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SENTENCE_in_p_FTBigUnit14642: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_PARAGRAPH_in_p_FTBigUnit14648: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AT_in_p_FTContent14683: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_START_in_p_FTContent14687: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AT_in_p_FTContent14695: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00800000]),
    FOLLOW_END_in_p_FTContent14699: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ENTIRE_in_p_FTContent14707: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_CONTENT_in_p_FTContent14711: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_USING_in_p_FTMatchOptions14745: new org.antlr.runtime.BitSet([0x04000000, 0x00000000,0x00010000, 0x00000000,0x00000000, 0xE002A004,0x00000012, 0x00000000]),
    FOLLOW_p_FTMatchOption_in_p_FTMatchOptions14749: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000004, 0x00000000]),
    FOLLOW_p_FTLanguageOption_in_p_FTMatchOption14777: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTWildCardOption_in_p_FTMatchOption14789: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTThesaurusOption_in_p_FTMatchOption14801: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTStemOption_in_p_FTMatchOption14813: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTCaseOption_in_p_FTMatchOption14825: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTDiacriticsOption_in_p_FTMatchOption14837: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTStopWordOption_in_p_FTMatchOption14849: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_FTExtensionOption_in_p_FTMatchOption14861: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CASE_in_p_FTCaseOption14892: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_INSENSITIVE_in_p_FTCaseOption14896: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CASE_in_p_FTCaseOption14914: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_SENSITIVE_in_p_FTCaseOption14918: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LOWERCASE_in_p_FTCaseOption14935: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_UPPERCASE_in_p_FTCaseOption14951: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DIACRITICS_in_p_FTDiacriticsOption14986: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00001000]),
    FOLLOW_INSENSITIVE_in_p_FTDiacriticsOption14990: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DIACRITICS_in_p_FTDiacriticsOption15008: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x04000000]),
    FOLLOW_SENSITIVE_in_p_FTDiacriticsOption15012: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_STEMMING_in_p_FTStemOption15047: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NO_in_p_FTStemOption15054: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_STEMMING_in_p_FTStemOption15058: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_THESAURUS_in_p_FTThesaurusOption15094: new org.antlr.runtime.BitSet([0x00200000, 0x00000008]),
    FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15097: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DEFAULT_in_p_FTThesaurusOption15103: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_THESAURUS_in_p_FTThesaurusOption15122: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_FTThesaurusOption15124: new org.antlr.runtime.BitSet([0x00200000, 0x00000008]),
    FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15127: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_DEFAULT_in_p_FTThesaurusOption15133: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_COMMA_in_p_FTThesaurusOption15137: new org.antlr.runtime.BitSet([0x00200000, 0x00000000]),
    FOLLOW_p_FTThesaurusID_in_p_FTThesaurusOption15139: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_RPAREN_in_p_FTThesaurusOption15143: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NO_in_p_FTThesaurusOption15161: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x80000000]),
    FOLLOW_THESAURUS_in_p_FTThesaurusOption15165: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AT_in_p_FTThesaurusID15198: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_FTThesaurusID15200: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x008000C0]),
    FOLLOW_RELATIONSHIP_in_p_FTThesaurusID15205: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_FTThesaurusID15207: new org.antlr.runtime.BitSet([0x00200002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x000000C0]),
    FOLLOW_p_FTLiteralRange_in_p_FTThesaurusID15212: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00004000]),
    FOLLOW_LEVELS_in_p_FTThesaurusID15216: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EXACTLY_in_p_FTLiteralRange15251: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15253: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AT_in_p_FTLiteralRange15271: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000020, 0x00000000]),
    FOLLOW_LEAST_in_p_FTLiteralRange15275: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15277: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AT_in_p_FTLiteralRange15295: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00010000]),
    FOLLOW_MOST_in_p_FTLiteralRange15299: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15301: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FROM_in_p_FTLiteralRange15319: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15321: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000040]),
    FOLLOW_TO_in_p_FTLiteralRange15323: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_L_IntegerLiteral_in_p_FTLiteralRange15325: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_STOP_in_p_FTStopWordOption15361: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000080, 0x00000000]),
    FOLLOW_WORDS_in_p_FTStopWordOption15365: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_p_FTStopWords_in_p_FTStopWordOption15367: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000000, 0x00000200]),
    FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15369: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000000, 0x00000200]),
    FOLLOW_STOP_in_p_FTStopWordOption15388: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000080, 0x00000000]),
    FOLLOW_WORDS_in_p_FTStopWordOption15392: new org.antlr.runtime.BitSet([0x00000000, 0x00000008]),
    FOLLOW_DEFAULT_in_p_FTStopWordOption15396: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000000, 0x00000200]),
    FOLLOW_p_FTStopWordsInclExcl_in_p_FTStopWordOption15398: new org.antlr.runtime.BitSet([0x00000002, 0x00020000,0x00000000, 0x00000200]),
    FOLLOW_NO_in_p_FTStopWordOption15417: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x40000000]),
    FOLLOW_STOP_in_p_FTStopWordOption15421: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000080, 0x00000000]),
    FOLLOW_WORDS_in_p_FTStopWordOption15425: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AT_in_p_FTStopWords15459: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_FTStopWords15463: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LPAREN_in_p_FTStopWords15477: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_FTStopWords15479: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_COMMA_in_p_FTStopWords15482: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_FTStopWords15484: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000400]),
    FOLLOW_RPAREN_in_p_FTStopWords15488: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_UNION_in_p_FTStopWordsInclExcl15520: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_EXCEPT_in_p_FTStopWordsInclExcl15526: new org.antlr.runtime.BitSet([0x00200000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_p_FTStopWords_in_p_FTStopWordsInclExcl15529: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LANGUAGE_in_p_FTLanguageOption15561: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_FTLanguageOption15565: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_WILDCARDS_in_p_FTWildCardOption15595: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NO_in_p_FTWildCardOption15602: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000010, 0x00000000]),
    FOLLOW_WILDCARDS_in_p_FTWildCardOption15606: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_OPTION_in_p_FTExtensionOption15639: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_FTExtensionOption15643: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_FTExtensionOption15645: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_WITHOUT_in_p_FTIgnoreOption15673: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_CONTENT_in_p_FTIgnoreOption15677: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_UnionExpr_in_p_FTIgnoreOption15681: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_StatementsAndOptionalExpr_in_p_Program15713: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_Statements15740: new org.antlr.runtime.BitSet([0xFFFF0002, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Statements_in_p_StatementsAndExpr15768: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Statements_in_p_StatementsAndOptionalExpr15795: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_HybridExprSingle_in_p_Hybrid15822: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Statement_in_p_Hybrid15835: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_AssignStatement_in_p_Statement15866: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_BreakStatement_in_p_Statement15878: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ContinueStatement_in_p_Statement15890: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExitStatement_in_p_Statement15902: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_VarDeclStatement_in_p_Statement15914: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_WhileStatement_in_p_Statement15926: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Expr_in_p_HybridExprSingle15953: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_p_HybridExprSingle15968: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ExprSimple_in_p_ApplyStatement16018: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_p_ApplyStatement16020: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOLLAR_in_p_AssignStatement16046: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_AssignStatement16048: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_BIND_in_p_AssignStatement16050: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_AssignStatement16052: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_p_AssignStatement16055: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LBRACKET_in_p_BlockStatement16081: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F083,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Statements_in_p_BlockStatement16083: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_BlockStatement16086: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LBRACKET_in_p_BlockHybrid16112: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F083,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Statements_in_p_BlockHybrid16114: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_BlockHybrid16117: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_BREAK_in_p_BreakStatement16145: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
    FOLLOW_LOOP_in_p_BreakStatement16151: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_p_BreakStatement16155: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CONTINUE_in_p_ContinueStatement16183: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000800, 0x00000000]),
    FOLLOW_LOOP_in_p_ContinueStatement16189: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_p_ContinueStatement16193: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_EXIT_in_p_ExitStatement16221: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00001000, 0x00000000]),
    FOLLOW_RETURNING_in_p_ExitStatement16227: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_ExitStatement16231: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000000]),
    FOLLOW_SEMICOLON_in_p_ExitStatement16234: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_InitialClause_in_p_FLWORStatement16260: new org.antlr.runtime.BitSet([0x00000000, 0x00200000,0x04040040, 0x01084002]),
    FOLLOW_p_IntermediateClause_in_p_FLWORStatement16262: new org.antlr.runtime.BitSet([0x00000000, 0x00200000,0x04040040, 0x01084002]),
    FOLLOW_p_ReturnStatement_in_p_FLWORStatement16265: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_RETURN_in_p_ReturnStatement16297: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_ReturnStatement16301: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IF_in_p_IfStatement16330: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_IfStatement16334: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_IfStatement16336: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_IfStatement16339: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000020]),
    FOLLOW_THEN_in_p_IfStatement16343: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_IfStatement16347: new org.antlr.runtime.BitSet([0x00000000, 0x00000800]),
    FOLLOW_ELSE_in_p_IfStatement16352: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_IfStatement16356: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SWITCH_in_p_SwitchStatement16385: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_SwitchStatement16389: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_SwitchStatement16391: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_SwitchStatement16394: new org.antlr.runtime.BitSet([0x04000000, 0x00000000]),
    FOLLOW_p_SwitchCaseStatement_in_p_SwitchStatement16396: new org.antlr.runtime.BitSet([0x04000000, 0x00000008]),
    FOLLOW_DEFAULT_in_p_SwitchStatement16401: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
    FOLLOW_RETURN_in_p_SwitchStatement16407: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_SwitchStatement16411: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CASE_in_p_SwitchCaseStatement16441: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SwitchCaseOperand_in_p_SwitchCaseStatement16445: new org.antlr.runtime.BitSet([0x04000000, 0x00000000,0x04000000, 0x00000000]),
    FOLLOW_RETURN_in_p_SwitchCaseStatement16451: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_SwitchCaseStatement16455: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TRY_in_p_TryCatchStatement16484: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_p_BlockStatement_in_p_TryCatchStatement16488: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00020000]),
    FOLLOW_CATCH_in_p_TryCatchStatement16493: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x01001001,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_CatchErrorList_in_p_TryCatchStatement16497: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_p_BlockStatement_in_p_TryCatchStatement16499: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00020000]),
    FOLLOW_TRY_in_p_TryCatchHybrid16531: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16535: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00020000]),
    FOLLOW_CATCH_in_p_TryCatchHybrid16541: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x01001001,0x01C01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_CatchErrorList_in_p_TryCatchHybrid16545: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_p_BlockHybrid_in_p_TryCatchHybrid16547: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00020000]),
    FOLLOW_TYPESWITCH_in_p_TypeswitchStatement16580: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_TypeswitchStatement16584: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_TypeswitchStatement16586: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_TypeswitchStatement16589: new org.antlr.runtime.BitSet([0x04000000, 0x00000000]),
    FOLLOW_p_CaseStatement_in_p_TypeswitchStatement16591: new org.antlr.runtime.BitSet([0x04000000, 0x00000008]),
    FOLLOW_DEFAULT_in_p_TypeswitchStatement16596: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_TypeswitchStatement16601: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_TypeswitchStatement16603: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
    FOLLOW_RETURN_in_p_TypeswitchStatement16609: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_TypeswitchStatement16613: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_CASE_in_p_CaseStatement16642: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_CaseStatement16647: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_CaseStatement16649: new org.antlr.runtime.BitSet([0x00080000, 0x00000000]),
    FOLLOW_AS_in_p_CaseStatement16651: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x2FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_SequenceType_in_p_CaseStatement16655: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x04000000, 0x00000000]),
    FOLLOW_RETURN_in_p_CaseStatement16659: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_CaseStatement16663: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Annotation_in_p_VarDeclStatement16690: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00001000,0x00000000, 0x00000000,0x00000000, 0x00000080]),
    FOLLOW_VARIABLE_in_p_VarDeclStatement16695: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_VarDeclStatement16699: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_VarDeclStatement16701: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000420]),
    FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16703: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000420]),
    FOLLOW_BIND_in_p_VarDeclStatement16707: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_VarDeclStatement16709: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
    FOLLOW_COMMA_in_p_VarDeclStatement16725: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_VarDeclStatement16727: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_VarName_in_p_VarDeclStatement16729: new org.antlr.runtime.BitSet([0x00080000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000420]),
    FOLLOW_p_TypeDeclaration_in_p_VarDeclStatement16731: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000420]),
    FOLLOW_BIND_in_p_VarDeclStatement16735: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_VarDeclStatement16737: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x20000400]),
    FOLLOW_SEMICOLON_in_p_VarDeclStatement16754: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_WHILE_in_p_WhileStatement16782: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_p_WhileStatement16786: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Expr_in_p_WhileStatement16788: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x40000000, 0x00000000]),
    FOLLOW_RPAREN_in_p_WhileStatement16791: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_Hybrid_in_p_WhileStatement16793: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QuantifiedExpr_in_p_ExprSimple16820: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_OrExpr_in_p_ExprSimple16832: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_pg_UpdateExpr_in_p_ExprSimple16847: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LBRACKET_in_p_BlockExpr16873: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F081,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_StatementsAndExpr_in_p_BlockExpr16875: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000002]),
    FOLLOW_RBRACKET_in_p_BlockExpr16877: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COLLECTION_in_p_CollectionDecl16908: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_CollectionDecl16912: new org.antlr.runtime.BitSet([0x00080002, 0x00000000]),
    FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl16914: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AS_in_p_CollectionTypeDecl16943: new org.antlr.runtime.BitSet([0x80400000, 0x00000600,0x62004000, 0x10000010]),
    FOLLOW_p_KindTest_in_p_CollectionTypeDecl16947: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003800]),
    FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl16956: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_INDEX_in_p_IndexDecl16986: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_IndexName_in_p_IndexDecl16990: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_ON_in_p_IndexDecl16994: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00400000, 0x00000000]),
    FOLLOW_NODES_in_p_IndexDecl17000: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_IndexDomainExpr_in_p_IndexDecl17004: new org.antlr.runtime.BitSet([0x02000000, 0x00000000]),
    FOLLOW_BY_in_p_IndexDecl17008: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_IndexKeySpec_in_p_IndexDecl17012: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_COMMA_in_p_IndexDecl17015: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_IndexKeySpec_in_p_IndexDecl17017: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000400]),
    FOLLOW_p_QName_in_p_IndexName17044: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_PathExpr_in_p_IndexDomainExpr17069: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec17094: new org.antlr.runtime.BitSet([0x40080002, 0x00000000]),
    FOLLOW_p_IndexKeyTypeDecl_in_p_IndexKeySpec17096: new org.antlr.runtime.BitSet([0x40000002, 0x00000000]),
    FOLLOW_p_IndexKeyCollation_in_p_IndexKeySpec17099: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_PathExpr_in_p_IndexKeyExpr17125: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_AS_in_p_IndexKeyTypeDecl17152: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_AtomicType_in_p_IndexKeyTypeDecl17156: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00003800]),
    FOLLOW_p_OccurrenceIndicator_in_p_IndexKeyTypeDecl17158: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_p_AtomicType17184: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COLLATION_in_p_IndexKeyCollation17211: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x01C00300, 0x00000000]),
    FOLLOW_p_StringLiteral_in_p_IndexKeyCollation17215: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_INTEGRITY_in_p_ICDecl17242: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00010000, 0x00000000]),
    FOLLOW_CONSTRAINT_in_p_ICDecl17248: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_ICDecl17252: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00440000, 0x00000000]),
    FOLLOW_p_ICCollection_in_p_ICDecl17255: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ICForeignKey_in_p_ICDecl17259: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_ON_in_p_ICCollection17287: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00008000, 0x00000000]),
    FOLLOW_COLLECTION_in_p_ICCollection17293: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_ICCollection17297: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000,0x00000000, 0x00000000,0x80020000, 0x00000000]),
    FOLLOW_p_ICCollSequence_in_p_ICCollection17300: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection17304: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_ICCollNode_in_p_ICCollection17308: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_DOLLAR_in_p_ICCollSequence17334: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_ICCollSequence17336: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00004000, 0x00000000]),
    FOLLOW_CHECK_in_p_ICCollSequence17340: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_ICCollSequence17344: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_NODE_in_p_ICCollSequenceUnique17372: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_ICCollSequenceUnique17376: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_ICCollSequenceUnique17378: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00004000, 0x00000000]),
    FOLLOW_CHECK_in_p_ICCollSequenceUnique17382: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00800000, 0x00000000]),
    FOLLOW_UNIQUE_in_p_ICCollSequenceUnique17388: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00200000, 0x00000000]),
    FOLLOW_KEY_in_p_ICCollSequenceUnique17394: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique17398: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FOREACH_in_p_ICCollNode17425: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000]),
    FOLLOW_NODE_in_p_ICCollNode17431: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_ICCollNode17435: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_ICCollNode17437: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00004000, 0x00000000]),
    FOLLOW_CHECK_in_p_ICCollNode17441: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E0F001,0x01F81320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_ExprSingle_in_p_ICCollNode17445: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FOREIGN_in_p_ICForeignKey17473: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00200000, 0x00000000]),
    FOLLOW_KEY_in_p_ICForeignKey17479: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000080]),
    FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey17483: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000040]),
    FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey17485: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FROM_in_p_ICForeignKeySource17512: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00008000, 0x00000000]),
    FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource17516: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TO_in_p_ICForeignKeyTarget17543: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00008000, 0x00000000]),
    FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget17547: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_COLLECTION_in_p_ICForeignKeyValues17574: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_ICForeignKeyValues17578: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00004000, 0x00000000]),
    FOLLOW_NODE_in_p_ICForeignKeyValues17582: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_p_ICForeignKeyValues17586: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000000,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_p_ICForeignKeyValues17588: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00200000, 0x00000000]),
    FOLLOW_KEY_in_p_ICForeignKeyValues17592: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_PathExpr_in_p_ICForeignKeyValues17596: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_synpred1_XQueryParser3522: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x80000000, 0x00000000]),
    FOLLOW_DOLLAR_in_synpred1_XQueryParser3530: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_FOR_in_synpred1_XQueryParser3536: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000110, 0x00000000]),
    FOLLOW_set_in_synpred1_XQueryParser3538: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_IF_in_synpred2_XQueryParser3564: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_synpred2_XQueryParser3566: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SWITCH_in_synpred3_XQueryParser3594: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_synpred3_XQueryParser3596: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPESWITCH_in_synpred4_XQueryParser3620: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_synpred4_XQueryParser3622: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TRY_in_synpred5_XQueryParser3642: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_synpred5_XQueryParser3644: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_VALIDATE_in_synpred6_XQueryParser6081: new org.antlr.runtime.BitSet([0x00000002, 0x00000000,0x00000008, 0x00000004,0x00000200, 0x00000000]),
    FOLLOW_p_ValidationMode_in_synpred6_XQueryParser6085: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_TYPE_in_synpred6_XQueryParser6089: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_SLASH_in_synpred7_XQueryParser6429: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xAFFFFFFF, 0x01E09001,0x01F01320, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_RelativePathExpr_in_synpred7_XQueryParser6431: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_synpred8_XQueryParser6545: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_synpred9_XQueryParser6598: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_QName_in_synpred9_XQueryParser6606: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_synpred9_XQueryParser6609: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_synpred9_XQueryParser6627: new org.antlr.runtime.BitSet([0xFFFF0000, 0xFFFFFFFF,0xFFFFFFFF, 0xFFFFFFFF,0xF7FFFFFF, 0xFFFFFFFF,0x0FFFFFFF, 0x00000001,0x00001000, 0x00000000,0x00100000, 0x00000000]),
    FOLLOW_p_NCName_in_synpred9_XQueryParser6635: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_synpred9_XQueryParser6638: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_set_in_synpred9_XQueryParser6656: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000001]),
    FOLLOW_LBRACKET_in_synpred9_XQueryParser6668: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_KindTest_in_synpred10_XQueryParser6698: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_QName_in_synpred11_XQueryParser6717: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x20000000, 0x00000000]),
    FOLLOW_LPAREN_in_synpred11_XQueryParser6719: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_PrimaryExpr_in_synpred12_XQueryParser6737: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_Wildcard_in_synpred13_XQueryParser7176: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NCName_in_synpred14_XQueryParser7195: new org.antlr.runtime.BitSet([0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x00000000,0x00000000, 0x02000000]),
    FOLLOW_COLON_in_synpred14_XQueryParser7197: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_NCName_in_synpred15_XQueryParser7215: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_LPAREN_in_synpred16_XQueryParser7471: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_OccurrenceIndicator_in_synpred17_XQueryParser9439: new org.antlr.runtime.BitSet([0x00000002, 0x00000000]),
    FOLLOW_p_OccurrenceIndicator_in_synpred18_XQueryParser16951: new org.antlr.runtime.BitSet([0x00000002, 0x00000000])
});

})();
exports.XQueryParser = XQueryParser;
});