define(function(l, j) {
  var a = l("cockpit/test/assert").test, i = l("pilot/types").Status, r = l("pilot/settings").settings;
  l("cockpit/cli");
  l("cockpit/cli");
  var n = l("cockpit/cli").CliRequisition;
  j.testAll = function() {
    j.testTokenize();
    j.testSplit();
    j.testCli();
    return"testAll Completed"
  };
  j.testTokenize = function() {
    var b, e = new n;
    b = e._tokenize("");
    a.verifyEqual(1, b.length);
    a.verifyEqual("", b[0].text);
    a.verifyEqual(0, b[0].start);
    a.verifyEqual(0, b[0].end);
    a.verifyEqual("", b[0].priorSpace);
    b = e._tokenize("s");
    a.verifyEqual(1, b.length);
    a.verifyEqual("s", b[0].text);
    a.verifyEqual(0, b[0].start);
    a.verifyEqual(1, b[0].end);
    a.verifyEqual("", b[0].priorSpace);
    b = e._tokenize(" ");
    a.verifyEqual(1, b.length);
    a.verifyEqual("", b[0].text);
    a.verifyEqual(1, b[0].start);
    a.verifyEqual(1, b[0].end);
    a.verifyEqual(" ", b[0].priorSpace);
    b = e._tokenize("s s");
    a.verifyEqual(2, b.length);
    a.verifyEqual("s", b[0].text);
    a.verifyEqual(0, b[0].start);
    a.verifyEqual(1, b[0].end);
    a.verifyEqual("", b[0].priorSpace);
    a.verifyEqual("s", b[1].text);
    a.verifyEqual(2, b[1].start);
    a.verifyEqual(3, b[1].end);
    a.verifyEqual(" ", b[1].priorSpace);
    b = e._tokenize(" 1234  '12 34'");
    a.verifyEqual(2, b.length);
    a.verifyEqual("1234", b[0].text);
    a.verifyEqual(1, b[0].start);
    a.verifyEqual(5, b[0].end);
    a.verifyEqual(" ", b[0].priorSpace);
    a.verifyEqual("12 34", b[1].text);
    a.verifyEqual(8, b[1].start);
    a.verifyEqual(13, b[1].end);
    a.verifyEqual("  ", b[1].priorSpace);
    b = e._tokenize('12\'34 "12 34" \\');
    a.verifyEqual(3, b.length);
    a.verifyEqual("12'34", b[0].text);
    a.verifyEqual(0, b[0].start);
    a.verifyEqual(5, b[0].end);
    a.verifyEqual("", b[0].priorSpace);
    a.verifyEqual("12 34", b[1].text);
    a.verifyEqual(7, b[1].start);
    a.verifyEqual(12, b[1].end);
    a.verifyEqual(" ", b[1].priorSpace);
    a.verifyEqual("\\", b[2].text);
    a.verifyEqual(14, b[2].start);
    a.verifyEqual(15, b[2].end);
    a.verifyEqual(" ", b[2].priorSpace);
    b = e._tokenize("a\\ b \\t\\n\\r \\'x\\\" 'd");
    a.verifyEqual(4, b.length);
    a.verifyEqual("a b", b[0].text);
    a.verifyEqual(0, b[0].start);
    a.verifyEqual(3, b[0].end);
    a.verifyEqual("", b[0].priorSpace);
    a.verifyEqual("\t\n\r", b[1].text);
    a.verifyEqual(4, b[1].start);
    a.verifyEqual(7, b[1].end);
    a.verifyEqual(" ", b[1].priorSpace);
    a.verifyEqual("'x\"", b[2].text);
    a.verifyEqual(8, b[2].start);
    a.verifyEqual(11, b[2].end);
    a.verifyEqual(" ", b[2].priorSpace);
    a.verifyEqual("d", b[3].text);
    a.verifyEqual(13, b[3].start);
    a.verifyEqual(14, b[3].end);
    a.verifyEqual(" ", b[3].priorSpace);
    return"testTokenize Completed"
  };
  j.testSplit = function() {
    var b, e = new n;
    b = e._tokenize("s");
    e._split(b);
    a.verifyEqual(1, b.length);
    a.verifyEqual("s", b[0].text);
    a.verifyNull(e.commandAssignment.value);
    b = e._tokenize("set");
    e._split(b);
    a.verifyEqual([], b);
    a.verifyEqual("set", e.commandAssignment.value.name);
    b = e._tokenize("set a b");
    e._split(b);
    a.verifyEqual("set", e.commandAssignment.value.name);
    a.verifyEqual(2, b.length);
    a.verifyEqual("a", b[0].text);
    a.verifyEqual("b", b[1].text);
    return"testSplit Completed"
  };
  j.testCli = function() {
    function b(k) {
      d.update(k);
      s && console.log('####### TEST: typed="' + k.typed + '" cur=' + k.cursor.start + " cli=", d);
      f = d.getWorstHint();
      c = d.getAssignmentAt(k.cursor.start).getHint();
      h = d.getInputStatusMarkup().map(function(o) {
        return o.valueOf()
      }).join("");
      if(d.commandAssignment.value && d.commandAssignment.value.name === "set") {
        g = d.getAssignment("setting");
        m = d.getAssignment("value")
      }else {
        m = g = undefined
      }
    }
    function e(k, o) {
      return o.every(function(q) {
        return k === q || k === q.name
      }, this)
    }
    var g, m, d = new n, s = true, f, c, h, p = r.getSetting("historyLength");
    b({typed:"", cursor:{start:0, end:0}});
    a.verifyEqual("", h);
    a.verifyEqual(1, d._hints.length);
    a.verifyEqual(i.INCOMPLETE, c.status);
    a.verifyEqual(0, c.start);
    a.verifyEqual(0, c.end);
    a.verifyEqual(c, f);
    a.verifyNull(d.commandAssignment.value);
    b({typed:" ", cursor:{start:1, end:1}});
    a.verifyEqual("0", h);
    a.verifyEqual(1, d._hints.length);
    a.verifyEqual(i.INCOMPLETE, c.status);
    a.verifyEqual(1, c.start);
    a.verifyEqual(1, c.end);
    a.verifyEqual(c, f);
    a.verifyNull(d.commandAssignment.value);
    b({typed:" ", cursor:{start:0, end:0}});
    a.verifyEqual("0", h);
    a.verifyEqual(1, d._hints.length);
    a.verifyEqual(i.INCOMPLETE, c.status);
    a.verifyEqual(1, c.start);
    a.verifyEqual(1, c.end);
    a.verifyEqual(c, f);
    a.verifyNull(d.commandAssignment.value);
    b({typed:"s", cursor:{start:1, end:1}});
    a.verifyEqual("1", h);
    a.verifyEqual(1, d._hints.length);
    a.verifyEqual(i.INCOMPLETE, c.status);
    a.verifyEqual(0, c.start);
    a.verifyEqual(1, c.end);
    a.verifyEqual(c, f);
    a.verifyTrue(c.predictions.length > 0);
    a.verifyTrue(c.predictions.length < 20);
    e("set", c.predictions);
    a.verifyNull(d.commandAssignment.value);
    b({typed:"set", cursor:{start:3, end:3}});
    a.verifyEqual("000", h);
    a.verifyEqual(1, d._hints.length);
    a.verifyEqual(i.VALID, c.status);
    a.verifyEqual(0, c.start);
    a.verifyEqual(3, c.end);
    a.verifyEqual("set", d.commandAssignment.value.name);
    b({typed:"set ", cursor:{start:4, end:4}});
    a.verifyEqual("0000", h);
    a.verifyEqual(2, d._hints.length);
    a.verifyEqual(i.VALID, c.status);
    a.verifyEqual(4, c.start);
    a.verifyEqual(4, c.end);
    a.verifyEqual(c, f);
    a.verifyEqual("set", d.commandAssignment.value.name);
    b({typed:"set ", cursor:{start:2, end:2}});
    a.verifyEqual("0000", h);
    a.verifyEqual(2, d._hints.length);
    a.verifyEqual(i.VALID, c.status);
    a.verifyEqual(0, c.start);
    a.verifyEqual(3, c.end);
    a.verifyEqual("set", d.commandAssignment.value.name);
    b({typed:"set h", cursor:{start:5, end:5}});
    a.verifyEqual("00001", h);
    a.verifyEqual(2, d._hints.length);
    a.verifyEqual(i.INCOMPLETE, c.status);
    a.verifyEqual(4, c.start);
    a.verifyEqual(5, c.end);
    a.verifyTrue(c.predictions.length > 0);
    e("historyLength", c.predictions);
    a.verifyEqual("set", d.commandAssignment.value.name);
    a.verifyEqual("h", g.arg.text);
    a.verifyEqual(undefined, g.value);
    b({typed:"set historyLengt", cursor:{start:16, end:16}});
    a.verifyEqual("0000111111111111", h);
    a.verifyEqual(2, d._hints.length);
    a.verifyEqual(i.INCOMPLETE, c.status);
    a.verifyEqual(4, c.start);
    a.verifyEqual(16, c.end);
    a.verifyEqual(1, c.predictions.length);
    e("historyLength", c.predictions);
    a.verifyEqual("set", d.commandAssignment.value.name);
    a.verifyEqual("historyLengt", g.arg.text);
    a.verifyEqual(undefined, g.value);
    b({typed:"set historyLengt", cursor:{start:1, end:1}});
    a.verifyEqual("0000222222222222", h);
    a.verifyEqual(2, d._hints.length);
    a.verifyEqual(i.VALID, c.status);
    a.verifyEqual(0, c.start);
    a.verifyEqual(3, c.end);
    a.verifyEqual(i.INVALID, f.status);
    a.verifyEqual(4, f.start);
    a.verifyEqual(16, f.end);
    a.verifyEqual(1, f.predictions.length);
    e("historyLength", f.predictions);
    a.verifyEqual("set", d.commandAssignment.value.name);
    a.verifyEqual("historyLengt", g.arg.text);
    a.verifyEqual(undefined, g.value);
    b({typed:"set historyLengt ", cursor:{start:17, end:17}});
    a.verifyEqual("00002222222222222", h);
    a.verifyEqual(3, d._hints.length);
    a.verifyEqual(i.VALID, c.status);
    a.verifyEqual(17, c.start);
    a.verifyEqual(17, c.end);
    a.verifyEqual(i.INVALID, f.status);
    a.verifyEqual(4, f.start);
    a.verifyEqual(16, f.end);
    a.verifyEqual(1, f.predictions.length);
    e("historyLength", f.predictions);
    a.verifyEqual("set", d.commandAssignment.value.name);
    a.verifyEqual("historyLengt", g.arg.text);
    a.verifyEqual(undefined, g.value);
    b({typed:"set historyLength", cursor:{start:17, end:17}});
    a.verifyEqual("00000000000000000", h);
    a.verifyEqual(2, d._hints.length);
    a.verifyEqual("set", d.commandAssignment.value.name);
    a.verifyEqual("historyLength", g.arg.text);
    a.verifyEqual(p, g.value);
    b({typed:"set historyLength ", cursor:{start:18, end:18}});
    a.verifyEqual("000000000000000000", h);
    a.verifyEqual(3, d._hints.length);
    a.verifyEqual("set", d.commandAssignment.value.name);
    a.verifyEqual("historyLength", g.arg.text);
    a.verifyEqual(p, g.value);
    b({typed:"set historyLength 6", cursor:{start:19, end:19}});
    a.verifyEqual("0000000000000000000", h);
    a.verifyEqual(3, d._hints.length);
    a.verifyEqual("set", d.commandAssignment.value.name);
    a.verifyEqual("historyLength", g.arg.text);
    a.verifyEqual(p, g.value);
    a.verifyEqual("6", m.arg.text);
    a.verifyEqual(6, m.value);
    a.verifyEqual("number", typeof m.value);
    return"testCli Completed"
  }
});